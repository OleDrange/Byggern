
Byggern.elf:     file format elf32-avr

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .data         000002b8  00800100  00001f06  00001f9a  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  1 .text         00001f06  00000000  00000000  00000094  2**1
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .bss          00000039  008003b8  008003b8  00002252  2**0
                  ALLOC
  3 .comment      0000005c  00000000  00000000  00002252  2**0
                  CONTENTS, READONLY
  4 .debug_aranges 00000368  00000000  00000000  000022ae  2**0
                  CONTENTS, READONLY, DEBUGGING
  5 .debug_info   00003b5a  00000000  00000000  00002616  2**0
                  CONTENTS, READONLY, DEBUGGING
  6 .debug_abbrev 00001634  00000000  00000000  00006170  2**0
                  CONTENTS, READONLY, DEBUGGING
  7 .debug_line   0000148f  00000000  00000000  000077a4  2**0
                  CONTENTS, READONLY, DEBUGGING
  8 .debug_frame  0000095c  00000000  00000000  00008c34  2**2
                  CONTENTS, READONLY, DEBUGGING
  9 .debug_str    00000bc2  00000000  00000000  00009590  2**0
                  CONTENTS, READONLY, DEBUGGING
 10 .debug_loc    00002632  00000000  00000000  0000a152  2**0
                  CONTENTS, READONLY, DEBUGGING
 11 .debug_ranges 00000358  00000000  00000000  0000c784  2**0
                  CONTENTS, READONLY, DEBUGGING

Disassembly of section .text:

00000000 <__vectors>:
       0:	0c 94 b4 01 	jmp	0x368	; 0x368 <__ctors_end>
       4:	0c 94 a7 02 	jmp	0x54e	; 0x54e <__vector_1>
       8:	0c 94 d3 01 	jmp	0x3a6	; 0x3a6 <__vector_2>
       c:	0c 94 d1 01 	jmp	0x3a2	; 0x3a2 <__bad_interrupt>
      10:	0c 94 d1 01 	jmp	0x3a2	; 0x3a2 <__bad_interrupt>
      14:	0c 94 d1 01 	jmp	0x3a2	; 0x3a2 <__bad_interrupt>
      18:	0c 94 d1 01 	jmp	0x3a2	; 0x3a2 <__bad_interrupt>
      1c:	0c 94 d1 01 	jmp	0x3a2	; 0x3a2 <__bad_interrupt>
      20:	0c 94 d1 01 	jmp	0x3a2	; 0x3a2 <__bad_interrupt>
      24:	0c 94 d1 01 	jmp	0x3a2	; 0x3a2 <__bad_interrupt>
      28:	0c 94 d1 01 	jmp	0x3a2	; 0x3a2 <__bad_interrupt>
      2c:	0c 94 d1 01 	jmp	0x3a2	; 0x3a2 <__bad_interrupt>
      30:	0c 94 d1 01 	jmp	0x3a2	; 0x3a2 <__bad_interrupt>
      34:	0c 94 d1 01 	jmp	0x3a2	; 0x3a2 <__bad_interrupt>
      38:	0c 94 d1 01 	jmp	0x3a2	; 0x3a2 <__bad_interrupt>
      3c:	0c 94 d1 01 	jmp	0x3a2	; 0x3a2 <__bad_interrupt>
      40:	0c 94 d1 01 	jmp	0x3a2	; 0x3a2 <__bad_interrupt>
      44:	0c 94 d1 01 	jmp	0x3a2	; 0x3a2 <__bad_interrupt>
      48:	0c 94 d1 01 	jmp	0x3a2	; 0x3a2 <__bad_interrupt>
      4c:	0c 94 d1 01 	jmp	0x3a2	; 0x3a2 <__bad_interrupt>
      50:	0c 94 d1 01 	jmp	0x3a2	; 0x3a2 <__bad_interrupt>
      54:	0c 94 d1 01 	jmp	0x3a2	; 0x3a2 <__bad_interrupt>
      58:	0c 94 d1 01 	jmp	0x3a2	; 0x3a2 <__bad_interrupt>
      5c:	0c 94 d1 01 	jmp	0x3a2	; 0x3a2 <__bad_interrupt>
      60:	0c 94 d1 01 	jmp	0x3a2	; 0x3a2 <__bad_interrupt>
      64:	0c 94 d1 01 	jmp	0x3a2	; 0x3a2 <__bad_interrupt>
      68:	0c 94 d1 01 	jmp	0x3a2	; 0x3a2 <__bad_interrupt>
      6c:	0c 94 d1 01 	jmp	0x3a2	; 0x3a2 <__bad_interrupt>

00000070 <__trampolines_end>:
	...
      78:	00 06       	cpc	r0, r16
      7a:	5f 5f       	subi	r21, 0xFF	; 255
      7c:	06 00       	.word	0x0006	; ????
      7e:	00 00       	nop
      80:	00 07       	cpc	r16, r16
      82:	07 00       	.word	0x0007	; ????
      84:	07 07       	cpc	r16, r23
      86:	00 00       	nop
      88:	14 7f       	andi	r17, 0xF4	; 244
      8a:	7f 14       	cp	r7, r15
      8c:	7f 7f       	andi	r23, 0xFF	; 255
      8e:	14 00       	.word	0x0014	; ????
      90:	24 2e       	mov	r2, r20
      92:	6b 6b       	ori	r22, 0xBB	; 187
      94:	3a 12       	cpse	r3, r26
      96:	00 00       	nop
      98:	46 66       	ori	r20, 0x66	; 102
      9a:	30 18       	sub	r3, r0
      9c:	0c 66       	ori	r16, 0x6C	; 108
      9e:	62 00       	.word	0x0062	; ????
      a0:	30 7a       	andi	r19, 0xA0	; 160
      a2:	4f 5d       	subi	r20, 0xDF	; 223
      a4:	37 7a       	andi	r19, 0xA7	; 167
      a6:	48 00       	.word	0x0048	; ????
      a8:	04 07       	cpc	r16, r20
      aa:	03 00       	.word	0x0003	; ????
      ac:	00 00       	nop
      ae:	00 00       	nop
      b0:	00 1c       	adc	r0, r0
      b2:	3e 63       	ori	r19, 0x3E	; 62
      b4:	41 00       	.word	0x0041	; ????
      b6:	00 00       	nop
      b8:	00 41       	sbci	r16, 0x10	; 16
      ba:	63 3e       	cpi	r22, 0xE3	; 227
      bc:	1c 00       	.word	0x001c	; ????
      be:	00 00       	nop
      c0:	08 2a       	or	r0, r24
      c2:	3e 1c       	adc	r3, r14
      c4:	1c 3e       	cpi	r17, 0xEC	; 236
      c6:	2a 08       	sbc	r2, r10
      c8:	08 08       	sbc	r0, r8
      ca:	3e 3e       	cpi	r19, 0xEE	; 238
      cc:	08 08       	sbc	r0, r8
      ce:	00 00       	nop
      d0:	00 a0       	ldd	r0, Z+32	; 0x20
      d2:	e0 60       	ori	r30, 0x00	; 0
      d4:	00 00       	nop
      d6:	00 00       	nop
      d8:	08 08       	sbc	r0, r8
      da:	08 08       	sbc	r0, r8
      dc:	08 08       	sbc	r0, r8
      de:	00 00       	nop
      e0:	00 00       	nop
      e2:	60 60       	ori	r22, 0x00	; 0
      e4:	00 00       	nop
      e6:	00 00       	nop
      e8:	60 30       	cpi	r22, 0x00	; 0
      ea:	18 0c       	add	r1, r8
      ec:	06 03       	mulsu	r16, r22
      ee:	01 00       	.word	0x0001	; ????
      f0:	3e 7f       	andi	r19, 0xFE	; 254
      f2:	59 4d       	sbci	r21, 0xD9	; 217
      f4:	7f 3e       	cpi	r23, 0xEF	; 239
      f6:	00 00       	nop
      f8:	42 42       	sbci	r20, 0x22	; 34
      fa:	7f 7f       	andi	r23, 0xFF	; 255
      fc:	40 40       	sbci	r20, 0x00	; 0
      fe:	00 00       	nop
     100:	62 73       	andi	r22, 0x32	; 50
     102:	59 49       	sbci	r21, 0x99	; 153
     104:	6f 66       	ori	r22, 0x6F	; 111
     106:	00 00       	nop
     108:	22 63       	ori	r18, 0x32	; 50
     10a:	49 49       	sbci	r20, 0x99	; 153
     10c:	7f 36       	cpi	r23, 0x6F	; 111
     10e:	00 00       	nop
     110:	18 1c       	adc	r1, r8
     112:	16 13       	cpse	r17, r22
     114:	7f 7f       	andi	r23, 0xFF	; 255
     116:	10 00       	.word	0x0010	; ????
     118:	27 67       	ori	r18, 0x77	; 119
     11a:	45 45       	sbci	r20, 0x55	; 85
     11c:	7d 39       	cpi	r23, 0x9D	; 157
     11e:	00 00       	nop
     120:	3c 7e       	andi	r19, 0xEC	; 236
     122:	4b 49       	sbci	r20, 0x9B	; 155
     124:	79 30       	cpi	r23, 0x09	; 9
     126:	00 00       	nop
     128:	03 63       	ori	r16, 0x33	; 51
     12a:	71 19       	sub	r23, r1
     12c:	0f 07       	cpc	r16, r31
     12e:	00 00       	nop
     130:	36 7f       	andi	r19, 0xF6	; 246
     132:	49 49       	sbci	r20, 0x99	; 153
     134:	7f 36       	cpi	r23, 0x6F	; 111
     136:	00 00       	nop
     138:	06 4f       	sbci	r16, 0xF6	; 246
     13a:	49 69       	ori	r20, 0x99	; 153
     13c:	3f 1e       	adc	r3, r31
     13e:	00 00       	nop
     140:	00 00       	nop
     142:	6c 6c       	ori	r22, 0xCC	; 204
     144:	00 00       	nop
     146:	00 00       	nop
     148:	00 a0       	ldd	r0, Z+32	; 0x20
     14a:	ec 6c       	ori	r30, 0xCC	; 204
     14c:	00 00       	nop
     14e:	00 00       	nop
     150:	08 1c       	adc	r0, r8
     152:	36 63       	ori	r19, 0x36	; 54
     154:	41 00       	.word	0x0041	; ????
     156:	00 00       	nop
     158:	14 14       	cp	r1, r4
     15a:	14 14       	cp	r1, r4
     15c:	14 14       	cp	r1, r4
     15e:	00 00       	nop
     160:	00 41       	sbci	r16, 0x10	; 16
     162:	63 36       	cpi	r22, 0x63	; 99
     164:	1c 08       	sbc	r1, r12
     166:	00 00       	nop
     168:	02 03       	mulsu	r16, r18
     16a:	51 59       	subi	r21, 0x91	; 145
     16c:	0f 06       	cpc	r0, r31
     16e:	00 00       	nop
     170:	3e 7f       	andi	r19, 0xFE	; 254
     172:	41 5d       	subi	r20, 0xD1	; 209
     174:	5d 1f       	adc	r21, r29
     176:	1e 00       	.word	0x001e	; ????
     178:	7c 7e       	andi	r23, 0xEC	; 236
     17a:	13 13       	cpse	r17, r19
     17c:	7e 7c       	andi	r23, 0xCE	; 206
     17e:	00 00       	nop
     180:	41 7f       	andi	r20, 0xF1	; 241
     182:	7f 49       	sbci	r23, 0x9F	; 159
     184:	49 7f       	andi	r20, 0xF9	; 249
     186:	36 00       	.word	0x0036	; ????
     188:	1c 3e       	cpi	r17, 0xEC	; 236
     18a:	63 41       	sbci	r22, 0x13	; 19
     18c:	41 63       	ori	r20, 0x31	; 49
     18e:	22 00       	.word	0x0022	; ????
     190:	41 7f       	andi	r20, 0xF1	; 241
     192:	7f 41       	sbci	r23, 0x1F	; 31
     194:	63 7f       	andi	r22, 0xF3	; 243
     196:	1c 00       	.word	0x001c	; ????
     198:	41 7f       	andi	r20, 0xF1	; 241
     19a:	7f 49       	sbci	r23, 0x9F	; 159
     19c:	5d 41       	sbci	r21, 0x1D	; 29
     19e:	63 00       	.word	0x0063	; ????
     1a0:	41 7f       	andi	r20, 0xF1	; 241
     1a2:	7f 49       	sbci	r23, 0x9F	; 159
     1a4:	1d 01       	movw	r2, r26
     1a6:	03 00       	.word	0x0003	; ????
     1a8:	1c 3e       	cpi	r17, 0xEC	; 236
     1aa:	63 41       	sbci	r22, 0x13	; 19
     1ac:	51 73       	andi	r21, 0x31	; 49
     1ae:	72 00       	.word	0x0072	; ????
     1b0:	7f 7f       	andi	r23, 0xFF	; 255
     1b2:	08 08       	sbc	r0, r8
     1b4:	7f 7f       	andi	r23, 0xFF	; 255
     1b6:	00 00       	nop
     1b8:	00 41       	sbci	r16, 0x10	; 16
     1ba:	7f 7f       	andi	r23, 0xFF	; 255
     1bc:	41 00       	.word	0x0041	; ????
     1be:	00 00       	nop
     1c0:	30 70       	andi	r19, 0x00	; 0
     1c2:	40 41       	sbci	r20, 0x10	; 16
     1c4:	7f 3f       	cpi	r23, 0xFF	; 255
     1c6:	01 00       	.word	0x0001	; ????
     1c8:	41 7f       	andi	r20, 0xF1	; 241
     1ca:	7f 08       	sbc	r7, r15
     1cc:	1c 77       	andi	r17, 0x7C	; 124
     1ce:	63 00       	.word	0x0063	; ????
     1d0:	41 7f       	andi	r20, 0xF1	; 241
     1d2:	7f 41       	sbci	r23, 0x1F	; 31
     1d4:	40 60       	ori	r20, 0x00	; 0
     1d6:	70 00       	.word	0x0070	; ????
     1d8:	7f 7f       	andi	r23, 0xFF	; 255
     1da:	06 0c       	add	r0, r6
     1dc:	06 7f       	andi	r16, 0xF6	; 246
     1de:	7f 00       	.word	0x007f	; ????
     1e0:	7f 7f       	andi	r23, 0xFF	; 255
     1e2:	06 0c       	add	r0, r6
     1e4:	18 7f       	andi	r17, 0xF8	; 248
     1e6:	7f 00       	.word	0x007f	; ????
     1e8:	1c 3e       	cpi	r17, 0xEC	; 236
     1ea:	63 41       	sbci	r22, 0x13	; 19
     1ec:	63 3e       	cpi	r22, 0xE3	; 227
     1ee:	1c 00       	.word	0x001c	; ????
     1f0:	41 7f       	andi	r20, 0xF1	; 241
     1f2:	7f 49       	sbci	r23, 0x9F	; 159
     1f4:	09 0f       	add	r16, r25
     1f6:	06 00       	.word	0x0006	; ????
     1f8:	1e 3f       	cpi	r17, 0xFE	; 254
     1fa:	21 71       	andi	r18, 0x11	; 17
     1fc:	7f 5e       	subi	r23, 0xEF	; 239
     1fe:	00 00       	nop
     200:	41 7f       	andi	r20, 0xF1	; 241
     202:	7f 19       	sub	r23, r15
     204:	39 6f       	ori	r19, 0xF9	; 249
     206:	46 00       	.word	0x0046	; ????
     208:	26 67       	ori	r18, 0x76	; 118
     20a:	4d 59       	subi	r20, 0x9D	; 157
     20c:	7b 32       	cpi	r23, 0x2B	; 43
     20e:	00 00       	nop
     210:	03 41       	sbci	r16, 0x13	; 19
     212:	7f 7f       	andi	r23, 0xFF	; 255
     214:	41 03       	mulsu	r20, r17
     216:	00 00       	nop
     218:	7f 7f       	andi	r23, 0xFF	; 255
     21a:	40 40       	sbci	r20, 0x00	; 0
     21c:	7f 7f       	andi	r23, 0xFF	; 255
     21e:	00 00       	nop
     220:	1f 3f       	cpi	r17, 0xFF	; 255
     222:	60 60       	ori	r22, 0x00	; 0
     224:	3f 1f       	adc	r19, r31
     226:	00 00       	nop
     228:	7f 7f       	andi	r23, 0xFF	; 255
     22a:	30 18       	sub	r3, r0
     22c:	30 7f       	andi	r19, 0xF0	; 240
     22e:	7f 00       	.word	0x007f	; ????
     230:	63 77       	andi	r22, 0x73	; 115
     232:	1c 08       	sbc	r1, r12
     234:	1c 77       	andi	r17, 0x7C	; 124
     236:	63 00       	.word	0x0063	; ????
     238:	07 4f       	sbci	r16, 0xF7	; 247
     23a:	78 78       	andi	r23, 0x88	; 136
     23c:	4f 07       	cpc	r20, r31
     23e:	00 00       	nop
     240:	67 73       	andi	r22, 0x37	; 55
     242:	59 4d       	sbci	r21, 0xD9	; 217
     244:	47 63       	ori	r20, 0x37	; 55
     246:	71 00       	.word	0x0071	; ????
     248:	00 7f       	andi	r16, 0xF0	; 240
     24a:	7f 41       	sbci	r23, 0x1F	; 31
     24c:	41 00       	.word	0x0041	; ????
     24e:	00 00       	nop
     250:	01 03       	mulsu	r16, r17
     252:	06 0c       	add	r0, r6
     254:	18 30       	cpi	r17, 0x08	; 8
     256:	60 00       	.word	0x0060	; ????
     258:	00 41       	sbci	r16, 0x10	; 16
     25a:	41 7f       	andi	r20, 0xF1	; 241
     25c:	7f 00       	.word	0x007f	; ????
     25e:	00 00       	nop
     260:	08 0c       	add	r0, r8
     262:	06 03       	mulsu	r16, r22
     264:	06 0c       	add	r0, r6
     266:	08 00       	.word	0x0008	; ????
     268:	80 80       	ld	r8, Z
     26a:	80 80       	ld	r8, Z
     26c:	80 80       	ld	r8, Z
     26e:	80 80       	ld	r8, Z
     270:	00 00       	nop
     272:	03 07       	cpc	r16, r19
     274:	04 00       	.word	0x0004	; ????
     276:	00 00       	nop
     278:	20 74       	andi	r18, 0x40	; 64
     27a:	54 54       	subi	r21, 0x44	; 68
     27c:	3c 78       	andi	r19, 0x8C	; 140
     27e:	40 00       	.word	0x0040	; ????
     280:	41 3f       	cpi	r20, 0xF1	; 241
     282:	7f 44       	sbci	r23, 0x4F	; 79
     284:	44 7c       	andi	r20, 0xC4	; 196
     286:	38 00       	.word	0x0038	; ????
     288:	38 7c       	andi	r19, 0xC8	; 200
     28a:	44 44       	sbci	r20, 0x44	; 68
     28c:	6c 28       	or	r6, r12
     28e:	00 00       	nop
     290:	30 78       	andi	r19, 0x80	; 128
     292:	48 49       	sbci	r20, 0x98	; 152
     294:	3f 7f       	andi	r19, 0xFF	; 255
     296:	40 00       	.word	0x0040	; ????
     298:	38 7c       	andi	r19, 0xC8	; 200
     29a:	54 54       	subi	r21, 0x44	; 68
     29c:	5c 18       	sub	r5, r12
     29e:	00 00       	nop
     2a0:	48 7e       	andi	r20, 0xE8	; 232
     2a2:	7f 49       	sbci	r23, 0x9F	; 159
     2a4:	03 02       	muls	r16, r19
     2a6:	00 00       	nop
     2a8:	98 bc       	out	0x28, r9	; 40
     2aa:	a4 a4       	ldd	r10, Z+44	; 0x2c
     2ac:	f8 7c       	andi	r31, 0xC8	; 200
     2ae:	04 00       	.word	0x0004	; ????
     2b0:	41 7f       	andi	r20, 0xF1	; 241
     2b2:	7f 08       	sbc	r7, r15
     2b4:	04 7c       	andi	r16, 0xC4	; 196
     2b6:	78 00       	.word	0x0078	; ????
     2b8:	00 44       	sbci	r16, 0x40	; 64
     2ba:	7d 7d       	andi	r23, 0xDD	; 221
     2bc:	40 00       	.word	0x0040	; ????
     2be:	00 00       	nop
     2c0:	40 c4       	rjmp	.+2176   	; 0xb42 <joystickPos+0xe>
     2c2:	84 fd       	sbrc	r24, 4
     2c4:	7d 00       	.word	0x007d	; ????
     2c6:	00 00       	nop
     2c8:	41 7f       	andi	r20, 0xF1	; 241
     2ca:	7f 10       	cpse	r7, r15
     2cc:	38 6c       	ori	r19, 0xC8	; 200
     2ce:	44 00       	.word	0x0044	; ????
     2d0:	00 41       	sbci	r16, 0x10	; 16
     2d2:	7f 7f       	andi	r23, 0xFF	; 255
     2d4:	40 00       	.word	0x0040	; ????
     2d6:	00 00       	nop
     2d8:	7c 7c       	andi	r23, 0xCC	; 204
     2da:	0c 18       	sub	r0, r12
     2dc:	0c 7c       	andi	r16, 0xCC	; 204
     2de:	78 00       	.word	0x0078	; ????
     2e0:	7c 7c       	andi	r23, 0xCC	; 204
     2e2:	04 04       	cpc	r0, r4
     2e4:	7c 78       	andi	r23, 0x8C	; 140
     2e6:	00 00       	nop
     2e8:	38 7c       	andi	r19, 0xC8	; 200
     2ea:	44 44       	sbci	r20, 0x44	; 68
     2ec:	7c 38       	cpi	r23, 0x8C	; 140
     2ee:	00 00       	nop
     2f0:	84 fc       	sbrc	r8, 4
     2f2:	f8 a4       	ldd	r15, Y+40	; 0x28
     2f4:	24 3c       	cpi	r18, 0xC4	; 196
     2f6:	18 00       	.word	0x0018	; ????
     2f8:	18 3c       	cpi	r17, 0xC8	; 200
     2fa:	24 a4       	ldd	r2, Z+44	; 0x2c
     2fc:	f8 fc       	.word	0xfcf8	; ????
     2fe:	84 00       	.word	0x0084	; ????
     300:	44 7c       	andi	r20, 0xC4	; 196
     302:	78 44       	sbci	r23, 0x48	; 72
     304:	1c 18       	sub	r1, r12
     306:	00 00       	nop
     308:	48 5c       	subi	r20, 0xC8	; 200
     30a:	54 54       	subi	r21, 0x44	; 68
     30c:	74 24       	eor	r7, r4
     30e:	00 00       	nop
     310:	00 04       	cpc	r0, r0
     312:	3e 7f       	andi	r19, 0xFE	; 254
     314:	44 24       	eor	r4, r4
     316:	00 00       	nop
     318:	3c 7c       	andi	r19, 0xCC	; 204
     31a:	40 40       	sbci	r20, 0x00	; 0
     31c:	3c 7c       	andi	r19, 0xCC	; 204
     31e:	40 00       	.word	0x0040	; ????
     320:	1c 3c       	cpi	r17, 0xCC	; 204
     322:	60 60       	ori	r22, 0x00	; 0
     324:	3c 1c       	adc	r3, r12
     326:	00 00       	nop
     328:	3c 7c       	andi	r19, 0xCC	; 204
     32a:	60 30       	cpi	r22, 0x00	; 0
     32c:	60 7c       	andi	r22, 0xC0	; 192
     32e:	3c 00       	.word	0x003c	; ????
     330:	44 6c       	ori	r20, 0xC4	; 196
     332:	38 10       	cpse	r3, r8
     334:	38 6c       	ori	r19, 0xC8	; 200
     336:	44 00       	.word	0x0044	; ????
     338:	9c bc       	out	0x2c, r9	; 44
     33a:	a0 a0       	ldd	r10, Z+32	; 0x20
     33c:	fc 7c       	andi	r31, 0xCC	; 204
     33e:	00 00       	nop
     340:	4c 64       	ori	r20, 0x4C	; 76
     342:	74 5c       	subi	r23, 0xC4	; 196
     344:	4c 64       	ori	r20, 0x4C	; 76
     346:	00 00       	nop
     348:	08 08       	sbc	r0, r8
     34a:	3e 77       	andi	r19, 0x7E	; 126
     34c:	41 41       	sbci	r20, 0x11	; 17
     34e:	00 00       	nop
     350:	00 00       	nop
     352:	00 77       	andi	r16, 0x70	; 112
     354:	77 00       	.word	0x0077	; ????
     356:	00 00       	nop
     358:	41 41       	sbci	r20, 0x11	; 17
     35a:	77 3e       	cpi	r23, 0xE7	; 231
     35c:	08 08       	sbc	r0, r8
     35e:	00 00       	nop
     360:	02 03       	mulsu	r16, r18
     362:	01 03       	mulsu	r16, r17
     364:	02 03       	mulsu	r16, r18
     366:	01 00       	.word	0x0001	; ????

00000368 <__ctors_end>:
     368:	11 24       	eor	r1, r1
     36a:	1f be       	out	0x3f, r1	; 63
     36c:	cf ef       	ldi	r28, 0xFF	; 255
     36e:	d4 e0       	ldi	r29, 0x04	; 4
     370:	de bf       	out	0x3e, r29	; 62
     372:	cd bf       	out	0x3d, r28	; 61

00000374 <__do_copy_data>:
     374:	13 e0       	ldi	r17, 0x03	; 3
     376:	a0 e0       	ldi	r26, 0x00	; 0
     378:	b1 e0       	ldi	r27, 0x01	; 1
     37a:	e6 e0       	ldi	r30, 0x06	; 6
     37c:	ff e1       	ldi	r31, 0x1F	; 31
     37e:	02 c0       	rjmp	.+4      	; 0x384 <__do_copy_data+0x10>
     380:	05 90       	lpm	r0, Z+
     382:	0d 92       	st	X+, r0
     384:	a8 3b       	cpi	r26, 0xB8	; 184
     386:	b1 07       	cpc	r27, r17
     388:	d9 f7       	brne	.-10     	; 0x380 <__do_copy_data+0xc>

0000038a <__do_clear_bss>:
     38a:	23 e0       	ldi	r18, 0x03	; 3
     38c:	a8 eb       	ldi	r26, 0xB8	; 184
     38e:	b3 e0       	ldi	r27, 0x03	; 3
     390:	01 c0       	rjmp	.+2      	; 0x394 <.do_clear_bss_start>

00000392 <.do_clear_bss_loop>:
     392:	1d 92       	st	X+, r1

00000394 <.do_clear_bss_start>:
     394:	a1 3f       	cpi	r26, 0xF1	; 241
     396:	b2 07       	cpc	r27, r18
     398:	e1 f7       	brne	.-8      	; 0x392 <.do_clear_bss_loop>
     39a:	0e 94 37 02 	call	0x46e	; 0x46e <main>
     39e:	0c 94 81 0f 	jmp	0x1f02	; 0x1f02 <_exit>

000003a2 <__bad_interrupt>:
     3a2:	0c 94 00 00 	jmp	0	; 0x0 <__vectors>

000003a6 <__vector_2>:
     3a6:	1f 92       	push	r1
     3a8:	0f 92       	push	r0
     3aa:	0f b6       	in	r0, 0x3f	; 63
     3ac:	0f 92       	push	r0
     3ae:	11 24       	eor	r1, r1
     3b0:	8f 93       	push	r24
     3b2:	ef 93       	push	r30
     3b4:	ff 93       	push	r31
     3b6:	e0 91 06 01 	lds	r30, 0x0106
     3ba:	f0 91 07 01 	lds	r31, 0x0107
     3be:	80 81       	ld	r24, Z
     3c0:	80 93 c4 03 	sts	0x03C4, r24
     3c4:	ff 91       	pop	r31
     3c6:	ef 91       	pop	r30
     3c8:	8f 91       	pop	r24
     3ca:	0f 90       	pop	r0
     3cc:	0f be       	out	0x3f, r0	; 63
     3ce:	0f 90       	pop	r0
     3d0:	1f 90       	pop	r1
     3d2:	18 95       	reti

000003d4 <ADC_init>:
     3d4:	8b 98       	cbi	0x11, 3	; 17
     3d6:	93 9a       	sbi	0x12, 3	; 18
     3d8:	f8 94       	cli
     3da:	85 b7       	in	r24, 0x35	; 53
     3dc:	88 60       	ori	r24, 0x08	; 8
     3de:	85 bf       	out	0x35, r24	; 53
     3e0:	85 b7       	in	r24, 0x35	; 53
     3e2:	8b 7f       	andi	r24, 0xFB	; 251
     3e4:	85 bf       	out	0x35, r24	; 53
     3e6:	8b b7       	in	r24, 0x3b	; 59
     3e8:	80 68       	ori	r24, 0x80	; 128
     3ea:	8b bf       	out	0x3b, r24	; 59
     3ec:	78 94       	sei
     3ee:	08 95       	ret

000003f0 <get_ADC_data>:
     3f0:	e0 91 06 01 	lds	r30, 0x0106
     3f4:	f0 91 07 01 	lds	r31, 0x0107
     3f8:	80 81       	ld	r24, Z
     3fa:	08 95       	ret

000003fc <ADC_start_read>:
     3fc:	81 30       	cpi	r24, 0x01	; 1
     3fe:	a9 f0       	breq	.+42     	; 0x42a <ADC_start_read+0x2e>
     400:	90 f0       	brcs	.+36     	; 0x426 <ADC_start_read+0x2a>
     402:	82 30       	cpi	r24, 0x02	; 2
     404:	19 f0       	breq	.+6      	; 0x40c <ADC_start_read+0x10>
     406:	83 30       	cpi	r24, 0x03	; 3
     408:	19 f0       	breq	.+6      	; 0x410 <ADC_start_read+0x14>
     40a:	04 c0       	rjmp	.+8      	; 0x414 <ADC_start_read+0x18>
     40c:	86 e0       	ldi	r24, 0x06	; 6
     40e:	0e c0       	rjmp	.+28     	; 0x42c <ADC_start_read+0x30>
     410:	87 e0       	ldi	r24, 0x07	; 7
     412:	0c c0       	rjmp	.+24     	; 0x42c <ADC_start_read+0x30>
     414:	85 e4       	ldi	r24, 0x45	; 69
     416:	91 e0       	ldi	r25, 0x01	; 1
     418:	9f 93       	push	r25
     41a:	8f 93       	push	r24
     41c:	0e 94 6e 0c 	call	0x18dc	; 0x18dc <printf>
     420:	0f 90       	pop	r0
     422:	0f 90       	pop	r0
     424:	08 95       	ret
     426:	84 e0       	ldi	r24, 0x04	; 4
     428:	01 c0       	rjmp	.+2      	; 0x42c <ADC_start_read+0x30>
     42a:	85 e0       	ldi	r24, 0x05	; 5
     42c:	e0 91 06 01 	lds	r30, 0x0106
     430:	f0 91 07 01 	lds	r31, 0x0107
     434:	80 83       	st	Z, r24
     436:	08 95       	ret

00000438 <My_serial_Transmit>:
}

void My_serial_Transmit( unsigned char data )
{
	/* Wait for empty transmit buffer */
	while ( !( UCSR0A & (1<<UDRE0)) )
     438:	5d 9b       	sbis	0x0b, 5	; 11
     43a:	fe cf       	rjmp	.-4      	; 0x438 <My_serial_Transmit>
	;
	/* Put data into buffer, sends the data */
	UDR0 = data;
     43c:	8c b9       	out	0x0c, r24	; 12
     43e:	08 95       	ret

00000440 <My_serial_Receive>:
}

unsigned char My_serial_Receive( void )
{
	/* Wait for data to be received */
	while ( !(UCSR0A & (1<<RXC0)) );
     440:	5f 9b       	sbis	0x0b, 7	; 11
     442:	fe cf       	rjmp	.-4      	; 0x440 <My_serial_Receive>
	/* Get and return received data from buffer */
	return UDR0;
     444:	8c b1       	in	r24, 0x0c	; 12
     446:	08 95       	ret

00000448 <My_serial_Init>:


void My_serial_Init( unsigned int ubrr )
{
	
	MCUCR |= (1 << SRE);
     448:	25 b7       	in	r18, 0x35	; 53
     44a:	20 68       	ori	r18, 0x80	; 128
     44c:	25 bf       	out	0x35, r18	; 53
	SFIOR |= (1 << XMM2);
     44e:	20 b7       	in	r18, 0x30	; 48
     450:	20 62       	ori	r18, 0x20	; 32
     452:	20 bf       	out	0x30, r18	; 48
	
	/* Set baud rate */
	UBRR0H = (unsigned char)(ubrr>>8);
     454:	90 bd       	out	0x20, r25	; 32
	UBRR0L = (unsigned char)ubrr;
     456:	89 b9       	out	0x09, r24	; 9
	/* Enable receiver and transmitter */
	UCSR0B = (1<<RXEN0)|(1<<TXEN0);
     458:	88 e1       	ldi	r24, 0x18	; 24
     45a:	8a b9       	out	0x0a, r24	; 10
	/* Set frame format: 8data, 2stop bit */
	UCSR0C = (1<<URSEL0)|(1<<USBS0)|(3<<UCSZ00);
     45c:	8e e8       	ldi	r24, 0x8E	; 142
     45e:	80 bd       	out	0x20, r24	; 32
	
	fdevopen(My_serial_Transmit, My_serial_Receive);
     460:	60 e2       	ldi	r22, 0x20	; 32
     462:	72 e0       	ldi	r23, 0x02	; 2
     464:	8c e1       	ldi	r24, 0x1C	; 28
     466:	92 e0       	ldi	r25, 0x02	; 2
     468:	0e 94 23 0c 	call	0x1846	; 0x1846 <fdevopen>
     46c:	08 95       	ret

0000046e <main>:

		}
		return 0;
}
int main( )
{
     46e:	cf 93       	push	r28
     470:	df 93       	push	r29
     472:	00 d0       	rcall	.+0      	; 0x474 <main+0x6>
     474:	00 d0       	rcall	.+0      	; 0x476 <main+0x8>
     476:	1f 92       	push	r1
     478:	cd b7       	in	r28, 0x3d	; 61
     47a:	de b7       	in	r29, 0x3e	; 62
	My_serial_Init ( MYUBRR );
     47c:	8f e1       	ldi	r24, 0x1F	; 31
     47e:	90 e0       	ldi	r25, 0x00	; 0
     480:	0e 94 24 02 	call	0x448	; 0x448 <My_serial_Init>
	#else
		//round up by default
		__ticks_dc = (uint32_t)(ceil(fabs(__tmp)));
	#endif

	__builtin_avr_delay_cycles(__ticks_dc);
     484:	2f ef       	ldi	r18, 0xFF	; 255
     486:	8f ef       	ldi	r24, 0xFF	; 255
     488:	9e e0       	ldi	r25, 0x0E	; 14
     48a:	21 50       	subi	r18, 0x01	; 1
     48c:	80 40       	sbci	r24, 0x00	; 0
     48e:	90 40       	sbci	r25, 0x00	; 0
     490:	e1 f7       	brne	.-8      	; 0x48a <main+0x1c>
     492:	00 c0       	rjmp	.+0      	; 0x494 <main+0x26>
     494:	00 00       	nop
	_delay_ms(1000);
	ADC_init();
     496:	0e 94 ea 01 	call	0x3d4	; 0x3d4 <ADC_init>
	Joystick_calibrate();
     49a:	0e 94 41 05 	call	0xa82	; 0xa82 <Joystick_calibrate>
	oled_init();
     49e:	0e 94 94 08 	call	0x1128	; 0x1128 <oled_init>
	menu* mymenu = oled_menu_init();
     4a2:	0e 94 b4 09 	call	0x1368	; 0x1368 <oled_menu_init>
	Joystick myjoystick;
	gamevars mygame;
	gamevars mygameold;
	menu_option lastOption;
	int updatescore = 0;
	oled_menu_select(0);
     4a6:	80 e0       	ldi	r24, 0x00	; 0
     4a8:	90 e0       	ldi	r25, 0x00	; 0
     4aa:	0e 94 18 0a 	call	0x1430	; 0x1430 <oled_menu_select>
	can_init(MODE_NORMAL);
     4ae:	80 e0       	ldi	r24, 0x00	; 0
     4b0:	0e 94 bb 02 	call	0x576	; 0x576 <can_init>
	printf("NEW START!!!!");
     4b4:	87 e8       	ldi	r24, 0x87	; 135
     4b6:	92 e0       	ldi	r25, 0x02	; 2
     4b8:	9f 93       	push	r25
     4ba:	8f 93       	push	r24
     4bc:	0e 94 6e 0c 	call	0x18dc	; 0x18dc <printf>
     4c0:	0f 90       	pop	r0
     4c2:	0f 90       	pop	r0
	menu* mymenu = oled_menu_init();
	Joystick myjoystick;
	gamevars mygame;
	gamevars mygameold;
	menu_option lastOption;
	int updatescore = 0;
     4c4:	81 2c       	mov	r8, r1
     4c6:	91 2c       	mov	r9, r1
	{

		
		mygame = getInfo();
		if(mygame.enemypoints != mygameold.enemypoints || mygame.mypoints != mygameold.mypoints){
			updatescore = 1;
     4c8:	55 24       	eor	r5, r5
     4ca:	53 94       	inc	r5
     4cc:	61 2c       	mov	r6, r1
		{
			lastOption = printgame(oled_menu_select(),mygame);
		}
		else if(updatescore){
			printgame(lastOption,mygame);
			updatescore = 0;
     4ce:	31 2c       	mov	r3, r1
     4d0:	41 2c       	mov	r4, r1
	printf("NEW START!!!!");
	while(1)
	{

		
		mygame = getInfo();
     4d2:	0e 94 ea 04 	call	0x9d4	; 0x9d4 <getInfo>
     4d6:	6b 01       	movw	r12, r22
     4d8:	7c 01       	movw	r14, r24
		if(mygame.enemypoints != mygameold.enemypoints || mygame.mypoints != mygameold.mypoints){
     4da:	0e 15       	cp	r16, r14
     4dc:	1f 05       	cpc	r17, r15
     4de:	21 f4       	brne	.+8      	; 0x4e8 <main+0x7a>
     4e0:	a6 16       	cp	r10, r22
     4e2:	b7 06       	cpc	r11, r23
     4e4:	21 f4       	brne	.+8      	; 0x4ee <main+0x80>
     4e6:	05 c0       	rjmp	.+10     	; 0x4f2 <main+0x84>
			updatescore = 1;
     4e8:	85 2c       	mov	r8, r5
     4ea:	96 2c       	mov	r9, r6
     4ec:	02 c0       	rjmp	.+4      	; 0x4f2 <main+0x84>
     4ee:	85 2c       	mov	r8, r5
     4f0:	96 2c       	mov	r9, r6
		}
		
		
		
		myjoystick= joystickPos();
     4f2:	0e 94 9a 05 	call	0xb34	; 0xb34 <joystickPos>
     4f6:	29 83       	std	Y+1, r18	; 0x01
     4f8:	3a 83       	std	Y+2, r19	; 0x02
     4fa:	4b 83       	std	Y+3, r20	; 0x03
     4fc:	5c 83       	std	Y+4, r21	; 0x04
     4fe:	6d 83       	std	Y+5, r22	; 0x05
		if(myjoystick.Dir == LEFT){
     500:	66 23       	and	r22, r22
     502:	29 f0       	breq	.+10     	; 0x50e <__stack+0xf>
			lastOption = NONE;
		}
		if(myjoystick.Dir != NEUTRAL && lastOption == NONE)
     504:	64 30       	cpi	r22, 0x04	; 4
     506:	59 f0       	breq	.+22     	; 0x51e <__stack+0x1f>
     508:	27 e0       	ldi	r18, 0x07	; 7
     50a:	72 12       	cpse	r7, r18
     50c:	08 c0       	rjmp	.+16     	; 0x51e <__stack+0x1f>
		{
			lastOption = printgame(oled_menu_select(),mygame);
     50e:	0e 94 18 0a 	call	0x1430	; 0x1430 <oled_menu_select>
     512:	b7 01       	movw	r22, r14
     514:	a6 01       	movw	r20, r12
     516:	0e 94 38 06 	call	0xc70	; 0xc70 <printgame>
     51a:	78 2e       	mov	r7, r24
     51c:	0a c0       	rjmp	.+20     	; 0x532 <__stack+0x33>
		}
		else if(updatescore){
     51e:	81 14       	cp	r8, r1
     520:	91 04       	cpc	r9, r1
     522:	39 f0       	breq	.+14     	; 0x532 <__stack+0x33>
			printgame(lastOption,mygame);
     524:	b7 01       	movw	r22, r14
     526:	a6 01       	movw	r20, r12
     528:	87 2d       	mov	r24, r7
     52a:	0e 94 38 06 	call	0xc70	; 0xc70 <printgame>
			updatescore = 0;
     52e:	83 2c       	mov	r8, r3
     530:	94 2c       	mov	r9, r4
		}
		
		mygameold = mygame;
		sendInfo();
     532:	0e 94 b9 04 	call	0x972	; 0x972 <sendInfo>
     536:	8f ef       	ldi	r24, 0xFF	; 255
     538:	9f ef       	ldi	r25, 0xFF	; 255
     53a:	22 e0       	ldi	r18, 0x02	; 2
     53c:	81 50       	subi	r24, 0x01	; 1
     53e:	90 40       	sbci	r25, 0x00	; 0
     540:	20 40       	sbci	r18, 0x00	; 0
     542:	e1 f7       	brne	.-8      	; 0x53c <__stack+0x3d>
     544:	00 c0       	rjmp	.+0      	; 0x546 <__stack+0x47>
     546:	00 c0       	rjmp	.+0      	; 0x548 <__stack+0x49>
		else if(updatescore){
			printgame(lastOption,mygame);
			updatescore = 0;
		}
		
		mygameold = mygame;
     548:	56 01       	movw	r10, r12
     54a:	87 01       	movw	r16, r14
     54c:	c2 cf       	rjmp	.-124    	; 0x4d2 <main+0x64>

0000054e <__vector_1>:
#include <avr/delay.h>

volatile int flag = 0;


ISR(INT0_vect){
     54e:	1f 92       	push	r1
     550:	0f 92       	push	r0
     552:	0f b6       	in	r0, 0x3f	; 63
     554:	0f 92       	push	r0
     556:	11 24       	eor	r1, r1
     558:	8f 93       	push	r24
     55a:	9f 93       	push	r25
	flag = 1;
     55c:	81 e0       	ldi	r24, 0x01	; 1
     55e:	90 e0       	ldi	r25, 0x00	; 0
     560:	90 93 bb 03 	sts	0x03BB, r25
     564:	80 93 ba 03 	sts	0x03BA, r24
	//printf("\r\n INTERUPT\r\n");
}
     568:	9f 91       	pop	r25
     56a:	8f 91       	pop	r24
     56c:	0f 90       	pop	r0
     56e:	0f be       	out	0x3f, r0	; 63
     570:	0f 90       	pop	r0
     572:	1f 90       	pop	r1
     574:	18 95       	reti

00000576 <can_init>:

void can_init(uint8_t mode){

	mcp_2515_init(mode);
     576:	0e 94 5c 04 	call	0x8b8	; 0x8b8 <mcp_2515_init>
	
	
	mcp_2515_write(MCP_CANINTE, MCP_RX_INT);
     57a:	63 e0       	ldi	r22, 0x03	; 3
     57c:	8b e2       	ldi	r24, 0x2B	; 43
     57e:	0e 94 43 04 	call	0x886	; 0x886 <mcp_2515_write>
	
	// Disable global interrupts
	cli();
     582:	f8 94       	cli
	// Interrupt on falling edge PD2
	set_bit(MCUCR, ISC01);
     584:	85 b7       	in	r24, 0x35	; 53
     586:	82 60       	ori	r24, 0x02	; 2
     588:	85 bf       	out	0x35, r24	; 53
	clear_bit(MCUCR, ISC00);
     58a:	85 b7       	in	r24, 0x35	; 53
     58c:	8e 7f       	andi	r24, 0xFE	; 254
     58e:	85 bf       	out	0x35, r24	; 53
	// Enable interrupt on PD2
	set_bit(GICR,INT0);
     590:	8b b7       	in	r24, 0x3b	; 59
     592:	80 64       	ori	r24, 0x40	; 64
     594:	8b bf       	out	0x3b, r24	; 59
	// Enable global interrupts
	sei();
     596:	78 94       	sei
     598:	08 95       	ret

0000059a <can_interrupt>:
	 
	
}

uint8_t can_interrupt(){
	if (flag){	
     59a:	80 91 ba 03 	lds	r24, 0x03BA
     59e:	90 91 bb 03 	lds	r25, 0x03BB
     5a2:	89 2b       	or	r24, r25
     5a4:	31 f0       	breq	.+12     	; 0x5b2 <can_interrupt+0x18>
		flag = 0;
     5a6:	10 92 bb 03 	sts	0x03BB, r1
     5aa:	10 92 ba 03 	sts	0x03BA, r1
		return 1;
     5ae:	81 e0       	ldi	r24, 0x01	; 1
     5b0:	08 95       	ret
	}
	return 0;
     5b2:	80 e0       	ldi	r24, 0x00	; 0
}
     5b4:	08 95       	ret

000005b6 <can_transmit_complete>:
	mcp_2515_request_to_send(MCP_RTS_TX0 + buffer_number);
	//printf("buffer nr. %d\n\r",buffer_number);
	
}

int can_transmit_complete(int buffer_number){
     5b6:	cf 93       	push	r28
     5b8:	df 93       	push	r29
     5ba:	ec 01       	movw	r28, r24
	uint8_t transmit_flag = mcp_2515_read(MCP_CANINTF);
     5bc:	8c e2       	ldi	r24, 0x2C	; 44
     5be:	0e 94 31 04 	call	0x862	; 0x862 <mcp_2515_read>
	uint8_t interrupt_bits = (transmit_flag & (MCP_TX0IF + buffer_number*2));
     5c2:	9e 01       	movw	r18, r28
     5c4:	2e 5f       	subi	r18, 0xFE	; 254
     5c6:	3f 4f       	sbci	r19, 0xFF	; 255
     5c8:	42 2f       	mov	r20, r18
     5ca:	44 0f       	add	r20, r20
     5cc:	84 23       	and	r24, r20

	if(interrupt_bits == (MCP_TX0IF + buffer_number*2)){
     5ce:	48 2f       	mov	r20, r24
     5d0:	50 e0       	ldi	r21, 0x00	; 0
     5d2:	22 0f       	add	r18, r18
     5d4:	33 1f       	adc	r19, r19
     5d6:	81 e0       	ldi	r24, 0x01	; 1
     5d8:	90 e0       	ldi	r25, 0x00	; 0
     5da:	42 17       	cp	r20, r18
     5dc:	53 07       	cpc	r21, r19
     5de:	11 f4       	brne	.+4      	; 0x5e4 <can_transmit_complete+0x2e>
     5e0:	80 e0       	ldi	r24, 0x00	; 0
     5e2:	90 e0       	ldi	r25, 0x00	; 0
			return 0;
	}
	return 1;
}
     5e4:	df 91       	pop	r29
     5e6:	cf 91       	pop	r28
     5e8:	08 95       	ret

000005ea <can_message_send>:
	}
	
	return message1;
}

void can_message_send(can_message* message){
     5ea:	ef 92       	push	r14
     5ec:	ff 92       	push	r15
     5ee:	0f 93       	push	r16
     5f0:	1f 93       	push	r17
     5f2:	cf 93       	push	r28
     5f4:	df 93       	push	r29
     5f6:	ec 01       	movw	r28, r24
	
	static int buffer_number = 0;
	
	while (!can_transmit_complete(buffer_number)){
     5f8:	11 c0       	rjmp	.+34     	; 0x61c <can_message_send+0x32>
		buffer_number +=1;
     5fa:	20 91 b8 03 	lds	r18, 0x03B8
     5fe:	30 91 b9 03 	lds	r19, 0x03B9
     602:	2f 5f       	subi	r18, 0xFF	; 255
     604:	3f 4f       	sbci	r19, 0xFF	; 255
     606:	30 93 b9 03 	sts	0x03B9, r19
     60a:	20 93 b8 03 	sts	0x03B8, r18
		if (buffer_number > 2) {
     60e:	23 30       	cpi	r18, 0x03	; 3
     610:	31 05       	cpc	r19, r1
     612:	24 f0       	brlt	.+8      	; 0x61c <can_message_send+0x32>
			buffer_number = 0;
     614:	10 92 b9 03 	sts	0x03B9, r1
     618:	10 92 b8 03 	sts	0x03B8, r1

void can_message_send(can_message* message){
	
	static int buffer_number = 0;
	
	while (!can_transmit_complete(buffer_number)){
     61c:	80 91 b8 03 	lds	r24, 0x03B8
     620:	90 91 b9 03 	lds	r25, 0x03B9
     624:	0e 94 db 02 	call	0x5b6	; 0x5b6 <can_transmit_complete>
     628:	89 2b       	or	r24, r25
     62a:	39 f3       	breq	.-50     	; 0x5fa <can_message_send+0x10>
			buffer_number = 0;
		}
	}
	
	// Arbitration field identifier ID = 1337;    id high = 167  id low = 0
	unsigned int ID = message->id;
     62c:	88 81       	ld	r24, Y
     62e:	99 81       	ldd	r25, Y+1	; 0x01
	char id_high = ID / 8;
	char id_low = ID % 8;
     630:	28 2f       	mov	r18, r24
     632:	27 70       	andi	r18, 0x07	; 7
     634:	f2 2e       	mov	r15, r18
		}
	}
	
	// Arbitration field identifier ID = 1337;    id high = 167  id low = 0
	unsigned int ID = message->id;
	char id_high = ID / 8;
     636:	bc 01       	movw	r22, r24
     638:	76 95       	lsr	r23
     63a:	67 95       	ror	r22
     63c:	76 95       	lsr	r23
     63e:	67 95       	ror	r22
     640:	76 95       	lsr	r23
     642:	67 95       	ror	r22
	char id_low = ID % 8;
	id_low = id_low*0b100000;
	mcp_2515_write(MCP_TXB0SIDH + 16 * buffer_number, id_high);
     644:	08 eb       	ldi	r16, 0xB8	; 184
     646:	13 e0       	ldi	r17, 0x03	; 3
     648:	f8 01       	movw	r30, r16
     64a:	80 81       	ld	r24, Z
     64c:	82 95       	swap	r24
     64e:	80 7f       	andi	r24, 0xF0	; 240
     650:	8f 5c       	subi	r24, 0xCF	; 207
     652:	0e 94 43 04 	call	0x886	; 0x886 <mcp_2515_write>
	
	// Arbitration field identifier ID = 1337;    id high = 167  id low = 0
	unsigned int ID = message->id;
	char id_high = ID / 8;
	char id_low = ID % 8;
	id_low = id_low*0b100000;
     656:	6f 2d       	mov	r22, r15
     658:	62 95       	swap	r22
     65a:	66 0f       	add	r22, r22
     65c:	60 7e       	andi	r22, 0xE0	; 224
	mcp_2515_write(MCP_TXB0SIDH + 16 * buffer_number, id_high);
	mcp_2515_write(MCP_TXB0SIDL + 16 * buffer_number, id_low);
     65e:	f8 01       	movw	r30, r16
     660:	80 81       	ld	r24, Z
     662:	82 95       	swap	r24
     664:	80 7f       	andi	r24, 0xF0	; 240
     666:	8e 5c       	subi	r24, 0xCE	; 206
     668:	0e 94 43 04 	call	0x886	; 0x886 <mcp_2515_write>
	
	// Define data length of message
	uint8_t data_length = message->length;
     66c:	ea 80       	ldd	r14, Y+2	; 0x02
	mcp_2515_write(MCP_TXB0DLC + 16 * buffer_number, data_length);
     66e:	f8 01       	movw	r30, r16
     670:	80 81       	ld	r24, Z
     672:	82 95       	swap	r24
     674:	80 7f       	andi	r24, 0xF0	; 240
     676:	6e 2d       	mov	r22, r14
     678:	8b 5c       	subi	r24, 0xCB	; 203
     67a:	0e 94 43 04 	call	0x886	; 0x886 <mcp_2515_write>
	
	// Write data bytes to transmit buffer
	char* data_bytes = message->data;
     67e:	23 96       	adiw	r28, 0x03	; 3
	for (uint8_t byte = 0; byte < data_length; byte++) {
     680:	ee 20       	and	r14, r14
     682:	81 f0       	breq	.+32     	; 0x6a4 <can_message_send+0xba>
     684:	f1 2c       	mov	r15, r1
		mcp_2515_write(MCP_TXB0Dm + byte + 16 * buffer_number, data_bytes[byte]);
     686:	69 91       	ld	r22, Y+
     688:	f8 01       	movw	r30, r16
     68a:	80 81       	ld	r24, Z
     68c:	2f 2d       	mov	r18, r15
     68e:	f0 e1       	ldi	r31, 0x10	; 16
     690:	8f 9f       	mul	r24, r31
     692:	20 0d       	add	r18, r0
     694:	11 24       	eor	r1, r1
     696:	82 2f       	mov	r24, r18
     698:	8a 5c       	subi	r24, 0xCA	; 202
     69a:	0e 94 43 04 	call	0x886	; 0x886 <mcp_2515_write>
	uint8_t data_length = message->length;
	mcp_2515_write(MCP_TXB0DLC + 16 * buffer_number, data_length);
	
	// Write data bytes to transmit buffer
	char* data_bytes = message->data;
	for (uint8_t byte = 0; byte < data_length; byte++) {
     69e:	f3 94       	inc	r15
     6a0:	fe 10       	cpse	r15, r14
     6a2:	f1 cf       	rjmp	.-30     	; 0x686 <can_message_send+0x9c>
		mcp_2515_write(MCP_TXB0Dm + byte + 16 * buffer_number, data_bytes[byte]);
	}
	
	// Request to send message, send if successful
	mcp_2515_request_to_send(MCP_RTS_TX0 + buffer_number);
     6a4:	80 91 b8 03 	lds	r24, 0x03B8
     6a8:	8f 57       	subi	r24, 0x7F	; 127
     6aa:	0e 94 94 04 	call	0x928	; 0x928 <mcp_2515_request_to_send>
	//printf("buffer nr. %d\n\r",buffer_number);
	
}
     6ae:	df 91       	pop	r29
     6b0:	cf 91       	pop	r28
     6b2:	1f 91       	pop	r17
     6b4:	0f 91       	pop	r16
     6b6:	ff 90       	pop	r15
     6b8:	ef 90       	pop	r14
     6ba:	08 95       	ret

000006bc <can_message_receive>:
			return 0;
	}
	return 1;
}

void can_message_receive(int rec_buff_num, can_message* received_message){
     6bc:	0f 93       	push	r16
     6be:	1f 93       	push	r17
     6c0:	cf 93       	push	r28
     6c2:	df 93       	push	r29
     6c4:	eb 01       	movw	r28, r22
	uint8_t id_high = mcp_2515_read(MCP_RXB0SIDH + 16 * rec_buff_num);
     6c6:	18 2f       	mov	r17, r24
     6c8:	12 95       	swap	r17
     6ca:	10 7f       	andi	r17, 0xF0	; 240
     6cc:	81 e6       	ldi	r24, 0x61	; 97
     6ce:	81 0f       	add	r24, r17
     6d0:	0e 94 31 04 	call	0x862	; 0x862 <mcp_2515_read>
     6d4:	08 2f       	mov	r16, r24
	uint8_t id_low = mcp_2515_read(MCP_RXB0SIDL + 16 * rec_buff_num);
     6d6:	82 e6       	ldi	r24, 0x62	; 98
     6d8:	81 0f       	add	r24, r17
     6da:	0e 94 31 04 	call	0x862	; 0x862 <mcp_2515_read>
	uint8_t mask = 0b11100000;
	id_low = (id_low & mask);
	received_message->id = 0b1000*id_high + id_low/0b100000;
     6de:	20 2f       	mov	r18, r16
     6e0:	30 e0       	ldi	r19, 0x00	; 0
     6e2:	22 0f       	add	r18, r18
     6e4:	33 1f       	adc	r19, r19
     6e6:	22 0f       	add	r18, r18
     6e8:	33 1f       	adc	r19, r19
     6ea:	22 0f       	add	r18, r18
     6ec:	33 1f       	adc	r19, r19
     6ee:	82 95       	swap	r24
     6f0:	86 95       	lsr	r24
     6f2:	87 70       	andi	r24, 0x07	; 7
     6f4:	28 0f       	add	r18, r24
     6f6:	31 1d       	adc	r19, r1
     6f8:	39 83       	std	Y+1, r19	; 0x01
     6fa:	28 83       	st	Y, r18
	
	uint8_t data_length = mcp_2515_read(MCP_RXB0DLC + 16 * rec_buff_num);
     6fc:	85 e6       	ldi	r24, 0x65	; 101
     6fe:	81 0f       	add	r24, r17
     700:	0e 94 31 04 	call	0x862	; 0x862 <mcp_2515_read>
	mask = 0b1111;
	received_message->length = (data_length & mask);
     704:	98 2f       	mov	r25, r24
     706:	9f 70       	andi	r25, 0x0F	; 15
     708:	9a 83       	std	Y+2, r25	; 0x02
	
	for (uint8_t byte = 0; byte < data_length; byte++) {
     70a:	88 23       	and	r24, r24
     70c:	59 f0       	breq	.+22     	; 0x724 <can_message_receive+0x68>
     70e:	1a 59       	subi	r17, 0x9A	; 154
     710:	23 96       	adiw	r28, 0x03	; 3
     712:	08 2f       	mov	r16, r24
     714:	01 0f       	add	r16, r17
		received_message->data[byte] = mcp_2515_read(MCP_RXB0DM + byte + 16 * rec_buff_num);
     716:	81 2f       	mov	r24, r17
     718:	0e 94 31 04 	call	0x862	; 0x862 <mcp_2515_read>
     71c:	89 93       	st	Y+, r24
     71e:	1f 5f       	subi	r17, 0xFF	; 255
	
	uint8_t data_length = mcp_2515_read(MCP_RXB0DLC + 16 * rec_buff_num);
	mask = 0b1111;
	received_message->length = (data_length & mask);
	
	for (uint8_t byte = 0; byte < data_length; byte++) {
     720:	10 13       	cpse	r17, r16
     722:	f9 cf       	rjmp	.-14     	; 0x716 <can_message_receive+0x5a>
		received_message->data[byte] = mcp_2515_read(MCP_RXB0DM + byte + 16 * rec_buff_num);
	}
	
}
     724:	df 91       	pop	r29
     726:	cf 91       	pop	r28
     728:	1f 91       	pop	r17
     72a:	0f 91       	pop	r16
     72c:	08 95       	ret

0000072e <can_int_vect>:

void can_int_vect(int* v) { 
     72e:	cf 93       	push	r28
     730:	df 93       	push	r29
     732:	ec 01       	movw	r28, r24
	uint8_t int_flag = mcp_2515_read(MCP_CANINTF);
     734:	8c e2       	ldi	r24, 0x2C	; 44
     736:	0e 94 31 04 	call	0x862	; 0x862 <mcp_2515_read>
	v[0] = (int_flag & MCP_RX0IF);
     73a:	98 2f       	mov	r25, r24
     73c:	91 70       	andi	r25, 0x01	; 1
     73e:	98 83       	st	Y, r25
     740:	19 82       	std	Y+1, r1	; 0x01
	v[1] = (int_flag & MCP_RX1IF);
     742:	82 70       	andi	r24, 0x02	; 2
     744:	90 e0       	ldi	r25, 0x00	; 0
     746:	9b 83       	std	Y+3, r25	; 0x03
     748:	8a 83       	std	Y+2, r24	; 0x02
}
     74a:	df 91       	pop	r29
     74c:	cf 91       	pop	r28
     74e:	08 95       	ret

00000750 <can_handle_messages>:
		return 1;
	}
	return 0;
}

can_message can_handle_messages(){
     750:	0f 93       	push	r16
     752:	1f 93       	push	r17
     754:	cf 93       	push	r28
     756:	df 93       	push	r29
     758:	cd b7       	in	r28, 0x3d	; 61
     75a:	de b7       	in	r29, 0x3e	; 62
     75c:	68 97       	sbiw	r28, 0x18	; 24
     75e:	0f b6       	in	r0, 0x3f	; 63
     760:	f8 94       	cli
     762:	de bf       	out	0x3e, r29	; 62
     764:	0f be       	out	0x3f, r0	; 63
     766:	cd bf       	out	0x3d, r28	; 61
     768:	8c 01       	movw	r16, r24
	uint8_t v[2] = {0};
     76a:	1a 82       	std	Y+2, r1	; 0x02
     76c:	19 82       	std	Y+1, r1	; 0x01

	can_int_vect(v);
     76e:	ce 01       	movw	r24, r28
     770:	01 96       	adiw	r24, 0x01	; 1
     772:	0e 94 97 03 	call	0x72e	; 0x72e <can_int_vect>

	can_message message1;
	if (v[0]){
     776:	89 81       	ldd	r24, Y+1	; 0x01
     778:	88 23       	and	r24, r24
     77a:	29 f1       	breq	.+74     	; 0x7c6 <can_handle_messages+0x76>
		can_message_receive(0, &message1);
     77c:	be 01       	movw	r22, r28
     77e:	6d 5f       	subi	r22, 0xFD	; 253
     780:	7f 4f       	sbci	r23, 0xFF	; 255
     782:	80 e0       	ldi	r24, 0x00	; 0
     784:	90 e0       	ldi	r25, 0x00	; 0
     786:	0e 94 5e 03 	call	0x6bc	; 0x6bc <can_message_receive>
		//mcp_2515_write(MCP_CANINTF,0);
		mcp_2515_bit_modify(MCP_CANINTF, 1, 0);
     78a:	40 e0       	ldi	r20, 0x00	; 0
     78c:	61 e0       	ldi	r22, 0x01	; 1
     78e:	8c e2       	ldi	r24, 0x2C	; 44
     790:	0e 94 9f 04 	call	0x93e	; 0x93e <mcp_2515_bit_modify>
		mcp_2515_bit_modify(MCP_CANINTF, 1, 0);
     794:	40 e0       	ldi	r20, 0x00	; 0
     796:	61 e0       	ldi	r22, 0x01	; 1
     798:	8c e2       	ldi	r24, 0x2C	; 44
     79a:	0e 94 9f 04 	call	0x93e	; 0x93e <mcp_2515_bit_modify>
		can_int_vect(v);
     79e:	ce 01       	movw	r24, r28
     7a0:	01 96       	adiw	r24, 0x01	; 1
     7a2:	0e 94 97 03 	call	0x72e	; 0x72e <can_int_vect>
		if (!v[1]){
     7a6:	8a 81       	ldd	r24, Y+2	; 0x02
     7a8:	81 11       	cpse	r24, r1
     7aa:	04 c0       	rjmp	.+8      	; 0x7b4 <can_handle_messages+0x64>
			flag = 0;
     7ac:	10 92 bb 03 	sts	0x03BB, r1
     7b0:	10 92 ba 03 	sts	0x03BA, r1
		}
		return message1;
     7b4:	8b e0       	ldi	r24, 0x0B	; 11
     7b6:	fe 01       	movw	r30, r28
     7b8:	33 96       	adiw	r30, 0x03	; 3
     7ba:	d8 01       	movw	r26, r16
     7bc:	01 90       	ld	r0, Z+
     7be:	0d 92       	st	X+, r0
     7c0:	8a 95       	dec	r24
     7c2:	e1 f7       	brne	.-8      	; 0x7bc <can_handle_messages+0x6c>
     7c4:	30 c0       	rjmp	.+96     	; 0x826 <can_handle_messages+0xd6>
	}
	
	can_message message2;
	
	if (v[1]){
     7c6:	8a 81       	ldd	r24, Y+2	; 0x02
     7c8:	88 23       	and	r24, r24
     7ca:	29 f1       	breq	.+74     	; 0x816 <can_handle_messages+0xc6>
		can_message_receive(1, &message2);
     7cc:	be 01       	movw	r22, r28
     7ce:	62 5f       	subi	r22, 0xF2	; 242
     7d0:	7f 4f       	sbci	r23, 0xFF	; 255
     7d2:	81 e0       	ldi	r24, 0x01	; 1
     7d4:	90 e0       	ldi	r25, 0x00	; 0
     7d6:	0e 94 5e 03 	call	0x6bc	; 0x6bc <can_message_receive>
		//mcp_2515_write(MCP_CANINTF,0);
		mcp_2515_bit_modify(MCP_CANINTF, 2, 0);
     7da:	40 e0       	ldi	r20, 0x00	; 0
     7dc:	62 e0       	ldi	r22, 0x02	; 2
     7de:	8c e2       	ldi	r24, 0x2C	; 44
     7e0:	0e 94 9f 04 	call	0x93e	; 0x93e <mcp_2515_bit_modify>
		mcp_2515_bit_modify(MCP_CANINTF, 2, 0);
     7e4:	40 e0       	ldi	r20, 0x00	; 0
     7e6:	62 e0       	ldi	r22, 0x02	; 2
     7e8:	8c e2       	ldi	r24, 0x2C	; 44
     7ea:	0e 94 9f 04 	call	0x93e	; 0x93e <mcp_2515_bit_modify>
		can_int_vect(v);
     7ee:	ce 01       	movw	r24, r28
     7f0:	01 96       	adiw	r24, 0x01	; 1
     7f2:	0e 94 97 03 	call	0x72e	; 0x72e <can_int_vect>
		if (!v[0]){
     7f6:	89 81       	ldd	r24, Y+1	; 0x01
     7f8:	81 11       	cpse	r24, r1
     7fa:	04 c0       	rjmp	.+8      	; 0x804 <can_handle_messages+0xb4>
			flag = 0;
     7fc:	10 92 bb 03 	sts	0x03BB, r1
     800:	10 92 ba 03 	sts	0x03BA, r1
		}
		return message2;
     804:	8b e0       	ldi	r24, 0x0B	; 11
     806:	fe 01       	movw	r30, r28
     808:	3e 96       	adiw	r30, 0x0e	; 14
     80a:	d8 01       	movw	r26, r16
     80c:	01 90       	ld	r0, Z+
     80e:	0d 92       	st	X+, r0
     810:	8a 95       	dec	r24
     812:	e1 f7       	brne	.-8      	; 0x80c <can_handle_messages+0xbc>
     814:	08 c0       	rjmp	.+16     	; 0x826 <can_handle_messages+0xd6>
	}
	
	return message1;
     816:	8b e0       	ldi	r24, 0x0B	; 11
     818:	fe 01       	movw	r30, r28
     81a:	33 96       	adiw	r30, 0x03	; 3
     81c:	d8 01       	movw	r26, r16
     81e:	01 90       	ld	r0, Z+
     820:	0d 92       	st	X+, r0
     822:	8a 95       	dec	r24
     824:	e1 f7       	brne	.-8      	; 0x81e <can_handle_messages+0xce>
}
     826:	c8 01       	movw	r24, r16
     828:	68 96       	adiw	r28, 0x18	; 24
     82a:	0f b6       	in	r0, 0x3f	; 63
     82c:	f8 94       	cli
     82e:	de bf       	out	0x3e, r29	; 62
     830:	0f be       	out	0x3f, r0	; 63
     832:	cd bf       	out	0x3d, r28	; 61
     834:	df 91       	pop	r29
     836:	cf 91       	pop	r28
     838:	1f 91       	pop	r17
     83a:	0f 91       	pop	r16
     83c:	08 95       	ret

0000083e <mcp_activate_slave>:
     83e:	c4 98       	cbi	0x18, 4	; 24
     840:	08 95       	ret

00000842 <mcp_deactivate_slave>:
     842:	c4 9a       	sbi	0x18, 4	; 24
     844:	08 95       	ret

00000846 <mcp_2515_reset>:
     846:	0e 94 1f 04 	call	0x83e	; 0x83e <mcp_activate_slave>
     84a:	80 ec       	ldi	r24, 0xC0	; 192
     84c:	0e 94 cb 0a 	call	0x1596	; 0x1596 <SPI_write>
     850:	0e 94 21 04 	call	0x842	; 0x842 <mcp_deactivate_slave>
     854:	83 ec       	ldi	r24, 0xC3	; 195
     856:	99 e0       	ldi	r25, 0x09	; 9
     858:	01 97       	sbiw	r24, 0x01	; 1
     85a:	f1 f7       	brne	.-4      	; 0x858 <mcp_2515_reset+0x12>
     85c:	00 c0       	rjmp	.+0      	; 0x85e <mcp_2515_reset+0x18>
     85e:	00 00       	nop
     860:	08 95       	ret

00000862 <mcp_2515_read>:
     862:	cf 93       	push	r28
     864:	c8 2f       	mov	r28, r24
     866:	0e 94 1f 04 	call	0x83e	; 0x83e <mcp_activate_slave>
     86a:	83 e0       	ldi	r24, 0x03	; 3
     86c:	0e 94 cb 0a 	call	0x1596	; 0x1596 <SPI_write>
     870:	8c 2f       	mov	r24, r28
     872:	0e 94 cb 0a 	call	0x1596	; 0x1596 <SPI_write>
     876:	0e 94 cf 0a 	call	0x159e	; 0x159e <SPI_read>
     87a:	c8 2f       	mov	r28, r24
     87c:	0e 94 21 04 	call	0x842	; 0x842 <mcp_deactivate_slave>
     880:	8c 2f       	mov	r24, r28
     882:	cf 91       	pop	r28
     884:	08 95       	ret

00000886 <mcp_2515_write>:
     886:	cf 93       	push	r28
     888:	df 93       	push	r29
     88a:	d8 2f       	mov	r29, r24
     88c:	c6 2f       	mov	r28, r22
     88e:	0e 94 1f 04 	call	0x83e	; 0x83e <mcp_activate_slave>
     892:	82 e0       	ldi	r24, 0x02	; 2
     894:	0e 94 cb 0a 	call	0x1596	; 0x1596 <SPI_write>
     898:	8d 2f       	mov	r24, r29
     89a:	0e 94 cb 0a 	call	0x1596	; 0x1596 <SPI_write>
     89e:	8c 2f       	mov	r24, r28
     8a0:	0e 94 cb 0a 	call	0x1596	; 0x1596 <SPI_write>
     8a4:	0e 94 21 04 	call	0x842	; 0x842 <mcp_deactivate_slave>
     8a8:	df 91       	pop	r29
     8aa:	cf 91       	pop	r28
     8ac:	08 95       	ret

000008ae <mcp_2515_set_mode>:
     8ae:	68 2f       	mov	r22, r24
     8b0:	8f e0       	ldi	r24, 0x0F	; 15
     8b2:	0e 94 43 04 	call	0x886	; 0x886 <mcp_2515_write>
     8b6:	08 95       	ret

000008b8 <mcp_2515_init>:
     8b8:	cf 93       	push	r28
     8ba:	c8 2f       	mov	r28, r24
     8bc:	0e 94 c5 0a 	call	0x158a	; 0x158a <SPI_init>
     8c0:	0e 94 23 04 	call	0x846	; 0x846 <mcp_2515_reset>
     8c4:	8e e0       	ldi	r24, 0x0E	; 14
     8c6:	0e 94 31 04 	call	0x862	; 0x862 <mcp_2515_read>
     8ca:	80 7e       	andi	r24, 0xE0	; 224
     8cc:	80 38       	cpi	r24, 0x80	; 128
     8ce:	71 f0       	breq	.+28     	; 0x8ec <mcp_2515_init+0x34>
     8d0:	1f 92       	push	r1
     8d2:	8f 93       	push	r24
     8d4:	85 e9       	ldi	r24, 0x95	; 149
     8d6:	92 e0       	ldi	r25, 0x02	; 2
     8d8:	9f 93       	push	r25
     8da:	8f 93       	push	r24
     8dc:	0e 94 6e 0c 	call	0x18dc	; 0x18dc <printf>
     8e0:	0f 90       	pop	r0
     8e2:	0f 90       	pop	r0
     8e4:	0f 90       	pop	r0
     8e6:	0f 90       	pop	r0
     8e8:	81 e0       	ldi	r24, 0x01	; 1
     8ea:	1c c0       	rjmp	.+56     	; 0x924 <mcp_2515_init+0x6c>
     8ec:	8c 2f       	mov	r24, r28
     8ee:	0e 94 57 04 	call	0x8ae	; 0x8ae <mcp_2515_set_mode>
     8f2:	8e e0       	ldi	r24, 0x0E	; 14
     8f4:	0e 94 31 04 	call	0x862	; 0x862 <mcp_2515_read>
     8f8:	80 7e       	andi	r24, 0xE0	; 224
     8fa:	8c 17       	cp	r24, r28
     8fc:	91 f0       	breq	.+36     	; 0x922 <mcp_2515_init+0x6a>
     8fe:	1f 92       	push	r1
     900:	8f 93       	push	r24
     902:	8f ed       	ldi	r24, 0xDF	; 223
     904:	92 e0       	ldi	r25, 0x02	; 2
     906:	9f 93       	push	r25
     908:	8f 93       	push	r24
     90a:	0e 94 6e 0c 	call	0x18dc	; 0x18dc <printf>
     90e:	83 e2       	ldi	r24, 0x23	; 35
     910:	93 e0       	ldi	r25, 0x03	; 3
     912:	0e 94 82 0c 	call	0x1904	; 0x1904 <puts>
     916:	0f 90       	pop	r0
     918:	0f 90       	pop	r0
     91a:	0f 90       	pop	r0
     91c:	0f 90       	pop	r0
     91e:	81 e0       	ldi	r24, 0x01	; 1
     920:	01 c0       	rjmp	.+2      	; 0x924 <mcp_2515_init+0x6c>
     922:	80 e0       	ldi	r24, 0x00	; 0
     924:	cf 91       	pop	r28
     926:	08 95       	ret

00000928 <mcp_2515_request_to_send>:
     928:	cf 93       	push	r28
     92a:	c8 2f       	mov	r28, r24
     92c:	0e 94 1f 04 	call	0x83e	; 0x83e <mcp_activate_slave>
     930:	8c 2f       	mov	r24, r28
     932:	0e 94 cb 0a 	call	0x1596	; 0x1596 <SPI_write>
     936:	0e 94 21 04 	call	0x842	; 0x842 <mcp_deactivate_slave>
     93a:	cf 91       	pop	r28
     93c:	08 95       	ret

0000093e <mcp_2515_bit_modify>:
     93e:	1f 93       	push	r17
     940:	cf 93       	push	r28
     942:	df 93       	push	r29
     944:	18 2f       	mov	r17, r24
     946:	d6 2f       	mov	r29, r22
     948:	c4 2f       	mov	r28, r20
     94a:	0e 94 1f 04 	call	0x83e	; 0x83e <mcp_activate_slave>
     94e:	85 e0       	ldi	r24, 0x05	; 5
     950:	0e 94 cb 0a 	call	0x1596	; 0x1596 <SPI_write>
     954:	81 2f       	mov	r24, r17
     956:	0e 94 cb 0a 	call	0x1596	; 0x1596 <SPI_write>
     95a:	8d 2f       	mov	r24, r29
     95c:	0e 94 cb 0a 	call	0x1596	; 0x1596 <SPI_write>
     960:	8c 2f       	mov	r24, r28
     962:	0e 94 cb 0a 	call	0x1596	; 0x1596 <SPI_write>
     966:	0e 94 21 04 	call	0x842	; 0x842 <mcp_deactivate_slave>
     96a:	df 91       	pop	r29
     96c:	cf 91       	pop	r28
     96e:	1f 91       	pop	r17
     970:	08 95       	ret

00000972 <sendInfo>:

#include "GameInfo.h"
gamevars game = {.enemypoints = 0,.mypoints=0};
can_message newmessage;

void sendInfo(){
     972:	0f 93       	push	r16
     974:	1f 93       	push	r17
     976:	cf 93       	push	r28
     978:	df 93       	push	r29
     97a:	cd b7       	in	r28, 0x3d	; 61
     97c:	de b7       	in	r29, 0x3e	; 62
     97e:	60 97       	sbiw	r28, 0x10	; 16
     980:	0f b6       	in	r0, 0x3f	; 63
     982:	f8 94       	cli
     984:	de bf       	out	0x3e, r29	; 62
     986:	0f be       	out	0x3f, r0	; 63
     988:	cd bf       	out	0x3d, r28	; 61
	slider_str slider = slider_position();
     98a:	0e 94 a7 0a 	call	0x154e	; 0x154e <slider_position>
     98e:	08 2f       	mov	r16, r24
     990:	19 2f       	mov	r17, r25
	
	Joystick minJoystick = joystickPos();
     992:	0e 94 9a 05 	call	0xb34	; 0xb34 <joystickPos>
     996:	6d 83       	std	Y+5, r22	; 0x05
	
	can_message canMessage;
	canMessage.data[0] = slider.L;
     998:	09 87       	std	Y+9, r16	; 0x09
	canMessage.data[1] = slider.R;
     99a:	1a 87       	std	Y+10, r17	; 0x0a
	canMessage.data[2] = slider_left_button();
     99c:	0e 94 bf 0a 	call	0x157e	; 0x157e <slider_left_button>
     9a0:	8b 87       	std	Y+11, r24	; 0x0b
	if(minJoystick.Dir == LEFT){
     9a2:	8d 81       	ldd	r24, Y+5	; 0x05
     9a4:	81 11       	cpse	r24, r1
     9a6:	05 c0       	rjmp	.+10     	; 0x9b2 <sendInfo+0x40>
		canMessage.data[3] = 'R';
     9a8:	82 e5       	ldi	r24, 0x52	; 82
     9aa:	8c 87       	std	Y+12, r24	; 0x0c
		canMessage.length = 4;
     9ac:	84 e0       	ldi	r24, 0x04	; 4
     9ae:	88 87       	std	Y+8, r24	; 0x08
     9b0:	02 c0       	rjmp	.+4      	; 0x9b6 <sendInfo+0x44>
	}
	else
	{
		canMessage.length = 3;
     9b2:	83 e0       	ldi	r24, 0x03	; 3
     9b4:	88 87       	std	Y+8, r24	; 0x08
	
	//canMessage.data[3] = map(IOBORDBUTTONR,-100,100,0,200);
	//canMessage.data[4] = map(minJoystick.xPos,-100,100,0,200);
	

	can_message_send(&canMessage);
     9b6:	ce 01       	movw	r24, r28
     9b8:	06 96       	adiw	r24, 0x06	; 6
     9ba:	0e 94 f5 02 	call	0x5ea	; 0x5ea <can_message_send>
	
}
     9be:	60 96       	adiw	r28, 0x10	; 16
     9c0:	0f b6       	in	r0, 0x3f	; 63
     9c2:	f8 94       	cli
     9c4:	de bf       	out	0x3e, r29	; 62
     9c6:	0f be       	out	0x3f, r0	; 63
     9c8:	cd bf       	out	0x3d, r28	; 61
     9ca:	df 91       	pop	r29
     9cc:	cf 91       	pop	r28
     9ce:	1f 91       	pop	r17
     9d0:	0f 91       	pop	r16
     9d2:	08 95       	ret

000009d4 <getInfo>:
gamevars getInfo(){
     9d4:	cf 93       	push	r28
     9d6:	df 93       	push	r29
     9d8:	cd b7       	in	r28, 0x3d	; 61
     9da:	de b7       	in	r29, 0x3e	; 62
     9dc:	2b 97       	sbiw	r28, 0x0b	; 11
     9de:	0f b6       	in	r0, 0x3f	; 63
     9e0:	f8 94       	cli
     9e2:	de bf       	out	0x3e, r29	; 62
     9e4:	0f be       	out	0x3f, r0	; 63
     9e6:	cd bf       	out	0x3d, r28	; 61
	if(can_interrupt()){
     9e8:	0e 94 cd 02 	call	0x59a	; 0x59a <can_interrupt>
     9ec:	88 23       	and	r24, r24
     9ee:	d9 f0       	breq	.+54     	; 0xa26 <getInfo+0x52>
		newmessage = can_handle_messages();
     9f0:	ce 01       	movw	r24, r28
     9f2:	01 96       	adiw	r24, 0x01	; 1
     9f4:	0e 94 a8 03 	call	0x750	; 0x750 <can_handle_messages>
     9f8:	8b e0       	ldi	r24, 0x0B	; 11
     9fa:	fe 01       	movw	r30, r28
     9fc:	31 96       	adiw	r30, 0x01	; 1
     9fe:	a5 ec       	ldi	r26, 0xC5	; 197
     a00:	b3 e0       	ldi	r27, 0x03	; 3
     a02:	01 90       	ld	r0, Z+
     a04:	0d 92       	st	X+, r0
     a06:	8a 95       	dec	r24
     a08:	e1 f7       	brne	.-8      	; 0xa02 <getInfo+0x2e>
		game.enemypoints = newmessage.data[0];
     a0a:	80 91 c8 03 	lds	r24, 0x03C8
     a0e:	90 e0       	ldi	r25, 0x00	; 0
     a10:	90 93 bf 03 	sts	0x03BF, r25
     a14:	80 93 be 03 	sts	0x03BE, r24
		game.mypoints = newmessage.data[1];
     a18:	80 91 c9 03 	lds	r24, 0x03C9
     a1c:	90 e0       	ldi	r25, 0x00	; 0
     a1e:	90 93 bd 03 	sts	0x03BD, r25
     a22:	80 93 bc 03 	sts	0x03BC, r24
	}
	printf("ENEMYPOINTS    %d  ",game.enemypoints);
     a26:	ee eb       	ldi	r30, 0xBE	; 190
     a28:	f3 e0       	ldi	r31, 0x03	; 3
     a2a:	81 81       	ldd	r24, Z+1	; 0x01
     a2c:	8f 93       	push	r24
     a2e:	80 81       	ld	r24, Z
     a30:	8f 93       	push	r24
     a32:	86 e2       	ldi	r24, 0x26	; 38
     a34:	93 e0       	ldi	r25, 0x03	; 3
     a36:	9f 93       	push	r25
     a38:	8f 93       	push	r24
     a3a:	0e 94 6e 0c 	call	0x18dc	; 0x18dc <printf>
	printf("MY POINTS    %d \r\n",game.mypoints);
     a3e:	ec eb       	ldi	r30, 0xBC	; 188
     a40:	f3 e0       	ldi	r31, 0x03	; 3
     a42:	81 81       	ldd	r24, Z+1	; 0x01
     a44:	8f 93       	push	r24
     a46:	80 81       	ld	r24, Z
     a48:	8f 93       	push	r24
     a4a:	8a e3       	ldi	r24, 0x3A	; 58
     a4c:	93 e0       	ldi	r25, 0x03	; 3
     a4e:	9f 93       	push	r25
     a50:	8f 93       	push	r24
     a52:	0e 94 6e 0c 	call	0x18dc	; 0x18dc <printf>
	
	return game;
     a56:	60 91 bc 03 	lds	r22, 0x03BC
     a5a:	70 91 bd 03 	lds	r23, 0x03BD
     a5e:	80 91 be 03 	lds	r24, 0x03BE
     a62:	90 91 bf 03 	lds	r25, 0x03BF
     a66:	0f b6       	in	r0, 0x3f	; 63
     a68:	f8 94       	cli
     a6a:	de bf       	out	0x3e, r29	; 62
     a6c:	0f be       	out	0x3f, r0	; 63
     a6e:	cd bf       	out	0x3d, r28	; 61
     a70:	2b 96       	adiw	r28, 0x0b	; 11
     a72:	0f b6       	in	r0, 0x3f	; 63
     a74:	f8 94       	cli
     a76:	de bf       	out	0x3e, r29	; 62
     a78:	0f be       	out	0x3f, r0	; 63
     a7a:	cd bf       	out	0x3d, r28	; 61
     a7c:	df 91       	pop	r29
     a7e:	cf 91       	pop	r28
     a80:	08 95       	ret

00000a82 <Joystick_calibrate>:

uint8_t center_x , center_y;

void Joystick_calibrate(void){
	
	ADC_start_read(CHANNEL1);
     a82:	80 e0       	ldi	r24, 0x00	; 0
     a84:	0e 94 fe 01 	call	0x3fc	; 0x3fc <ADC_start_read>
	#else
		//round up by default
		__ticks_dc = (uint32_t)(ceil(fabs(__tmp)));
	#endif

	__builtin_avr_delay_cycles(__ticks_dc);
     a88:	82 e4       	ldi	r24, 0x42	; 66
     a8a:	8a 95       	dec	r24
     a8c:	f1 f7       	brne	.-4      	; 0xa8a <Joystick_calibrate+0x8>
     a8e:	00 c0       	rjmp	.+0      	; 0xa90 <Joystick_calibrate+0xe>
	_delay_us(200);
	center_x = get_ADC_data();
     a90:	0e 94 f8 01 	call	0x3f0	; 0x3f0 <get_ADC_data>
     a94:	80 93 d0 03 	sts	0x03D0, r24
	ADC_start_read(CHANNEL2);
     a98:	81 e0       	ldi	r24, 0x01	; 1
     a9a:	0e 94 fe 01 	call	0x3fc	; 0x3fc <ADC_start_read>
     a9e:	82 e4       	ldi	r24, 0x42	; 66
     aa0:	8a 95       	dec	r24
     aa2:	f1 f7       	brne	.-4      	; 0xaa0 <Joystick_calibrate+0x1e>
     aa4:	00 c0       	rjmp	.+0      	; 0xaa6 <Joystick_calibrate+0x24>
	_delay_us(200);
	center_y = get_ADC_data();
     aa6:	0e 94 f8 01 	call	0x3f0	; 0x3f0 <get_ADC_data>
     aaa:	80 93 d1 03 	sts	0x03D1, r24
     aae:	08 95       	ret

00000ab0 <JoystickDirection>:
	return position; 
	
	
}

Joystick JoystickDirection(Joystick position){
     ab0:	cf 93       	push	r28
     ab2:	df 93       	push	r29
     ab4:	cd b7       	in	r28, 0x3d	; 61
     ab6:	de b7       	in	r29, 0x3e	; 62
     ab8:	2a 97       	sbiw	r28, 0x0a	; 10
     aba:	0f b6       	in	r0, 0x3f	; 63
     abc:	f8 94       	cli
     abe:	de bf       	out	0x3e, r29	; 62
     ac0:	0f be       	out	0x3f, r0	; 63
     ac2:	cd bf       	out	0x3d, r28	; 61
     ac4:	4e 83       	std	Y+6, r20	; 0x06
     ac6:	5f 83       	std	Y+7, r21	; 0x07
     ac8:	68 87       	std	Y+8, r22	; 0x08
     aca:	79 87       	std	Y+9, r23	; 0x09
     acc:	2e 81       	ldd	r18, Y+6	; 0x06
     ace:	3f 81       	ldd	r19, Y+7	; 0x07
     ad0:	48 85       	ldd	r20, Y+8	; 0x08
     ad2:	59 85       	ldd	r21, Y+9	; 0x09
	
	if(position.xPos < -50){
     ad4:	2e 3c       	cpi	r18, 0xCE	; 206
     ad6:	9f ef       	ldi	r25, 0xFF	; 255
     ad8:	39 07       	cpc	r19, r25
     ada:	24 f0       	brlt	.+8      	; 0xae4 <JoystickDirection+0x34>
		position.Dir = LEFT; 
	} else if (position.xPos > 50){
     adc:	23 33       	cpi	r18, 0x33	; 51
     ade:	31 05       	cpc	r19, r1
     ae0:	1c f4       	brge	.+6      	; 0xae8 <JoystickDirection+0x38>
     ae2:	03 c0       	rjmp	.+6      	; 0xaea <JoystickDirection+0x3a>
}

Joystick JoystickDirection(Joystick position){
	
	if(position.xPos < -50){
		position.Dir = LEFT; 
     ae4:	80 e0       	ldi	r24, 0x00	; 0
     ae6:	01 c0       	rjmp	.+2      	; 0xaea <JoystickDirection+0x3a>
	} else if (position.xPos > 50){
		position.Dir = RIGHT;
     ae8:	81 e0       	ldi	r24, 0x01	; 1
	}
	
	if(position.yPos < -50){
     aea:	4e 3c       	cpi	r20, 0xCE	; 206
     aec:	9f ef       	ldi	r25, 0xFF	; 255
     aee:	59 07       	cpc	r21, r25
     af0:	24 f0       	brlt	.+8      	; 0xafa <JoystickDirection+0x4a>
		position.Dir = DOWN; 
	} else if (position.yPos > 50){
     af2:	43 33       	cpi	r20, 0x33	; 51
     af4:	51 05       	cpc	r21, r1
     af6:	1c f4       	brge	.+6      	; 0xafe <JoystickDirection+0x4e>
     af8:	03 c0       	rjmp	.+6      	; 0xb00 <JoystickDirection+0x50>
	} else if (position.xPos > 50){
		position.Dir = RIGHT;
	}
	
	if(position.yPos < -50){
		position.Dir = DOWN; 
     afa:	83 e0       	ldi	r24, 0x03	; 3
     afc:	01 c0       	rjmp	.+2      	; 0xb00 <JoystickDirection+0x50>
	} else if (position.yPos > 50){
		position.Dir = UP; 
     afe:	82 e0       	ldi	r24, 0x02	; 2
	}
	if(position.xPos == 0 && position.yPos == 0){
     b00:	21 15       	cp	r18, r1
     b02:	31 05       	cpc	r19, r1
     b04:	21 f4       	brne	.+8      	; 0xb0e <JoystickDirection+0x5e>
     b06:	41 15       	cp	r20, r1
     b08:	51 05       	cpc	r21, r1
     b0a:	09 f4       	brne	.+2      	; 0xb0e <JoystickDirection+0x5e>
		position.Dir = NEUTRAL; 
     b0c:	84 e0       	ldi	r24, 0x04	; 4
	}
	
	return position;
     b0e:	3a 83       	std	Y+2, r19	; 0x02
     b10:	29 83       	std	Y+1, r18	; 0x01
     b12:	5c 83       	std	Y+4, r21	; 0x04
     b14:	4b 83       	std	Y+3, r20	; 0x03
     b16:	3a 81       	ldd	r19, Y+2	; 0x02
     b18:	5c 81       	ldd	r21, Y+4	; 0x04
}
     b1a:	68 2f       	mov	r22, r24
     b1c:	70 e0       	ldi	r23, 0x00	; 0
     b1e:	80 e0       	ldi	r24, 0x00	; 0
     b20:	90 e0       	ldi	r25, 0x00	; 0
     b22:	2a 96       	adiw	r28, 0x0a	; 10
     b24:	0f b6       	in	r0, 0x3f	; 63
     b26:	f8 94       	cli
     b28:	de bf       	out	0x3e, r29	; 62
     b2a:	0f be       	out	0x3f, r0	; 63
     b2c:	cd bf       	out	0x3d, r28	; 61
     b2e:	df 91       	pop	r29
     b30:	cf 91       	pop	r28
     b32:	08 95       	ret

00000b34 <joystickPos>:
	_delay_us(200);
	center_y = get_ADC_data();
	 
}

Joystick joystickPos(void){
     b34:	0f 93       	push	r16
     b36:	1f 93       	push	r17
     b38:	cf 93       	push	r28
     b3a:	df 93       	push	r29
     b3c:	cd b7       	in	r28, 0x3d	; 61
     b3e:	de b7       	in	r29, 0x3e	; 62
     b40:	2a 97       	sbiw	r28, 0x0a	; 10
     b42:	0f b6       	in	r0, 0x3f	; 63
     b44:	f8 94       	cli
     b46:	de bf       	out	0x3e, r29	; 62
     b48:	0f be       	out	0x3f, r0	; 63
     b4a:	cd bf       	out	0x3d, r28	; 61
	uint8_t x, y; 
	Joystick position;
	position.xPos = 0;
	position.yPos = 0;
	
	ADC_start_read(CHANNEL1);
     b4c:	80 e0       	ldi	r24, 0x00	; 0
     b4e:	0e 94 fe 01 	call	0x3fc	; 0x3fc <ADC_start_read>
     b52:	82 e4       	ldi	r24, 0x42	; 66
     b54:	8a 95       	dec	r24
     b56:	f1 f7       	brne	.-4      	; 0xb54 <joystickPos+0x20>
     b58:	00 c0       	rjmp	.+0      	; 0xb5a <joystickPos+0x26>
	_delay_us(200);
	x = get_ADC_data();
     b5a:	0e 94 f8 01 	call	0x3f0	; 0x3f0 <get_ADC_data>
	
	if(x > center_x){
     b5e:	20 91 d0 03 	lds	r18, 0x03D0
     b62:	28 17       	cp	r18, r24
     b64:	a0 f4       	brcc	.+40     	; 0xb8e <joystickPos+0x5a>
		position.xPos = 100 * (x - center_x) / (0xFF - center_x);
     b66:	30 e0       	ldi	r19, 0x00	; 0
     b68:	99 27       	eor	r25, r25
     b6a:	ac 01       	movw	r20, r24
     b6c:	42 1b       	sub	r20, r18
     b6e:	53 0b       	sbc	r21, r19
     b70:	64 e6       	ldi	r22, 0x64	; 100
     b72:	64 9f       	mul	r22, r20
     b74:	c0 01       	movw	r24, r0
     b76:	65 9f       	mul	r22, r21
     b78:	90 0d       	add	r25, r0
     b7a:	11 24       	eor	r1, r1
     b7c:	6f ef       	ldi	r22, 0xFF	; 255
     b7e:	70 e0       	ldi	r23, 0x00	; 0
     b80:	62 1b       	sub	r22, r18
     b82:	73 0b       	sbc	r23, r19
     b84:	0e 94 d4 0a 	call	0x15a8	; 0x15a8 <__divmodhi4>
     b88:	16 2f       	mov	r17, r22
     b8a:	07 2f       	mov	r16, r23
     b8c:	15 c0       	rjmp	.+42     	; 0xbb8 <joystickPos+0x84>
	} else if (x < center_x){
     b8e:	82 17       	cp	r24, r18
     b90:	88 f4       	brcc	.+34     	; 0xbb4 <joystickPos+0x80>
		position.xPos = 100 * (x - center_x) / (center_x - 0);
     b92:	62 2f       	mov	r22, r18
     b94:	70 e0       	ldi	r23, 0x00	; 0
     b96:	99 27       	eor	r25, r25
     b98:	9c 01       	movw	r18, r24
     b9a:	26 1b       	sub	r18, r22
     b9c:	37 0b       	sbc	r19, r23
     b9e:	44 e6       	ldi	r20, 0x64	; 100
     ba0:	42 9f       	mul	r20, r18
     ba2:	c0 01       	movw	r24, r0
     ba4:	43 9f       	mul	r20, r19
     ba6:	90 0d       	add	r25, r0
     ba8:	11 24       	eor	r1, r1
     baa:	0e 94 d4 0a 	call	0x15a8	; 0x15a8 <__divmodhi4>
     bae:	16 2f       	mov	r17, r22
     bb0:	07 2f       	mov	r16, r23
     bb2:	02 c0       	rjmp	.+4      	; 0xbb8 <joystickPos+0x84>
	} else {
		position.xPos = 0;
     bb4:	10 e0       	ldi	r17, 0x00	; 0
     bb6:	00 e0       	ldi	r16, 0x00	; 0
	}
	ADC_start_read(CHANNEL2);
     bb8:	81 e0       	ldi	r24, 0x01	; 1
     bba:	0e 94 fe 01 	call	0x3fc	; 0x3fc <ADC_start_read>
     bbe:	82 e4       	ldi	r24, 0x42	; 66
     bc0:	8a 95       	dec	r24
     bc2:	f1 f7       	brne	.-4      	; 0xbc0 <joystickPos+0x8c>
     bc4:	00 c0       	rjmp	.+0      	; 0xbc6 <joystickPos+0x92>
	_delay_us(200);
	y = get_ADC_data();
     bc6:	0e 94 f8 01 	call	0x3f0	; 0x3f0 <get_ADC_data>
	if(y > center_y){
     bca:	20 91 d1 03 	lds	r18, 0x03D1
     bce:	28 17       	cp	r18, r24
     bd0:	a0 f4       	brcc	.+40     	; 0xbfa <joystickPos+0xc6>
		position.yPos = 100 * (y - center_y) / (0xFF - center_y);
     bd2:	30 e0       	ldi	r19, 0x00	; 0
     bd4:	99 27       	eor	r25, r25
     bd6:	ac 01       	movw	r20, r24
     bd8:	42 1b       	sub	r20, r18
     bda:	53 0b       	sbc	r21, r19
     bdc:	64 e6       	ldi	r22, 0x64	; 100
     bde:	64 9f       	mul	r22, r20
     be0:	c0 01       	movw	r24, r0
     be2:	65 9f       	mul	r22, r21
     be4:	90 0d       	add	r25, r0
     be6:	11 24       	eor	r1, r1
     be8:	4f ef       	ldi	r20, 0xFF	; 255
     bea:	50 e0       	ldi	r21, 0x00	; 0
     bec:	ba 01       	movw	r22, r20
     bee:	62 1b       	sub	r22, r18
     bf0:	73 0b       	sbc	r23, r19
     bf2:	0e 94 d4 0a 	call	0x15a8	; 0x15a8 <__divmodhi4>
     bf6:	86 2f       	mov	r24, r22
     bf8:	14 c0       	rjmp	.+40     	; 0xc22 <joystickPos+0xee>
		} else if (y < center_y){
     bfa:	82 17       	cp	r24, r18
     bfc:	80 f4       	brcc	.+32     	; 0xc1e <joystickPos+0xea>
		position.yPos = 100 * (y - center_y) / (center_y - 0);
     bfe:	30 e0       	ldi	r19, 0x00	; 0
     c00:	99 27       	eor	r25, r25
     c02:	ac 01       	movw	r20, r24
     c04:	42 1b       	sub	r20, r18
     c06:	53 0b       	sbc	r21, r19
     c08:	64 e6       	ldi	r22, 0x64	; 100
     c0a:	64 9f       	mul	r22, r20
     c0c:	c0 01       	movw	r24, r0
     c0e:	65 9f       	mul	r22, r21
     c10:	90 0d       	add	r25, r0
     c12:	11 24       	eor	r1, r1
     c14:	b9 01       	movw	r22, r18
     c16:	0e 94 d4 0a 	call	0x15a8	; 0x15a8 <__divmodhi4>
     c1a:	86 2f       	mov	r24, r22
     c1c:	02 c0       	rjmp	.+4      	; 0xc22 <joystickPos+0xee>
		} else {
		position.yPos = 0;
     c1e:	80 e0       	ldi	r24, 0x00	; 0
     c20:	70 e0       	ldi	r23, 0x00	; 0
	}
	position = JoystickDirection(position);
     c22:	41 2f       	mov	r20, r17
     c24:	68 2f       	mov	r22, r24
     c26:	50 2f       	mov	r21, r16
     c28:	8a 85       	ldd	r24, Y+10	; 0x0a
     c2a:	0e 94 58 05 	call	0xab0	; 0xab0 <JoystickDirection>
     c2e:	2e 83       	std	Y+6, r18	; 0x06
     c30:	3f 83       	std	Y+7, r19	; 0x07
     c32:	48 87       	std	Y+8, r20	; 0x08
     c34:	59 87       	std	Y+9, r21	; 0x09
     c36:	6a 87       	std	Y+10, r22	; 0x0a
	return position; 
     c38:	85 e0       	ldi	r24, 0x05	; 5
     c3a:	fe 01       	movw	r30, r28
     c3c:	36 96       	adiw	r30, 0x06	; 6
     c3e:	de 01       	movw	r26, r28
     c40:	11 96       	adiw	r26, 0x01	; 1
     c42:	01 90       	ld	r0, Z+
     c44:	0d 92       	st	X+, r0
     c46:	8a 95       	dec	r24
     c48:	e1 f7       	brne	.-8      	; 0xc42 <joystickPos+0x10e>
     c4a:	29 81       	ldd	r18, Y+1	; 0x01
     c4c:	3a 81       	ldd	r19, Y+2	; 0x02
     c4e:	4b 81       	ldd	r20, Y+3	; 0x03
     c50:	5c 81       	ldd	r21, Y+4	; 0x04
     c52:	6d 81       	ldd	r22, Y+5	; 0x05
	
	
}
     c54:	70 e0       	ldi	r23, 0x00	; 0
     c56:	80 e0       	ldi	r24, 0x00	; 0
     c58:	90 e0       	ldi	r25, 0x00	; 0
     c5a:	2a 96       	adiw	r28, 0x0a	; 10
     c5c:	0f b6       	in	r0, 0x3f	; 63
     c5e:	f8 94       	cli
     c60:	de bf       	out	0x3e, r29	; 62
     c62:	0f be       	out	0x3f, r0	; 63
     c64:	cd bf       	out	0x3d, r28	; 61
     c66:	df 91       	pop	r29
     c68:	cf 91       	pop	r28
     c6a:	1f 91       	pop	r17
     c6c:	0f 91       	pop	r16
     c6e:	08 95       	ret

00000c70 <printgame>:
		
		
can_message cali;
char pointarray[4] = "";
menu_option printgame(menu_option choice,gamevars game)
{
     c70:	9f 92       	push	r9
     c72:	af 92       	push	r10
     c74:	bf 92       	push	r11
     c76:	cf 92       	push	r12
     c78:	df 92       	push	r13
     c7a:	ef 92       	push	r14
     c7c:	ff 92       	push	r15
     c7e:	0f 93       	push	r16
     c80:	1f 93       	push	r17
     c82:	cf 93       	push	r28
     c84:	df 93       	push	r29
     c86:	00 d0       	rcall	.+0      	; 0xc88 <printgame+0x18>
     c88:	00 d0       	rcall	.+0      	; 0xc8a <printgame+0x1a>
     c8a:	00 d0       	rcall	.+0      	; 0xc8c <printgame+0x1c>
     c8c:	cd b7       	in	r28, 0x3d	; 61
     c8e:	de b7       	in	r29, 0x3e	; 62
     c90:	98 2e       	mov	r9, r24
     c92:	6a 01       	movw	r12, r20
     c94:	7b 01       	movw	r14, r22
     c96:	8a 01       	movw	r16, r20
	switch(choice){ 
     c98:	81 e0       	ldi	r24, 0x01	; 1
     c9a:	98 16       	cp	r9, r24
     c9c:	09 f4       	brne	.+2      	; 0xca0 <printgame+0x30>
     c9e:	c1 c0       	rjmp	.+386    	; 0xe22 <printgame+0x1b2>
     ca0:	98 16       	cp	r9, r24
     ca2:	48 f0       	brcs	.+18     	; 0xcb6 <printgame+0x46>
     ca4:	85 e0       	ldi	r24, 0x05	; 5
     ca6:	98 16       	cp	r9, r24
     ca8:	09 f4       	brne	.+2      	; 0xcac <printgame+0x3c>
     caa:	49 c0       	rjmp	.+146    	; 0xd3e <printgame+0xce>
     cac:	86 e0       	ldi	r24, 0x06	; 6
     cae:	98 16       	cp	r9, r24
     cb0:	09 f4       	brne	.+2      	; 0xcb4 <printgame+0x44>
     cb2:	7b c0       	rjmp	.+246    	; 0xdaa <printgame+0x13a>
     cb4:	c5 c0       	rjmp	.+394    	; 0xe40 <printgame+0x1d0>
		case SinglePlayer:
			oled_reset();
     cb6:	0e 94 84 08 	call	0x1108	; 0x1108 <oled_reset>
			oled_printf("Your score is :");
     cba:	8d e4       	ldi	r24, 0x4D	; 77
     cbc:	93 e0       	ldi	r25, 0x03	; 3
     cbe:	9f 93       	push	r25
     cc0:	8f 93       	push	r24
     cc2:	0e 94 ed 07 	call	0xfda	; 0xfda <oled_printf>
			oled_pos(1,0);
     cc6:	60 e0       	ldi	r22, 0x00	; 0
     cc8:	70 e0       	ldi	r23, 0x00	; 0
     cca:	81 e0       	ldi	r24, 0x01	; 1
     ccc:	90 e0       	ldi	r25, 0x00	; 0
     cce:	0e 94 59 08 	call	0x10b2	; 0x10b2 <oled_pos>
			pointarray[0] = (game.mypoints%100-game.mypoints%10)/10 + '0';
     cd2:	0f 2e       	mov	r0, r31
     cd4:	fa e0       	ldi	r31, 0x0A	; 10
     cd6:	af 2e       	mov	r10, r31
     cd8:	b1 2c       	mov	r11, r1
     cda:	f0 2d       	mov	r31, r0
     cdc:	c6 01       	movw	r24, r12
     cde:	b5 01       	movw	r22, r10
     ce0:	0e 94 d4 0a 	call	0x15a8	; 0x15a8 <__divmodhi4>
     ce4:	9c 01       	movw	r18, r24
     ce6:	e0 ec       	ldi	r30, 0xC0	; 192
     ce8:	f3 e0       	ldi	r31, 0x03	; 3
     cea:	c6 01       	movw	r24, r12
     cec:	64 e6       	ldi	r22, 0x64	; 100
     cee:	70 e0       	ldi	r23, 0x00	; 0
     cf0:	0e 94 d4 0a 	call	0x15a8	; 0x15a8 <__divmodhi4>
     cf4:	82 1b       	sub	r24, r18
     cf6:	93 0b       	sbc	r25, r19
     cf8:	b5 01       	movw	r22, r10
     cfa:	0e 94 d4 0a 	call	0x15a8	; 0x15a8 <__divmodhi4>
     cfe:	60 5d       	subi	r22, 0xD0	; 208
     d00:	60 83       	st	Z, r22
			pointarray[1] = game.mypoints%10 + '0';
     d02:	20 5d       	subi	r18, 0xD0	; 208
     d04:	20 93 c1 03 	sts	0x03C1, r18
			oled_printf(pointarray);
     d08:	ff 93       	push	r31
     d0a:	ef 93       	push	r30
     d0c:	0e 94 ed 07 	call	0xfda	; 0xfda <oled_printf>
			if(game.enemypoints > 0)
     d10:	0f 90       	pop	r0
     d12:	0f 90       	pop	r0
     d14:	0f 90       	pop	r0
     d16:	0f 90       	pop	r0
     d18:	1e 14       	cp	r1, r14
     d1a:	1f 04       	cpc	r1, r15
     d1c:	0c f0       	brlt	.+2      	; 0xd20 <printgame+0xb0>
     d1e:	90 c0       	rjmp	.+288    	; 0xe40 <printgame+0x1d0>
			{	
				oled_pos(2,0);
     d20:	60 e0       	ldi	r22, 0x00	; 0
     d22:	70 e0       	ldi	r23, 0x00	; 0
     d24:	82 e0       	ldi	r24, 0x02	; 2
     d26:	90 e0       	ldi	r25, 0x00	; 0
     d28:	0e 94 59 08 	call	0x10b2	; 0x10b2 <oled_pos>
				oled_printf("GAME OVER");
     d2c:	8d e5       	ldi	r24, 0x5D	; 93
     d2e:	93 e0       	ldi	r25, 0x03	; 3
     d30:	9f 93       	push	r25
     d32:	8f 93       	push	r24
     d34:	0e 94 ed 07 	call	0xfda	; 0xfda <oled_printf>
     d38:	0f 90       	pop	r0
     d3a:	0f 90       	pop	r0
     d3c:	81 c0       	rjmp	.+258    	; 0xe40 <printgame+0x1d0>
			

		break;
		case Multiplayer:

			oled_reset();
     d3e:	0e 94 84 08 	call	0x1108	; 0x1108 <oled_reset>
			oled_printf("Your score is :");
     d42:	8d e4       	ldi	r24, 0x4D	; 77
     d44:	93 e0       	ldi	r25, 0x03	; 3
     d46:	9f 93       	push	r25
     d48:	8f 93       	push	r24
     d4a:	0e 94 ed 07 	call	0xfda	; 0xfda <oled_printf>
			oled_pos(1,0);
     d4e:	60 e0       	ldi	r22, 0x00	; 0
     d50:	70 e0       	ldi	r23, 0x00	; 0
     d52:	81 e0       	ldi	r24, 0x01	; 1
     d54:	90 e0       	ldi	r25, 0x00	; 0
     d56:	0e 94 59 08 	call	0x10b2	; 0x10b2 <oled_pos>
			pointarray[4] = "";
     d5a:	8f e3       	ldi	r24, 0x3F	; 63
     d5c:	92 e0       	ldi	r25, 0x02	; 2
     d5e:	80 93 c4 03 	sts	0x03C4, r24
			pointarray[0] = (game.mypoints%100-game.mypoints%10)/10 + '0';
     d62:	0f 2e       	mov	r0, r31
     d64:	fa e0       	ldi	r31, 0x0A	; 10
     d66:	ef 2e       	mov	r14, r31
     d68:	f1 2c       	mov	r15, r1
     d6a:	f0 2d       	mov	r31, r0
     d6c:	c8 01       	movw	r24, r16
     d6e:	b7 01       	movw	r22, r14
     d70:	0e 94 d4 0a 	call	0x15a8	; 0x15a8 <__divmodhi4>
     d74:	9c 01       	movw	r18, r24
     d76:	e0 ec       	ldi	r30, 0xC0	; 192
     d78:	f3 e0       	ldi	r31, 0x03	; 3
     d7a:	c8 01       	movw	r24, r16
     d7c:	64 e6       	ldi	r22, 0x64	; 100
     d7e:	70 e0       	ldi	r23, 0x00	; 0
     d80:	0e 94 d4 0a 	call	0x15a8	; 0x15a8 <__divmodhi4>
     d84:	82 1b       	sub	r24, r18
     d86:	93 0b       	sbc	r25, r19
     d88:	b7 01       	movw	r22, r14
     d8a:	0e 94 d4 0a 	call	0x15a8	; 0x15a8 <__divmodhi4>
     d8e:	60 5d       	subi	r22, 0xD0	; 208
     d90:	60 83       	st	Z, r22
			pointarray[1] = game.mypoints%10 + '0';
     d92:	20 5d       	subi	r18, 0xD0	; 208
     d94:	20 93 c1 03 	sts	0x03C1, r18
			oled_printf(pointarray);
     d98:	ff 93       	push	r31
     d9a:	ef 93       	push	r30
     d9c:	0e 94 ed 07 	call	0xfda	; 0xfda <oled_printf>


		break;
     da0:	0f 90       	pop	r0
     da2:	0f 90       	pop	r0
     da4:	0f 90       	pop	r0
     da6:	0f 90       	pop	r0
     da8:	4b c0       	rjmp	.+150    	; 0xe40 <printgame+0x1d0>
		case Highscore:
		oled_reset();
     daa:	0e 94 84 08 	call	0x1108	; 0x1108 <oled_reset>
		oled_printf("HIGHSCORES: ");
     dae:	87 e6       	ldi	r24, 0x67	; 103
     db0:	93 e0       	ldi	r25, 0x03	; 3
     db2:	9f 93       	push	r25
     db4:	8f 93       	push	r24
     db6:	0e 94 ed 07 	call	0xfda	; 0xfda <oled_printf>
     dba:	0f 2e       	mov	r0, r31
     dbc:	f8 e0       	ldi	r31, 0x08	; 8
     dbe:	af 2e       	mov	r10, r31
     dc0:	f1 e0       	ldi	r31, 0x01	; 1
     dc2:	bf 2e       	mov	r11, r31
     dc4:	f0 2d       	mov	r31, r0
     dc6:	0f 90       	pop	r0
     dc8:	0f 90       	pop	r0
		for(int i = 0; i < 5; i++){
     dca:	c1 2c       	mov	r12, r1
     dcc:	d1 2c       	mov	r13, r1
     dce:	8e 01       	movw	r16, r28
     dd0:	0f 5f       	subi	r16, 0xFF	; 255
     dd2:	1f 4f       	sbci	r17, 0xFF	; 255
     dd4:	7e 01       	movw	r14, r28
     dd6:	86 e0       	ldi	r24, 0x06	; 6
     dd8:	e8 0e       	add	r14, r24
     dda:	f1 1c       	adc	r15, r1
			oled_pos(i+1,0);
     ddc:	8f ef       	ldi	r24, 0xFF	; 255
     dde:	c8 1a       	sub	r12, r24
     de0:	d8 0a       	sbc	r13, r24
     de2:	60 e0       	ldi	r22, 0x00	; 0
     de4:	70 e0       	ldi	r23, 0x00	; 0
     de6:	c6 01       	movw	r24, r12
     de8:	0e 94 59 08 	call	0x10b2	; 0x10b2 <oled_pos>
			char hold[6] = "";
     dec:	19 82       	std	Y+1, r1	; 0x01
     dee:	1a 82       	std	Y+2, r1	; 0x02
     df0:	1b 82       	std	Y+3, r1	; 0x03
     df2:	1c 82       	std	Y+4, r1	; 0x04
     df4:	1e 82       	std	Y+6, r1	; 0x06
     df6:	1d 82       	std	Y+5, r1	; 0x05
     df8:	f8 01       	movw	r30, r16
     dfa:	d5 01       	movw	r26, r10
			for(int j = 0; j < 5; j++){
				hold[j] = highscorelist[i][j];
     dfc:	8d 91       	ld	r24, X+
     dfe:	81 93       	st	Z+, r24
		oled_reset();
		oled_printf("HIGHSCORES: ");
		for(int i = 0; i < 5; i++){
			oled_pos(i+1,0);
			char hold[6] = "";
			for(int j = 0; j < 5; j++){
     e00:	ee 15       	cp	r30, r14
     e02:	ff 05       	cpc	r31, r15
     e04:	d9 f7       	brne	.-10     	; 0xdfc <printgame+0x18c>
				hold[j] = highscorelist[i][j];
			}
			oled_printf(hold);
     e06:	1f 93       	push	r17
     e08:	0f 93       	push	r16
     e0a:	0e 94 ed 07 	call	0xfda	; 0xfda <oled_printf>
     e0e:	85 e0       	ldi	r24, 0x05	; 5
     e10:	a8 0e       	add	r10, r24
     e12:	b1 1c       	adc	r11, r1

		break;
		case Highscore:
		oled_reset();
		oled_printf("HIGHSCORES: ");
		for(int i = 0; i < 5; i++){
     e14:	0f 90       	pop	r0
     e16:	0f 90       	pop	r0
     e18:	85 e0       	ldi	r24, 0x05	; 5
     e1a:	c8 16       	cp	r12, r24
     e1c:	d1 04       	cpc	r13, r1
     e1e:	f1 f6       	brne	.-68     	; 0xddc <printgame+0x16c>
     e20:	0f c0       	rjmp	.+30     	; 0xe40 <printgame+0x1d0>
			}
			oled_printf(hold);
		}
		break;
		case Calibrate:
			cali.id = 10;
     e22:	8a e0       	ldi	r24, 0x0A	; 10
     e24:	90 e0       	ldi	r25, 0x00	; 0
     e26:	90 93 d3 03 	sts	0x03D3, r25
     e2a:	80 93 d2 03 	sts	0x03D2, r24
			cali.data[0] = 0;
     e2e:	10 92 d5 03 	sts	0x03D5, r1
			cali.length = 1;
     e32:	81 e0       	ldi	r24, 0x01	; 1
     e34:	80 93 d4 03 	sts	0x03D4, r24
			can_message_send(&cali);
     e38:	82 ed       	ldi	r24, 0xD2	; 210
     e3a:	93 e0       	ldi	r25, 0x03	; 3
     e3c:	0e 94 f5 02 	call	0x5ea	; 0x5ea <can_message_send>
		break;
	}
	return choice;
}
     e40:	89 2d       	mov	r24, r9
     e42:	26 96       	adiw	r28, 0x06	; 6
     e44:	0f b6       	in	r0, 0x3f	; 63
     e46:	f8 94       	cli
     e48:	de bf       	out	0x3e, r29	; 62
     e4a:	0f be       	out	0x3f, r0	; 63
     e4c:	cd bf       	out	0x3d, r28	; 61
     e4e:	df 91       	pop	r29
     e50:	cf 91       	pop	r28
     e52:	1f 91       	pop	r17
     e54:	0f 91       	pop	r16
     e56:	ff 90       	pop	r15
     e58:	ef 90       	pop	r14
     e5a:	df 90       	pop	r13
     e5c:	cf 90       	pop	r12
     e5e:	bf 90       	pop	r11
     e60:	af 90       	pop	r10
     e62:	9f 90       	pop	r9
     e64:	08 95       	ret

00000e66 <oled_is_out_of_bounds>:
     e66:	80 91 df 03 	lds	r24, 0x03DF
     e6a:	90 91 e0 03 	lds	r25, 0x03E0
     e6e:	80 38       	cpi	r24, 0x80	; 128
     e70:	91 05       	cpc	r25, r1
     e72:	bc f0       	brlt	.+46     	; 0xea2 <oled_is_out_of_bounds+0x3c>
     e74:	ef ed       	ldi	r30, 0xDF	; 223
     e76:	f3 e0       	ldi	r31, 0x03	; 3
     e78:	80 81       	ld	r24, Z
     e7a:	91 81       	ldd	r25, Z+1	; 0x01
     e7c:	80 58       	subi	r24, 0x80	; 128
     e7e:	91 09       	sbc	r25, r1
     e80:	91 83       	std	Z+1, r25	; 0x01
     e82:	80 83       	st	Z, r24
     e84:	ed ed       	ldi	r30, 0xDD	; 221
     e86:	f3 e0       	ldi	r31, 0x03	; 3
     e88:	80 81       	ld	r24, Z
     e8a:	91 81       	ldd	r25, Z+1	; 0x01
     e8c:	01 96       	adiw	r24, 0x01	; 1
     e8e:	91 83       	std	Z+1, r25	; 0x01
     e90:	80 83       	st	Z, r24
     e92:	80 81       	ld	r24, Z
     e94:	91 81       	ldd	r25, Z+1	; 0x01
     e96:	08 97       	sbiw	r24, 0x08	; 8
     e98:	24 f0       	brlt	.+8      	; 0xea2 <oled_is_out_of_bounds+0x3c>
     e9a:	10 92 de 03 	sts	0x03DE, r1
     e9e:	10 92 dd 03 	sts	0x03DD, r1
     ea2:	08 95       	ret

00000ea4 <oled_put_char>:
     ea4:	ef 92       	push	r14
     ea6:	ff 92       	push	r15
     ea8:	0f 93       	push	r16
     eaa:	1f 93       	push	r17
     eac:	cf 93       	push	r28
     eae:	df 93       	push	r29
     eb0:	80 52       	subi	r24, 0x20	; 32
     eb2:	20 91 21 01 	lds	r18, 0x0121
     eb6:	30 91 22 01 	lds	r19, 0x0122
     eba:	12 16       	cp	r1, r18
     ebc:	13 06       	cpc	r1, r19
     ebe:	84 f5       	brge	.+96     	; 0xf20 <oled_put_char+0x7c>
     ec0:	e8 2e       	mov	r14, r24
     ec2:	f1 2c       	mov	r15, r1
     ec4:	c7 01       	movw	r24, r14
     ec6:	88 0f       	add	r24, r24
     ec8:	99 1f       	adc	r25, r25
     eca:	88 0f       	add	r24, r24
     ecc:	99 1f       	adc	r25, r25
     ece:	88 0f       	add	r24, r24
     ed0:	99 1f       	adc	r25, r25
     ed2:	c0 e0       	ldi	r28, 0x00	; 0
     ed4:	d0 e0       	ldi	r29, 0x00	; 0
     ed6:	9c 01       	movw	r18, r24
     ed8:	20 59       	subi	r18, 0x90	; 144
     eda:	3f 4f       	sbci	r19, 0xFF	; 255
     edc:	79 01       	movw	r14, r18
     ede:	0f ed       	ldi	r16, 0xDF	; 223
     ee0:	13 e0       	ldi	r17, 0x03	; 3
     ee2:	f7 01       	movw	r30, r14
     ee4:	ec 0f       	add	r30, r28
     ee6:	fd 1f       	adc	r31, r29
     ee8:	85 91       	lpm	r24, Z+
     eea:	94 91       	lpm	r25, Z
     eec:	e0 91 23 01 	lds	r30, 0x0123
     ef0:	f0 91 24 01 	lds	r31, 0x0124
     ef4:	80 83       	st	Z, r24
     ef6:	f8 01       	movw	r30, r16
     ef8:	20 81       	ld	r18, Z
     efa:	31 81       	ldd	r19, Z+1	; 0x01
     efc:	80 91 21 01 	lds	r24, 0x0121
     f00:	90 91 22 01 	lds	r25, 0x0122
     f04:	82 0f       	add	r24, r18
     f06:	93 1f       	adc	r25, r19
     f08:	91 83       	std	Z+1, r25	; 0x01
     f0a:	80 83       	st	Z, r24
     f0c:	0e 94 33 07 	call	0xe66	; 0xe66 <oled_is_out_of_bounds>
     f10:	21 96       	adiw	r28, 0x01	; 1
     f12:	80 91 21 01 	lds	r24, 0x0121
     f16:	90 91 22 01 	lds	r25, 0x0122
     f1a:	c8 17       	cp	r28, r24
     f1c:	d9 07       	cpc	r29, r25
     f1e:	0c f3       	brlt	.-62     	; 0xee2 <oled_put_char+0x3e>
     f20:	80 e0       	ldi	r24, 0x00	; 0
     f22:	90 e0       	ldi	r25, 0x00	; 0
     f24:	df 91       	pop	r29
     f26:	cf 91       	pop	r28
     f28:	1f 91       	pop	r17
     f2a:	0f 91       	pop	r16
     f2c:	ff 90       	pop	r15
     f2e:	ef 90       	pop	r14
     f30:	08 95       	ret

00000f32 <oled_inv_put_char>:
     f32:	ef 92       	push	r14
     f34:	ff 92       	push	r15
     f36:	0f 93       	push	r16
     f38:	1f 93       	push	r17
     f3a:	cf 93       	push	r28
     f3c:	df 93       	push	r29
     f3e:	80 52       	subi	r24, 0x20	; 32
     f40:	20 91 21 01 	lds	r18, 0x0121
     f44:	30 91 22 01 	lds	r19, 0x0122
     f48:	12 16       	cp	r1, r18
     f4a:	13 06       	cpc	r1, r19
     f4c:	8c f5       	brge	.+98     	; 0xfb0 <oled_inv_put_char+0x7e>
     f4e:	e8 2e       	mov	r14, r24
     f50:	f1 2c       	mov	r15, r1
     f52:	c7 01       	movw	r24, r14
     f54:	88 0f       	add	r24, r24
     f56:	99 1f       	adc	r25, r25
     f58:	88 0f       	add	r24, r24
     f5a:	99 1f       	adc	r25, r25
     f5c:	88 0f       	add	r24, r24
     f5e:	99 1f       	adc	r25, r25
     f60:	c0 e0       	ldi	r28, 0x00	; 0
     f62:	d0 e0       	ldi	r29, 0x00	; 0
     f64:	9c 01       	movw	r18, r24
     f66:	20 59       	subi	r18, 0x90	; 144
     f68:	3f 4f       	sbci	r19, 0xFF	; 255
     f6a:	79 01       	movw	r14, r18
     f6c:	0f ed       	ldi	r16, 0xDF	; 223
     f6e:	13 e0       	ldi	r17, 0x03	; 3
     f70:	f7 01       	movw	r30, r14
     f72:	ec 0f       	add	r30, r28
     f74:	fd 1f       	adc	r31, r29
     f76:	85 91       	lpm	r24, Z+
     f78:	94 91       	lpm	r25, Z
     f7a:	80 95       	com	r24
     f7c:	e0 91 23 01 	lds	r30, 0x0123
     f80:	f0 91 24 01 	lds	r31, 0x0124
     f84:	80 83       	st	Z, r24
     f86:	f8 01       	movw	r30, r16
     f88:	20 81       	ld	r18, Z
     f8a:	31 81       	ldd	r19, Z+1	; 0x01
     f8c:	80 91 21 01 	lds	r24, 0x0121
     f90:	90 91 22 01 	lds	r25, 0x0122
     f94:	82 0f       	add	r24, r18
     f96:	93 1f       	adc	r25, r19
     f98:	91 83       	std	Z+1, r25	; 0x01
     f9a:	80 83       	st	Z, r24
     f9c:	0e 94 33 07 	call	0xe66	; 0xe66 <oled_is_out_of_bounds>
     fa0:	21 96       	adiw	r28, 0x01	; 1
     fa2:	80 91 21 01 	lds	r24, 0x0121
     fa6:	90 91 22 01 	lds	r25, 0x0122
     faa:	c8 17       	cp	r28, r24
     fac:	d9 07       	cpc	r29, r25
     fae:	04 f3       	brlt	.-64     	; 0xf70 <oled_inv_put_char+0x3e>
     fb0:	80 e0       	ldi	r24, 0x00	; 0
     fb2:	90 e0       	ldi	r25, 0x00	; 0
     fb4:	df 91       	pop	r29
     fb6:	cf 91       	pop	r28
     fb8:	1f 91       	pop	r17
     fba:	0f 91       	pop	r16
     fbc:	ff 90       	pop	r15
     fbe:	ef 90       	pop	r14
     fc0:	08 95       	ret

00000fc2 <oled_set_adressing_mode>:
     fc2:	e0 91 25 01 	lds	r30, 0x0125
     fc6:	f0 91 26 01 	lds	r31, 0x0126
     fca:	90 e2       	ldi	r25, 0x20	; 32
     fcc:	90 83       	st	Z, r25
     fce:	e0 91 25 01 	lds	r30, 0x0125
     fd2:	f0 91 26 01 	lds	r31, 0x0126
     fd6:	80 83       	st	Z, r24
     fd8:	08 95       	ret

00000fda <oled_printf>:
     fda:	cf 93       	push	r28
     fdc:	df 93       	push	r29
     fde:	cd b7       	in	r28, 0x3d	; 61
     fe0:	de b7       	in	r29, 0x3e	; 62
     fe2:	fe 01       	movw	r30, r28
     fe4:	35 96       	adiw	r30, 0x05	; 5
     fe6:	61 91       	ld	r22, Z+
     fe8:	71 91       	ld	r23, Z+
     fea:	af 01       	movw	r20, r30
     fec:	85 e3       	ldi	r24, 0x35	; 53
     fee:	91 e0       	ldi	r25, 0x01	; 1
     ff0:	0e 94 af 0c 	call	0x195e	; 0x195e <vfprintf>
     ff4:	df 91       	pop	r29
     ff6:	cf 91       	pop	r28
     ff8:	08 95       	ret

00000ffa <oled_inv_printf>:
     ffa:	cf 93       	push	r28
     ffc:	df 93       	push	r29
     ffe:	cd b7       	in	r28, 0x3d	; 61
    1000:	de b7       	in	r29, 0x3e	; 62
    1002:	fe 01       	movw	r30, r28
    1004:	35 96       	adiw	r30, 0x05	; 5
    1006:	61 91       	ld	r22, Z+
    1008:	71 91       	ld	r23, Z+
    100a:	af 01       	movw	r20, r30
    100c:	87 e2       	ldi	r24, 0x27	; 39
    100e:	91 e0       	ldi	r25, 0x01	; 1
    1010:	0e 94 af 0c 	call	0x195e	; 0x195e <vfprintf>
    1014:	df 91       	pop	r29
    1016:	cf 91       	pop	r28
    1018:	08 95       	ret

0000101a <oled_goto_line>:
    101a:	cf 93       	push	r28
    101c:	df 93       	push	r29
    101e:	ec 01       	movw	r28, r24
    1020:	88 30       	cpi	r24, 0x08	; 8
    1022:	91 05       	cpc	r25, r1
    1024:	80 f4       	brcc	.+32     	; 0x1046 <oled_goto_line+0x2c>
    1026:	90 93 de 03 	sts	0x03DE, r25
    102a:	80 93 dd 03 	sts	0x03DD, r24
    102e:	82 e0       	ldi	r24, 0x02	; 2
    1030:	0e 94 e1 07 	call	0xfc2	; 0xfc2 <oled_set_adressing_mode>
    1034:	c0 55       	subi	r28, 0x50	; 80
    1036:	e0 91 25 01 	lds	r30, 0x0125
    103a:	f0 91 26 01 	lds	r31, 0x0126
    103e:	c0 83       	st	Z, r28
    1040:	80 e0       	ldi	r24, 0x00	; 0
    1042:	0e 94 e1 07 	call	0xfc2	; 0xfc2 <oled_set_adressing_mode>
    1046:	df 91       	pop	r29
    1048:	cf 91       	pop	r28
    104a:	08 95       	ret

0000104c <oled_goto_column>:
    104c:	cf 93       	push	r28
    104e:	df 93       	push	r29
    1050:	ec 01       	movw	r28, r24
    1052:	80 38       	cpi	r24, 0x80	; 128
    1054:	91 05       	cpc	r25, r1
    1056:	50 f5       	brcc	.+84     	; 0x10ac <oled_goto_column+0x60>
    1058:	90 93 e0 03 	sts	0x03E0, r25
    105c:	80 93 df 03 	sts	0x03DF, r24
    1060:	82 e0       	ldi	r24, 0x02	; 2
    1062:	0e 94 e1 07 	call	0xfc2	; 0xfc2 <oled_set_adressing_mode>
    1066:	ce 01       	movw	r24, r28
    1068:	8f 70       	andi	r24, 0x0F	; 15
    106a:	90 78       	andi	r25, 0x80	; 128
    106c:	99 23       	and	r25, r25
    106e:	24 f4       	brge	.+8      	; 0x1078 <oled_goto_column+0x2c>
    1070:	01 97       	sbiw	r24, 0x01	; 1
    1072:	80 6f       	ori	r24, 0xF0	; 240
    1074:	9f 6f       	ori	r25, 0xFF	; 255
    1076:	01 96       	adiw	r24, 0x01	; 1
    1078:	e0 91 25 01 	lds	r30, 0x0125
    107c:	f0 91 26 01 	lds	r31, 0x0126
    1080:	80 83       	st	Z, r24
    1082:	ce 01       	movw	r24, r28
    1084:	dd 23       	and	r29, r29
    1086:	0c f4       	brge	.+2      	; 0x108a <oled_goto_column+0x3e>
    1088:	0f 96       	adiw	r24, 0x0f	; 15
    108a:	95 95       	asr	r25
    108c:	87 95       	ror	r24
    108e:	95 95       	asr	r25
    1090:	87 95       	ror	r24
    1092:	95 95       	asr	r25
    1094:	87 95       	ror	r24
    1096:	95 95       	asr	r25
    1098:	87 95       	ror	r24
    109a:	80 5f       	subi	r24, 0xF0	; 240
    109c:	e0 91 25 01 	lds	r30, 0x0125
    10a0:	f0 91 26 01 	lds	r31, 0x0126
    10a4:	80 83       	st	Z, r24
    10a6:	80 e0       	ldi	r24, 0x00	; 0
    10a8:	0e 94 e1 07 	call	0xfc2	; 0xfc2 <oled_set_adressing_mode>
    10ac:	df 91       	pop	r29
    10ae:	cf 91       	pop	r28
    10b0:	08 95       	ret

000010b2 <oled_pos>:
    10b2:	cf 93       	push	r28
    10b4:	df 93       	push	r29
    10b6:	eb 01       	movw	r28, r22
    10b8:	0e 94 0d 08 	call	0x101a	; 0x101a <oled_goto_line>
    10bc:	ce 01       	movw	r24, r28
    10be:	0e 94 26 08 	call	0x104c	; 0x104c <oled_goto_column>
    10c2:	df 91       	pop	r29
    10c4:	cf 91       	pop	r28
    10c6:	08 95       	ret

000010c8 <oled_home>:
    10c8:	60 e0       	ldi	r22, 0x00	; 0
    10ca:	70 e0       	ldi	r23, 0x00	; 0
    10cc:	80 e0       	ldi	r24, 0x00	; 0
    10ce:	90 e0       	ldi	r25, 0x00	; 0
    10d0:	0e 94 59 08 	call	0x10b2	; 0x10b2 <oled_pos>
    10d4:	08 95       	ret

000010d6 <oled_clear_line>:
    10d6:	cf 93       	push	r28
    10d8:	df 93       	push	r29
    10da:	ec 01       	movw	r28, r24
    10dc:	60 e0       	ldi	r22, 0x00	; 0
    10de:	70 e0       	ldi	r23, 0x00	; 0
    10e0:	0e 94 59 08 	call	0x10b2	; 0x10b2 <oled_pos>
    10e4:	20 e8       	ldi	r18, 0x80	; 128
    10e6:	30 e0       	ldi	r19, 0x00	; 0
    10e8:	e0 91 23 01 	lds	r30, 0x0123
    10ec:	f0 91 24 01 	lds	r31, 0x0124
    10f0:	10 82       	st	Z, r1
    10f2:	21 50       	subi	r18, 0x01	; 1
    10f4:	31 09       	sbc	r19, r1
    10f6:	21 15       	cp	r18, r1
    10f8:	31 05       	cpc	r19, r1
    10fa:	b1 f7       	brne	.-20     	; 0x10e8 <oled_clear_line+0x12>
    10fc:	ce 01       	movw	r24, r28
    10fe:	0e 94 0d 08 	call	0x101a	; 0x101a <oled_goto_line>
    1102:	df 91       	pop	r29
    1104:	cf 91       	pop	r28
    1106:	08 95       	ret

00001108 <oled_reset>:
    1108:	cf 93       	push	r28
    110a:	df 93       	push	r29
    110c:	c0 e0       	ldi	r28, 0x00	; 0
    110e:	d0 e0       	ldi	r29, 0x00	; 0
    1110:	ce 01       	movw	r24, r28
    1112:	0e 94 6b 08 	call	0x10d6	; 0x10d6 <oled_clear_line>
    1116:	21 96       	adiw	r28, 0x01	; 1
    1118:	c8 30       	cpi	r28, 0x08	; 8
    111a:	d1 05       	cpc	r29, r1
    111c:	c9 f7       	brne	.-14     	; 0x1110 <oled_reset+0x8>
    111e:	0e 94 64 08 	call	0x10c8	; 0x10c8 <oled_home>
    1122:	df 91       	pop	r29
    1124:	cf 91       	pop	r28
    1126:	08 95       	ret

00001128 <oled_init>:
    1128:	e0 91 25 01 	lds	r30, 0x0125
    112c:	f0 91 26 01 	lds	r31, 0x0126
    1130:	8e ea       	ldi	r24, 0xAE	; 174
    1132:	80 83       	st	Z, r24
    1134:	e0 91 25 01 	lds	r30, 0x0125
    1138:	f0 91 26 01 	lds	r31, 0x0126
    113c:	81 ea       	ldi	r24, 0xA1	; 161
    113e:	80 83       	st	Z, r24
    1140:	e0 91 25 01 	lds	r30, 0x0125
    1144:	f0 91 26 01 	lds	r31, 0x0126
    1148:	8a ed       	ldi	r24, 0xDA	; 218
    114a:	80 83       	st	Z, r24
    114c:	e0 91 25 01 	lds	r30, 0x0125
    1150:	f0 91 26 01 	lds	r31, 0x0126
    1154:	82 e1       	ldi	r24, 0x12	; 18
    1156:	80 83       	st	Z, r24
    1158:	e0 91 25 01 	lds	r30, 0x0125
    115c:	f0 91 26 01 	lds	r31, 0x0126
    1160:	88 ec       	ldi	r24, 0xC8	; 200
    1162:	80 83       	st	Z, r24
    1164:	e0 91 25 01 	lds	r30, 0x0125
    1168:	f0 91 26 01 	lds	r31, 0x0126
    116c:	88 ea       	ldi	r24, 0xA8	; 168
    116e:	80 83       	st	Z, r24
    1170:	e0 91 25 01 	lds	r30, 0x0125
    1174:	f0 91 26 01 	lds	r31, 0x0126
    1178:	8f e3       	ldi	r24, 0x3F	; 63
    117a:	80 83       	st	Z, r24
    117c:	e0 91 25 01 	lds	r30, 0x0125
    1180:	f0 91 26 01 	lds	r31, 0x0126
    1184:	85 ed       	ldi	r24, 0xD5	; 213
    1186:	80 83       	st	Z, r24
    1188:	e0 91 25 01 	lds	r30, 0x0125
    118c:	f0 91 26 01 	lds	r31, 0x0126
    1190:	80 e8       	ldi	r24, 0x80	; 128
    1192:	80 83       	st	Z, r24
    1194:	e0 91 25 01 	lds	r30, 0x0125
    1198:	f0 91 26 01 	lds	r31, 0x0126
    119c:	81 e8       	ldi	r24, 0x81	; 129
    119e:	80 83       	st	Z, r24
    11a0:	e0 91 25 01 	lds	r30, 0x0125
    11a4:	f0 91 26 01 	lds	r31, 0x0126
    11a8:	80 e5       	ldi	r24, 0x50	; 80
    11aa:	80 83       	st	Z, r24
    11ac:	e0 91 25 01 	lds	r30, 0x0125
    11b0:	f0 91 26 01 	lds	r31, 0x0126
    11b4:	89 ed       	ldi	r24, 0xD9	; 217
    11b6:	80 83       	st	Z, r24
    11b8:	e0 91 25 01 	lds	r30, 0x0125
    11bc:	f0 91 26 01 	lds	r31, 0x0126
    11c0:	81 e2       	ldi	r24, 0x21	; 33
    11c2:	80 83       	st	Z, r24
    11c4:	80 e0       	ldi	r24, 0x00	; 0
    11c6:	0e 94 e1 07 	call	0xfc2	; 0xfc2 <oled_set_adressing_mode>
    11ca:	e0 91 25 01 	lds	r30, 0x0125
    11ce:	f0 91 26 01 	lds	r31, 0x0126
    11d2:	8b ed       	ldi	r24, 0xDB	; 219
    11d4:	80 83       	st	Z, r24
    11d6:	e0 91 25 01 	lds	r30, 0x0125
    11da:	f0 91 26 01 	lds	r31, 0x0126
    11de:	80 e3       	ldi	r24, 0x30	; 48
    11e0:	80 83       	st	Z, r24
    11e2:	e0 91 25 01 	lds	r30, 0x0125
    11e6:	f0 91 26 01 	lds	r31, 0x0126
    11ea:	8d ea       	ldi	r24, 0xAD	; 173
    11ec:	80 83       	st	Z, r24
    11ee:	e0 91 25 01 	lds	r30, 0x0125
    11f2:	f0 91 26 01 	lds	r31, 0x0126
    11f6:	10 82       	st	Z, r1
    11f8:	e0 91 25 01 	lds	r30, 0x0125
    11fc:	f0 91 26 01 	lds	r31, 0x0126
    1200:	84 ea       	ldi	r24, 0xA4	; 164
    1202:	80 83       	st	Z, r24
    1204:	e0 91 25 01 	lds	r30, 0x0125
    1208:	f0 91 26 01 	lds	r31, 0x0126
    120c:	86 ea       	ldi	r24, 0xA6	; 166
    120e:	80 83       	st	Z, r24
    1210:	e0 91 25 01 	lds	r30, 0x0125
    1214:	f0 91 26 01 	lds	r31, 0x0126
    1218:	8f ea       	ldi	r24, 0xAF	; 175
    121a:	80 83       	st	Z, r24
    121c:	0e 94 84 08 	call	0x1108	; 0x1108 <oled_reset>
    1220:	08 95       	ret

00001222 <new_menu>:
void set_first_child(menu* mymenu, menu* first_child) {
	mymenu->first_child = first_child;
}


menu* new_menu(char* name, menu* parent) {
    1222:	0f 93       	push	r16
    1224:	1f 93       	push	r17
    1226:	cf 93       	push	r28
    1228:	df 93       	push	r29
    122a:	8c 01       	movw	r16, r24
    122c:	eb 01       	movw	r28, r22
	menu* nextmenu = malloc(sizeof(menu));
    122e:	89 e0       	ldi	r24, 0x09	; 9
    1230:	90 e0       	ldi	r25, 0x00	; 0
    1232:	0e 94 fc 0a 	call	0x15f8	; 0x15f8 <malloc>
    1236:	fc 01       	movw	r30, r24
 	nextmenu->title = name;
    1238:	11 83       	std	Z+1, r17	; 0x01
    123a:	00 83       	st	Z, r16
	nextmenu->parent = parent;
    123c:	d4 83       	std	Z+4, r29	; 0x04
    123e:	c3 83       	std	Z+3, r28	; 0x03
 	nextmenu->right_sibling = NULL;
    1240:	10 86       	std	Z+8, r1	; 0x08
    1242:	17 82       	std	Z+7, r1	; 0x07
	nextmenu->first_child = NULL;
    1244:	16 82       	std	Z+6, r1	; 0x06
    1246:	15 82       	std	Z+5, r1	; 0x05
	return nextmenu;
}
    1248:	df 91       	pop	r29
    124a:	cf 91       	pop	r28
    124c:	1f 91       	pop	r17
    124e:	0f 91       	pop	r16
    1250:	08 95       	ret

00001252 <size_of_menu>:

int size_of_menu(menu* mymenu) {
	
	int menu_size = 0;
	
	mymenu = mymenu->first_child;
    1252:	dc 01       	movw	r26, r24
    1254:	15 96       	adiw	r26, 0x05	; 5
    1256:	ed 91       	ld	r30, X+
    1258:	fc 91       	ld	r31, X
    125a:	16 97       	sbiw	r26, 0x06	; 6
	if (mymenu == NULL) {
    125c:	30 97       	sbiw	r30, 0x00	; 0
    125e:	79 f0       	breq	.+30     	; 0x127e <size_of_menu+0x2c>
		return menu_size;
	}
	menu_size ++;
	while (mymenu->right_sibling != NULL) {
    1260:	07 80       	ldd	r0, Z+7	; 0x07
    1262:	f0 85       	ldd	r31, Z+8	; 0x08
    1264:	e0 2d       	mov	r30, r0
    1266:	30 97       	sbiw	r30, 0x00	; 0
    1268:	69 f0       	breq	.+26     	; 0x1284 <size_of_menu+0x32>
    126a:	21 e0       	ldi	r18, 0x01	; 1
    126c:	30 e0       	ldi	r19, 0x00	; 0
		mymenu = mymenu->right_sibling;
		menu_size++;
    126e:	2f 5f       	subi	r18, 0xFF	; 255
    1270:	3f 4f       	sbci	r19, 0xFF	; 255
	mymenu = mymenu->first_child;
	if (mymenu == NULL) {
		return menu_size;
	}
	menu_size ++;
	while (mymenu->right_sibling != NULL) {
    1272:	07 80       	ldd	r0, Z+7	; 0x07
    1274:	f0 85       	ldd	r31, Z+8	; 0x08
    1276:	e0 2d       	mov	r30, r0
    1278:	30 97       	sbiw	r30, 0x00	; 0
    127a:	c9 f7       	brne	.-14     	; 0x126e <size_of_menu+0x1c>
    127c:	06 c0       	rjmp	.+12     	; 0x128a <size_of_menu+0x38>
	
	int menu_size = 0;
	
	mymenu = mymenu->first_child;
	if (mymenu == NULL) {
		return menu_size;
    127e:	80 e0       	ldi	r24, 0x00	; 0
    1280:	90 e0       	ldi	r25, 0x00	; 0
    1282:	08 95       	ret
	}
	menu_size ++;
	while (mymenu->right_sibling != NULL) {
    1284:	81 e0       	ldi	r24, 0x01	; 1
    1286:	90 e0       	ldi	r25, 0x00	; 0
    1288:	08 95       	ret
		mymenu = mymenu->right_sibling;
		menu_size++;
    128a:	82 2f       	mov	r24, r18
    128c:	93 2f       	mov	r25, r19
	}
	return menu_size;
}
    128e:	08 95       	ret

00001290 <goto_menu>:
	return NONE;
}

void goto_menu() {
	int i = 0;
	menu* selected_menu = current_menu;
    1290:	e0 91 e3 03 	lds	r30, 0x03E3
    1294:	f0 91 e4 03 	lds	r31, 0x03E4
	if(current_menu->first_child != NULL){
    1298:	85 81       	ldd	r24, Z+5	; 0x05
    129a:	96 81       	ldd	r25, Z+6	; 0x06
    129c:	89 2b       	or	r24, r25
    129e:	b9 f0       	breq	.+46     	; 0x12ce <goto_menu+0x3e>
		
		selected_menu = current_menu->first_child;
    12a0:	05 80       	ldd	r0, Z+5	; 0x05
    12a2:	f6 81       	ldd	r31, Z+6	; 0x06
    12a4:	e0 2d       	mov	r30, r0
		for (i; i < current_line; i++)
    12a6:	80 91 43 01 	lds	r24, 0x0143
    12aa:	90 91 44 01 	lds	r25, 0x0144
    12ae:	18 16       	cp	r1, r24
    12b0:	19 06       	cpc	r1, r25
    12b2:	6c f4       	brge	.+26     	; 0x12ce <goto_menu+0x3e>
		oled_menu_print(current_menu);
	return NONE;
}

void goto_menu() {
	int i = 0;
    12b4:	80 e0       	ldi	r24, 0x00	; 0
    12b6:	90 e0       	ldi	r25, 0x00	; 0
	if(current_menu->first_child != NULL){
		
		selected_menu = current_menu->first_child;
		for (i; i < current_line; i++)
		{
			selected_menu = selected_menu->right_sibling;
    12b8:	07 80       	ldd	r0, Z+7	; 0x07
    12ba:	f0 85       	ldd	r31, Z+8	; 0x08
    12bc:	e0 2d       	mov	r30, r0
	int i = 0;
	menu* selected_menu = current_menu;
	if(current_menu->first_child != NULL){
		
		selected_menu = current_menu->first_child;
		for (i; i < current_line; i++)
    12be:	01 96       	adiw	r24, 0x01	; 1
    12c0:	20 91 43 01 	lds	r18, 0x0143
    12c4:	30 91 44 01 	lds	r19, 0x0144
    12c8:	82 17       	cp	r24, r18
    12ca:	93 07       	cpc	r25, r19
    12cc:	ac f3       	brlt	.-22     	; 0x12b8 <goto_menu+0x28>
		{
			selected_menu = selected_menu->right_sibling;
		}
	}
	current_menu = selected_menu;
    12ce:	f0 93 e4 03 	sts	0x03E4, r31
    12d2:	e0 93 e3 03 	sts	0x03E3, r30
    12d6:	08 95       	ret

000012d8 <oled_menu_print>:
}
void oled_menu_print(menu* mymenu){
    12d8:	0f 93       	push	r16
    12da:	1f 93       	push	r17
    12dc:	cf 93       	push	r28
    12de:	df 93       	push	r29
    12e0:	ec 01       	movw	r28, r24
	oled_reset(); 
    12e2:	0e 94 84 08 	call	0x1108	; 0x1108 <oled_reset>
	
	current_menu_size = size_of_menu(mymenu);
    12e6:	ce 01       	movw	r24, r28
    12e8:	0e 94 29 09 	call	0x1252	; 0x1252 <size_of_menu>
    12ec:	90 93 e6 03 	sts	0x03E6, r25
    12f0:	80 93 e5 03 	sts	0x03E5, r24
	mymenu = mymenu->first_child;
    12f4:	0d 81       	ldd	r16, Y+5	; 0x05
    12f6:	1e 81       	ldd	r17, Y+6	; 0x06
	for(int i = 0; i < current_menu_size; i++){
    12f8:	80 91 e5 03 	lds	r24, 0x03E5
    12fc:	90 91 e6 03 	lds	r25, 0x03E6
    1300:	18 16       	cp	r1, r24
    1302:	19 06       	cpc	r1, r25
    1304:	64 f5       	brge	.+88     	; 0x135e <oled_menu_print+0x86>
    1306:	c0 e0       	ldi	r28, 0x00	; 0
    1308:	d0 e0       	ldi	r29, 0x00	; 0
		oled_pos(i,0);
    130a:	60 e0       	ldi	r22, 0x00	; 0
    130c:	70 e0       	ldi	r23, 0x00	; 0
    130e:	ce 01       	movw	r24, r28
    1310:	0e 94 59 08 	call	0x10b2	; 0x10b2 <oled_pos>
		if(current_line == i){
    1314:	80 91 43 01 	lds	r24, 0x0143
    1318:	90 91 44 01 	lds	r25, 0x0144
    131c:	8c 17       	cp	r24, r28
    131e:	9d 07       	cpc	r25, r29
    1320:	51 f4       	brne	.+20     	; 0x1336 <oled_menu_print+0x5e>
			oled_inv_printf(mymenu->title);
    1322:	f8 01       	movw	r30, r16
    1324:	81 81       	ldd	r24, Z+1	; 0x01
    1326:	8f 93       	push	r24
    1328:	80 81       	ld	r24, Z
    132a:	8f 93       	push	r24
    132c:	0e 94 fd 07 	call	0xffa	; 0xffa <oled_inv_printf>
    1330:	0f 90       	pop	r0
    1332:	0f 90       	pop	r0
    1334:	09 c0       	rjmp	.+18     	; 0x1348 <oled_menu_print+0x70>
		}
		else{
			oled_printf(mymenu->title);
    1336:	f8 01       	movw	r30, r16
    1338:	81 81       	ldd	r24, Z+1	; 0x01
    133a:	8f 93       	push	r24
    133c:	80 81       	ld	r24, Z
    133e:	8f 93       	push	r24
    1340:	0e 94 ed 07 	call	0xfda	; 0xfda <oled_printf>
    1344:	0f 90       	pop	r0
    1346:	0f 90       	pop	r0
		}
		mymenu = mymenu->right_sibling;
    1348:	f8 01       	movw	r30, r16
    134a:	07 81       	ldd	r16, Z+7	; 0x07
    134c:	10 85       	ldd	r17, Z+8	; 0x08
void oled_menu_print(menu* mymenu){
	oled_reset(); 
	
	current_menu_size = size_of_menu(mymenu);
	mymenu = mymenu->first_child;
	for(int i = 0; i < current_menu_size; i++){
    134e:	21 96       	adiw	r28, 0x01	; 1
    1350:	80 91 e5 03 	lds	r24, 0x03E5
    1354:	90 91 e6 03 	lds	r25, 0x03E6
    1358:	c8 17       	cp	r28, r24
    135a:	d9 07       	cpc	r29, r25
    135c:	b4 f2       	brlt	.-84     	; 0x130a <oled_menu_print+0x32>
		}
		mymenu = mymenu->right_sibling;
	}
	mymenu = mymenu->parent;
	
}
    135e:	df 91       	pop	r29
    1360:	cf 91       	pop	r28
    1362:	1f 91       	pop	r17
    1364:	0f 91       	pop	r16
    1366:	08 95       	ret

00001368 <oled_menu_init>:
		menu_size++;
	}
	return menu_size;
}

menu* oled_menu_init(void) {
    1368:	8f 92       	push	r8
    136a:	9f 92       	push	r9
    136c:	af 92       	push	r10
    136e:	bf 92       	push	r11
    1370:	cf 92       	push	r12
    1372:	df 92       	push	r13
    1374:	ef 92       	push	r14
    1376:	ff 92       	push	r15
    1378:	0f 93       	push	r16
    137a:	1f 93       	push	r17
    137c:	cf 93       	push	r28
    137e:	df 93       	push	r29
	print = 1;
    1380:	81 e0       	ldi	r24, 0x01	; 1
    1382:	90 e0       	ldi	r25, 0x00	; 0
    1384:	90 93 e2 03 	sts	0x03E2, r25
    1388:	80 93 e1 03 	sts	0x03E1, r24
	menu* main_menu = new_menu("Main Menu", NULL);
    138c:	60 e0       	ldi	r22, 0x00	; 0
    138e:	70 e0       	ldi	r23, 0x00	; 0
    1390:	84 e7       	ldi	r24, 0x74	; 116
    1392:	93 e0       	ldi	r25, 0x03	; 3
    1394:	0e 94 11 09 	call	0x1222	; 0x1222 <new_menu>
    1398:	ec 01       	movw	r28, r24
	menu* play_game = new_menu("Play Game", main_menu);
    139a:	bc 01       	movw	r22, r24
    139c:	8e e7       	ldi	r24, 0x7E	; 126
    139e:	93 e0       	ldi	r25, 0x03	; 3
    13a0:	0e 94 11 09 	call	0x1222	; 0x1222 <new_menu>
    13a4:	8c 01       	movw	r16, r24
	menu* highscores = new_menu("Highscores", main_menu);
    13a6:	be 01       	movw	r22, r28
    13a8:	88 e8       	ldi	r24, 0x88	; 136
    13aa:	93 e0       	ldi	r25, 0x03	; 3
    13ac:	0e 94 11 09 	call	0x1222	; 0x1222 <new_menu>
    13b0:	4c 01       	movw	r8, r24
	menu* settings = new_menu("Settings", main_menu);
    13b2:	be 01       	movw	r22, r28
    13b4:	83 e9       	ldi	r24, 0x93	; 147
    13b6:	93 e0       	ldi	r25, 0x03	; 3
    13b8:	0e 94 11 09 	call	0x1222	; 0x1222 <new_menu>
    13bc:	5c 01       	movw	r10, r24
	menu* singelP = new_menu("Singel Player", play_game);
    13be:	b8 01       	movw	r22, r16
    13c0:	8c e9       	ldi	r24, 0x9C	; 156
    13c2:	93 e0       	ldi	r25, 0x03	; 3
    13c4:	0e 94 11 09 	call	0x1222	; 0x1222 <new_menu>
    13c8:	7c 01       	movw	r14, r24
	menu* multiP = new_menu("Multi Player", play_game);
    13ca:	b8 01       	movw	r22, r16
    13cc:	8a ea       	ldi	r24, 0xAA	; 170
    13ce:	93 e0       	ldi	r25, 0x03	; 3
    13d0:	0e 94 11 09 	call	0x1222	; 0x1222 <new_menu>
    13d4:	6c 01       	movw	r12, r24
	
	
	current_menu = main_menu;
    13d6:	d0 93 e4 03 	sts	0x03E4, r29
    13da:	c0 93 e3 03 	sts	0x03E3, r28
	current_menu_size = size_of_menu(current_menu);
    13de:	ce 01       	movw	r24, r28
    13e0:	0e 94 29 09 	call	0x1252	; 0x1252 <size_of_menu>
    13e4:	90 93 e6 03 	sts	0x03E6, r25
    13e8:	80 93 e5 03 	sts	0x03E5, r24
	oled_menu_print(current_menu);
    13ec:	ce 01       	movw	r24, r28
    13ee:	0e 94 6c 09 	call	0x12d8	; 0x12d8 <oled_menu_print>
	mymenu->right_sibling = right_sibling;
}


void set_first_child(menu* mymenu, menu* first_child) {
	mymenu->first_child = first_child;
    13f2:	1e 83       	std	Y+6, r17	; 0x06
    13f4:	0d 83       	std	Y+5, r16	; 0x05
volatile int current_menu_size;
volatile int print;


void set_right_sibling(menu* mymenu, menu* right_sibling) {
	mymenu->right_sibling = right_sibling;
    13f6:	f8 01       	movw	r30, r16
    13f8:	90 86       	std	Z+8, r9	; 0x08
    13fa:	87 82       	std	Z+7, r8	; 0x07
    13fc:	f4 01       	movw	r30, r8
    13fe:	b0 86       	std	Z+8, r11	; 0x08
    1400:	a7 82       	std	Z+7, r10	; 0x07
}


void set_first_child(menu* mymenu, menu* first_child) {
	mymenu->first_child = first_child;
    1402:	f8 01       	movw	r30, r16
    1404:	f6 82       	std	Z+6, r15	; 0x06
    1406:	e5 82       	std	Z+5, r14	; 0x05
volatile int current_menu_size;
volatile int print;


void set_right_sibling(menu* mymenu, menu* right_sibling) {
	mymenu->right_sibling = right_sibling;
    1408:	f7 01       	movw	r30, r14
    140a:	d0 86       	std	Z+8, r13	; 0x08
    140c:	c7 82       	std	Z+7, r12	; 0x07
	set_right_sibling(singelP, multiP);
	//set_first_child(highscores, TestH);
	//set_right_sibling(Test1,Test2);
	//set_first_child(Test1, Test2);
	return current_menu;
}
    140e:	80 91 e3 03 	lds	r24, 0x03E3
    1412:	90 91 e4 03 	lds	r25, 0x03E4
    1416:	df 91       	pop	r29
    1418:	cf 91       	pop	r28
    141a:	1f 91       	pop	r17
    141c:	0f 91       	pop	r16
    141e:	ff 90       	pop	r15
    1420:	ef 90       	pop	r14
    1422:	df 90       	pop	r13
    1424:	cf 90       	pop	r12
    1426:	bf 90       	pop	r11
    1428:	af 90       	pop	r10
    142a:	9f 90       	pop	r9
    142c:	8f 90       	pop	r8
    142e:	08 95       	ret

00001430 <oled_menu_select>:


menu_option oled_menu_select(){
    1430:	1f 93       	push	r17
    1432:	cf 93       	push	r28
    1434:	df 93       	push	r29
    1436:	00 d0       	rcall	.+0      	; 0x1438 <oled_menu_select+0x8>
    1438:	00 d0       	rcall	.+0      	; 0x143a <oled_menu_select+0xa>
    143a:	1f 92       	push	r1
    143c:	cd b7       	in	r28, 0x3d	; 61
    143e:	de b7       	in	r29, 0x3e	; 62

	JoystickDir direction = joystickPos().Dir;
    1440:	0e 94 9a 05 	call	0xb34	; 0xb34 <joystickPos>
    1444:	29 83       	std	Y+1, r18	; 0x01
    1446:	3a 83       	std	Y+2, r19	; 0x02
    1448:	4b 83       	std	Y+3, r20	; 0x03
    144a:	5c 83       	std	Y+4, r21	; 0x04
    144c:	6d 83       	std	Y+5, r22	; 0x05
    144e:	16 2f       	mov	r17, r22
	current_menu_size = size_of_menu(current_menu);
    1450:	80 91 e3 03 	lds	r24, 0x03E3
    1454:	90 91 e4 03 	lds	r25, 0x03E4
    1458:	0e 94 29 09 	call	0x1252	; 0x1252 <size_of_menu>
    145c:	90 93 e6 03 	sts	0x03E6, r25
    1460:	80 93 e5 03 	sts	0x03E5, r24
	
	if(direction == UP){
    1464:	12 30       	cpi	r17, 0x02	; 2
    1466:	51 f4       	brne	.+20     	; 0x147c <oled_menu_select+0x4c>
		current_line--;
    1468:	80 91 43 01 	lds	r24, 0x0143
    146c:	90 91 44 01 	lds	r25, 0x0144
    1470:	01 97       	sbiw	r24, 0x01	; 1
    1472:	90 93 44 01 	sts	0x0144, r25
    1476:	80 93 43 01 	sts	0x0143, r24
    147a:	0b c0       	rjmp	.+22     	; 0x1492 <oled_menu_select+0x62>
	}
	if(direction == DOWN){
    147c:	13 30       	cpi	r17, 0x03	; 3
    147e:	49 f4       	brne	.+18     	; 0x1492 <oled_menu_select+0x62>
		current_line++;
    1480:	80 91 43 01 	lds	r24, 0x0143
    1484:	90 91 44 01 	lds	r25, 0x0144
    1488:	01 96       	adiw	r24, 0x01	; 1
    148a:	90 93 44 01 	sts	0x0144, r25
    148e:	80 93 43 01 	sts	0x0143, r24
	}
	if(current_line > current_menu_size-1){
    1492:	20 91 e5 03 	lds	r18, 0x03E5
    1496:	30 91 e6 03 	lds	r19, 0x03E6
    149a:	80 91 43 01 	lds	r24, 0x0143
    149e:	90 91 44 01 	lds	r25, 0x0144
    14a2:	21 50       	subi	r18, 0x01	; 1
    14a4:	31 09       	sbc	r19, r1
    14a6:	28 17       	cp	r18, r24
    14a8:	39 07       	cpc	r19, r25
    14aa:	4c f4       	brge	.+18     	; 0x14be <oled_menu_select+0x8e>
		current_line = current_menu_size-1;
    14ac:	80 91 e5 03 	lds	r24, 0x03E5
    14b0:	90 91 e6 03 	lds	r25, 0x03E6
    14b4:	01 97       	sbiw	r24, 0x01	; 1
    14b6:	90 93 44 01 	sts	0x0144, r25
    14ba:	80 93 43 01 	sts	0x0143, r24
	}
	if(current_line < 0){
    14be:	80 91 43 01 	lds	r24, 0x0143
    14c2:	90 91 44 01 	lds	r25, 0x0144
    14c6:	99 23       	and	r25, r25
    14c8:	24 f4       	brge	.+8      	; 0x14d2 <oled_menu_select+0xa2>
		current_line = 0;
    14ca:	10 92 44 01 	sts	0x0144, r1
    14ce:	10 92 43 01 	sts	0x0143, r1
	}
	if (direction == RIGHT) {
    14d2:	11 30       	cpi	r17, 0x01	; 1
    14d4:	b1 f4       	brne	.+44     	; 0x1502 <oled_menu_select+0xd2>
		goto_menu();
    14d6:	0e 94 48 09 	call	0x1290	; 0x1290 <goto_menu>
		if (current_menu->title == "Singel Player"){
    14da:	e0 91 e3 03 	lds	r30, 0x03E3
    14de:	f0 91 e4 03 	lds	r31, 0x03E4
    14e2:	80 81       	ld	r24, Z
    14e4:	91 81       	ldd	r25, Z+1	; 0x01
    14e6:	8c 59       	subi	r24, 0x9C	; 156
    14e8:	93 40       	sbci	r25, 0x03	; 3
    14ea:	19 f1       	breq	.+70     	; 0x1532 <oled_menu_select+0x102>
			return SinglePlayer;
		}
		else if (current_menu->title == "Highscores"){
    14ec:	80 81       	ld	r24, Z
    14ee:	91 81       	ldd	r25, Z+1	; 0x01
    14f0:	88 58       	subi	r24, 0x88	; 136
    14f2:	93 40       	sbci	r25, 0x03	; 3
    14f4:	01 f1       	breq	.+64     	; 0x1536 <oled_menu_select+0x106>
			return Highscore;
		}
		//else if (current_menu->title == "Settings"){
			//return;
		//}
		else if (current_menu->title == "Multi Player"){
    14f6:	80 81       	ld	r24, Z
    14f8:	91 81       	ldd	r25, Z+1	; 0x01
    14fa:	8a 5a       	subi	r24, 0xAA	; 170
    14fc:	93 40       	sbci	r25, 0x03	; 3
    14fe:	89 f4       	brne	.+34     	; 0x1522 <oled_menu_select+0xf2>
    1500:	1c c0       	rjmp	.+56     	; 0x153a <oled_menu_select+0x10a>
		//else if (current_menu->title == "Underworld"){
			//return UW;
		//}
		
	}
	if (direction == LEFT) {
    1502:	11 11       	cpse	r17, r1
    1504:	0e c0       	rjmp	.+28     	; 0x1522 <oled_menu_select+0xf2>
		if(current_menu->parent != NULL){
    1506:	e0 91 e3 03 	lds	r30, 0x03E3
    150a:	f0 91 e4 03 	lds	r31, 0x03E4
    150e:	83 81       	ldd	r24, Z+3	; 0x03
    1510:	94 81       	ldd	r25, Z+4	; 0x04
    1512:	89 2b       	or	r24, r25
    1514:	31 f0       	breq	.+12     	; 0x1522 <oled_menu_select+0xf2>
		current_menu = current_menu->parent;
    1516:	83 81       	ldd	r24, Z+3	; 0x03
    1518:	94 81       	ldd	r25, Z+4	; 0x04
    151a:	90 93 e4 03 	sts	0x03E4, r25
    151e:	80 93 e3 03 	sts	0x03E3, r24
		}
	}
		oled_menu_print(current_menu);
    1522:	80 91 e3 03 	lds	r24, 0x03E3
    1526:	90 91 e4 03 	lds	r25, 0x03E4
    152a:	0e 94 6c 09 	call	0x12d8	; 0x12d8 <oled_menu_print>
	return NONE;
    152e:	87 e0       	ldi	r24, 0x07	; 7
    1530:	05 c0       	rjmp	.+10     	; 0x153c <oled_menu_select+0x10c>
		current_line = 0;
	}
	if (direction == RIGHT) {
		goto_menu();
		if (current_menu->title == "Singel Player"){
			return SinglePlayer;
    1532:	80 e0       	ldi	r24, 0x00	; 0
    1534:	03 c0       	rjmp	.+6      	; 0x153c <oled_menu_select+0x10c>
		}
		else if (current_menu->title == "Highscores"){
			return Highscore;
    1536:	86 e0       	ldi	r24, 0x06	; 6
    1538:	01 c0       	rjmp	.+2      	; 0x153c <oled_menu_select+0x10c>
		}
		//else if (current_menu->title == "Settings"){
			//return;
		//}
		else if (current_menu->title == "Multi Player"){
			return Multiplayer;
    153a:	85 e0       	ldi	r24, 0x05	; 5
		current_menu = current_menu->parent;
		}
	}
		oled_menu_print(current_menu);
	return NONE;
}
    153c:	0f 90       	pop	r0
    153e:	0f 90       	pop	r0
    1540:	0f 90       	pop	r0
    1542:	0f 90       	pop	r0
    1544:	0f 90       	pop	r0
    1546:	df 91       	pop	r29
    1548:	cf 91       	pop	r28
    154a:	1f 91       	pop	r17
    154c:	08 95       	ret

0000154e <slider_position>:
 *  Author: juliessk
 */ 
#include "slider.h"


slider_str slider_position(void){
    154e:	cf 93       	push	r28
	slider_str sliderposition;
	ADC_start_read(CHANNEL3);
    1550:	82 e0       	ldi	r24, 0x02	; 2
    1552:	0e 94 fe 01 	call	0x3fc	; 0x3fc <ADC_start_read>
    1556:	82 e4       	ldi	r24, 0x42	; 66
    1558:	8a 95       	dec	r24
    155a:	f1 f7       	brne	.-4      	; 0x1558 <slider_position+0xa>
    155c:	00 c0       	rjmp	.+0      	; 0x155e <slider_position+0x10>
	_delay_us(200);
	sliderposition.L = get_ADC_data();
    155e:	0e 94 f8 01 	call	0x3f0	; 0x3f0 <get_ADC_data>
    1562:	c8 2f       	mov	r28, r24
	ADC_start_read(CHANNEL4);
    1564:	83 e0       	ldi	r24, 0x03	; 3
    1566:	0e 94 fe 01 	call	0x3fc	; 0x3fc <ADC_start_read>
    156a:	82 e4       	ldi	r24, 0x42	; 66
    156c:	8a 95       	dec	r24
    156e:	f1 f7       	brne	.-4      	; 0x156c <slider_position+0x1e>
    1570:	00 c0       	rjmp	.+0      	; 0x1572 <slider_position+0x24>
	_delay_us(200);
	sliderposition.R =  get_ADC_data();
    1572:	0e 94 f8 01 	call	0x3f0	; 0x3f0 <get_ADC_data>
    1576:	98 2f       	mov	r25, r24
	
	return sliderposition;
}
    1578:	8c 2f       	mov	r24, r28
    157a:	cf 91       	pop	r28
    157c:	08 95       	ret

0000157e <slider_left_button>:
	}
	return 0;
}

int slider_left_button(void){
	if((PINB & 0b00000100) != 0){ //PB2
    157e:	86 b3       	in	r24, 0x16	; 22
		return 1;
	}
	return 0;
}
    1580:	82 fb       	bst	r24, 2
    1582:	88 27       	eor	r24, r24
    1584:	80 f9       	bld	r24, 0
    1586:	90 e0       	ldi	r25, 0x00	; 0
    1588:	08 95       	ret

0000158a <SPI_init>:
    158a:	80 eb       	ldi	r24, 0xB0	; 176
    158c:	87 bb       	out	0x17, r24	; 23
    158e:	81 e5       	ldi	r24, 0x51	; 81
    1590:	8d b9       	out	0x0d, r24	; 13
    1592:	c4 9a       	sbi	0x18, 4	; 24
    1594:	08 95       	ret

00001596 <SPI_write>:
    1596:	8f b9       	out	0x0f, r24	; 15
    1598:	77 9b       	sbis	0x0e, 7	; 14
    159a:	fe cf       	rjmp	.-4      	; 0x1598 <SPI_write+0x2>
    159c:	08 95       	ret

0000159e <SPI_read>:
    159e:	1f b8       	out	0x0f, r1	; 15
    15a0:	77 9b       	sbis	0x0e, 7	; 14
    15a2:	fe cf       	rjmp	.-4      	; 0x15a0 <SPI_read+0x2>
    15a4:	8f b1       	in	r24, 0x0f	; 15
    15a6:	08 95       	ret

000015a8 <__divmodhi4>:
    15a8:	97 fb       	bst	r25, 7
    15aa:	07 2e       	mov	r0, r23
    15ac:	16 f4       	brtc	.+4      	; 0x15b2 <__divmodhi4+0xa>
    15ae:	00 94       	com	r0
    15b0:	07 d0       	rcall	.+14     	; 0x15c0 <__divmodhi4_neg1>
    15b2:	77 fd       	sbrc	r23, 7
    15b4:	09 d0       	rcall	.+18     	; 0x15c8 <__divmodhi4_neg2>
    15b6:	0e 94 e8 0a 	call	0x15d0	; 0x15d0 <__udivmodhi4>
    15ba:	07 fc       	sbrc	r0, 7
    15bc:	05 d0       	rcall	.+10     	; 0x15c8 <__divmodhi4_neg2>
    15be:	3e f4       	brtc	.+14     	; 0x15ce <__divmodhi4_exit>

000015c0 <__divmodhi4_neg1>:
    15c0:	90 95       	com	r25
    15c2:	81 95       	neg	r24
    15c4:	9f 4f       	sbci	r25, 0xFF	; 255
    15c6:	08 95       	ret

000015c8 <__divmodhi4_neg2>:
    15c8:	70 95       	com	r23
    15ca:	61 95       	neg	r22
    15cc:	7f 4f       	sbci	r23, 0xFF	; 255

000015ce <__divmodhi4_exit>:
    15ce:	08 95       	ret

000015d0 <__udivmodhi4>:
    15d0:	aa 1b       	sub	r26, r26
    15d2:	bb 1b       	sub	r27, r27
    15d4:	51 e1       	ldi	r21, 0x11	; 17
    15d6:	07 c0       	rjmp	.+14     	; 0x15e6 <__udivmodhi4_ep>

000015d8 <__udivmodhi4_loop>:
    15d8:	aa 1f       	adc	r26, r26
    15da:	bb 1f       	adc	r27, r27
    15dc:	a6 17       	cp	r26, r22
    15de:	b7 07       	cpc	r27, r23
    15e0:	10 f0       	brcs	.+4      	; 0x15e6 <__udivmodhi4_ep>
    15e2:	a6 1b       	sub	r26, r22
    15e4:	b7 0b       	sbc	r27, r23

000015e6 <__udivmodhi4_ep>:
    15e6:	88 1f       	adc	r24, r24
    15e8:	99 1f       	adc	r25, r25
    15ea:	5a 95       	dec	r21
    15ec:	a9 f7       	brne	.-22     	; 0x15d8 <__udivmodhi4_loop>
    15ee:	80 95       	com	r24
    15f0:	90 95       	com	r25
    15f2:	bc 01       	movw	r22, r24
    15f4:	cd 01       	movw	r24, r26
    15f6:	08 95       	ret

000015f8 <malloc>:
    15f8:	cf 93       	push	r28
    15fa:	df 93       	push	r29
    15fc:	82 30       	cpi	r24, 0x02	; 2
    15fe:	91 05       	cpc	r25, r1
    1600:	10 f4       	brcc	.+4      	; 0x1606 <malloc+0xe>
    1602:	82 e0       	ldi	r24, 0x02	; 2
    1604:	90 e0       	ldi	r25, 0x00	; 0
    1606:	e0 91 e9 03 	lds	r30, 0x03E9
    160a:	f0 91 ea 03 	lds	r31, 0x03EA
    160e:	20 e0       	ldi	r18, 0x00	; 0
    1610:	30 e0       	ldi	r19, 0x00	; 0
    1612:	a0 e0       	ldi	r26, 0x00	; 0
    1614:	b0 e0       	ldi	r27, 0x00	; 0
    1616:	30 97       	sbiw	r30, 0x00	; 0
    1618:	39 f1       	breq	.+78     	; 0x1668 <malloc+0x70>
    161a:	40 81       	ld	r20, Z
    161c:	51 81       	ldd	r21, Z+1	; 0x01
    161e:	48 17       	cp	r20, r24
    1620:	59 07       	cpc	r21, r25
    1622:	b8 f0       	brcs	.+46     	; 0x1652 <malloc+0x5a>
    1624:	48 17       	cp	r20, r24
    1626:	59 07       	cpc	r21, r25
    1628:	71 f4       	brne	.+28     	; 0x1646 <malloc+0x4e>
    162a:	82 81       	ldd	r24, Z+2	; 0x02
    162c:	93 81       	ldd	r25, Z+3	; 0x03
    162e:	10 97       	sbiw	r26, 0x00	; 0
    1630:	29 f0       	breq	.+10     	; 0x163c <malloc+0x44>
    1632:	13 96       	adiw	r26, 0x03	; 3
    1634:	9c 93       	st	X, r25
    1636:	8e 93       	st	-X, r24
    1638:	12 97       	sbiw	r26, 0x02	; 2
    163a:	2c c0       	rjmp	.+88     	; 0x1694 <malloc+0x9c>
    163c:	90 93 ea 03 	sts	0x03EA, r25
    1640:	80 93 e9 03 	sts	0x03E9, r24
    1644:	27 c0       	rjmp	.+78     	; 0x1694 <malloc+0x9c>
    1646:	21 15       	cp	r18, r1
    1648:	31 05       	cpc	r19, r1
    164a:	31 f0       	breq	.+12     	; 0x1658 <malloc+0x60>
    164c:	42 17       	cp	r20, r18
    164e:	53 07       	cpc	r21, r19
    1650:	18 f0       	brcs	.+6      	; 0x1658 <malloc+0x60>
    1652:	a9 01       	movw	r20, r18
    1654:	db 01       	movw	r26, r22
    1656:	01 c0       	rjmp	.+2      	; 0x165a <malloc+0x62>
    1658:	ef 01       	movw	r28, r30
    165a:	9a 01       	movw	r18, r20
    165c:	bd 01       	movw	r22, r26
    165e:	df 01       	movw	r26, r30
    1660:	02 80       	ldd	r0, Z+2	; 0x02
    1662:	f3 81       	ldd	r31, Z+3	; 0x03
    1664:	e0 2d       	mov	r30, r0
    1666:	d7 cf       	rjmp	.-82     	; 0x1616 <malloc+0x1e>
    1668:	21 15       	cp	r18, r1
    166a:	31 05       	cpc	r19, r1
    166c:	f9 f0       	breq	.+62     	; 0x16ac <malloc+0xb4>
    166e:	28 1b       	sub	r18, r24
    1670:	39 0b       	sbc	r19, r25
    1672:	24 30       	cpi	r18, 0x04	; 4
    1674:	31 05       	cpc	r19, r1
    1676:	80 f4       	brcc	.+32     	; 0x1698 <malloc+0xa0>
    1678:	8a 81       	ldd	r24, Y+2	; 0x02
    167a:	9b 81       	ldd	r25, Y+3	; 0x03
    167c:	61 15       	cp	r22, r1
    167e:	71 05       	cpc	r23, r1
    1680:	21 f0       	breq	.+8      	; 0x168a <malloc+0x92>
    1682:	fb 01       	movw	r30, r22
    1684:	93 83       	std	Z+3, r25	; 0x03
    1686:	82 83       	std	Z+2, r24	; 0x02
    1688:	04 c0       	rjmp	.+8      	; 0x1692 <malloc+0x9a>
    168a:	90 93 ea 03 	sts	0x03EA, r25
    168e:	80 93 e9 03 	sts	0x03E9, r24
    1692:	fe 01       	movw	r30, r28
    1694:	32 96       	adiw	r30, 0x02	; 2
    1696:	44 c0       	rjmp	.+136    	; 0x1720 <malloc+0x128>
    1698:	fe 01       	movw	r30, r28
    169a:	e2 0f       	add	r30, r18
    169c:	f3 1f       	adc	r31, r19
    169e:	81 93       	st	Z+, r24
    16a0:	91 93       	st	Z+, r25
    16a2:	22 50       	subi	r18, 0x02	; 2
    16a4:	31 09       	sbc	r19, r1
    16a6:	39 83       	std	Y+1, r19	; 0x01
    16a8:	28 83       	st	Y, r18
    16aa:	3a c0       	rjmp	.+116    	; 0x1720 <malloc+0x128>
    16ac:	20 91 e7 03 	lds	r18, 0x03E7
    16b0:	30 91 e8 03 	lds	r19, 0x03E8
    16b4:	23 2b       	or	r18, r19
    16b6:	41 f4       	brne	.+16     	; 0x16c8 <malloc+0xd0>
    16b8:	20 91 02 01 	lds	r18, 0x0102
    16bc:	30 91 03 01 	lds	r19, 0x0103
    16c0:	30 93 e8 03 	sts	0x03E8, r19
    16c4:	20 93 e7 03 	sts	0x03E7, r18
    16c8:	20 91 00 01 	lds	r18, 0x0100
    16cc:	30 91 01 01 	lds	r19, 0x0101
    16d0:	21 15       	cp	r18, r1
    16d2:	31 05       	cpc	r19, r1
    16d4:	41 f4       	brne	.+16     	; 0x16e6 <malloc+0xee>
    16d6:	2d b7       	in	r18, 0x3d	; 61
    16d8:	3e b7       	in	r19, 0x3e	; 62
    16da:	40 91 04 01 	lds	r20, 0x0104
    16de:	50 91 05 01 	lds	r21, 0x0105
    16e2:	24 1b       	sub	r18, r20
    16e4:	35 0b       	sbc	r19, r21
    16e6:	e0 91 e7 03 	lds	r30, 0x03E7
    16ea:	f0 91 e8 03 	lds	r31, 0x03E8
    16ee:	e2 17       	cp	r30, r18
    16f0:	f3 07       	cpc	r31, r19
    16f2:	a0 f4       	brcc	.+40     	; 0x171c <malloc+0x124>
    16f4:	2e 1b       	sub	r18, r30
    16f6:	3f 0b       	sbc	r19, r31
    16f8:	28 17       	cp	r18, r24
    16fa:	39 07       	cpc	r19, r25
    16fc:	78 f0       	brcs	.+30     	; 0x171c <malloc+0x124>
    16fe:	ac 01       	movw	r20, r24
    1700:	4e 5f       	subi	r20, 0xFE	; 254
    1702:	5f 4f       	sbci	r21, 0xFF	; 255
    1704:	24 17       	cp	r18, r20
    1706:	35 07       	cpc	r19, r21
    1708:	48 f0       	brcs	.+18     	; 0x171c <malloc+0x124>
    170a:	4e 0f       	add	r20, r30
    170c:	5f 1f       	adc	r21, r31
    170e:	50 93 e8 03 	sts	0x03E8, r21
    1712:	40 93 e7 03 	sts	0x03E7, r20
    1716:	81 93       	st	Z+, r24
    1718:	91 93       	st	Z+, r25
    171a:	02 c0       	rjmp	.+4      	; 0x1720 <malloc+0x128>
    171c:	e0 e0       	ldi	r30, 0x00	; 0
    171e:	f0 e0       	ldi	r31, 0x00	; 0
    1720:	cf 01       	movw	r24, r30
    1722:	df 91       	pop	r29
    1724:	cf 91       	pop	r28
    1726:	08 95       	ret

00001728 <free>:
    1728:	cf 93       	push	r28
    172a:	df 93       	push	r29
    172c:	00 97       	sbiw	r24, 0x00	; 0
    172e:	09 f4       	brne	.+2      	; 0x1732 <free+0xa>
    1730:	87 c0       	rjmp	.+270    	; 0x1840 <free+0x118>
    1732:	fc 01       	movw	r30, r24
    1734:	32 97       	sbiw	r30, 0x02	; 2
    1736:	13 82       	std	Z+3, r1	; 0x03
    1738:	12 82       	std	Z+2, r1	; 0x02
    173a:	c0 91 e9 03 	lds	r28, 0x03E9
    173e:	d0 91 ea 03 	lds	r29, 0x03EA
    1742:	20 97       	sbiw	r28, 0x00	; 0
    1744:	81 f4       	brne	.+32     	; 0x1766 <free+0x3e>
    1746:	20 81       	ld	r18, Z
    1748:	31 81       	ldd	r19, Z+1	; 0x01
    174a:	28 0f       	add	r18, r24
    174c:	39 1f       	adc	r19, r25
    174e:	80 91 e7 03 	lds	r24, 0x03E7
    1752:	90 91 e8 03 	lds	r25, 0x03E8
    1756:	82 17       	cp	r24, r18
    1758:	93 07       	cpc	r25, r19
    175a:	79 f5       	brne	.+94     	; 0x17ba <free+0x92>
    175c:	f0 93 e8 03 	sts	0x03E8, r31
    1760:	e0 93 e7 03 	sts	0x03E7, r30
    1764:	6d c0       	rjmp	.+218    	; 0x1840 <free+0x118>
    1766:	de 01       	movw	r26, r28
    1768:	20 e0       	ldi	r18, 0x00	; 0
    176a:	30 e0       	ldi	r19, 0x00	; 0
    176c:	ae 17       	cp	r26, r30
    176e:	bf 07       	cpc	r27, r31
    1770:	50 f4       	brcc	.+20     	; 0x1786 <free+0x5e>
    1772:	12 96       	adiw	r26, 0x02	; 2
    1774:	4d 91       	ld	r20, X+
    1776:	5c 91       	ld	r21, X
    1778:	13 97       	sbiw	r26, 0x03	; 3
    177a:	9d 01       	movw	r18, r26
    177c:	41 15       	cp	r20, r1
    177e:	51 05       	cpc	r21, r1
    1780:	09 f1       	breq	.+66     	; 0x17c4 <free+0x9c>
    1782:	da 01       	movw	r26, r20
    1784:	f3 cf       	rjmp	.-26     	; 0x176c <free+0x44>
    1786:	b3 83       	std	Z+3, r27	; 0x03
    1788:	a2 83       	std	Z+2, r26	; 0x02
    178a:	40 81       	ld	r20, Z
    178c:	51 81       	ldd	r21, Z+1	; 0x01
    178e:	84 0f       	add	r24, r20
    1790:	95 1f       	adc	r25, r21
    1792:	8a 17       	cp	r24, r26
    1794:	9b 07       	cpc	r25, r27
    1796:	71 f4       	brne	.+28     	; 0x17b4 <free+0x8c>
    1798:	8d 91       	ld	r24, X+
    179a:	9c 91       	ld	r25, X
    179c:	11 97       	sbiw	r26, 0x01	; 1
    179e:	84 0f       	add	r24, r20
    17a0:	95 1f       	adc	r25, r21
    17a2:	02 96       	adiw	r24, 0x02	; 2
    17a4:	91 83       	std	Z+1, r25	; 0x01
    17a6:	80 83       	st	Z, r24
    17a8:	12 96       	adiw	r26, 0x02	; 2
    17aa:	8d 91       	ld	r24, X+
    17ac:	9c 91       	ld	r25, X
    17ae:	13 97       	sbiw	r26, 0x03	; 3
    17b0:	93 83       	std	Z+3, r25	; 0x03
    17b2:	82 83       	std	Z+2, r24	; 0x02
    17b4:	21 15       	cp	r18, r1
    17b6:	31 05       	cpc	r19, r1
    17b8:	29 f4       	brne	.+10     	; 0x17c4 <free+0x9c>
    17ba:	f0 93 ea 03 	sts	0x03EA, r31
    17be:	e0 93 e9 03 	sts	0x03E9, r30
    17c2:	3e c0       	rjmp	.+124    	; 0x1840 <free+0x118>
    17c4:	d9 01       	movw	r26, r18
    17c6:	13 96       	adiw	r26, 0x03	; 3
    17c8:	fc 93       	st	X, r31
    17ca:	ee 93       	st	-X, r30
    17cc:	12 97       	sbiw	r26, 0x02	; 2
    17ce:	4d 91       	ld	r20, X+
    17d0:	5d 91       	ld	r21, X+
    17d2:	a4 0f       	add	r26, r20
    17d4:	b5 1f       	adc	r27, r21
    17d6:	ea 17       	cp	r30, r26
    17d8:	fb 07       	cpc	r31, r27
    17da:	79 f4       	brne	.+30     	; 0x17fa <free+0xd2>
    17dc:	80 81       	ld	r24, Z
    17de:	91 81       	ldd	r25, Z+1	; 0x01
    17e0:	84 0f       	add	r24, r20
    17e2:	95 1f       	adc	r25, r21
    17e4:	02 96       	adiw	r24, 0x02	; 2
    17e6:	d9 01       	movw	r26, r18
    17e8:	11 96       	adiw	r26, 0x01	; 1
    17ea:	9c 93       	st	X, r25
    17ec:	8e 93       	st	-X, r24
    17ee:	82 81       	ldd	r24, Z+2	; 0x02
    17f0:	93 81       	ldd	r25, Z+3	; 0x03
    17f2:	13 96       	adiw	r26, 0x03	; 3
    17f4:	9c 93       	st	X, r25
    17f6:	8e 93       	st	-X, r24
    17f8:	12 97       	sbiw	r26, 0x02	; 2
    17fa:	e0 e0       	ldi	r30, 0x00	; 0
    17fc:	f0 e0       	ldi	r31, 0x00	; 0
    17fe:	8a 81       	ldd	r24, Y+2	; 0x02
    1800:	9b 81       	ldd	r25, Y+3	; 0x03
    1802:	00 97       	sbiw	r24, 0x00	; 0
    1804:	19 f0       	breq	.+6      	; 0x180c <free+0xe4>
    1806:	fe 01       	movw	r30, r28
    1808:	ec 01       	movw	r28, r24
    180a:	f9 cf       	rjmp	.-14     	; 0x17fe <free+0xd6>
    180c:	ce 01       	movw	r24, r28
    180e:	02 96       	adiw	r24, 0x02	; 2
    1810:	28 81       	ld	r18, Y
    1812:	39 81       	ldd	r19, Y+1	; 0x01
    1814:	82 0f       	add	r24, r18
    1816:	93 1f       	adc	r25, r19
    1818:	20 91 e7 03 	lds	r18, 0x03E7
    181c:	30 91 e8 03 	lds	r19, 0x03E8
    1820:	28 17       	cp	r18, r24
    1822:	39 07       	cpc	r19, r25
    1824:	69 f4       	brne	.+26     	; 0x1840 <free+0x118>
    1826:	30 97       	sbiw	r30, 0x00	; 0
    1828:	29 f4       	brne	.+10     	; 0x1834 <free+0x10c>
    182a:	10 92 ea 03 	sts	0x03EA, r1
    182e:	10 92 e9 03 	sts	0x03E9, r1
    1832:	02 c0       	rjmp	.+4      	; 0x1838 <free+0x110>
    1834:	13 82       	std	Z+3, r1	; 0x03
    1836:	12 82       	std	Z+2, r1	; 0x02
    1838:	d0 93 e8 03 	sts	0x03E8, r29
    183c:	c0 93 e7 03 	sts	0x03E7, r28
    1840:	df 91       	pop	r29
    1842:	cf 91       	pop	r28
    1844:	08 95       	ret

00001846 <fdevopen>:
    1846:	0f 93       	push	r16
    1848:	1f 93       	push	r17
    184a:	cf 93       	push	r28
    184c:	df 93       	push	r29
    184e:	ec 01       	movw	r28, r24
    1850:	8b 01       	movw	r16, r22
    1852:	00 97       	sbiw	r24, 0x00	; 0
    1854:	31 f4       	brne	.+12     	; 0x1862 <fdevopen+0x1c>
    1856:	61 15       	cp	r22, r1
    1858:	71 05       	cpc	r23, r1
    185a:	19 f4       	brne	.+6      	; 0x1862 <fdevopen+0x1c>
    185c:	80 e0       	ldi	r24, 0x00	; 0
    185e:	90 e0       	ldi	r25, 0x00	; 0
    1860:	38 c0       	rjmp	.+112    	; 0x18d2 <fdevopen+0x8c>
    1862:	6e e0       	ldi	r22, 0x0E	; 14
    1864:	70 e0       	ldi	r23, 0x00	; 0
    1866:	81 e0       	ldi	r24, 0x01	; 1
    1868:	90 e0       	ldi	r25, 0x00	; 0
    186a:	0e 94 81 0e 	call	0x1d02	; 0x1d02 <calloc>
    186e:	fc 01       	movw	r30, r24
    1870:	00 97       	sbiw	r24, 0x00	; 0
    1872:	a1 f3       	breq	.-24     	; 0x185c <fdevopen+0x16>
    1874:	80 e8       	ldi	r24, 0x80	; 128
    1876:	83 83       	std	Z+3, r24	; 0x03
    1878:	01 15       	cp	r16, r1
    187a:	11 05       	cpc	r17, r1
    187c:	71 f0       	breq	.+28     	; 0x189a <fdevopen+0x54>
    187e:	13 87       	std	Z+11, r17	; 0x0b
    1880:	02 87       	std	Z+10, r16	; 0x0a
    1882:	81 e8       	ldi	r24, 0x81	; 129
    1884:	83 83       	std	Z+3, r24	; 0x03
    1886:	80 91 eb 03 	lds	r24, 0x03EB
    188a:	90 91 ec 03 	lds	r25, 0x03EC
    188e:	89 2b       	or	r24, r25
    1890:	21 f4       	brne	.+8      	; 0x189a <fdevopen+0x54>
    1892:	f0 93 ec 03 	sts	0x03EC, r31
    1896:	e0 93 eb 03 	sts	0x03EB, r30
    189a:	20 97       	sbiw	r28, 0x00	; 0
    189c:	c9 f0       	breq	.+50     	; 0x18d0 <fdevopen+0x8a>
    189e:	d1 87       	std	Z+9, r29	; 0x09
    18a0:	c0 87       	std	Z+8, r28	; 0x08
    18a2:	83 81       	ldd	r24, Z+3	; 0x03
    18a4:	82 60       	ori	r24, 0x02	; 2
    18a6:	83 83       	std	Z+3, r24	; 0x03
    18a8:	80 91 ed 03 	lds	r24, 0x03ED
    18ac:	90 91 ee 03 	lds	r25, 0x03EE
    18b0:	89 2b       	or	r24, r25
    18b2:	71 f4       	brne	.+28     	; 0x18d0 <fdevopen+0x8a>
    18b4:	f0 93 ee 03 	sts	0x03EE, r31
    18b8:	e0 93 ed 03 	sts	0x03ED, r30
    18bc:	80 91 ef 03 	lds	r24, 0x03EF
    18c0:	90 91 f0 03 	lds	r25, 0x03F0
    18c4:	89 2b       	or	r24, r25
    18c6:	21 f4       	brne	.+8      	; 0x18d0 <fdevopen+0x8a>
    18c8:	f0 93 f0 03 	sts	0x03F0, r31
    18cc:	e0 93 ef 03 	sts	0x03EF, r30
    18d0:	cf 01       	movw	r24, r30
    18d2:	df 91       	pop	r29
    18d4:	cf 91       	pop	r28
    18d6:	1f 91       	pop	r17
    18d8:	0f 91       	pop	r16
    18da:	08 95       	ret

000018dc <printf>:
    18dc:	a0 e0       	ldi	r26, 0x00	; 0
    18de:	b0 e0       	ldi	r27, 0x00	; 0
    18e0:	e4 e7       	ldi	r30, 0x74	; 116
    18e2:	fc e0       	ldi	r31, 0x0C	; 12
    18e4:	0c 94 5a 0f 	jmp	0x1eb4	; 0x1eb4 <__prologue_saves__+0x20>
    18e8:	fe 01       	movw	r30, r28
    18ea:	35 96       	adiw	r30, 0x05	; 5
    18ec:	61 91       	ld	r22, Z+
    18ee:	71 91       	ld	r23, Z+
    18f0:	af 01       	movw	r20, r30
    18f2:	80 91 ed 03 	lds	r24, 0x03ED
    18f6:	90 91 ee 03 	lds	r25, 0x03EE
    18fa:	0e 94 af 0c 	call	0x195e	; 0x195e <vfprintf>
    18fe:	e2 e0       	ldi	r30, 0x02	; 2
    1900:	0c 94 76 0f 	jmp	0x1eec	; 0x1eec <__epilogue_restores__+0x20>

00001904 <puts>:
    1904:	0f 93       	push	r16
    1906:	1f 93       	push	r17
    1908:	cf 93       	push	r28
    190a:	df 93       	push	r29
    190c:	e0 91 ed 03 	lds	r30, 0x03ED
    1910:	f0 91 ee 03 	lds	r31, 0x03EE
    1914:	23 81       	ldd	r18, Z+3	; 0x03
    1916:	21 ff       	sbrs	r18, 1
    1918:	1b c0       	rjmp	.+54     	; 0x1950 <puts+0x4c>
    191a:	ec 01       	movw	r28, r24
    191c:	00 e0       	ldi	r16, 0x00	; 0
    191e:	10 e0       	ldi	r17, 0x00	; 0
    1920:	89 91       	ld	r24, Y+
    1922:	60 91 ed 03 	lds	r22, 0x03ED
    1926:	70 91 ee 03 	lds	r23, 0x03EE
    192a:	db 01       	movw	r26, r22
    192c:	18 96       	adiw	r26, 0x08	; 8
    192e:	ed 91       	ld	r30, X+
    1930:	fc 91       	ld	r31, X
    1932:	19 97       	sbiw	r26, 0x09	; 9
    1934:	88 23       	and	r24, r24
    1936:	31 f0       	breq	.+12     	; 0x1944 <puts+0x40>
    1938:	09 95       	icall
    193a:	89 2b       	or	r24, r25
    193c:	89 f3       	breq	.-30     	; 0x1920 <puts+0x1c>
    193e:	0f ef       	ldi	r16, 0xFF	; 255
    1940:	1f ef       	ldi	r17, 0xFF	; 255
    1942:	ee cf       	rjmp	.-36     	; 0x1920 <puts+0x1c>
    1944:	8a e0       	ldi	r24, 0x0A	; 10
    1946:	09 95       	icall
    1948:	89 2b       	or	r24, r25
    194a:	11 f4       	brne	.+4      	; 0x1950 <puts+0x4c>
    194c:	c8 01       	movw	r24, r16
    194e:	02 c0       	rjmp	.+4      	; 0x1954 <puts+0x50>
    1950:	8f ef       	ldi	r24, 0xFF	; 255
    1952:	9f ef       	ldi	r25, 0xFF	; 255
    1954:	df 91       	pop	r29
    1956:	cf 91       	pop	r28
    1958:	1f 91       	pop	r17
    195a:	0f 91       	pop	r16
    195c:	08 95       	ret

0000195e <vfprintf>:
    195e:	ac e0       	ldi	r26, 0x0C	; 12
    1960:	b0 e0       	ldi	r27, 0x00	; 0
    1962:	e5 eb       	ldi	r30, 0xB5	; 181
    1964:	fc e0       	ldi	r31, 0x0C	; 12
    1966:	0c 94 4a 0f 	jmp	0x1e94	; 0x1e94 <__prologue_saves__>
    196a:	7c 01       	movw	r14, r24
    196c:	6b 01       	movw	r12, r22
    196e:	8a 01       	movw	r16, r20
    1970:	fc 01       	movw	r30, r24
    1972:	17 82       	std	Z+7, r1	; 0x07
    1974:	16 82       	std	Z+6, r1	; 0x06
    1976:	83 81       	ldd	r24, Z+3	; 0x03
    1978:	81 ff       	sbrs	r24, 1
    197a:	bd c1       	rjmp	.+890    	; 0x1cf6 <vfprintf+0x398>
    197c:	ce 01       	movw	r24, r28
    197e:	01 96       	adiw	r24, 0x01	; 1
    1980:	4c 01       	movw	r8, r24
    1982:	f7 01       	movw	r30, r14
    1984:	93 81       	ldd	r25, Z+3	; 0x03
    1986:	f6 01       	movw	r30, r12
    1988:	93 fd       	sbrc	r25, 3
    198a:	85 91       	lpm	r24, Z+
    198c:	93 ff       	sbrs	r25, 3
    198e:	81 91       	ld	r24, Z+
    1990:	6f 01       	movw	r12, r30
    1992:	88 23       	and	r24, r24
    1994:	09 f4       	brne	.+2      	; 0x1998 <vfprintf+0x3a>
    1996:	ab c1       	rjmp	.+854    	; 0x1cee <vfprintf+0x390>
    1998:	85 32       	cpi	r24, 0x25	; 37
    199a:	39 f4       	brne	.+14     	; 0x19aa <vfprintf+0x4c>
    199c:	93 fd       	sbrc	r25, 3
    199e:	85 91       	lpm	r24, Z+
    19a0:	93 ff       	sbrs	r25, 3
    19a2:	81 91       	ld	r24, Z+
    19a4:	6f 01       	movw	r12, r30
    19a6:	85 32       	cpi	r24, 0x25	; 37
    19a8:	29 f4       	brne	.+10     	; 0x19b4 <vfprintf+0x56>
    19aa:	b7 01       	movw	r22, r14
    19ac:	90 e0       	ldi	r25, 0x00	; 0
    19ae:	0e 94 ba 0e 	call	0x1d74	; 0x1d74 <fputc>
    19b2:	e7 cf       	rjmp	.-50     	; 0x1982 <vfprintf+0x24>
    19b4:	51 2c       	mov	r5, r1
    19b6:	31 2c       	mov	r3, r1
    19b8:	20 e0       	ldi	r18, 0x00	; 0
    19ba:	20 32       	cpi	r18, 0x20	; 32
    19bc:	a0 f4       	brcc	.+40     	; 0x19e6 <vfprintf+0x88>
    19be:	8b 32       	cpi	r24, 0x2B	; 43
    19c0:	69 f0       	breq	.+26     	; 0x19dc <vfprintf+0x7e>
    19c2:	30 f4       	brcc	.+12     	; 0x19d0 <vfprintf+0x72>
    19c4:	80 32       	cpi	r24, 0x20	; 32
    19c6:	59 f0       	breq	.+22     	; 0x19de <vfprintf+0x80>
    19c8:	83 32       	cpi	r24, 0x23	; 35
    19ca:	69 f4       	brne	.+26     	; 0x19e6 <vfprintf+0x88>
    19cc:	20 61       	ori	r18, 0x10	; 16
    19ce:	2c c0       	rjmp	.+88     	; 0x1a28 <vfprintf+0xca>
    19d0:	8d 32       	cpi	r24, 0x2D	; 45
    19d2:	39 f0       	breq	.+14     	; 0x19e2 <vfprintf+0x84>
    19d4:	80 33       	cpi	r24, 0x30	; 48
    19d6:	39 f4       	brne	.+14     	; 0x19e6 <vfprintf+0x88>
    19d8:	21 60       	ori	r18, 0x01	; 1
    19da:	26 c0       	rjmp	.+76     	; 0x1a28 <vfprintf+0xca>
    19dc:	22 60       	ori	r18, 0x02	; 2
    19de:	24 60       	ori	r18, 0x04	; 4
    19e0:	23 c0       	rjmp	.+70     	; 0x1a28 <vfprintf+0xca>
    19e2:	28 60       	ori	r18, 0x08	; 8
    19e4:	21 c0       	rjmp	.+66     	; 0x1a28 <vfprintf+0xca>
    19e6:	27 fd       	sbrc	r18, 7
    19e8:	27 c0       	rjmp	.+78     	; 0x1a38 <vfprintf+0xda>
    19ea:	30 ed       	ldi	r19, 0xD0	; 208
    19ec:	38 0f       	add	r19, r24
    19ee:	3a 30       	cpi	r19, 0x0A	; 10
    19f0:	78 f4       	brcc	.+30     	; 0x1a10 <vfprintf+0xb2>
    19f2:	26 ff       	sbrs	r18, 6
    19f4:	06 c0       	rjmp	.+12     	; 0x1a02 <vfprintf+0xa4>
    19f6:	fa e0       	ldi	r31, 0x0A	; 10
    19f8:	5f 9e       	mul	r5, r31
    19fa:	30 0d       	add	r19, r0
    19fc:	11 24       	eor	r1, r1
    19fe:	53 2e       	mov	r5, r19
    1a00:	13 c0       	rjmp	.+38     	; 0x1a28 <vfprintf+0xca>
    1a02:	8a e0       	ldi	r24, 0x0A	; 10
    1a04:	38 9e       	mul	r3, r24
    1a06:	30 0d       	add	r19, r0
    1a08:	11 24       	eor	r1, r1
    1a0a:	33 2e       	mov	r3, r19
    1a0c:	20 62       	ori	r18, 0x20	; 32
    1a0e:	0c c0       	rjmp	.+24     	; 0x1a28 <vfprintf+0xca>
    1a10:	8e 32       	cpi	r24, 0x2E	; 46
    1a12:	21 f4       	brne	.+8      	; 0x1a1c <vfprintf+0xbe>
    1a14:	26 fd       	sbrc	r18, 6
    1a16:	6b c1       	rjmp	.+726    	; 0x1cee <vfprintf+0x390>
    1a18:	20 64       	ori	r18, 0x40	; 64
    1a1a:	06 c0       	rjmp	.+12     	; 0x1a28 <vfprintf+0xca>
    1a1c:	8c 36       	cpi	r24, 0x6C	; 108
    1a1e:	11 f4       	brne	.+4      	; 0x1a24 <vfprintf+0xc6>
    1a20:	20 68       	ori	r18, 0x80	; 128
    1a22:	02 c0       	rjmp	.+4      	; 0x1a28 <vfprintf+0xca>
    1a24:	88 36       	cpi	r24, 0x68	; 104
    1a26:	41 f4       	brne	.+16     	; 0x1a38 <vfprintf+0xda>
    1a28:	f6 01       	movw	r30, r12
    1a2a:	93 fd       	sbrc	r25, 3
    1a2c:	85 91       	lpm	r24, Z+
    1a2e:	93 ff       	sbrs	r25, 3
    1a30:	81 91       	ld	r24, Z+
    1a32:	6f 01       	movw	r12, r30
    1a34:	81 11       	cpse	r24, r1
    1a36:	c1 cf       	rjmp	.-126    	; 0x19ba <vfprintf+0x5c>
    1a38:	98 2f       	mov	r25, r24
    1a3a:	9f 7d       	andi	r25, 0xDF	; 223
    1a3c:	95 54       	subi	r25, 0x45	; 69
    1a3e:	93 30       	cpi	r25, 0x03	; 3
    1a40:	28 f4       	brcc	.+10     	; 0x1a4c <vfprintf+0xee>
    1a42:	0c 5f       	subi	r16, 0xFC	; 252
    1a44:	1f 4f       	sbci	r17, 0xFF	; 255
    1a46:	ff e3       	ldi	r31, 0x3F	; 63
    1a48:	f9 83       	std	Y+1, r31	; 0x01
    1a4a:	0d c0       	rjmp	.+26     	; 0x1a66 <vfprintf+0x108>
    1a4c:	83 36       	cpi	r24, 0x63	; 99
    1a4e:	31 f0       	breq	.+12     	; 0x1a5c <vfprintf+0xfe>
    1a50:	83 37       	cpi	r24, 0x73	; 115
    1a52:	71 f0       	breq	.+28     	; 0x1a70 <vfprintf+0x112>
    1a54:	83 35       	cpi	r24, 0x53	; 83
    1a56:	09 f0       	breq	.+2      	; 0x1a5a <vfprintf+0xfc>
    1a58:	5b c0       	rjmp	.+182    	; 0x1b10 <vfprintf+0x1b2>
    1a5a:	22 c0       	rjmp	.+68     	; 0x1aa0 <vfprintf+0x142>
    1a5c:	f8 01       	movw	r30, r16
    1a5e:	80 81       	ld	r24, Z
    1a60:	89 83       	std	Y+1, r24	; 0x01
    1a62:	0e 5f       	subi	r16, 0xFE	; 254
    1a64:	1f 4f       	sbci	r17, 0xFF	; 255
    1a66:	44 24       	eor	r4, r4
    1a68:	43 94       	inc	r4
    1a6a:	51 2c       	mov	r5, r1
    1a6c:	54 01       	movw	r10, r8
    1a6e:	15 c0       	rjmp	.+42     	; 0x1a9a <vfprintf+0x13c>
    1a70:	38 01       	movw	r6, r16
    1a72:	f2 e0       	ldi	r31, 0x02	; 2
    1a74:	6f 0e       	add	r6, r31
    1a76:	71 1c       	adc	r7, r1
    1a78:	f8 01       	movw	r30, r16
    1a7a:	a0 80       	ld	r10, Z
    1a7c:	b1 80       	ldd	r11, Z+1	; 0x01
    1a7e:	26 ff       	sbrs	r18, 6
    1a80:	03 c0       	rjmp	.+6      	; 0x1a88 <vfprintf+0x12a>
    1a82:	65 2d       	mov	r22, r5
    1a84:	70 e0       	ldi	r23, 0x00	; 0
    1a86:	02 c0       	rjmp	.+4      	; 0x1a8c <vfprintf+0x12e>
    1a88:	6f ef       	ldi	r22, 0xFF	; 255
    1a8a:	7f ef       	ldi	r23, 0xFF	; 255
    1a8c:	c5 01       	movw	r24, r10
    1a8e:	2c 87       	std	Y+12, r18	; 0x0c
    1a90:	0e 94 af 0e 	call	0x1d5e	; 0x1d5e <strnlen>
    1a94:	2c 01       	movw	r4, r24
    1a96:	83 01       	movw	r16, r6
    1a98:	2c 85       	ldd	r18, Y+12	; 0x0c
    1a9a:	2f 77       	andi	r18, 0x7F	; 127
    1a9c:	22 2e       	mov	r2, r18
    1a9e:	17 c0       	rjmp	.+46     	; 0x1ace <vfprintf+0x170>
    1aa0:	38 01       	movw	r6, r16
    1aa2:	f2 e0       	ldi	r31, 0x02	; 2
    1aa4:	6f 0e       	add	r6, r31
    1aa6:	71 1c       	adc	r7, r1
    1aa8:	f8 01       	movw	r30, r16
    1aaa:	a0 80       	ld	r10, Z
    1aac:	b1 80       	ldd	r11, Z+1	; 0x01
    1aae:	26 ff       	sbrs	r18, 6
    1ab0:	03 c0       	rjmp	.+6      	; 0x1ab8 <vfprintf+0x15a>
    1ab2:	65 2d       	mov	r22, r5
    1ab4:	70 e0       	ldi	r23, 0x00	; 0
    1ab6:	02 c0       	rjmp	.+4      	; 0x1abc <vfprintf+0x15e>
    1ab8:	6f ef       	ldi	r22, 0xFF	; 255
    1aba:	7f ef       	ldi	r23, 0xFF	; 255
    1abc:	c5 01       	movw	r24, r10
    1abe:	2c 87       	std	Y+12, r18	; 0x0c
    1ac0:	0e 94 9d 0e 	call	0x1d3a	; 0x1d3a <strnlen_P>
    1ac4:	2c 01       	movw	r4, r24
    1ac6:	2c 85       	ldd	r18, Y+12	; 0x0c
    1ac8:	20 68       	ori	r18, 0x80	; 128
    1aca:	22 2e       	mov	r2, r18
    1acc:	83 01       	movw	r16, r6
    1ace:	23 fc       	sbrc	r2, 3
    1ad0:	1b c0       	rjmp	.+54     	; 0x1b08 <vfprintf+0x1aa>
    1ad2:	83 2d       	mov	r24, r3
    1ad4:	90 e0       	ldi	r25, 0x00	; 0
    1ad6:	48 16       	cp	r4, r24
    1ad8:	59 06       	cpc	r5, r25
    1ada:	b0 f4       	brcc	.+44     	; 0x1b08 <vfprintf+0x1aa>
    1adc:	b7 01       	movw	r22, r14
    1ade:	80 e2       	ldi	r24, 0x20	; 32
    1ae0:	90 e0       	ldi	r25, 0x00	; 0
    1ae2:	0e 94 ba 0e 	call	0x1d74	; 0x1d74 <fputc>
    1ae6:	3a 94       	dec	r3
    1ae8:	f4 cf       	rjmp	.-24     	; 0x1ad2 <vfprintf+0x174>
    1aea:	f5 01       	movw	r30, r10
    1aec:	27 fc       	sbrc	r2, 7
    1aee:	85 91       	lpm	r24, Z+
    1af0:	27 fe       	sbrs	r2, 7
    1af2:	81 91       	ld	r24, Z+
    1af4:	5f 01       	movw	r10, r30
    1af6:	b7 01       	movw	r22, r14
    1af8:	90 e0       	ldi	r25, 0x00	; 0
    1afa:	0e 94 ba 0e 	call	0x1d74	; 0x1d74 <fputc>
    1afe:	31 10       	cpse	r3, r1
    1b00:	3a 94       	dec	r3
    1b02:	f1 e0       	ldi	r31, 0x01	; 1
    1b04:	4f 1a       	sub	r4, r31
    1b06:	51 08       	sbc	r5, r1
    1b08:	41 14       	cp	r4, r1
    1b0a:	51 04       	cpc	r5, r1
    1b0c:	71 f7       	brne	.-36     	; 0x1aea <vfprintf+0x18c>
    1b0e:	e5 c0       	rjmp	.+458    	; 0x1cda <vfprintf+0x37c>
    1b10:	84 36       	cpi	r24, 0x64	; 100
    1b12:	11 f0       	breq	.+4      	; 0x1b18 <vfprintf+0x1ba>
    1b14:	89 36       	cpi	r24, 0x69	; 105
    1b16:	39 f5       	brne	.+78     	; 0x1b66 <vfprintf+0x208>
    1b18:	f8 01       	movw	r30, r16
    1b1a:	27 ff       	sbrs	r18, 7
    1b1c:	07 c0       	rjmp	.+14     	; 0x1b2c <vfprintf+0x1ce>
    1b1e:	60 81       	ld	r22, Z
    1b20:	71 81       	ldd	r23, Z+1	; 0x01
    1b22:	82 81       	ldd	r24, Z+2	; 0x02
    1b24:	93 81       	ldd	r25, Z+3	; 0x03
    1b26:	0c 5f       	subi	r16, 0xFC	; 252
    1b28:	1f 4f       	sbci	r17, 0xFF	; 255
    1b2a:	08 c0       	rjmp	.+16     	; 0x1b3c <vfprintf+0x1de>
    1b2c:	60 81       	ld	r22, Z
    1b2e:	71 81       	ldd	r23, Z+1	; 0x01
    1b30:	88 27       	eor	r24, r24
    1b32:	77 fd       	sbrc	r23, 7
    1b34:	80 95       	com	r24
    1b36:	98 2f       	mov	r25, r24
    1b38:	0e 5f       	subi	r16, 0xFE	; 254
    1b3a:	1f 4f       	sbci	r17, 0xFF	; 255
    1b3c:	2f 76       	andi	r18, 0x6F	; 111
    1b3e:	b2 2e       	mov	r11, r18
    1b40:	97 ff       	sbrs	r25, 7
    1b42:	09 c0       	rjmp	.+18     	; 0x1b56 <vfprintf+0x1f8>
    1b44:	90 95       	com	r25
    1b46:	80 95       	com	r24
    1b48:	70 95       	com	r23
    1b4a:	61 95       	neg	r22
    1b4c:	7f 4f       	sbci	r23, 0xFF	; 255
    1b4e:	8f 4f       	sbci	r24, 0xFF	; 255
    1b50:	9f 4f       	sbci	r25, 0xFF	; 255
    1b52:	20 68       	ori	r18, 0x80	; 128
    1b54:	b2 2e       	mov	r11, r18
    1b56:	2a e0       	ldi	r18, 0x0A	; 10
    1b58:	30 e0       	ldi	r19, 0x00	; 0
    1b5a:	a4 01       	movw	r20, r8
    1b5c:	0e 94 ec 0e 	call	0x1dd8	; 0x1dd8 <__ultoa_invert>
    1b60:	a8 2e       	mov	r10, r24
    1b62:	a8 18       	sub	r10, r8
    1b64:	44 c0       	rjmp	.+136    	; 0x1bee <vfprintf+0x290>
    1b66:	85 37       	cpi	r24, 0x75	; 117
    1b68:	29 f4       	brne	.+10     	; 0x1b74 <vfprintf+0x216>
    1b6a:	2f 7e       	andi	r18, 0xEF	; 239
    1b6c:	b2 2e       	mov	r11, r18
    1b6e:	2a e0       	ldi	r18, 0x0A	; 10
    1b70:	30 e0       	ldi	r19, 0x00	; 0
    1b72:	25 c0       	rjmp	.+74     	; 0x1bbe <vfprintf+0x260>
    1b74:	f2 2f       	mov	r31, r18
    1b76:	f9 7f       	andi	r31, 0xF9	; 249
    1b78:	bf 2e       	mov	r11, r31
    1b7a:	8f 36       	cpi	r24, 0x6F	; 111
    1b7c:	c1 f0       	breq	.+48     	; 0x1bae <vfprintf+0x250>
    1b7e:	18 f4       	brcc	.+6      	; 0x1b86 <vfprintf+0x228>
    1b80:	88 35       	cpi	r24, 0x58	; 88
    1b82:	79 f0       	breq	.+30     	; 0x1ba2 <vfprintf+0x244>
    1b84:	b4 c0       	rjmp	.+360    	; 0x1cee <vfprintf+0x390>
    1b86:	80 37       	cpi	r24, 0x70	; 112
    1b88:	19 f0       	breq	.+6      	; 0x1b90 <vfprintf+0x232>
    1b8a:	88 37       	cpi	r24, 0x78	; 120
    1b8c:	21 f0       	breq	.+8      	; 0x1b96 <vfprintf+0x238>
    1b8e:	af c0       	rjmp	.+350    	; 0x1cee <vfprintf+0x390>
    1b90:	2f 2f       	mov	r18, r31
    1b92:	20 61       	ori	r18, 0x10	; 16
    1b94:	b2 2e       	mov	r11, r18
    1b96:	b4 fe       	sbrs	r11, 4
    1b98:	0d c0       	rjmp	.+26     	; 0x1bb4 <vfprintf+0x256>
    1b9a:	8b 2d       	mov	r24, r11
    1b9c:	84 60       	ori	r24, 0x04	; 4
    1b9e:	b8 2e       	mov	r11, r24
    1ba0:	09 c0       	rjmp	.+18     	; 0x1bb4 <vfprintf+0x256>
    1ba2:	24 ff       	sbrs	r18, 4
    1ba4:	0a c0       	rjmp	.+20     	; 0x1bba <vfprintf+0x25c>
    1ba6:	9f 2f       	mov	r25, r31
    1ba8:	96 60       	ori	r25, 0x06	; 6
    1baa:	b9 2e       	mov	r11, r25
    1bac:	06 c0       	rjmp	.+12     	; 0x1bba <vfprintf+0x25c>
    1bae:	28 e0       	ldi	r18, 0x08	; 8
    1bb0:	30 e0       	ldi	r19, 0x00	; 0
    1bb2:	05 c0       	rjmp	.+10     	; 0x1bbe <vfprintf+0x260>
    1bb4:	20 e1       	ldi	r18, 0x10	; 16
    1bb6:	30 e0       	ldi	r19, 0x00	; 0
    1bb8:	02 c0       	rjmp	.+4      	; 0x1bbe <vfprintf+0x260>
    1bba:	20 e1       	ldi	r18, 0x10	; 16
    1bbc:	32 e0       	ldi	r19, 0x02	; 2
    1bbe:	f8 01       	movw	r30, r16
    1bc0:	b7 fe       	sbrs	r11, 7
    1bc2:	07 c0       	rjmp	.+14     	; 0x1bd2 <vfprintf+0x274>
    1bc4:	60 81       	ld	r22, Z
    1bc6:	71 81       	ldd	r23, Z+1	; 0x01
    1bc8:	82 81       	ldd	r24, Z+2	; 0x02
    1bca:	93 81       	ldd	r25, Z+3	; 0x03
    1bcc:	0c 5f       	subi	r16, 0xFC	; 252
    1bce:	1f 4f       	sbci	r17, 0xFF	; 255
    1bd0:	06 c0       	rjmp	.+12     	; 0x1bde <vfprintf+0x280>
    1bd2:	60 81       	ld	r22, Z
    1bd4:	71 81       	ldd	r23, Z+1	; 0x01
    1bd6:	80 e0       	ldi	r24, 0x00	; 0
    1bd8:	90 e0       	ldi	r25, 0x00	; 0
    1bda:	0e 5f       	subi	r16, 0xFE	; 254
    1bdc:	1f 4f       	sbci	r17, 0xFF	; 255
    1bde:	a4 01       	movw	r20, r8
    1be0:	0e 94 ec 0e 	call	0x1dd8	; 0x1dd8 <__ultoa_invert>
    1be4:	a8 2e       	mov	r10, r24
    1be6:	a8 18       	sub	r10, r8
    1be8:	fb 2d       	mov	r31, r11
    1bea:	ff 77       	andi	r31, 0x7F	; 127
    1bec:	bf 2e       	mov	r11, r31
    1bee:	b6 fe       	sbrs	r11, 6
    1bf0:	0b c0       	rjmp	.+22     	; 0x1c08 <vfprintf+0x2aa>
    1bf2:	2b 2d       	mov	r18, r11
    1bf4:	2e 7f       	andi	r18, 0xFE	; 254
    1bf6:	a5 14       	cp	r10, r5
    1bf8:	50 f4       	brcc	.+20     	; 0x1c0e <vfprintf+0x2b0>
    1bfa:	b4 fe       	sbrs	r11, 4
    1bfc:	0a c0       	rjmp	.+20     	; 0x1c12 <vfprintf+0x2b4>
    1bfe:	b2 fc       	sbrc	r11, 2
    1c00:	08 c0       	rjmp	.+16     	; 0x1c12 <vfprintf+0x2b4>
    1c02:	2b 2d       	mov	r18, r11
    1c04:	2e 7e       	andi	r18, 0xEE	; 238
    1c06:	05 c0       	rjmp	.+10     	; 0x1c12 <vfprintf+0x2b4>
    1c08:	7a 2c       	mov	r7, r10
    1c0a:	2b 2d       	mov	r18, r11
    1c0c:	03 c0       	rjmp	.+6      	; 0x1c14 <vfprintf+0x2b6>
    1c0e:	7a 2c       	mov	r7, r10
    1c10:	01 c0       	rjmp	.+2      	; 0x1c14 <vfprintf+0x2b6>
    1c12:	75 2c       	mov	r7, r5
    1c14:	24 ff       	sbrs	r18, 4
    1c16:	0d c0       	rjmp	.+26     	; 0x1c32 <vfprintf+0x2d4>
    1c18:	fe 01       	movw	r30, r28
    1c1a:	ea 0d       	add	r30, r10
    1c1c:	f1 1d       	adc	r31, r1
    1c1e:	80 81       	ld	r24, Z
    1c20:	80 33       	cpi	r24, 0x30	; 48
    1c22:	11 f4       	brne	.+4      	; 0x1c28 <vfprintf+0x2ca>
    1c24:	29 7e       	andi	r18, 0xE9	; 233
    1c26:	09 c0       	rjmp	.+18     	; 0x1c3a <vfprintf+0x2dc>
    1c28:	22 ff       	sbrs	r18, 2
    1c2a:	06 c0       	rjmp	.+12     	; 0x1c38 <vfprintf+0x2da>
    1c2c:	73 94       	inc	r7
    1c2e:	73 94       	inc	r7
    1c30:	04 c0       	rjmp	.+8      	; 0x1c3a <vfprintf+0x2dc>
    1c32:	82 2f       	mov	r24, r18
    1c34:	86 78       	andi	r24, 0x86	; 134
    1c36:	09 f0       	breq	.+2      	; 0x1c3a <vfprintf+0x2dc>
    1c38:	73 94       	inc	r7
    1c3a:	23 fd       	sbrc	r18, 3
    1c3c:	13 c0       	rjmp	.+38     	; 0x1c64 <vfprintf+0x306>
    1c3e:	20 ff       	sbrs	r18, 0
    1c40:	06 c0       	rjmp	.+12     	; 0x1c4e <vfprintf+0x2f0>
    1c42:	5a 2c       	mov	r5, r10
    1c44:	73 14       	cp	r7, r3
    1c46:	18 f4       	brcc	.+6      	; 0x1c4e <vfprintf+0x2f0>
    1c48:	53 0c       	add	r5, r3
    1c4a:	57 18       	sub	r5, r7
    1c4c:	73 2c       	mov	r7, r3
    1c4e:	73 14       	cp	r7, r3
    1c50:	68 f4       	brcc	.+26     	; 0x1c6c <vfprintf+0x30e>
    1c52:	b7 01       	movw	r22, r14
    1c54:	80 e2       	ldi	r24, 0x20	; 32
    1c56:	90 e0       	ldi	r25, 0x00	; 0
    1c58:	2c 87       	std	Y+12, r18	; 0x0c
    1c5a:	0e 94 ba 0e 	call	0x1d74	; 0x1d74 <fputc>
    1c5e:	73 94       	inc	r7
    1c60:	2c 85       	ldd	r18, Y+12	; 0x0c
    1c62:	f5 cf       	rjmp	.-22     	; 0x1c4e <vfprintf+0x2f0>
    1c64:	73 14       	cp	r7, r3
    1c66:	10 f4       	brcc	.+4      	; 0x1c6c <vfprintf+0x30e>
    1c68:	37 18       	sub	r3, r7
    1c6a:	01 c0       	rjmp	.+2      	; 0x1c6e <vfprintf+0x310>
    1c6c:	31 2c       	mov	r3, r1
    1c6e:	24 ff       	sbrs	r18, 4
    1c70:	12 c0       	rjmp	.+36     	; 0x1c96 <vfprintf+0x338>
    1c72:	b7 01       	movw	r22, r14
    1c74:	80 e3       	ldi	r24, 0x30	; 48
    1c76:	90 e0       	ldi	r25, 0x00	; 0
    1c78:	2c 87       	std	Y+12, r18	; 0x0c
    1c7a:	0e 94 ba 0e 	call	0x1d74	; 0x1d74 <fputc>
    1c7e:	2c 85       	ldd	r18, Y+12	; 0x0c
    1c80:	22 ff       	sbrs	r18, 2
    1c82:	17 c0       	rjmp	.+46     	; 0x1cb2 <vfprintf+0x354>
    1c84:	21 ff       	sbrs	r18, 1
    1c86:	03 c0       	rjmp	.+6      	; 0x1c8e <vfprintf+0x330>
    1c88:	88 e5       	ldi	r24, 0x58	; 88
    1c8a:	90 e0       	ldi	r25, 0x00	; 0
    1c8c:	02 c0       	rjmp	.+4      	; 0x1c92 <vfprintf+0x334>
    1c8e:	88 e7       	ldi	r24, 0x78	; 120
    1c90:	90 e0       	ldi	r25, 0x00	; 0
    1c92:	b7 01       	movw	r22, r14
    1c94:	0c c0       	rjmp	.+24     	; 0x1cae <vfprintf+0x350>
    1c96:	82 2f       	mov	r24, r18
    1c98:	86 78       	andi	r24, 0x86	; 134
    1c9a:	59 f0       	breq	.+22     	; 0x1cb2 <vfprintf+0x354>
    1c9c:	21 fd       	sbrc	r18, 1
    1c9e:	02 c0       	rjmp	.+4      	; 0x1ca4 <vfprintf+0x346>
    1ca0:	80 e2       	ldi	r24, 0x20	; 32
    1ca2:	01 c0       	rjmp	.+2      	; 0x1ca6 <vfprintf+0x348>
    1ca4:	8b e2       	ldi	r24, 0x2B	; 43
    1ca6:	27 fd       	sbrc	r18, 7
    1ca8:	8d e2       	ldi	r24, 0x2D	; 45
    1caa:	b7 01       	movw	r22, r14
    1cac:	90 e0       	ldi	r25, 0x00	; 0
    1cae:	0e 94 ba 0e 	call	0x1d74	; 0x1d74 <fputc>
    1cb2:	a5 14       	cp	r10, r5
    1cb4:	38 f4       	brcc	.+14     	; 0x1cc4 <vfprintf+0x366>
    1cb6:	b7 01       	movw	r22, r14
    1cb8:	80 e3       	ldi	r24, 0x30	; 48
    1cba:	90 e0       	ldi	r25, 0x00	; 0
    1cbc:	0e 94 ba 0e 	call	0x1d74	; 0x1d74 <fputc>
    1cc0:	5a 94       	dec	r5
    1cc2:	f7 cf       	rjmp	.-18     	; 0x1cb2 <vfprintf+0x354>
    1cc4:	aa 94       	dec	r10
    1cc6:	f4 01       	movw	r30, r8
    1cc8:	ea 0d       	add	r30, r10
    1cca:	f1 1d       	adc	r31, r1
    1ccc:	80 81       	ld	r24, Z
    1cce:	b7 01       	movw	r22, r14
    1cd0:	90 e0       	ldi	r25, 0x00	; 0
    1cd2:	0e 94 ba 0e 	call	0x1d74	; 0x1d74 <fputc>
    1cd6:	a1 10       	cpse	r10, r1
    1cd8:	f5 cf       	rjmp	.-22     	; 0x1cc4 <vfprintf+0x366>
    1cda:	33 20       	and	r3, r3
    1cdc:	09 f4       	brne	.+2      	; 0x1ce0 <vfprintf+0x382>
    1cde:	51 ce       	rjmp	.-862    	; 0x1982 <vfprintf+0x24>
    1ce0:	b7 01       	movw	r22, r14
    1ce2:	80 e2       	ldi	r24, 0x20	; 32
    1ce4:	90 e0       	ldi	r25, 0x00	; 0
    1ce6:	0e 94 ba 0e 	call	0x1d74	; 0x1d74 <fputc>
    1cea:	3a 94       	dec	r3
    1cec:	f6 cf       	rjmp	.-20     	; 0x1cda <vfprintf+0x37c>
    1cee:	f7 01       	movw	r30, r14
    1cf0:	86 81       	ldd	r24, Z+6	; 0x06
    1cf2:	97 81       	ldd	r25, Z+7	; 0x07
    1cf4:	02 c0       	rjmp	.+4      	; 0x1cfa <vfprintf+0x39c>
    1cf6:	8f ef       	ldi	r24, 0xFF	; 255
    1cf8:	9f ef       	ldi	r25, 0xFF	; 255
    1cfa:	2c 96       	adiw	r28, 0x0c	; 12
    1cfc:	e2 e1       	ldi	r30, 0x12	; 18
    1cfe:	0c 94 66 0f 	jmp	0x1ecc	; 0x1ecc <__epilogue_restores__>

00001d02 <calloc>:
    1d02:	0f 93       	push	r16
    1d04:	1f 93       	push	r17
    1d06:	cf 93       	push	r28
    1d08:	df 93       	push	r29
    1d0a:	86 9f       	mul	r24, r22
    1d0c:	80 01       	movw	r16, r0
    1d0e:	87 9f       	mul	r24, r23
    1d10:	10 0d       	add	r17, r0
    1d12:	96 9f       	mul	r25, r22
    1d14:	10 0d       	add	r17, r0
    1d16:	11 24       	eor	r1, r1
    1d18:	c8 01       	movw	r24, r16
    1d1a:	0e 94 fc 0a 	call	0x15f8	; 0x15f8 <malloc>
    1d1e:	ec 01       	movw	r28, r24
    1d20:	00 97       	sbiw	r24, 0x00	; 0
    1d22:	29 f0       	breq	.+10     	; 0x1d2e <calloc+0x2c>
    1d24:	a8 01       	movw	r20, r16
    1d26:	60 e0       	ldi	r22, 0x00	; 0
    1d28:	70 e0       	ldi	r23, 0x00	; 0
    1d2a:	0e 94 a8 0e 	call	0x1d50	; 0x1d50 <memset>
    1d2e:	ce 01       	movw	r24, r28
    1d30:	df 91       	pop	r29
    1d32:	cf 91       	pop	r28
    1d34:	1f 91       	pop	r17
    1d36:	0f 91       	pop	r16
    1d38:	08 95       	ret

00001d3a <strnlen_P>:
    1d3a:	fc 01       	movw	r30, r24
    1d3c:	05 90       	lpm	r0, Z+
    1d3e:	61 50       	subi	r22, 0x01	; 1
    1d40:	70 40       	sbci	r23, 0x00	; 0
    1d42:	01 10       	cpse	r0, r1
    1d44:	d8 f7       	brcc	.-10     	; 0x1d3c <strnlen_P+0x2>
    1d46:	80 95       	com	r24
    1d48:	90 95       	com	r25
    1d4a:	8e 0f       	add	r24, r30
    1d4c:	9f 1f       	adc	r25, r31
    1d4e:	08 95       	ret

00001d50 <memset>:
    1d50:	dc 01       	movw	r26, r24
    1d52:	01 c0       	rjmp	.+2      	; 0x1d56 <memset+0x6>
    1d54:	6d 93       	st	X+, r22
    1d56:	41 50       	subi	r20, 0x01	; 1
    1d58:	50 40       	sbci	r21, 0x00	; 0
    1d5a:	e0 f7       	brcc	.-8      	; 0x1d54 <memset+0x4>
    1d5c:	08 95       	ret

00001d5e <strnlen>:
    1d5e:	fc 01       	movw	r30, r24
    1d60:	61 50       	subi	r22, 0x01	; 1
    1d62:	70 40       	sbci	r23, 0x00	; 0
    1d64:	01 90       	ld	r0, Z+
    1d66:	01 10       	cpse	r0, r1
    1d68:	d8 f7       	brcc	.-10     	; 0x1d60 <strnlen+0x2>
    1d6a:	80 95       	com	r24
    1d6c:	90 95       	com	r25
    1d6e:	8e 0f       	add	r24, r30
    1d70:	9f 1f       	adc	r25, r31
    1d72:	08 95       	ret

00001d74 <fputc>:
    1d74:	0f 93       	push	r16
    1d76:	1f 93       	push	r17
    1d78:	cf 93       	push	r28
    1d7a:	df 93       	push	r29
    1d7c:	18 2f       	mov	r17, r24
    1d7e:	09 2f       	mov	r16, r25
    1d80:	eb 01       	movw	r28, r22
    1d82:	8b 81       	ldd	r24, Y+3	; 0x03
    1d84:	81 fd       	sbrc	r24, 1
    1d86:	03 c0       	rjmp	.+6      	; 0x1d8e <fputc+0x1a>
    1d88:	8f ef       	ldi	r24, 0xFF	; 255
    1d8a:	9f ef       	ldi	r25, 0xFF	; 255
    1d8c:	20 c0       	rjmp	.+64     	; 0x1dce <fputc+0x5a>
    1d8e:	82 ff       	sbrs	r24, 2
    1d90:	10 c0       	rjmp	.+32     	; 0x1db2 <fputc+0x3e>
    1d92:	4e 81       	ldd	r20, Y+6	; 0x06
    1d94:	5f 81       	ldd	r21, Y+7	; 0x07
    1d96:	2c 81       	ldd	r18, Y+4	; 0x04
    1d98:	3d 81       	ldd	r19, Y+5	; 0x05
    1d9a:	42 17       	cp	r20, r18
    1d9c:	53 07       	cpc	r21, r19
    1d9e:	7c f4       	brge	.+30     	; 0x1dbe <fputc+0x4a>
    1da0:	e8 81       	ld	r30, Y
    1da2:	f9 81       	ldd	r31, Y+1	; 0x01
    1da4:	9f 01       	movw	r18, r30
    1da6:	2f 5f       	subi	r18, 0xFF	; 255
    1da8:	3f 4f       	sbci	r19, 0xFF	; 255
    1daa:	39 83       	std	Y+1, r19	; 0x01
    1dac:	28 83       	st	Y, r18
    1dae:	10 83       	st	Z, r17
    1db0:	06 c0       	rjmp	.+12     	; 0x1dbe <fputc+0x4a>
    1db2:	e8 85       	ldd	r30, Y+8	; 0x08
    1db4:	f9 85       	ldd	r31, Y+9	; 0x09
    1db6:	81 2f       	mov	r24, r17
    1db8:	09 95       	icall
    1dba:	89 2b       	or	r24, r25
    1dbc:	29 f7       	brne	.-54     	; 0x1d88 <fputc+0x14>
    1dbe:	2e 81       	ldd	r18, Y+6	; 0x06
    1dc0:	3f 81       	ldd	r19, Y+7	; 0x07
    1dc2:	2f 5f       	subi	r18, 0xFF	; 255
    1dc4:	3f 4f       	sbci	r19, 0xFF	; 255
    1dc6:	3f 83       	std	Y+7, r19	; 0x07
    1dc8:	2e 83       	std	Y+6, r18	; 0x06
    1dca:	81 2f       	mov	r24, r17
    1dcc:	90 2f       	mov	r25, r16
    1dce:	df 91       	pop	r29
    1dd0:	cf 91       	pop	r28
    1dd2:	1f 91       	pop	r17
    1dd4:	0f 91       	pop	r16
    1dd6:	08 95       	ret

00001dd8 <__ultoa_invert>:
    1dd8:	fa 01       	movw	r30, r20
    1dda:	aa 27       	eor	r26, r26
    1ddc:	28 30       	cpi	r18, 0x08	; 8
    1dde:	51 f1       	breq	.+84     	; 0x1e34 <__ultoa_invert+0x5c>
    1de0:	20 31       	cpi	r18, 0x10	; 16
    1de2:	81 f1       	breq	.+96     	; 0x1e44 <__ultoa_invert+0x6c>
    1de4:	e8 94       	clt
    1de6:	6f 93       	push	r22
    1de8:	6e 7f       	andi	r22, 0xFE	; 254
    1dea:	6e 5f       	subi	r22, 0xFE	; 254
    1dec:	7f 4f       	sbci	r23, 0xFF	; 255
    1dee:	8f 4f       	sbci	r24, 0xFF	; 255
    1df0:	9f 4f       	sbci	r25, 0xFF	; 255
    1df2:	af 4f       	sbci	r26, 0xFF	; 255
    1df4:	b1 e0       	ldi	r27, 0x01	; 1
    1df6:	3e d0       	rcall	.+124    	; 0x1e74 <__ultoa_invert+0x9c>
    1df8:	b4 e0       	ldi	r27, 0x04	; 4
    1dfa:	3c d0       	rcall	.+120    	; 0x1e74 <__ultoa_invert+0x9c>
    1dfc:	67 0f       	add	r22, r23
    1dfe:	78 1f       	adc	r23, r24
    1e00:	89 1f       	adc	r24, r25
    1e02:	9a 1f       	adc	r25, r26
    1e04:	a1 1d       	adc	r26, r1
    1e06:	68 0f       	add	r22, r24
    1e08:	79 1f       	adc	r23, r25
    1e0a:	8a 1f       	adc	r24, r26
    1e0c:	91 1d       	adc	r25, r1
    1e0e:	a1 1d       	adc	r26, r1
    1e10:	6a 0f       	add	r22, r26
    1e12:	71 1d       	adc	r23, r1
    1e14:	81 1d       	adc	r24, r1
    1e16:	91 1d       	adc	r25, r1
    1e18:	a1 1d       	adc	r26, r1
    1e1a:	20 d0       	rcall	.+64     	; 0x1e5c <__ultoa_invert+0x84>
    1e1c:	09 f4       	brne	.+2      	; 0x1e20 <__ultoa_invert+0x48>
    1e1e:	68 94       	set
    1e20:	3f 91       	pop	r19
    1e22:	2a e0       	ldi	r18, 0x0A	; 10
    1e24:	26 9f       	mul	r18, r22
    1e26:	11 24       	eor	r1, r1
    1e28:	30 19       	sub	r19, r0
    1e2a:	30 5d       	subi	r19, 0xD0	; 208
    1e2c:	31 93       	st	Z+, r19
    1e2e:	de f6       	brtc	.-74     	; 0x1de6 <__ultoa_invert+0xe>
    1e30:	cf 01       	movw	r24, r30
    1e32:	08 95       	ret
    1e34:	46 2f       	mov	r20, r22
    1e36:	47 70       	andi	r20, 0x07	; 7
    1e38:	40 5d       	subi	r20, 0xD0	; 208
    1e3a:	41 93       	st	Z+, r20
    1e3c:	b3 e0       	ldi	r27, 0x03	; 3
    1e3e:	0f d0       	rcall	.+30     	; 0x1e5e <__ultoa_invert+0x86>
    1e40:	c9 f7       	brne	.-14     	; 0x1e34 <__ultoa_invert+0x5c>
    1e42:	f6 cf       	rjmp	.-20     	; 0x1e30 <__ultoa_invert+0x58>
    1e44:	46 2f       	mov	r20, r22
    1e46:	4f 70       	andi	r20, 0x0F	; 15
    1e48:	40 5d       	subi	r20, 0xD0	; 208
    1e4a:	4a 33       	cpi	r20, 0x3A	; 58
    1e4c:	18 f0       	brcs	.+6      	; 0x1e54 <__ultoa_invert+0x7c>
    1e4e:	49 5d       	subi	r20, 0xD9	; 217
    1e50:	31 fd       	sbrc	r19, 1
    1e52:	40 52       	subi	r20, 0x20	; 32
    1e54:	41 93       	st	Z+, r20
    1e56:	02 d0       	rcall	.+4      	; 0x1e5c <__ultoa_invert+0x84>
    1e58:	a9 f7       	brne	.-22     	; 0x1e44 <__ultoa_invert+0x6c>
    1e5a:	ea cf       	rjmp	.-44     	; 0x1e30 <__ultoa_invert+0x58>
    1e5c:	b4 e0       	ldi	r27, 0x04	; 4
    1e5e:	a6 95       	lsr	r26
    1e60:	97 95       	ror	r25
    1e62:	87 95       	ror	r24
    1e64:	77 95       	ror	r23
    1e66:	67 95       	ror	r22
    1e68:	ba 95       	dec	r27
    1e6a:	c9 f7       	brne	.-14     	; 0x1e5e <__ultoa_invert+0x86>
    1e6c:	00 97       	sbiw	r24, 0x00	; 0
    1e6e:	61 05       	cpc	r22, r1
    1e70:	71 05       	cpc	r23, r1
    1e72:	08 95       	ret
    1e74:	9b 01       	movw	r18, r22
    1e76:	ac 01       	movw	r20, r24
    1e78:	0a 2e       	mov	r0, r26
    1e7a:	06 94       	lsr	r0
    1e7c:	57 95       	ror	r21
    1e7e:	47 95       	ror	r20
    1e80:	37 95       	ror	r19
    1e82:	27 95       	ror	r18
    1e84:	ba 95       	dec	r27
    1e86:	c9 f7       	brne	.-14     	; 0x1e7a <__ultoa_invert+0xa2>
    1e88:	62 0f       	add	r22, r18
    1e8a:	73 1f       	adc	r23, r19
    1e8c:	84 1f       	adc	r24, r20
    1e8e:	95 1f       	adc	r25, r21
    1e90:	a0 1d       	adc	r26, r0
    1e92:	08 95       	ret

00001e94 <__prologue_saves__>:
    1e94:	2f 92       	push	r2
    1e96:	3f 92       	push	r3
    1e98:	4f 92       	push	r4
    1e9a:	5f 92       	push	r5
    1e9c:	6f 92       	push	r6
    1e9e:	7f 92       	push	r7
    1ea0:	8f 92       	push	r8
    1ea2:	9f 92       	push	r9
    1ea4:	af 92       	push	r10
    1ea6:	bf 92       	push	r11
    1ea8:	cf 92       	push	r12
    1eaa:	df 92       	push	r13
    1eac:	ef 92       	push	r14
    1eae:	ff 92       	push	r15
    1eb0:	0f 93       	push	r16
    1eb2:	1f 93       	push	r17
    1eb4:	cf 93       	push	r28
    1eb6:	df 93       	push	r29
    1eb8:	cd b7       	in	r28, 0x3d	; 61
    1eba:	de b7       	in	r29, 0x3e	; 62
    1ebc:	ca 1b       	sub	r28, r26
    1ebe:	db 0b       	sbc	r29, r27
    1ec0:	0f b6       	in	r0, 0x3f	; 63
    1ec2:	f8 94       	cli
    1ec4:	de bf       	out	0x3e, r29	; 62
    1ec6:	0f be       	out	0x3f, r0	; 63
    1ec8:	cd bf       	out	0x3d, r28	; 61
    1eca:	09 94       	ijmp

00001ecc <__epilogue_restores__>:
    1ecc:	2a 88       	ldd	r2, Y+18	; 0x12
    1ece:	39 88       	ldd	r3, Y+17	; 0x11
    1ed0:	48 88       	ldd	r4, Y+16	; 0x10
    1ed2:	5f 84       	ldd	r5, Y+15	; 0x0f
    1ed4:	6e 84       	ldd	r6, Y+14	; 0x0e
    1ed6:	7d 84       	ldd	r7, Y+13	; 0x0d
    1ed8:	8c 84       	ldd	r8, Y+12	; 0x0c
    1eda:	9b 84       	ldd	r9, Y+11	; 0x0b
    1edc:	aa 84       	ldd	r10, Y+10	; 0x0a
    1ede:	b9 84       	ldd	r11, Y+9	; 0x09
    1ee0:	c8 84       	ldd	r12, Y+8	; 0x08
    1ee2:	df 80       	ldd	r13, Y+7	; 0x07
    1ee4:	ee 80       	ldd	r14, Y+6	; 0x06
    1ee6:	fd 80       	ldd	r15, Y+5	; 0x05
    1ee8:	0c 81       	ldd	r16, Y+4	; 0x04
    1eea:	1b 81       	ldd	r17, Y+3	; 0x03
    1eec:	aa 81       	ldd	r26, Y+2	; 0x02
    1eee:	b9 81       	ldd	r27, Y+1	; 0x01
    1ef0:	ce 0f       	add	r28, r30
    1ef2:	d1 1d       	adc	r29, r1
    1ef4:	0f b6       	in	r0, 0x3f	; 63
    1ef6:	f8 94       	cli
    1ef8:	de bf       	out	0x3e, r29	; 62
    1efa:	0f be       	out	0x3f, r0	; 63
    1efc:	cd bf       	out	0x3d, r28	; 61
    1efe:	ed 01       	movw	r28, r26
    1f00:	08 95       	ret

00001f02 <_exit>:
    1f02:	f8 94       	cli

00001f04 <__stop_program>:
    1f04:	ff cf       	rjmp	.-2      	; 0x1f04 <__stop_program>
