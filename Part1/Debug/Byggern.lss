
Byggern.elf:     file format elf32-avr

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .data         00000230  00800100  00001b62  00001bf6  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  1 .text         00001b62  00000000  00000000  00000094  2**1
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .bss          00000019  00800330  00800330  00001e26  2**0
                  ALLOC
  3 .comment      0000005c  00000000  00000000  00001e26  2**0
                  CONTENTS, READONLY
  4 .debug_aranges 000002c0  00000000  00000000  00001e82  2**0
                  CONTENTS, READONLY, DEBUGGING
  5 .debug_info   00002ecb  00000000  00000000  00002142  2**0
                  CONTENTS, READONLY, DEBUGGING
  6 .debug_abbrev 0000103f  00000000  00000000  0000500d  2**0
                  CONTENTS, READONLY, DEBUGGING
  7 .debug_line   00000fda  00000000  00000000  0000604c  2**0
                  CONTENTS, READONLY, DEBUGGING
  8 .debug_frame  000007f0  00000000  00000000  00007028  2**2
                  CONTENTS, READONLY, DEBUGGING
  9 .debug_str    00000a40  00000000  00000000  00007818  2**0
                  CONTENTS, READONLY, DEBUGGING
 10 .debug_loc    00001fba  00000000  00000000  00008258  2**0
                  CONTENTS, READONLY, DEBUGGING
 11 .debug_ranges 00000288  00000000  00000000  0000a212  2**0
                  CONTENTS, READONLY, DEBUGGING

Disassembly of section .text:

00000000 <__vectors>:
       0:	0c 94 b4 01 	jmp	0x368	; 0x368 <__ctors_end>
       4:	0c 94 5d 03 	jmp	0x6ba	; 0x6ba <__vector_1>
       8:	0c 94 d3 01 	jmp	0x3a6	; 0x3a6 <__vector_2>
       c:	0c 94 d1 01 	jmp	0x3a2	; 0x3a2 <__bad_interrupt>
      10:	0c 94 d1 01 	jmp	0x3a2	; 0x3a2 <__bad_interrupt>
      14:	0c 94 d1 01 	jmp	0x3a2	; 0x3a2 <__bad_interrupt>
      18:	0c 94 d1 01 	jmp	0x3a2	; 0x3a2 <__bad_interrupt>
      1c:	0c 94 d1 01 	jmp	0x3a2	; 0x3a2 <__bad_interrupt>
      20:	0c 94 d1 01 	jmp	0x3a2	; 0x3a2 <__bad_interrupt>
      24:	0c 94 d1 01 	jmp	0x3a2	; 0x3a2 <__bad_interrupt>
      28:	0c 94 d1 01 	jmp	0x3a2	; 0x3a2 <__bad_interrupt>
      2c:	0c 94 d1 01 	jmp	0x3a2	; 0x3a2 <__bad_interrupt>
      30:	0c 94 d1 01 	jmp	0x3a2	; 0x3a2 <__bad_interrupt>
      34:	0c 94 d1 01 	jmp	0x3a2	; 0x3a2 <__bad_interrupt>
      38:	0c 94 d1 01 	jmp	0x3a2	; 0x3a2 <__bad_interrupt>
      3c:	0c 94 d1 01 	jmp	0x3a2	; 0x3a2 <__bad_interrupt>
      40:	0c 94 d1 01 	jmp	0x3a2	; 0x3a2 <__bad_interrupt>
      44:	0c 94 d1 01 	jmp	0x3a2	; 0x3a2 <__bad_interrupt>
      48:	0c 94 d1 01 	jmp	0x3a2	; 0x3a2 <__bad_interrupt>
      4c:	0c 94 d1 01 	jmp	0x3a2	; 0x3a2 <__bad_interrupt>
      50:	0c 94 d1 01 	jmp	0x3a2	; 0x3a2 <__bad_interrupt>
      54:	0c 94 d1 01 	jmp	0x3a2	; 0x3a2 <__bad_interrupt>
      58:	0c 94 d1 01 	jmp	0x3a2	; 0x3a2 <__bad_interrupt>
      5c:	0c 94 d1 01 	jmp	0x3a2	; 0x3a2 <__bad_interrupt>
      60:	0c 94 d1 01 	jmp	0x3a2	; 0x3a2 <__bad_interrupt>
      64:	0c 94 d1 01 	jmp	0x3a2	; 0x3a2 <__bad_interrupt>
      68:	0c 94 d1 01 	jmp	0x3a2	; 0x3a2 <__bad_interrupt>
      6c:	0c 94 d1 01 	jmp	0x3a2	; 0x3a2 <__bad_interrupt>

00000070 <__trampolines_end>:
	...
      78:	00 06       	cpc	r0, r16
      7a:	5f 5f       	subi	r21, 0xFF	; 255
      7c:	06 00       	.word	0x0006	; ????
      7e:	00 00       	nop
      80:	00 07       	cpc	r16, r16
      82:	07 00       	.word	0x0007	; ????
      84:	07 07       	cpc	r16, r23
      86:	00 00       	nop
      88:	14 7f       	andi	r17, 0xF4	; 244
      8a:	7f 14       	cp	r7, r15
      8c:	7f 7f       	andi	r23, 0xFF	; 255
      8e:	14 00       	.word	0x0014	; ????
      90:	24 2e       	mov	r2, r20
      92:	6b 6b       	ori	r22, 0xBB	; 187
      94:	3a 12       	cpse	r3, r26
      96:	00 00       	nop
      98:	46 66       	ori	r20, 0x66	; 102
      9a:	30 18       	sub	r3, r0
      9c:	0c 66       	ori	r16, 0x6C	; 108
      9e:	62 00       	.word	0x0062	; ????
      a0:	30 7a       	andi	r19, 0xA0	; 160
      a2:	4f 5d       	subi	r20, 0xDF	; 223
      a4:	37 7a       	andi	r19, 0xA7	; 167
      a6:	48 00       	.word	0x0048	; ????
      a8:	04 07       	cpc	r16, r20
      aa:	03 00       	.word	0x0003	; ????
      ac:	00 00       	nop
      ae:	00 00       	nop
      b0:	00 1c       	adc	r0, r0
      b2:	3e 63       	ori	r19, 0x3E	; 62
      b4:	41 00       	.word	0x0041	; ????
      b6:	00 00       	nop
      b8:	00 41       	sbci	r16, 0x10	; 16
      ba:	63 3e       	cpi	r22, 0xE3	; 227
      bc:	1c 00       	.word	0x001c	; ????
      be:	00 00       	nop
      c0:	08 2a       	or	r0, r24
      c2:	3e 1c       	adc	r3, r14
      c4:	1c 3e       	cpi	r17, 0xEC	; 236
      c6:	2a 08       	sbc	r2, r10
      c8:	08 08       	sbc	r0, r8
      ca:	3e 3e       	cpi	r19, 0xEE	; 238
      cc:	08 08       	sbc	r0, r8
      ce:	00 00       	nop
      d0:	00 a0       	ldd	r0, Z+32	; 0x20
      d2:	e0 60       	ori	r30, 0x00	; 0
      d4:	00 00       	nop
      d6:	00 00       	nop
      d8:	08 08       	sbc	r0, r8
      da:	08 08       	sbc	r0, r8
      dc:	08 08       	sbc	r0, r8
      de:	00 00       	nop
      e0:	00 00       	nop
      e2:	60 60       	ori	r22, 0x00	; 0
      e4:	00 00       	nop
      e6:	00 00       	nop
      e8:	60 30       	cpi	r22, 0x00	; 0
      ea:	18 0c       	add	r1, r8
      ec:	06 03       	mulsu	r16, r22
      ee:	01 00       	.word	0x0001	; ????
      f0:	3e 7f       	andi	r19, 0xFE	; 254
      f2:	59 4d       	sbci	r21, 0xD9	; 217
      f4:	7f 3e       	cpi	r23, 0xEF	; 239
      f6:	00 00       	nop
      f8:	42 42       	sbci	r20, 0x22	; 34
      fa:	7f 7f       	andi	r23, 0xFF	; 255
      fc:	40 40       	sbci	r20, 0x00	; 0
      fe:	00 00       	nop
     100:	62 73       	andi	r22, 0x32	; 50
     102:	59 49       	sbci	r21, 0x99	; 153
     104:	6f 66       	ori	r22, 0x6F	; 111
     106:	00 00       	nop
     108:	22 63       	ori	r18, 0x32	; 50
     10a:	49 49       	sbci	r20, 0x99	; 153
     10c:	7f 36       	cpi	r23, 0x6F	; 111
     10e:	00 00       	nop
     110:	18 1c       	adc	r1, r8
     112:	16 13       	cpse	r17, r22
     114:	7f 7f       	andi	r23, 0xFF	; 255
     116:	10 00       	.word	0x0010	; ????
     118:	27 67       	ori	r18, 0x77	; 119
     11a:	45 45       	sbci	r20, 0x55	; 85
     11c:	7d 39       	cpi	r23, 0x9D	; 157
     11e:	00 00       	nop
     120:	3c 7e       	andi	r19, 0xEC	; 236
     122:	4b 49       	sbci	r20, 0x9B	; 155
     124:	79 30       	cpi	r23, 0x09	; 9
     126:	00 00       	nop
     128:	03 63       	ori	r16, 0x33	; 51
     12a:	71 19       	sub	r23, r1
     12c:	0f 07       	cpc	r16, r31
     12e:	00 00       	nop
     130:	36 7f       	andi	r19, 0xF6	; 246
     132:	49 49       	sbci	r20, 0x99	; 153
     134:	7f 36       	cpi	r23, 0x6F	; 111
     136:	00 00       	nop
     138:	06 4f       	sbci	r16, 0xF6	; 246
     13a:	49 69       	ori	r20, 0x99	; 153
     13c:	3f 1e       	adc	r3, r31
     13e:	00 00       	nop
     140:	00 00       	nop
     142:	6c 6c       	ori	r22, 0xCC	; 204
     144:	00 00       	nop
     146:	00 00       	nop
     148:	00 a0       	ldd	r0, Z+32	; 0x20
     14a:	ec 6c       	ori	r30, 0xCC	; 204
     14c:	00 00       	nop
     14e:	00 00       	nop
     150:	08 1c       	adc	r0, r8
     152:	36 63       	ori	r19, 0x36	; 54
     154:	41 00       	.word	0x0041	; ????
     156:	00 00       	nop
     158:	14 14       	cp	r1, r4
     15a:	14 14       	cp	r1, r4
     15c:	14 14       	cp	r1, r4
     15e:	00 00       	nop
     160:	00 41       	sbci	r16, 0x10	; 16
     162:	63 36       	cpi	r22, 0x63	; 99
     164:	1c 08       	sbc	r1, r12
     166:	00 00       	nop
     168:	02 03       	mulsu	r16, r18
     16a:	51 59       	subi	r21, 0x91	; 145
     16c:	0f 06       	cpc	r0, r31
     16e:	00 00       	nop
     170:	3e 7f       	andi	r19, 0xFE	; 254
     172:	41 5d       	subi	r20, 0xD1	; 209
     174:	5d 1f       	adc	r21, r29
     176:	1e 00       	.word	0x001e	; ????
     178:	7c 7e       	andi	r23, 0xEC	; 236
     17a:	13 13       	cpse	r17, r19
     17c:	7e 7c       	andi	r23, 0xCE	; 206
     17e:	00 00       	nop
     180:	41 7f       	andi	r20, 0xF1	; 241
     182:	7f 49       	sbci	r23, 0x9F	; 159
     184:	49 7f       	andi	r20, 0xF9	; 249
     186:	36 00       	.word	0x0036	; ????
     188:	1c 3e       	cpi	r17, 0xEC	; 236
     18a:	63 41       	sbci	r22, 0x13	; 19
     18c:	41 63       	ori	r20, 0x31	; 49
     18e:	22 00       	.word	0x0022	; ????
     190:	41 7f       	andi	r20, 0xF1	; 241
     192:	7f 41       	sbci	r23, 0x1F	; 31
     194:	63 7f       	andi	r22, 0xF3	; 243
     196:	1c 00       	.word	0x001c	; ????
     198:	41 7f       	andi	r20, 0xF1	; 241
     19a:	7f 49       	sbci	r23, 0x9F	; 159
     19c:	5d 41       	sbci	r21, 0x1D	; 29
     19e:	63 00       	.word	0x0063	; ????
     1a0:	41 7f       	andi	r20, 0xF1	; 241
     1a2:	7f 49       	sbci	r23, 0x9F	; 159
     1a4:	1d 01       	movw	r2, r26
     1a6:	03 00       	.word	0x0003	; ????
     1a8:	1c 3e       	cpi	r17, 0xEC	; 236
     1aa:	63 41       	sbci	r22, 0x13	; 19
     1ac:	51 73       	andi	r21, 0x31	; 49
     1ae:	72 00       	.word	0x0072	; ????
     1b0:	7f 7f       	andi	r23, 0xFF	; 255
     1b2:	08 08       	sbc	r0, r8
     1b4:	7f 7f       	andi	r23, 0xFF	; 255
     1b6:	00 00       	nop
     1b8:	00 41       	sbci	r16, 0x10	; 16
     1ba:	7f 7f       	andi	r23, 0xFF	; 255
     1bc:	41 00       	.word	0x0041	; ????
     1be:	00 00       	nop
     1c0:	30 70       	andi	r19, 0x00	; 0
     1c2:	40 41       	sbci	r20, 0x10	; 16
     1c4:	7f 3f       	cpi	r23, 0xFF	; 255
     1c6:	01 00       	.word	0x0001	; ????
     1c8:	41 7f       	andi	r20, 0xF1	; 241
     1ca:	7f 08       	sbc	r7, r15
     1cc:	1c 77       	andi	r17, 0x7C	; 124
     1ce:	63 00       	.word	0x0063	; ????
     1d0:	41 7f       	andi	r20, 0xF1	; 241
     1d2:	7f 41       	sbci	r23, 0x1F	; 31
     1d4:	40 60       	ori	r20, 0x00	; 0
     1d6:	70 00       	.word	0x0070	; ????
     1d8:	7f 7f       	andi	r23, 0xFF	; 255
     1da:	06 0c       	add	r0, r6
     1dc:	06 7f       	andi	r16, 0xF6	; 246
     1de:	7f 00       	.word	0x007f	; ????
     1e0:	7f 7f       	andi	r23, 0xFF	; 255
     1e2:	06 0c       	add	r0, r6
     1e4:	18 7f       	andi	r17, 0xF8	; 248
     1e6:	7f 00       	.word	0x007f	; ????
     1e8:	1c 3e       	cpi	r17, 0xEC	; 236
     1ea:	63 41       	sbci	r22, 0x13	; 19
     1ec:	63 3e       	cpi	r22, 0xE3	; 227
     1ee:	1c 00       	.word	0x001c	; ????
     1f0:	41 7f       	andi	r20, 0xF1	; 241
     1f2:	7f 49       	sbci	r23, 0x9F	; 159
     1f4:	09 0f       	add	r16, r25
     1f6:	06 00       	.word	0x0006	; ????
     1f8:	1e 3f       	cpi	r17, 0xFE	; 254
     1fa:	21 71       	andi	r18, 0x11	; 17
     1fc:	7f 5e       	subi	r23, 0xEF	; 239
     1fe:	00 00       	nop
     200:	41 7f       	andi	r20, 0xF1	; 241
     202:	7f 19       	sub	r23, r15
     204:	39 6f       	ori	r19, 0xF9	; 249
     206:	46 00       	.word	0x0046	; ????
     208:	26 67       	ori	r18, 0x76	; 118
     20a:	4d 59       	subi	r20, 0x9D	; 157
     20c:	7b 32       	cpi	r23, 0x2B	; 43
     20e:	00 00       	nop
     210:	03 41       	sbci	r16, 0x13	; 19
     212:	7f 7f       	andi	r23, 0xFF	; 255
     214:	41 03       	mulsu	r20, r17
     216:	00 00       	nop
     218:	7f 7f       	andi	r23, 0xFF	; 255
     21a:	40 40       	sbci	r20, 0x00	; 0
     21c:	7f 7f       	andi	r23, 0xFF	; 255
     21e:	00 00       	nop
     220:	1f 3f       	cpi	r17, 0xFF	; 255
     222:	60 60       	ori	r22, 0x00	; 0
     224:	3f 1f       	adc	r19, r31
     226:	00 00       	nop
     228:	7f 7f       	andi	r23, 0xFF	; 255
     22a:	30 18       	sub	r3, r0
     22c:	30 7f       	andi	r19, 0xF0	; 240
     22e:	7f 00       	.word	0x007f	; ????
     230:	63 77       	andi	r22, 0x73	; 115
     232:	1c 08       	sbc	r1, r12
     234:	1c 77       	andi	r17, 0x7C	; 124
     236:	63 00       	.word	0x0063	; ????
     238:	07 4f       	sbci	r16, 0xF7	; 247
     23a:	78 78       	andi	r23, 0x88	; 136
     23c:	4f 07       	cpc	r20, r31
     23e:	00 00       	nop
     240:	67 73       	andi	r22, 0x37	; 55
     242:	59 4d       	sbci	r21, 0xD9	; 217
     244:	47 63       	ori	r20, 0x37	; 55
     246:	71 00       	.word	0x0071	; ????
     248:	00 7f       	andi	r16, 0xF0	; 240
     24a:	7f 41       	sbci	r23, 0x1F	; 31
     24c:	41 00       	.word	0x0041	; ????
     24e:	00 00       	nop
     250:	01 03       	mulsu	r16, r17
     252:	06 0c       	add	r0, r6
     254:	18 30       	cpi	r17, 0x08	; 8
     256:	60 00       	.word	0x0060	; ????
     258:	00 41       	sbci	r16, 0x10	; 16
     25a:	41 7f       	andi	r20, 0xF1	; 241
     25c:	7f 00       	.word	0x007f	; ????
     25e:	00 00       	nop
     260:	08 0c       	add	r0, r8
     262:	06 03       	mulsu	r16, r22
     264:	06 0c       	add	r0, r6
     266:	08 00       	.word	0x0008	; ????
     268:	80 80       	ld	r8, Z
     26a:	80 80       	ld	r8, Z
     26c:	80 80       	ld	r8, Z
     26e:	80 80       	ld	r8, Z
     270:	00 00       	nop
     272:	03 07       	cpc	r16, r19
     274:	04 00       	.word	0x0004	; ????
     276:	00 00       	nop
     278:	20 74       	andi	r18, 0x40	; 64
     27a:	54 54       	subi	r21, 0x44	; 68
     27c:	3c 78       	andi	r19, 0x8C	; 140
     27e:	40 00       	.word	0x0040	; ????
     280:	41 3f       	cpi	r20, 0xF1	; 241
     282:	7f 44       	sbci	r23, 0x4F	; 79
     284:	44 7c       	andi	r20, 0xC4	; 196
     286:	38 00       	.word	0x0038	; ????
     288:	38 7c       	andi	r19, 0xC8	; 200
     28a:	44 44       	sbci	r20, 0x44	; 68
     28c:	6c 28       	or	r6, r12
     28e:	00 00       	nop
     290:	30 78       	andi	r19, 0x80	; 128
     292:	48 49       	sbci	r20, 0x98	; 152
     294:	3f 7f       	andi	r19, 0xFF	; 255
     296:	40 00       	.word	0x0040	; ????
     298:	38 7c       	andi	r19, 0xC8	; 200
     29a:	54 54       	subi	r21, 0x44	; 68
     29c:	5c 18       	sub	r5, r12
     29e:	00 00       	nop
     2a0:	48 7e       	andi	r20, 0xE8	; 232
     2a2:	7f 49       	sbci	r23, 0x9F	; 159
     2a4:	03 02       	muls	r16, r19
     2a6:	00 00       	nop
     2a8:	98 bc       	out	0x28, r9	; 40
     2aa:	a4 a4       	ldd	r10, Z+44	; 0x2c
     2ac:	f8 7c       	andi	r31, 0xC8	; 200
     2ae:	04 00       	.word	0x0004	; ????
     2b0:	41 7f       	andi	r20, 0xF1	; 241
     2b2:	7f 08       	sbc	r7, r15
     2b4:	04 7c       	andi	r16, 0xC4	; 196
     2b6:	78 00       	.word	0x0078	; ????
     2b8:	00 44       	sbci	r16, 0x40	; 64
     2ba:	7d 7d       	andi	r23, 0xDD	; 221
     2bc:	40 00       	.word	0x0040	; ????
     2be:	00 00       	nop
     2c0:	40 c4       	rjmp	.+2176   	; 0xb42 <oled_put_char+0x4a>
     2c2:	84 fd       	sbrc	r24, 4
     2c4:	7d 00       	.word	0x007d	; ????
     2c6:	00 00       	nop
     2c8:	41 7f       	andi	r20, 0xF1	; 241
     2ca:	7f 10       	cpse	r7, r15
     2cc:	38 6c       	ori	r19, 0xC8	; 200
     2ce:	44 00       	.word	0x0044	; ????
     2d0:	00 41       	sbci	r16, 0x10	; 16
     2d2:	7f 7f       	andi	r23, 0xFF	; 255
     2d4:	40 00       	.word	0x0040	; ????
     2d6:	00 00       	nop
     2d8:	7c 7c       	andi	r23, 0xCC	; 204
     2da:	0c 18       	sub	r0, r12
     2dc:	0c 7c       	andi	r16, 0xCC	; 204
     2de:	78 00       	.word	0x0078	; ????
     2e0:	7c 7c       	andi	r23, 0xCC	; 204
     2e2:	04 04       	cpc	r0, r4
     2e4:	7c 78       	andi	r23, 0x8C	; 140
     2e6:	00 00       	nop
     2e8:	38 7c       	andi	r19, 0xC8	; 200
     2ea:	44 44       	sbci	r20, 0x44	; 68
     2ec:	7c 38       	cpi	r23, 0x8C	; 140
     2ee:	00 00       	nop
     2f0:	84 fc       	sbrc	r8, 4
     2f2:	f8 a4       	ldd	r15, Y+40	; 0x28
     2f4:	24 3c       	cpi	r18, 0xC4	; 196
     2f6:	18 00       	.word	0x0018	; ????
     2f8:	18 3c       	cpi	r17, 0xC8	; 200
     2fa:	24 a4       	ldd	r2, Z+44	; 0x2c
     2fc:	f8 fc       	.word	0xfcf8	; ????
     2fe:	84 00       	.word	0x0084	; ????
     300:	44 7c       	andi	r20, 0xC4	; 196
     302:	78 44       	sbci	r23, 0x48	; 72
     304:	1c 18       	sub	r1, r12
     306:	00 00       	nop
     308:	48 5c       	subi	r20, 0xC8	; 200
     30a:	54 54       	subi	r21, 0x44	; 68
     30c:	74 24       	eor	r7, r4
     30e:	00 00       	nop
     310:	00 04       	cpc	r0, r0
     312:	3e 7f       	andi	r19, 0xFE	; 254
     314:	44 24       	eor	r4, r4
     316:	00 00       	nop
     318:	3c 7c       	andi	r19, 0xCC	; 204
     31a:	40 40       	sbci	r20, 0x00	; 0
     31c:	3c 7c       	andi	r19, 0xCC	; 204
     31e:	40 00       	.word	0x0040	; ????
     320:	1c 3c       	cpi	r17, 0xCC	; 204
     322:	60 60       	ori	r22, 0x00	; 0
     324:	3c 1c       	adc	r3, r12
     326:	00 00       	nop
     328:	3c 7c       	andi	r19, 0xCC	; 204
     32a:	60 30       	cpi	r22, 0x00	; 0
     32c:	60 7c       	andi	r22, 0xC0	; 192
     32e:	3c 00       	.word	0x003c	; ????
     330:	44 6c       	ori	r20, 0xC4	; 196
     332:	38 10       	cpse	r3, r8
     334:	38 6c       	ori	r19, 0xC8	; 200
     336:	44 00       	.word	0x0044	; ????
     338:	9c bc       	out	0x2c, r9	; 44
     33a:	a0 a0       	ldd	r10, Z+32	; 0x20
     33c:	fc 7c       	andi	r31, 0xCC	; 204
     33e:	00 00       	nop
     340:	4c 64       	ori	r20, 0x4C	; 76
     342:	74 5c       	subi	r23, 0xC4	; 196
     344:	4c 64       	ori	r20, 0x4C	; 76
     346:	00 00       	nop
     348:	08 08       	sbc	r0, r8
     34a:	3e 77       	andi	r19, 0x7E	; 126
     34c:	41 41       	sbci	r20, 0x11	; 17
     34e:	00 00       	nop
     350:	00 00       	nop
     352:	00 77       	andi	r16, 0x70	; 112
     354:	77 00       	.word	0x0077	; ????
     356:	00 00       	nop
     358:	41 41       	sbci	r20, 0x11	; 17
     35a:	77 3e       	cpi	r23, 0xE7	; 231
     35c:	08 08       	sbc	r0, r8
     35e:	00 00       	nop
     360:	02 03       	mulsu	r16, r18
     362:	01 03       	mulsu	r16, r17
     364:	02 03       	mulsu	r16, r18
     366:	01 00       	.word	0x0001	; ????

00000368 <__ctors_end>:
     368:	11 24       	eor	r1, r1
     36a:	1f be       	out	0x3f, r1	; 63
     36c:	cf ef       	ldi	r28, 0xFF	; 255
     36e:	d4 e0       	ldi	r29, 0x04	; 4
     370:	de bf       	out	0x3e, r29	; 62
     372:	cd bf       	out	0x3d, r28	; 61

00000374 <__do_copy_data>:
     374:	13 e0       	ldi	r17, 0x03	; 3
     376:	a0 e0       	ldi	r26, 0x00	; 0
     378:	b1 e0       	ldi	r27, 0x01	; 1
     37a:	e2 e6       	ldi	r30, 0x62	; 98
     37c:	fb e1       	ldi	r31, 0x1B	; 27
     37e:	02 c0       	rjmp	.+4      	; 0x384 <__do_copy_data+0x10>
     380:	05 90       	lpm	r0, Z+
     382:	0d 92       	st	X+, r0
     384:	a0 33       	cpi	r26, 0x30	; 48
     386:	b1 07       	cpc	r27, r17
     388:	d9 f7       	brne	.-10     	; 0x380 <__do_copy_data+0xc>

0000038a <__do_clear_bss>:
     38a:	23 e0       	ldi	r18, 0x03	; 3
     38c:	a0 e3       	ldi	r26, 0x30	; 48
     38e:	b3 e0       	ldi	r27, 0x03	; 3
     390:	01 c0       	rjmp	.+2      	; 0x394 <.do_clear_bss_start>

00000392 <.do_clear_bss_loop>:
     392:	1d 92       	st	X+, r1

00000394 <.do_clear_bss_start>:
     394:	a9 34       	cpi	r26, 0x49	; 73
     396:	b2 07       	cpc	r27, r18
     398:	e1 f7       	brne	.-8      	; 0x392 <.do_clear_bss_loop>
     39a:	0e 94 c2 02 	call	0x584	; 0x584 <main>
     39e:	0c 94 af 0d 	jmp	0x1b5e	; 0x1b5e <_exit>

000003a2 <__bad_interrupt>:
     3a2:	0c 94 00 00 	jmp	0	; 0x0 <__vectors>

000003a6 <__vector_2>:
     3a6:	1f 92       	push	r1
     3a8:	0f 92       	push	r0
     3aa:	0f b6       	in	r0, 0x3f	; 63
     3ac:	0f 92       	push	r0
     3ae:	11 24       	eor	r1, r1
     3b0:	8f 93       	push	r24
     3b2:	ef 93       	push	r30
     3b4:	ff 93       	push	r31
     3b6:	e0 91 0a 01 	lds	r30, 0x010A
     3ba:	f0 91 0b 01 	lds	r31, 0x010B
     3be:	80 81       	ld	r24, Z
     3c0:	80 93 34 03 	sts	0x0334, r24
     3c4:	ff 91       	pop	r31
     3c6:	ef 91       	pop	r30
     3c8:	8f 91       	pop	r24
     3ca:	0f 90       	pop	r0
     3cc:	0f be       	out	0x3f, r0	; 63
     3ce:	0f 90       	pop	r0
     3d0:	1f 90       	pop	r1
     3d2:	18 95       	reti

000003d4 <ADC_init>:
     3d4:	8b 98       	cbi	0x11, 3	; 17
     3d6:	93 9a       	sbi	0x12, 3	; 18
     3d8:	f8 94       	cli
     3da:	85 b7       	in	r24, 0x35	; 53
     3dc:	88 60       	ori	r24, 0x08	; 8
     3de:	85 bf       	out	0x35, r24	; 53
     3e0:	85 b7       	in	r24, 0x35	; 53
     3e2:	8b 7f       	andi	r24, 0xFB	; 251
     3e4:	85 bf       	out	0x35, r24	; 53
     3e6:	8b b7       	in	r24, 0x3b	; 59
     3e8:	80 68       	ori	r24, 0x80	; 128
     3ea:	8b bf       	out	0x3b, r24	; 59
     3ec:	78 94       	sei
     3ee:	08 95       	ret

000003f0 <get_ADC_data>:
     3f0:	e0 91 0a 01 	lds	r30, 0x010A
     3f4:	f0 91 0b 01 	lds	r31, 0x010B
     3f8:	80 81       	ld	r24, Z
     3fa:	08 95       	ret

000003fc <ADC_start_read>:
     3fc:	81 30       	cpi	r24, 0x01	; 1
     3fe:	a9 f0       	breq	.+42     	; 0x42a <ADC_start_read+0x2e>
     400:	90 f0       	brcs	.+36     	; 0x426 <ADC_start_read+0x2a>
     402:	82 30       	cpi	r24, 0x02	; 2
     404:	19 f0       	breq	.+6      	; 0x40c <ADC_start_read+0x10>
     406:	83 30       	cpi	r24, 0x03	; 3
     408:	19 f0       	breq	.+6      	; 0x410 <ADC_start_read+0x14>
     40a:	04 c0       	rjmp	.+8      	; 0x414 <ADC_start_read+0x18>
     40c:	86 e0       	ldi	r24, 0x06	; 6
     40e:	0e c0       	rjmp	.+28     	; 0x42c <ADC_start_read+0x30>
     410:	87 e0       	ldi	r24, 0x07	; 7
     412:	0c c0       	rjmp	.+24     	; 0x42c <ADC_start_read+0x30>
     414:	80 e3       	ldi	r24, 0x30	; 48
     416:	91 e0       	ldi	r25, 0x01	; 1
     418:	9f 93       	push	r25
     41a:	8f 93       	push	r24
     41c:	0e 94 94 0a 	call	0x1528	; 0x1528 <printf>
     420:	0f 90       	pop	r0
     422:	0f 90       	pop	r0
     424:	08 95       	ret
     426:	84 e0       	ldi	r24, 0x04	; 4
     428:	01 c0       	rjmp	.+2      	; 0x42c <ADC_start_read+0x30>
     42a:	85 e0       	ldi	r24, 0x05	; 5
     42c:	e0 91 0a 01 	lds	r30, 0x010A
     430:	f0 91 0b 01 	lds	r31, 0x010B
     434:	80 83       	st	Z, r24
     436:	08 95       	ret

00000438 <My_serial_Transmit>:
}

void My_serial_Transmit( unsigned char data )
{
	/* Wait for empty transmit buffer */
	while ( !( UCSR0A & (1<<UDRE0)) )
     438:	5d 9b       	sbis	0x0b, 5	; 11
     43a:	fe cf       	rjmp	.-4      	; 0x438 <My_serial_Transmit>
	;
	/* Put data into buffer, sends the data */
	UDR0 = data;
     43c:	8c b9       	out	0x0c, r24	; 12
     43e:	08 95       	ret

00000440 <My_serial_Receive>:
}

unsigned char My_serial_Receive( void )
{
	/* Wait for data to be received */
	while ( !(UCSR0A & (1<<RXC0)) );
     440:	5f 9b       	sbis	0x0b, 7	; 11
     442:	fe cf       	rjmp	.-4      	; 0x440 <My_serial_Receive>
	/* Get and return received data from buffer */
	return UDR0;
     444:	8c b1       	in	r24, 0x0c	; 12
     446:	08 95       	ret

00000448 <My_serial_Init>:


void My_serial_Init( unsigned int ubrr )
{
	
	MCUCR |= (1 << SRE);
     448:	25 b7       	in	r18, 0x35	; 53
     44a:	20 68       	ori	r18, 0x80	; 128
     44c:	25 bf       	out	0x35, r18	; 53
	SFIOR |= (1 << XMM2);
     44e:	20 b7       	in	r18, 0x30	; 48
     450:	20 62       	ori	r18, 0x20	; 32
     452:	20 bf       	out	0x30, r18	; 48
	
	/* Set baud rate */
	UBRR0H = (unsigned char)(ubrr>>8);
     454:	90 bd       	out	0x20, r25	; 32
	UBRR0L = (unsigned char)ubrr;
     456:	89 b9       	out	0x09, r24	; 9
	/* Enable receiver and transmitter */
	UCSR0B = (1<<RXEN0)|(1<<TXEN0);
     458:	88 e1       	ldi	r24, 0x18	; 24
     45a:	8a b9       	out	0x0a, r24	; 10
	/* Set frame format: 8data, 2stop bit */
	UCSR0C = (1<<URSEL0)|(1<<USBS0)|(3<<UCSZ00);
     45c:	8e e8       	ldi	r24, 0x8E	; 142
     45e:	80 bd       	out	0x20, r24	; 32
	
	fdevopen(My_serial_Transmit, My_serial_Receive);
     460:	60 e2       	ldi	r22, 0x20	; 32
     462:	72 e0       	ldi	r23, 0x02	; 2
     464:	8c e1       	ldi	r24, 0x1C	; 28
     466:	92 e0       	ldi	r25, 0x02	; 2
     468:	0e 94 49 0a 	call	0x1492	; 0x1492 <fdevopen>
     46c:	08 95       	ret

0000046e <SRAM_test>:
 * Created: 05.09.2019 12:22:35
 *  Author: oledr
 */ 
#include <stdlib.h>
void SRAM_test(void)
{
     46e:	cf 92       	push	r12
     470:	df 92       	push	r13
     472:	ef 92       	push	r14
     474:	ff 92       	push	r15
     476:	0f 93       	push	r16
     478:	1f 93       	push	r17
     47a:	cf 93       	push	r28
     47c:	df 93       	push	r29
	MCUCR |= (1 << SRE);
     47e:	85 b7       	in	r24, 0x35	; 53
     480:	80 68       	ori	r24, 0x80	; 128
     482:	85 bf       	out	0x35, r24	; 53
	SFIOR |= (1 << XMM2);
     484:	80 b7       	in	r24, 0x30	; 48
     486:	80 62       	ori	r24, 0x20	; 32
     488:	80 bf       	out	0x30, r24	; 48

	volatile char *ext_ram = (char *) 0x1800; // Start address for the SRAM
	uint16_t ext_ram_size = 0x800;
	uint16_t write_errors = 0;
	uint16_t retrieval_errors = 0;
	printf("Starting SRAM test...\r\n");
     48a:	82 e4       	ldi	r24, 0x42	; 66
     48c:	91 e0       	ldi	r25, 0x01	; 1
     48e:	0e 94 a8 0a 	call	0x1550	; 0x1550 <puts>
	// rand() stores some internal state, so calling this function in a loop will
	// yield different seeds each time (unless srand() is called before this
	//function)
	uint16_t seed = rand();
     492:	0e 94 39 0a 	call	0x1472	; 0x1472 <rand>
     496:	6c 01       	movw	r12, r24
	// Write phase: Immediately check that the correct value was stored
	srand(seed);
     498:	0e 94 3e 0a 	call	0x147c	; 0x147c <srand>
	for (uint16_t i = 0; i < ext_ram_size; i++) {
     49c:	c0 e0       	ldi	r28, 0x00	; 0
     49e:	d0 e0       	ldi	r29, 0x00	; 0
	MCUCR |= (1 << SRE);
	SFIOR |= (1 << XMM2);

	volatile char *ext_ram = (char *) 0x1800; // Start address for the SRAM
	uint16_t ext_ram_size = 0x800;
	uint16_t write_errors = 0;
     4a0:	00 e0       	ldi	r16, 0x00	; 0
     4a2:	10 e0       	ldi	r17, 0x00	; 0
	for (uint16_t i = 0; i < ext_ram_size; i++) {
		uint8_t some_value = rand();
		ext_ram[i] = some_value;
		uint8_t retreived_value = ext_ram[i];
		if (retreived_value != some_value) {
			printf("Write phase error: ext_ram[%4d] = %02X (should be %02X)\r\n", i, retreived_value, some_value);
     4a4:	0f 2e       	mov	r0, r31
     4a6:	f9 e5       	ldi	r31, 0x59	; 89
     4a8:	ef 2e       	mov	r14, r31
     4aa:	f1 e0       	ldi	r31, 0x01	; 1
     4ac:	ff 2e       	mov	r15, r31
     4ae:	f0 2d       	mov	r31, r0
	//function)
	uint16_t seed = rand();
	// Write phase: Immediately check that the correct value was stored
	srand(seed);
	for (uint16_t i = 0; i < ext_ram_size; i++) {
		uint8_t some_value = rand();
     4b0:	0e 94 39 0a 	call	0x1472	; 0x1472 <rand>
     4b4:	fe 01       	movw	r30, r28
     4b6:	f8 5e       	subi	r31, 0xE8	; 232
		ext_ram[i] = some_value;
     4b8:	80 83       	st	Z, r24
		uint8_t retreived_value = ext_ram[i];
     4ba:	20 81       	ld	r18, Z
		if (retreived_value != some_value) {
     4bc:	28 17       	cp	r18, r24
     4be:	a9 f0       	breq	.+42     	; 0x4ea <SRAM_test+0x7c>
			printf("Write phase error: ext_ram[%4d] = %02X (should be %02X)\r\n", i, retreived_value, some_value);
     4c0:	99 27       	eor	r25, r25
     4c2:	9f 93       	push	r25
     4c4:	8f 93       	push	r24
     4c6:	1f 92       	push	r1
     4c8:	2f 93       	push	r18
     4ca:	df 93       	push	r29
     4cc:	cf 93       	push	r28
     4ce:	ff 92       	push	r15
     4d0:	ef 92       	push	r14
     4d2:	0e 94 94 0a 	call	0x1528	; 0x1528 <printf>
			write_errors++;
     4d6:	0f 5f       	subi	r16, 0xFF	; 255
     4d8:	1f 4f       	sbci	r17, 0xFF	; 255
     4da:	8d b7       	in	r24, 0x3d	; 61
     4dc:	9e b7       	in	r25, 0x3e	; 62
     4de:	08 96       	adiw	r24, 0x08	; 8
     4e0:	0f b6       	in	r0, 0x3f	; 63
     4e2:	f8 94       	cli
     4e4:	9e bf       	out	0x3e, r25	; 62
     4e6:	0f be       	out	0x3f, r0	; 63
     4e8:	8d bf       	out	0x3d, r24	; 61
	// yield different seeds each time (unless srand() is called before this
	//function)
	uint16_t seed = rand();
	// Write phase: Immediately check that the correct value was stored
	srand(seed);
	for (uint16_t i = 0; i < ext_ram_size; i++) {
     4ea:	21 96       	adiw	r28, 0x01	; 1
     4ec:	c1 15       	cp	r28, r1
     4ee:	98 e0       	ldi	r25, 0x08	; 8
     4f0:	d9 07       	cpc	r29, r25
     4f2:	f1 f6       	brne	.-68     	; 0x4b0 <SRAM_test+0x42>
			write_errors++;
		}
	}
	// Retrieval phase: Check that no values were changed during or after the write
	//phase
	srand(seed); // reset the PRNG to the state it had before the write phase
     4f4:	c6 01       	movw	r24, r12
     4f6:	0e 94 3e 0a 	call	0x147c	; 0x147c <srand>
	for (uint16_t i = 0; i < ext_ram_size; i++) {
     4fa:	c0 e0       	ldi	r28, 0x00	; 0
     4fc:	d0 e0       	ldi	r29, 0x00	; 0
	SFIOR |= (1 << XMM2);

	volatile char *ext_ram = (char *) 0x1800; // Start address for the SRAM
	uint16_t ext_ram_size = 0x800;
	uint16_t write_errors = 0;
	uint16_t retrieval_errors = 0;
     4fe:	e1 2c       	mov	r14, r1
     500:	f1 2c       	mov	r15, r1
	srand(seed); // reset the PRNG to the state it had before the write phase
	for (uint16_t i = 0; i < ext_ram_size; i++) {
		uint8_t some_value = rand();
		uint8_t retreived_value = ext_ram[i];
		if (retreived_value != some_value) {
			printf("Retrieval phase error: ext_ram[%4d] = %02X (should be %02X)\r\n", i, retreived_value, some_value);
     502:	0f 2e       	mov	r0, r31
     504:	f3 e9       	ldi	r31, 0x93	; 147
     506:	cf 2e       	mov	r12, r31
     508:	f1 e0       	ldi	r31, 0x01	; 1
     50a:	df 2e       	mov	r13, r31
     50c:	f0 2d       	mov	r31, r0
	}
	// Retrieval phase: Check that no values were changed during or after the write
	//phase
	srand(seed); // reset the PRNG to the state it had before the write phase
	for (uint16_t i = 0; i < ext_ram_size; i++) {
		uint8_t some_value = rand();
     50e:	0e 94 39 0a 	call	0x1472	; 0x1472 <rand>
     512:	fe 01       	movw	r30, r28
     514:	f8 5e       	subi	r31, 0xE8	; 232
		uint8_t retreived_value = ext_ram[i];
     516:	20 81       	ld	r18, Z
		if (retreived_value != some_value) {
     518:	28 17       	cp	r18, r24
     51a:	b1 f0       	breq	.+44     	; 0x548 <__stack+0x49>
			printf("Retrieval phase error: ext_ram[%4d] = %02X (should be %02X)\r\n", i, retreived_value, some_value);
     51c:	99 27       	eor	r25, r25
     51e:	9f 93       	push	r25
     520:	8f 93       	push	r24
     522:	1f 92       	push	r1
     524:	2f 93       	push	r18
     526:	df 93       	push	r29
     528:	cf 93       	push	r28
     52a:	df 92       	push	r13
     52c:	cf 92       	push	r12
     52e:	0e 94 94 0a 	call	0x1528	; 0x1528 <printf>
			retrieval_errors++;
     532:	8f ef       	ldi	r24, 0xFF	; 255
     534:	e8 1a       	sub	r14, r24
     536:	f8 0a       	sbc	r15, r24
     538:	8d b7       	in	r24, 0x3d	; 61
     53a:	9e b7       	in	r25, 0x3e	; 62
     53c:	08 96       	adiw	r24, 0x08	; 8
     53e:	0f b6       	in	r0, 0x3f	; 63
     540:	f8 94       	cli
     542:	9e bf       	out	0x3e, r25	; 62
     544:	0f be       	out	0x3f, r0	; 63
     546:	8d bf       	out	0x3d, r24	; 61
		}
	}
	// Retrieval phase: Check that no values were changed during or after the write
	//phase
	srand(seed); // reset the PRNG to the state it had before the write phase
	for (uint16_t i = 0; i < ext_ram_size; i++) {
     548:	21 96       	adiw	r28, 0x01	; 1
     54a:	c1 15       	cp	r28, r1
     54c:	98 e0       	ldi	r25, 0x08	; 8
     54e:	d9 07       	cpc	r29, r25
     550:	f1 f6       	brne	.-68     	; 0x50e <__stack+0xf>
		if (retreived_value != some_value) {
			printf("Retrieval phase error: ext_ram[%4d] = %02X (should be %02X)\r\n", i, retreived_value, some_value);
			retrieval_errors++;
		}
	}
	printf("SRAM test completed with \n%4d errors in write phase and \n%4d errors in retrieval phase\r\n\n", write_errors, retrieval_errors);
     552:	ff 92       	push	r15
     554:	ef 92       	push	r14
     556:	1f 93       	push	r17
     558:	0f 93       	push	r16
     55a:	81 ed       	ldi	r24, 0xD1	; 209
     55c:	91 e0       	ldi	r25, 0x01	; 1
     55e:	9f 93       	push	r25
     560:	8f 93       	push	r24
     562:	0e 94 94 0a 	call	0x1528	; 0x1528 <printf>
     566:	0f 90       	pop	r0
     568:	0f 90       	pop	r0
     56a:	0f 90       	pop	r0
     56c:	0f 90       	pop	r0
     56e:	0f 90       	pop	r0
     570:	0f 90       	pop	r0
     572:	df 91       	pop	r29
     574:	cf 91       	pop	r28
     576:	1f 91       	pop	r17
     578:	0f 91       	pop	r16
     57a:	ff 90       	pop	r15
     57c:	ef 90       	pop	r14
     57e:	df 90       	pop	r13
     580:	cf 90       	pop	r12
     582:	08 95       	ret

00000584 <main>:
#include "oled_menu.h"
#include "CAN_controller_driver.h"
#include "CAN.h"
long map(long x, long in_min, long in_max, long out_min, long out_max);
int main( )
{
     584:	cf 93       	push	r28
     586:	df 93       	push	r29
     588:	cd b7       	in	r28, 0x3d	; 61
     58a:	de b7       	in	r29, 0x3e	; 62
     58c:	60 97       	sbiw	r28, 0x10	; 16
     58e:	0f b6       	in	r0, 0x3f	; 63
     590:	f8 94       	cli
     592:	de bf       	out	0x3e, r29	; 62
     594:	0f be       	out	0x3f, r0	; 63
     596:	cd bf       	out	0x3d, r28	; 61
	My_serial_Init ( MYUBRR );
     598:	8f e1       	ldi	r24, 0x1F	; 31
     59a:	90 e0       	ldi	r25, 0x00	; 0
     59c:	0e 94 24 02 	call	0x448	; 0x448 <My_serial_Init>
	#else
		//round up by default
		__ticks_dc = (uint32_t)(ceil(fabs(__tmp)));
	#endif

	__builtin_avr_delay_cycles(__ticks_dc);
     5a0:	2f ef       	ldi	r18, 0xFF	; 255
     5a2:	8f ef       	ldi	r24, 0xFF	; 255
     5a4:	9e e0       	ldi	r25, 0x0E	; 14
     5a6:	21 50       	subi	r18, 0x01	; 1
     5a8:	80 40       	sbci	r24, 0x00	; 0
     5aa:	90 40       	sbci	r25, 0x00	; 0
     5ac:	e1 f7       	brne	.-8      	; 0x5a6 <main+0x22>
     5ae:	00 c0       	rjmp	.+0      	; 0x5b0 <main+0x2c>
     5b0:	00 00       	nop
	_delay_ms(1000);
	
	ADC_init();
     5b2:	0e 94 ea 01 	call	0x3d4	; 0x3d4 <ADC_init>
	SRAM_test();
     5b6:	0e 94 37 02 	call	0x46e	; 0x46e <SRAM_test>
	Joystick_calibrate();
     5ba:	0e 94 86 04 	call	0x90c	; 0x90c <Joystick_calibrate>
	Joystick position;
	SLI_pos_t sliderposition;
	oled_init();
     5be:	0e 94 be 06 	call	0xd7c	; 0xd7c <oled_init>
	menu* mymenu = oled_menu_init();
     5c2:	0e 94 ba 07 	call	0xf74	; 0xf74 <oled_menu_init>
	
	can_init(MODE_NORMAL);
     5c6:	80 e0       	ldi	r24, 0x00	; 0
     5c8:	0e 94 71 03 	call	0x6e2	; 0x6e2 <can_init>
	
	
	uint8_t v[2] = {0};
	printf("Rx0 %d  Rx1  %d \n\r",v[0],v[1]);
     5cc:	1f 92       	push	r1
     5ce:	1f 92       	push	r1
     5d0:	1f 92       	push	r1
     5d2:	1f 92       	push	r1
     5d4:	8b e2       	ldi	r24, 0x2B	; 43
     5d6:	92 e0       	ldi	r25, 0x02	; 2
     5d8:	9f 93       	push	r25
     5da:	8f 93       	push	r24
     5dc:	0e 94 94 0a 	call	0x1528	; 0x1528 <printf>
     5e0:	0f 90       	pop	r0
     5e2:	0f 90       	pop	r0
     5e4:	0f 90       	pop	r0
     5e6:	0f 90       	pop	r0
     5e8:	0f 90       	pop	r0
     5ea:	0f 90       	pop	r0
			//test2.length	= 5;
			
			Joystick minJoystick;
			minJoystick = joystickPos();
			minJoystick = JoystickDirection();
			hei.id = 1;
     5ec:	aa 24       	eor	r10, r10
     5ee:	a3 94       	inc	r10
     5f0:	b1 2c       	mov	r11, r1
	}
	return 0;
}
long map(long x, long in_min, long in_max, long out_min, long out_max)
{
	return (x - in_min) * (out_max - out_min) / (in_max - in_min) + out_min;
     5f2:	0f 2e       	mov	r0, r31
     5f4:	f8 ec       	ldi	r31, 0xC8	; 200
     5f6:	4f 2e       	mov	r4, r31
     5f8:	51 2c       	mov	r5, r1
     5fa:	61 2c       	mov	r6, r1
     5fc:	71 2c       	mov	r7, r1
     5fe:	f0 2d       	mov	r31, r0
			minJoystick = joystickPos();
			minJoystick = JoystickDirection();
			hei.id = 1;
			hei.data[0] = map(minJoystick.xPos,-100,100,0,200);
			hei.data[1] = map(minJoystick.yPos,-100,100,0,200);
			hei.length = 2;
     600:	68 94       	set
     602:	99 24       	eor	r9, r9
     604:	91 f8       	bld	r9, 1

			can_message_send(&hei);
			printf(" Joystick x = %d, Joystick y = %d \r\n",minJoystick.xPos,minJoystick.yPos);
     606:	0f 2e       	mov	r0, r31
     608:	fe e3       	ldi	r31, 0x3E	; 62
     60a:	cf 2e       	mov	r12, r31
     60c:	f2 e0       	ldi	r31, 0x02	; 2
     60e:	df 2e       	mov	r13, r31
     610:	f0 2d       	mov	r31, r0
			//test2.data[3]	= 'l';
			//test2.data[4]	= 'd';
			//test2.length	= 5;
			
			Joystick minJoystick;
			minJoystick = joystickPos();
     612:	0e 94 9d 04 	call	0x93a	; 0x93a <joystickPos>
			minJoystick = JoystickDirection();
     616:	0e 94 21 05 	call	0xa42	; 0xa42 <JoystickDirection>
     61a:	2c 87       	std	Y+12, r18	; 0x0c
     61c:	3d 87       	std	Y+13, r19	; 0x0d
     61e:	4e 87       	std	Y+14, r20	; 0x0e
     620:	5f 87       	std	Y+15, r21	; 0x0f
     622:	68 8b       	std	Y+16, r22	; 0x10
     624:	0c 85       	ldd	r16, Y+12	; 0x0c
     626:	1d 85       	ldd	r17, Y+13	; 0x0d
     628:	ee 84       	ldd	r14, Y+14	; 0x0e
     62a:	ff 84       	ldd	r15, Y+15	; 0x0f
			hei.id = 1;
     62c:	ba 82       	std	Y+2, r11	; 0x02
     62e:	a9 82       	std	Y+1, r10	; 0x01
			hei.data[0] = map(minJoystick.xPos,-100,100,0,200);
     630:	c8 01       	movw	r24, r16
     632:	aa 27       	eor	r26, r26
     634:	97 fd       	sbrc	r25, 7
     636:	a0 95       	com	r26
     638:	ba 2f       	mov	r27, r26
	}
	return 0;
}
long map(long x, long in_min, long in_max, long out_min, long out_max)
{
	return (x - in_min) * (out_max - out_min) / (in_max - in_min) + out_min;
     63a:	9c 01       	movw	r18, r24
     63c:	ad 01       	movw	r20, r26
     63e:	2c 59       	subi	r18, 0x9C	; 156
     640:	3f 4f       	sbci	r19, 0xFF	; 255
     642:	4f 4f       	sbci	r20, 0xFF	; 255
     644:	5f 4f       	sbci	r21, 0xFF	; 255
     646:	a8 ec       	ldi	r26, 0xC8	; 200
     648:	b0 e0       	ldi	r27, 0x00	; 0
     64a:	0e 94 74 08 	call	0x10e8	; 0x10e8 <__muluhisi3>
     64e:	a3 01       	movw	r20, r6
     650:	92 01       	movw	r18, r4
     652:	0e 94 55 08 	call	0x10aa	; 0x10aa <__divmodsi4>
			
			Joystick minJoystick;
			minJoystick = joystickPos();
			minJoystick = JoystickDirection();
			hei.id = 1;
			hei.data[0] = map(minJoystick.xPos,-100,100,0,200);
     656:	2c 83       	std	Y+4, r18	; 0x04
			hei.data[1] = map(minJoystick.yPos,-100,100,0,200);
     658:	c7 01       	movw	r24, r14
     65a:	aa 27       	eor	r26, r26
     65c:	97 fd       	sbrc	r25, 7
     65e:	a0 95       	com	r26
     660:	ba 2f       	mov	r27, r26
	}
	return 0;
}
long map(long x, long in_min, long in_max, long out_min, long out_max)
{
	return (x - in_min) * (out_max - out_min) / (in_max - in_min) + out_min;
     662:	9c 01       	movw	r18, r24
     664:	ad 01       	movw	r20, r26
     666:	2c 59       	subi	r18, 0x9C	; 156
     668:	3f 4f       	sbci	r19, 0xFF	; 255
     66a:	4f 4f       	sbci	r20, 0xFF	; 255
     66c:	5f 4f       	sbci	r21, 0xFF	; 255
     66e:	a8 ec       	ldi	r26, 0xC8	; 200
     670:	b0 e0       	ldi	r27, 0x00	; 0
     672:	0e 94 74 08 	call	0x10e8	; 0x10e8 <__muluhisi3>
     676:	a3 01       	movw	r20, r6
     678:	92 01       	movw	r18, r4
     67a:	0e 94 55 08 	call	0x10aa	; 0x10aa <__divmodsi4>
			Joystick minJoystick;
			minJoystick = joystickPos();
			minJoystick = JoystickDirection();
			hei.id = 1;
			hei.data[0] = map(minJoystick.xPos,-100,100,0,200);
			hei.data[1] = map(minJoystick.yPos,-100,100,0,200);
     67e:	2d 83       	std	Y+5, r18	; 0x05
			hei.length = 2;
     680:	9b 82       	std	Y+3, r9	; 0x03

			can_message_send(&hei);
     682:	ce 01       	movw	r24, r28
     684:	01 96       	adiw	r24, 0x01	; 1
     686:	0e 94 9d 03 	call	0x73a	; 0x73a <can_message_send>
			printf(" Joystick x = %d, Joystick y = %d \r\n",minJoystick.xPos,minJoystick.yPos);
     68a:	ff 92       	push	r15
     68c:	ef 92       	push	r14
     68e:	1f 93       	push	r17
     690:	0f 93       	push	r16
     692:	df 92       	push	r13
     694:	cf 92       	push	r12
     696:	0e 94 94 0a 	call	0x1528	; 0x1528 <printf>
     69a:	2f ef       	ldi	r18, 0xFF	; 255
     69c:	8f ef       	ldi	r24, 0xFF	; 255
     69e:	9e e0       	ldi	r25, 0x0E	; 14
     6a0:	21 50       	subi	r18, 0x01	; 1
     6a2:	80 40       	sbci	r24, 0x00	; 0
     6a4:	90 40       	sbci	r25, 0x00	; 0
     6a6:	e1 f7       	brne	.-8      	; 0x6a0 <main+0x11c>
     6a8:	00 c0       	rjmp	.+0      	; 0x6aa <main+0x126>
     6aa:	00 00       	nop
     6ac:	0f 90       	pop	r0
     6ae:	0f 90       	pop	r0
     6b0:	0f 90       	pop	r0
     6b2:	0f 90       	pop	r0
     6b4:	0f 90       	pop	r0
     6b6:	0f 90       	pop	r0
     6b8:	ac cf       	rjmp	.-168    	; 0x612 <main+0x8e>

000006ba <__vector_1>:
#include <avr/delay.h>

volatile int flag = 0;


ISR(INT0_vect){
     6ba:	1f 92       	push	r1
     6bc:	0f 92       	push	r0
     6be:	0f b6       	in	r0, 0x3f	; 63
     6c0:	0f 92       	push	r0
     6c2:	11 24       	eor	r1, r1
     6c4:	8f 93       	push	r24
     6c6:	9f 93       	push	r25
	flag = 1;
     6c8:	81 e0       	ldi	r24, 0x01	; 1
     6ca:	90 e0       	ldi	r25, 0x00	; 0
     6cc:	90 93 33 03 	sts	0x0333, r25
     6d0:	80 93 32 03 	sts	0x0332, r24
	//printf("\r\n INTERUPT\r\n");
}
     6d4:	9f 91       	pop	r25
     6d6:	8f 91       	pop	r24
     6d8:	0f 90       	pop	r0
     6da:	0f be       	out	0x3f, r0	; 63
     6dc:	0f 90       	pop	r0
     6de:	1f 90       	pop	r1
     6e0:	18 95       	reti

000006e2 <can_init>:

void can_init(uint8_t mode){

	mcp_2515_init(mode);
     6e2:	0e 94 43 04 	call	0x886	; 0x886 <mcp_2515_init>
	
	
	mcp_2515_write(MCP_CANINTE, MCP_RX_INT);
     6e6:	63 e0       	ldi	r22, 0x03	; 3
     6e8:	8b e2       	ldi	r24, 0x2B	; 43
     6ea:	0e 94 2a 04 	call	0x854	; 0x854 <mcp_2515_write>
	
	// Disable global interrupts
	cli();
     6ee:	f8 94       	cli
	// Interrupt on falling edge PD2
	set_bit(MCUCR, ISC01);
     6f0:	85 b7       	in	r24, 0x35	; 53
     6f2:	82 60       	ori	r24, 0x02	; 2
     6f4:	85 bf       	out	0x35, r24	; 53
	clear_bit(MCUCR, ISC00);
     6f6:	85 b7       	in	r24, 0x35	; 53
     6f8:	8e 7f       	andi	r24, 0xFE	; 254
     6fa:	85 bf       	out	0x35, r24	; 53
	// Enable interrupt on PD2
	set_bit(GICR,INT0);
     6fc:	8b b7       	in	r24, 0x3b	; 59
     6fe:	80 64       	ori	r24, 0x40	; 64
     700:	8b bf       	out	0x3b, r24	; 59
	// Enable global interrupts
	sei();
     702:	78 94       	sei
     704:	08 95       	ret

00000706 <can_transmit_complete>:
	mcp_2515_request_to_send(MCP_RTS_TX0 + buffer_number);
	//printf("buffer nr. %d\n\r",buffer_number);
	
}

int can_transmit_complete(int buffer_number){
     706:	cf 93       	push	r28
     708:	df 93       	push	r29
     70a:	ec 01       	movw	r28, r24
	uint8_t transmit_flag = mcp_2515_read(MCP_CANINTF);
     70c:	8c e2       	ldi	r24, 0x2C	; 44
     70e:	0e 94 18 04 	call	0x830	; 0x830 <mcp_2515_read>
	uint8_t interrupt_bits = (transmit_flag & (MCP_TX0IF + buffer_number*2));
     712:	9e 01       	movw	r18, r28
     714:	2e 5f       	subi	r18, 0xFE	; 254
     716:	3f 4f       	sbci	r19, 0xFF	; 255
     718:	42 2f       	mov	r20, r18
     71a:	44 0f       	add	r20, r20
     71c:	84 23       	and	r24, r20

	if(interrupt_bits == (MCP_TX0IF + buffer_number*2)){
     71e:	48 2f       	mov	r20, r24
     720:	50 e0       	ldi	r21, 0x00	; 0
     722:	22 0f       	add	r18, r18
     724:	33 1f       	adc	r19, r19
     726:	81 e0       	ldi	r24, 0x01	; 1
     728:	90 e0       	ldi	r25, 0x00	; 0
     72a:	42 17       	cp	r20, r18
     72c:	53 07       	cpc	r21, r19
     72e:	11 f4       	brne	.+4      	; 0x734 <can_transmit_complete+0x2e>
     730:	80 e0       	ldi	r24, 0x00	; 0
     732:	90 e0       	ldi	r25, 0x00	; 0
			return 0;
	}
	return 1;
}
     734:	df 91       	pop	r29
     736:	cf 91       	pop	r28
     738:	08 95       	ret

0000073a <can_message_send>:
	}
	
	return message1;
}

void can_message_send(can_message* message){
     73a:	ef 92       	push	r14
     73c:	ff 92       	push	r15
     73e:	0f 93       	push	r16
     740:	1f 93       	push	r17
     742:	cf 93       	push	r28
     744:	df 93       	push	r29
     746:	ec 01       	movw	r28, r24
	
	static int buffer_number = 0;
	
	while (!can_transmit_complete(buffer_number)){
     748:	11 c0       	rjmp	.+34     	; 0x76c <can_message_send+0x32>
		buffer_number +=1;
     74a:	20 91 30 03 	lds	r18, 0x0330
     74e:	30 91 31 03 	lds	r19, 0x0331
     752:	2f 5f       	subi	r18, 0xFF	; 255
     754:	3f 4f       	sbci	r19, 0xFF	; 255
     756:	30 93 31 03 	sts	0x0331, r19
     75a:	20 93 30 03 	sts	0x0330, r18
		if (buffer_number > 2) {
     75e:	23 30       	cpi	r18, 0x03	; 3
     760:	31 05       	cpc	r19, r1
     762:	24 f0       	brlt	.+8      	; 0x76c <can_message_send+0x32>
			buffer_number = 0;
     764:	10 92 31 03 	sts	0x0331, r1
     768:	10 92 30 03 	sts	0x0330, r1

void can_message_send(can_message* message){
	
	static int buffer_number = 0;
	
	while (!can_transmit_complete(buffer_number)){
     76c:	80 91 30 03 	lds	r24, 0x0330
     770:	90 91 31 03 	lds	r25, 0x0331
     774:	0e 94 83 03 	call	0x706	; 0x706 <can_transmit_complete>
     778:	89 2b       	or	r24, r25
     77a:	39 f3       	breq	.-50     	; 0x74a <can_message_send+0x10>
			buffer_number = 0;
		}
	}
	
	// Arbitration field identifier ID = 1337;    id high = 167  id low = 0
	unsigned int ID = message->id;
     77c:	88 81       	ld	r24, Y
     77e:	99 81       	ldd	r25, Y+1	; 0x01
	char id_high = ID / 8;
	char id_low = ID % 8;
     780:	28 2f       	mov	r18, r24
     782:	27 70       	andi	r18, 0x07	; 7
     784:	f2 2e       	mov	r15, r18
		}
	}
	
	// Arbitration field identifier ID = 1337;    id high = 167  id low = 0
	unsigned int ID = message->id;
	char id_high = ID / 8;
     786:	bc 01       	movw	r22, r24
     788:	76 95       	lsr	r23
     78a:	67 95       	ror	r22
     78c:	76 95       	lsr	r23
     78e:	67 95       	ror	r22
     790:	76 95       	lsr	r23
     792:	67 95       	ror	r22
	char id_low = ID % 8;
	id_low = id_low*0b100000;
	mcp_2515_write(MCP_TXB0SIDH + 16 * buffer_number, id_high);
     794:	00 e3       	ldi	r16, 0x30	; 48
     796:	13 e0       	ldi	r17, 0x03	; 3
     798:	f8 01       	movw	r30, r16
     79a:	80 81       	ld	r24, Z
     79c:	82 95       	swap	r24
     79e:	80 7f       	andi	r24, 0xF0	; 240
     7a0:	8f 5c       	subi	r24, 0xCF	; 207
     7a2:	0e 94 2a 04 	call	0x854	; 0x854 <mcp_2515_write>
	
	// Arbitration field identifier ID = 1337;    id high = 167  id low = 0
	unsigned int ID = message->id;
	char id_high = ID / 8;
	char id_low = ID % 8;
	id_low = id_low*0b100000;
     7a6:	6f 2d       	mov	r22, r15
     7a8:	62 95       	swap	r22
     7aa:	66 0f       	add	r22, r22
     7ac:	60 7e       	andi	r22, 0xE0	; 224
	mcp_2515_write(MCP_TXB0SIDH + 16 * buffer_number, id_high);
	mcp_2515_write(MCP_TXB0SIDL + 16 * buffer_number, id_low);
     7ae:	f8 01       	movw	r30, r16
     7b0:	80 81       	ld	r24, Z
     7b2:	82 95       	swap	r24
     7b4:	80 7f       	andi	r24, 0xF0	; 240
     7b6:	8e 5c       	subi	r24, 0xCE	; 206
     7b8:	0e 94 2a 04 	call	0x854	; 0x854 <mcp_2515_write>
	
	// Define data length of message
	uint8_t data_length = message->length;
     7bc:	ea 80       	ldd	r14, Y+2	; 0x02
	mcp_2515_write(MCP_TXB0DLC + 16 * buffer_number, data_length);
     7be:	f8 01       	movw	r30, r16
     7c0:	80 81       	ld	r24, Z
     7c2:	82 95       	swap	r24
     7c4:	80 7f       	andi	r24, 0xF0	; 240
     7c6:	6e 2d       	mov	r22, r14
     7c8:	8b 5c       	subi	r24, 0xCB	; 203
     7ca:	0e 94 2a 04 	call	0x854	; 0x854 <mcp_2515_write>
	
	// Write data bytes to transmit buffer
	char* data_bytes = message->data;
     7ce:	23 96       	adiw	r28, 0x03	; 3
	for (uint8_t byte = 0; byte < data_length; byte++) {
     7d0:	ee 20       	and	r14, r14
     7d2:	81 f0       	breq	.+32     	; 0x7f4 <can_message_send+0xba>
     7d4:	f1 2c       	mov	r15, r1
		mcp_2515_write(MCP_TXB0Dm + byte + 16 * buffer_number, data_bytes[byte]);
     7d6:	69 91       	ld	r22, Y+
     7d8:	f8 01       	movw	r30, r16
     7da:	80 81       	ld	r24, Z
     7dc:	2f 2d       	mov	r18, r15
     7de:	f0 e1       	ldi	r31, 0x10	; 16
     7e0:	8f 9f       	mul	r24, r31
     7e2:	20 0d       	add	r18, r0
     7e4:	11 24       	eor	r1, r1
     7e6:	82 2f       	mov	r24, r18
     7e8:	8a 5c       	subi	r24, 0xCA	; 202
     7ea:	0e 94 2a 04 	call	0x854	; 0x854 <mcp_2515_write>
	uint8_t data_length = message->length;
	mcp_2515_write(MCP_TXB0DLC + 16 * buffer_number, data_length);
	
	// Write data bytes to transmit buffer
	char* data_bytes = message->data;
	for (uint8_t byte = 0; byte < data_length; byte++) {
     7ee:	f3 94       	inc	r15
     7f0:	fe 10       	cpse	r15, r14
     7f2:	f1 cf       	rjmp	.-30     	; 0x7d6 <can_message_send+0x9c>
		mcp_2515_write(MCP_TXB0Dm + byte + 16 * buffer_number, data_bytes[byte]);
	}
	
	// Request to send message, send if successful
	mcp_2515_request_to_send(MCP_RTS_TX0 + buffer_number);
     7f4:	80 91 30 03 	lds	r24, 0x0330
     7f8:	8f 57       	subi	r24, 0x7F	; 127
     7fa:	0e 94 7b 04 	call	0x8f6	; 0x8f6 <mcp_2515_request_to_send>
	//printf("buffer nr. %d\n\r",buffer_number);
	
}
     7fe:	df 91       	pop	r29
     800:	cf 91       	pop	r28
     802:	1f 91       	pop	r17
     804:	0f 91       	pop	r16
     806:	ff 90       	pop	r15
     808:	ef 90       	pop	r14
     80a:	08 95       	ret

0000080c <mcp_activate_slave>:
     80c:	c4 98       	cbi	0x18, 4	; 24
     80e:	08 95       	ret

00000810 <mcp_deactivate_slave>:
     810:	c4 9a       	sbi	0x18, 4	; 24
     812:	08 95       	ret

00000814 <mcp_2515_reset>:
     814:	0e 94 06 04 	call	0x80c	; 0x80c <mcp_activate_slave>
     818:	80 ec       	ldi	r24, 0xC0	; 192
     81a:	0e 94 38 08 	call	0x1070	; 0x1070 <SPI_write>
     81e:	0e 94 08 04 	call	0x810	; 0x810 <mcp_deactivate_slave>
     822:	83 ec       	ldi	r24, 0xC3	; 195
     824:	99 e0       	ldi	r25, 0x09	; 9
     826:	01 97       	sbiw	r24, 0x01	; 1
     828:	f1 f7       	brne	.-4      	; 0x826 <mcp_2515_reset+0x12>
     82a:	00 c0       	rjmp	.+0      	; 0x82c <mcp_2515_reset+0x18>
     82c:	00 00       	nop
     82e:	08 95       	ret

00000830 <mcp_2515_read>:
     830:	cf 93       	push	r28
     832:	c8 2f       	mov	r28, r24
     834:	0e 94 06 04 	call	0x80c	; 0x80c <mcp_activate_slave>
     838:	83 e0       	ldi	r24, 0x03	; 3
     83a:	0e 94 38 08 	call	0x1070	; 0x1070 <SPI_write>
     83e:	8c 2f       	mov	r24, r28
     840:	0e 94 38 08 	call	0x1070	; 0x1070 <SPI_write>
     844:	0e 94 3c 08 	call	0x1078	; 0x1078 <SPI_read>
     848:	c8 2f       	mov	r28, r24
     84a:	0e 94 08 04 	call	0x810	; 0x810 <mcp_deactivate_slave>
     84e:	8c 2f       	mov	r24, r28
     850:	cf 91       	pop	r28
     852:	08 95       	ret

00000854 <mcp_2515_write>:
     854:	cf 93       	push	r28
     856:	df 93       	push	r29
     858:	d8 2f       	mov	r29, r24
     85a:	c6 2f       	mov	r28, r22
     85c:	0e 94 06 04 	call	0x80c	; 0x80c <mcp_activate_slave>
     860:	82 e0       	ldi	r24, 0x02	; 2
     862:	0e 94 38 08 	call	0x1070	; 0x1070 <SPI_write>
     866:	8d 2f       	mov	r24, r29
     868:	0e 94 38 08 	call	0x1070	; 0x1070 <SPI_write>
     86c:	8c 2f       	mov	r24, r28
     86e:	0e 94 38 08 	call	0x1070	; 0x1070 <SPI_write>
     872:	0e 94 08 04 	call	0x810	; 0x810 <mcp_deactivate_slave>
     876:	df 91       	pop	r29
     878:	cf 91       	pop	r28
     87a:	08 95       	ret

0000087c <mcp_2515_set_mode>:
     87c:	68 2f       	mov	r22, r24
     87e:	8f e0       	ldi	r24, 0x0F	; 15
     880:	0e 94 2a 04 	call	0x854	; 0x854 <mcp_2515_write>
     884:	08 95       	ret

00000886 <mcp_2515_init>:
     886:	cf 93       	push	r28
     888:	c8 2f       	mov	r28, r24
     88a:	0e 94 32 08 	call	0x1064	; 0x1064 <SPI_init>
     88e:	0e 94 0a 04 	call	0x814	; 0x814 <mcp_2515_reset>
     892:	8e e0       	ldi	r24, 0x0E	; 14
     894:	0e 94 18 04 	call	0x830	; 0x830 <mcp_2515_read>
     898:	80 7e       	andi	r24, 0xE0	; 224
     89a:	80 38       	cpi	r24, 0x80	; 128
     89c:	71 f0       	breq	.+28     	; 0x8ba <mcp_2515_init+0x34>
     89e:	1f 92       	push	r1
     8a0:	8f 93       	push	r24
     8a2:	83 e6       	ldi	r24, 0x63	; 99
     8a4:	92 e0       	ldi	r25, 0x02	; 2
     8a6:	9f 93       	push	r25
     8a8:	8f 93       	push	r24
     8aa:	0e 94 94 0a 	call	0x1528	; 0x1528 <printf>
     8ae:	0f 90       	pop	r0
     8b0:	0f 90       	pop	r0
     8b2:	0f 90       	pop	r0
     8b4:	0f 90       	pop	r0
     8b6:	81 e0       	ldi	r24, 0x01	; 1
     8b8:	1c c0       	rjmp	.+56     	; 0x8f2 <mcp_2515_init+0x6c>
     8ba:	8c 2f       	mov	r24, r28
     8bc:	0e 94 3e 04 	call	0x87c	; 0x87c <mcp_2515_set_mode>
     8c0:	8e e0       	ldi	r24, 0x0E	; 14
     8c2:	0e 94 18 04 	call	0x830	; 0x830 <mcp_2515_read>
     8c6:	80 7e       	andi	r24, 0xE0	; 224
     8c8:	8c 17       	cp	r24, r28
     8ca:	91 f0       	breq	.+36     	; 0x8f0 <mcp_2515_init+0x6a>
     8cc:	1f 92       	push	r1
     8ce:	8f 93       	push	r24
     8d0:	8d ea       	ldi	r24, 0xAD	; 173
     8d2:	92 e0       	ldi	r25, 0x02	; 2
     8d4:	9f 93       	push	r25
     8d6:	8f 93       	push	r24
     8d8:	0e 94 94 0a 	call	0x1528	; 0x1528 <printf>
     8dc:	81 ef       	ldi	r24, 0xF1	; 241
     8de:	92 e0       	ldi	r25, 0x02	; 2
     8e0:	0e 94 a8 0a 	call	0x1550	; 0x1550 <puts>
     8e4:	0f 90       	pop	r0
     8e6:	0f 90       	pop	r0
     8e8:	0f 90       	pop	r0
     8ea:	0f 90       	pop	r0
     8ec:	81 e0       	ldi	r24, 0x01	; 1
     8ee:	01 c0       	rjmp	.+2      	; 0x8f2 <mcp_2515_init+0x6c>
     8f0:	80 e0       	ldi	r24, 0x00	; 0
     8f2:	cf 91       	pop	r28
     8f4:	08 95       	ret

000008f6 <mcp_2515_request_to_send>:
     8f6:	cf 93       	push	r28
     8f8:	c8 2f       	mov	r28, r24
     8fa:	0e 94 06 04 	call	0x80c	; 0x80c <mcp_activate_slave>
     8fe:	8c 2f       	mov	r24, r28
     900:	0e 94 38 08 	call	0x1070	; 0x1070 <SPI_write>
     904:	0e 94 08 04 	call	0x810	; 0x810 <mcp_deactivate_slave>
     908:	cf 91       	pop	r28
     90a:	08 95       	ret

0000090c <Joystick_calibrate>:

uint8_t center_x , center_y;

void Joystick_calibrate(void){
	
	ADC_start_read(CHANNEL1);
     90c:	80 e0       	ldi	r24, 0x00	; 0
     90e:	0e 94 fe 01 	call	0x3fc	; 0x3fc <ADC_start_read>
	#else
		//round up by default
		__ticks_dc = (uint32_t)(ceil(fabs(__tmp)));
	#endif

	__builtin_avr_delay_cycles(__ticks_dc);
     912:	82 e4       	ldi	r24, 0x42	; 66
     914:	8a 95       	dec	r24
     916:	f1 f7       	brne	.-4      	; 0x914 <Joystick_calibrate+0x8>
     918:	00 c0       	rjmp	.+0      	; 0x91a <Joystick_calibrate+0xe>
	_delay_us(200);
	center_x = get_ADC_data();
     91a:	0e 94 f8 01 	call	0x3f0	; 0x3f0 <get_ADC_data>
     91e:	80 93 35 03 	sts	0x0335, r24
	ADC_start_read(CHANNEL2);
     922:	81 e0       	ldi	r24, 0x01	; 1
     924:	0e 94 fe 01 	call	0x3fc	; 0x3fc <ADC_start_read>
     928:	82 e4       	ldi	r24, 0x42	; 66
     92a:	8a 95       	dec	r24
     92c:	f1 f7       	brne	.-4      	; 0x92a <Joystick_calibrate+0x1e>
     92e:	00 c0       	rjmp	.+0      	; 0x930 <Joystick_calibrate+0x24>
	_delay_us(200);
	center_y = get_ADC_data();
     930:	0e 94 f8 01 	call	0x3f0	; 0x3f0 <get_ADC_data>
     934:	80 93 36 03 	sts	0x0336, r24
     938:	08 95       	ret

0000093a <joystickPos>:
	 
}

Joystick joystickPos(void){
     93a:	0f 93       	push	r16
     93c:	1f 93       	push	r17
     93e:	cf 93       	push	r28
     940:	df 93       	push	r29
     942:	00 d0       	rcall	.+0      	; 0x944 <joystickPos+0xa>
     944:	00 d0       	rcall	.+0      	; 0x946 <joystickPos+0xc>
     946:	1f 92       	push	r1
     948:	cd b7       	in	r28, 0x3d	; 61
     94a:	de b7       	in	r29, 0x3e	; 62
	uint8_t x, y; 
	Joystick position;
	position.xPos = 0;
	position.yPos = 0;
	
	ADC_start_read(CHANNEL1);
     94c:	80 e0       	ldi	r24, 0x00	; 0
     94e:	0e 94 fe 01 	call	0x3fc	; 0x3fc <ADC_start_read>
     952:	82 e4       	ldi	r24, 0x42	; 66
     954:	8a 95       	dec	r24
     956:	f1 f7       	brne	.-4      	; 0x954 <joystickPos+0x1a>
     958:	00 c0       	rjmp	.+0      	; 0x95a <joystickPos+0x20>
	_delay_us(200);
	x = get_ADC_data();
     95a:	0e 94 f8 01 	call	0x3f0	; 0x3f0 <get_ADC_data>
	
	if(x > center_x){
     95e:	20 91 35 03 	lds	r18, 0x0335
     962:	28 17       	cp	r18, r24
     964:	a0 f4       	brcc	.+40     	; 0x98e <joystickPos+0x54>
		position.xPos = 100 * (x - center_x) / (0xFF - center_x);
     966:	30 e0       	ldi	r19, 0x00	; 0
     968:	99 27       	eor	r25, r25
     96a:	ac 01       	movw	r20, r24
     96c:	42 1b       	sub	r20, r18
     96e:	53 0b       	sbc	r21, r19
     970:	64 e6       	ldi	r22, 0x64	; 100
     972:	64 9f       	mul	r22, r20
     974:	c0 01       	movw	r24, r0
     976:	65 9f       	mul	r22, r21
     978:	90 0d       	add	r25, r0
     97a:	11 24       	eor	r1, r1
     97c:	6f ef       	ldi	r22, 0xFF	; 255
     97e:	70 e0       	ldi	r23, 0x00	; 0
     980:	62 1b       	sub	r22, r18
     982:	73 0b       	sbc	r23, r19
     984:	0e 94 41 08 	call	0x1082	; 0x1082 <__divmodhi4>
     988:	16 2f       	mov	r17, r22
     98a:	07 2f       	mov	r16, r23
     98c:	15 c0       	rjmp	.+42     	; 0x9b8 <joystickPos+0x7e>
	} else if (x < center_x){
     98e:	82 17       	cp	r24, r18
     990:	88 f4       	brcc	.+34     	; 0x9b4 <joystickPos+0x7a>
		position.xPos = 100 * (x - center_x) / (center_x - 0);
     992:	62 2f       	mov	r22, r18
     994:	70 e0       	ldi	r23, 0x00	; 0
     996:	99 27       	eor	r25, r25
     998:	9c 01       	movw	r18, r24
     99a:	26 1b       	sub	r18, r22
     99c:	37 0b       	sbc	r19, r23
     99e:	44 e6       	ldi	r20, 0x64	; 100
     9a0:	42 9f       	mul	r20, r18
     9a2:	c0 01       	movw	r24, r0
     9a4:	43 9f       	mul	r20, r19
     9a6:	90 0d       	add	r25, r0
     9a8:	11 24       	eor	r1, r1
     9aa:	0e 94 41 08 	call	0x1082	; 0x1082 <__divmodhi4>
     9ae:	16 2f       	mov	r17, r22
     9b0:	07 2f       	mov	r16, r23
     9b2:	02 c0       	rjmp	.+4      	; 0x9b8 <joystickPos+0x7e>
	} else {
		position.xPos = 0;
     9b4:	10 e0       	ldi	r17, 0x00	; 0
     9b6:	00 e0       	ldi	r16, 0x00	; 0
	}
	ADC_start_read(CHANNEL2);
     9b8:	81 e0       	ldi	r24, 0x01	; 1
     9ba:	0e 94 fe 01 	call	0x3fc	; 0x3fc <ADC_start_read>
     9be:	82 e4       	ldi	r24, 0x42	; 66
     9c0:	8a 95       	dec	r24
     9c2:	f1 f7       	brne	.-4      	; 0x9c0 <joystickPos+0x86>
     9c4:	00 c0       	rjmp	.+0      	; 0x9c6 <joystickPos+0x8c>
	_delay_us(200);
	y = get_ADC_data();
     9c6:	0e 94 f8 01 	call	0x3f0	; 0x3f0 <get_ADC_data>
	if(y > center_y){
     9ca:	40 91 36 03 	lds	r20, 0x0336
     9ce:	48 17       	cp	r20, r24
     9d0:	98 f4       	brcc	.+38     	; 0x9f8 <joystickPos+0xbe>
		position.yPos = 100 * (y - center_y) / (0xFF - center_y);
     9d2:	50 e0       	ldi	r21, 0x00	; 0
     9d4:	99 27       	eor	r25, r25
     9d6:	fc 01       	movw	r30, r24
     9d8:	e4 1b       	sub	r30, r20
     9da:	f5 0b       	sbc	r31, r21
     9dc:	24 e6       	ldi	r18, 0x64	; 100
     9de:	2e 9f       	mul	r18, r30
     9e0:	c0 01       	movw	r24, r0
     9e2:	2f 9f       	mul	r18, r31
     9e4:	90 0d       	add	r25, r0
     9e6:	11 24       	eor	r1, r1
     9e8:	ef ef       	ldi	r30, 0xFF	; 255
     9ea:	f0 e0       	ldi	r31, 0x00	; 0
     9ec:	bf 01       	movw	r22, r30
     9ee:	64 1b       	sub	r22, r20
     9f0:	75 0b       	sbc	r23, r21
     9f2:	0e 94 41 08 	call	0x1082	; 0x1082 <__divmodhi4>
     9f6:	13 c0       	rjmp	.+38     	; 0xa1e <joystickPos+0xe4>
		} else if (y < center_y){
     9f8:	84 17       	cp	r24, r20
     9fa:	78 f4       	brcc	.+30     	; 0xa1a <joystickPos+0xe0>
		position.yPos = 100 * (y - center_y) / (center_y - 0);
     9fc:	50 e0       	ldi	r21, 0x00	; 0
     9fe:	99 27       	eor	r25, r25
     a00:	9c 01       	movw	r18, r24
     a02:	24 1b       	sub	r18, r20
     a04:	35 0b       	sbc	r19, r21
     a06:	64 e6       	ldi	r22, 0x64	; 100
     a08:	62 9f       	mul	r22, r18
     a0a:	c0 01       	movw	r24, r0
     a0c:	63 9f       	mul	r22, r19
     a0e:	90 0d       	add	r25, r0
     a10:	11 24       	eor	r1, r1
     a12:	ba 01       	movw	r22, r20
     a14:	0e 94 41 08 	call	0x1082	; 0x1082 <__divmodhi4>
     a18:	02 c0       	rjmp	.+4      	; 0xa1e <joystickPos+0xe4>
		} else {
		position.yPos = 0;
     a1a:	60 e0       	ldi	r22, 0x00	; 0
     a1c:	70 e0       	ldi	r23, 0x00	; 0
	}
	
	return position; 
     a1e:	21 2f       	mov	r18, r17
     a20:	30 2f       	mov	r19, r16
     a22:	46 2f       	mov	r20, r22
     a24:	57 2f       	mov	r21, r23
     a26:	6d 81       	ldd	r22, Y+5	; 0x05
	
	
}
     a28:	70 e0       	ldi	r23, 0x00	; 0
     a2a:	80 e0       	ldi	r24, 0x00	; 0
     a2c:	90 e0       	ldi	r25, 0x00	; 0
     a2e:	0f 90       	pop	r0
     a30:	0f 90       	pop	r0
     a32:	0f 90       	pop	r0
     a34:	0f 90       	pop	r0
     a36:	0f 90       	pop	r0
     a38:	df 91       	pop	r29
     a3a:	cf 91       	pop	r28
     a3c:	1f 91       	pop	r17
     a3e:	0f 91       	pop	r16
     a40:	08 95       	ret

00000a42 <JoystickDirection>:

Joystick JoystickDirection(void){
     a42:	cf 93       	push	r28
     a44:	df 93       	push	r29
     a46:	cd b7       	in	r28, 0x3d	; 61
     a48:	de b7       	in	r29, 0x3e	; 62
     a4a:	2a 97       	sbiw	r28, 0x0a	; 10
     a4c:	0f b6       	in	r0, 0x3f	; 63
     a4e:	f8 94       	cli
     a50:	de bf       	out	0x3e, r29	; 62
     a52:	0f be       	out	0x3f, r0	; 63
     a54:	cd bf       	out	0x3d, r28	; 61
	Joystick position;
	position.Dir = NEUTRAL;
	
	position = joystickPos(); 
     a56:	0e 94 9d 04 	call	0x93a	; 0x93a <joystickPos>
     a5a:	2e 83       	std	Y+6, r18	; 0x06
     a5c:	3f 83       	std	Y+7, r19	; 0x07
     a5e:	48 87       	std	Y+8, r20	; 0x08
     a60:	59 87       	std	Y+9, r21	; 0x09
     a62:	2e 81       	ldd	r18, Y+6	; 0x06
     a64:	3f 81       	ldd	r19, Y+7	; 0x07
     a66:	48 85       	ldd	r20, Y+8	; 0x08
     a68:	59 85       	ldd	r21, Y+9	; 0x09
	
	if(position.xPos < -50){
     a6a:	2e 3c       	cpi	r18, 0xCE	; 206
     a6c:	8f ef       	ldi	r24, 0xFF	; 255
     a6e:	38 07       	cpc	r19, r24
     a70:	24 f0       	brlt	.+8      	; 0xa7a <JoystickDirection+0x38>
		position.Dir = LEFT; 
	} else if (position.xPos > 50){
     a72:	23 33       	cpi	r18, 0x33	; 51
     a74:	31 05       	cpc	r19, r1
     a76:	1c f4       	brge	.+6      	; 0xa7e <JoystickDirection+0x3c>
     a78:	03 c0       	rjmp	.+6      	; 0xa80 <JoystickDirection+0x3e>
	position.Dir = NEUTRAL;
	
	position = joystickPos(); 
	
	if(position.xPos < -50){
		position.Dir = LEFT; 
     a7a:	60 e0       	ldi	r22, 0x00	; 0
     a7c:	01 c0       	rjmp	.+2      	; 0xa80 <JoystickDirection+0x3e>
	} else if (position.xPos > 50){
		position.Dir = RIGHT;
     a7e:	61 e0       	ldi	r22, 0x01	; 1
	}
	
	if(position.yPos < -50){
     a80:	4e 3c       	cpi	r20, 0xCE	; 206
     a82:	8f ef       	ldi	r24, 0xFF	; 255
     a84:	58 07       	cpc	r21, r24
     a86:	24 f0       	brlt	.+8      	; 0xa90 <JoystickDirection+0x4e>
		position.Dir = DOWN; 
	} else if (position.yPos > 50){
     a88:	43 33       	cpi	r20, 0x33	; 51
     a8a:	51 05       	cpc	r21, r1
     a8c:	1c f4       	brge	.+6      	; 0xa94 <JoystickDirection+0x52>
     a8e:	03 c0       	rjmp	.+6      	; 0xa96 <JoystickDirection+0x54>
	} else if (position.xPos > 50){
		position.Dir = RIGHT;
	}
	
	if(position.yPos < -50){
		position.Dir = DOWN; 
     a90:	63 e0       	ldi	r22, 0x03	; 3
     a92:	01 c0       	rjmp	.+2      	; 0xa96 <JoystickDirection+0x54>
	} else if (position.yPos > 50){
		position.Dir = UP; 
     a94:	62 e0       	ldi	r22, 0x02	; 2
	
	//if(position.xPos == 0 && position.yPos == 0){
		//position.Dir = NEUTRAL; 
	//}
	
	return position;
     a96:	3a 83       	std	Y+2, r19	; 0x02
     a98:	29 83       	std	Y+1, r18	; 0x01
     a9a:	5c 83       	std	Y+4, r21	; 0x04
     a9c:	4b 83       	std	Y+3, r20	; 0x03
     a9e:	3a 81       	ldd	r19, Y+2	; 0x02
     aa0:	5c 81       	ldd	r21, Y+4	; 0x04
}
     aa2:	70 e0       	ldi	r23, 0x00	; 0
     aa4:	80 e0       	ldi	r24, 0x00	; 0
     aa6:	90 e0       	ldi	r25, 0x00	; 0
     aa8:	2a 96       	adiw	r28, 0x0a	; 10
     aaa:	0f b6       	in	r0, 0x3f	; 63
     aac:	f8 94       	cli
     aae:	de bf       	out	0x3e, r29	; 62
     ab0:	0f be       	out	0x3f, r0	; 63
     ab2:	cd bf       	out	0x3d, r28	; 61
     ab4:	df 91       	pop	r29
     ab6:	cf 91       	pop	r28
     ab8:	08 95       	ret

00000aba <oled_is_out_of_bounds>:
volatile int fontSize = 8;
const char* const font[] PROGMEM = {font_4x6, font_5x7, font_8x8};
int current_font = FONT_8X8;

void oled_is_out_of_bounds() {
	if (position.col > 127) {
     aba:	80 91 39 03 	lds	r24, 0x0339
     abe:	90 91 3a 03 	lds	r25, 0x033A
     ac2:	80 38       	cpi	r24, 0x80	; 128
     ac4:	91 05       	cpc	r25, r1
     ac6:	bc f0       	brlt	.+46     	; 0xaf6 <oled_is_out_of_bounds+0x3c>
		position.col -= 128;
     ac8:	e9 e3       	ldi	r30, 0x39	; 57
     aca:	f3 e0       	ldi	r31, 0x03	; 3
     acc:	80 81       	ld	r24, Z
     ace:	91 81       	ldd	r25, Z+1	; 0x01
     ad0:	80 58       	subi	r24, 0x80	; 128
     ad2:	91 09       	sbc	r25, r1
     ad4:	91 83       	std	Z+1, r25	; 0x01
     ad6:	80 83       	st	Z, r24
		position.row += 1;
     ad8:	e7 e3       	ldi	r30, 0x37	; 55
     ada:	f3 e0       	ldi	r31, 0x03	; 3
     adc:	80 81       	ld	r24, Z
     ade:	91 81       	ldd	r25, Z+1	; 0x01
     ae0:	01 96       	adiw	r24, 0x01	; 1
     ae2:	91 83       	std	Z+1, r25	; 0x01
     ae4:	80 83       	st	Z, r24
		if (position.row > 7) {
     ae6:	80 81       	ld	r24, Z
     ae8:	91 81       	ldd	r25, Z+1	; 0x01
     aea:	08 97       	sbiw	r24, 0x08	; 8
     aec:	24 f0       	brlt	.+8      	; 0xaf6 <oled_is_out_of_bounds+0x3c>
			position.row = 0;
     aee:	10 92 38 03 	sts	0x0338, r1
     af2:	10 92 37 03 	sts	0x0337, r1
     af6:	08 95       	ret

00000af8 <oled_put_char>:

void write_data(uint8_t data){
	ext_oled_data[0] = data;
}

int oled_put_char(unsigned char c){
     af8:	ef 92       	push	r14
     afa:	ff 92       	push	r15
     afc:	0f 93       	push	r16
     afe:	1f 93       	push	r17
     b00:	cf 93       	push	r28
     b02:	df 93       	push	r29
	uint8_t printChar = c-32;
     b04:	80 52       	subi	r24, 0x20	; 32
	
	for (int i=0; i < fontSize; i++) {
     b06:	20 91 0c 01 	lds	r18, 0x010C
     b0a:	30 91 0d 01 	lds	r19, 0x010D
     b0e:	12 16       	cp	r1, r18
     b10:	13 06       	cpc	r1, r19
     b12:	84 f5       	brge	.+96     	; 0xb74 <oled_put_char+0x7c>
     b14:	e8 2e       	mov	r14, r24
     b16:	f1 2c       	mov	r15, r1
     b18:	c7 01       	movw	r24, r14
     b1a:	88 0f       	add	r24, r24
     b1c:	99 1f       	adc	r25, r25
     b1e:	88 0f       	add	r24, r24
     b20:	99 1f       	adc	r25, r25
     b22:	88 0f       	add	r24, r24
     b24:	99 1f       	adc	r25, r25
     b26:	c0 e0       	ldi	r28, 0x00	; 0
     b28:	d0 e0       	ldi	r29, 0x00	; 0
     b2a:	9c 01       	movw	r18, r24
     b2c:	20 59       	subi	r18, 0x90	; 144
     b2e:	3f 4f       	sbci	r19, 0xFF	; 255
     b30:	79 01       	movw	r14, r18
		write_data(pgm_read_word(&font_8x8[printChar][i]));
		position.col += fontSize;
     b32:	09 e3       	ldi	r16, 0x39	; 57
     b34:	13 e0       	ldi	r17, 0x03	; 3
     b36:	f7 01       	movw	r30, r14
     b38:	ec 0f       	add	r30, r28
     b3a:	fd 1f       	adc	r31, r29

int oled_put_char(unsigned char c){
	uint8_t printChar = c-32;
	
	for (int i=0; i < fontSize; i++) {
		write_data(pgm_read_word(&font_8x8[printChar][i]));
     b3c:	85 91       	lpm	r24, Z+
     b3e:	94 91       	lpm	r25, Z
void write_command(uint8_t command){
	ext_oled_cmd[0] = command;
}

void write_data(uint8_t data){
	ext_oled_data[0] = data;
     b40:	e0 91 0e 01 	lds	r30, 0x010E
     b44:	f0 91 0f 01 	lds	r31, 0x010F
     b48:	80 83       	st	Z, r24
int oled_put_char(unsigned char c){
	uint8_t printChar = c-32;
	
	for (int i=0; i < fontSize; i++) {
		write_data(pgm_read_word(&font_8x8[printChar][i]));
		position.col += fontSize;
     b4a:	f8 01       	movw	r30, r16
     b4c:	20 81       	ld	r18, Z
     b4e:	31 81       	ldd	r19, Z+1	; 0x01
     b50:	80 91 0c 01 	lds	r24, 0x010C
     b54:	90 91 0d 01 	lds	r25, 0x010D
     b58:	82 0f       	add	r24, r18
     b5a:	93 1f       	adc	r25, r19
     b5c:	91 83       	std	Z+1, r25	; 0x01
     b5e:	80 83       	st	Z, r24
		oled_is_out_of_bounds();
     b60:	0e 94 5d 05 	call	0xaba	; 0xaba <oled_is_out_of_bounds>
}

int oled_put_char(unsigned char c){
	uint8_t printChar = c-32;
	
	for (int i=0; i < fontSize; i++) {
     b64:	21 96       	adiw	r28, 0x01	; 1
     b66:	80 91 0c 01 	lds	r24, 0x010C
     b6a:	90 91 0d 01 	lds	r25, 0x010D
     b6e:	c8 17       	cp	r28, r24
     b70:	d9 07       	cpc	r29, r25
     b72:	0c f3       	brlt	.-62     	; 0xb36 <oled_put_char+0x3e>
		position.col += fontSize;
		oled_is_out_of_bounds();
	}
	
	return 0;
}
     b74:	80 e0       	ldi	r24, 0x00	; 0
     b76:	90 e0       	ldi	r25, 0x00	; 0
     b78:	df 91       	pop	r29
     b7a:	cf 91       	pop	r28
     b7c:	1f 91       	pop	r17
     b7e:	0f 91       	pop	r16
     b80:	ff 90       	pop	r15
     b82:	ef 90       	pop	r14
     b84:	08 95       	ret

00000b86 <oled_inv_put_char>:

int oled_inv_put_char(unsigned char c){
     b86:	ef 92       	push	r14
     b88:	ff 92       	push	r15
     b8a:	0f 93       	push	r16
     b8c:	1f 93       	push	r17
     b8e:	cf 93       	push	r28
     b90:	df 93       	push	r29
	uint8_t printChar = c-32;
     b92:	80 52       	subi	r24, 0x20	; 32
	
	for (int i=0; i < fontSize; i++) {
     b94:	20 91 0c 01 	lds	r18, 0x010C
     b98:	30 91 0d 01 	lds	r19, 0x010D
     b9c:	12 16       	cp	r1, r18
     b9e:	13 06       	cpc	r1, r19
     ba0:	8c f5       	brge	.+98     	; 0xc04 <oled_inv_put_char+0x7e>
     ba2:	e8 2e       	mov	r14, r24
     ba4:	f1 2c       	mov	r15, r1
     ba6:	c7 01       	movw	r24, r14
     ba8:	88 0f       	add	r24, r24
     baa:	99 1f       	adc	r25, r25
     bac:	88 0f       	add	r24, r24
     bae:	99 1f       	adc	r25, r25
     bb0:	88 0f       	add	r24, r24
     bb2:	99 1f       	adc	r25, r25
     bb4:	c0 e0       	ldi	r28, 0x00	; 0
     bb6:	d0 e0       	ldi	r29, 0x00	; 0
     bb8:	9c 01       	movw	r18, r24
     bba:	20 59       	subi	r18, 0x90	; 144
     bbc:	3f 4f       	sbci	r19, 0xFF	; 255
     bbe:	79 01       	movw	r14, r18
		write_data(~pgm_read_word(&font_8x8[printChar][i]));
		position.col += fontSize;
     bc0:	09 e3       	ldi	r16, 0x39	; 57
     bc2:	13 e0       	ldi	r17, 0x03	; 3
     bc4:	f7 01       	movw	r30, r14
     bc6:	ec 0f       	add	r30, r28
     bc8:	fd 1f       	adc	r31, r29

int oled_inv_put_char(unsigned char c){
	uint8_t printChar = c-32;
	
	for (int i=0; i < fontSize; i++) {
		write_data(~pgm_read_word(&font_8x8[printChar][i]));
     bca:	85 91       	lpm	r24, Z+
     bcc:	94 91       	lpm	r25, Z
     bce:	80 95       	com	r24
void write_command(uint8_t command){
	ext_oled_cmd[0] = command;
}

void write_data(uint8_t data){
	ext_oled_data[0] = data;
     bd0:	e0 91 0e 01 	lds	r30, 0x010E
     bd4:	f0 91 0f 01 	lds	r31, 0x010F
     bd8:	80 83       	st	Z, r24
int oled_inv_put_char(unsigned char c){
	uint8_t printChar = c-32;
	
	for (int i=0; i < fontSize; i++) {
		write_data(~pgm_read_word(&font_8x8[printChar][i]));
		position.col += fontSize;
     bda:	f8 01       	movw	r30, r16
     bdc:	20 81       	ld	r18, Z
     bde:	31 81       	ldd	r19, Z+1	; 0x01
     be0:	80 91 0c 01 	lds	r24, 0x010C
     be4:	90 91 0d 01 	lds	r25, 0x010D
     be8:	82 0f       	add	r24, r18
     bea:	93 1f       	adc	r25, r19
     bec:	91 83       	std	Z+1, r25	; 0x01
     bee:	80 83       	st	Z, r24
		oled_is_out_of_bounds();
     bf0:	0e 94 5d 05 	call	0xaba	; 0xaba <oled_is_out_of_bounds>
}

int oled_inv_put_char(unsigned char c){
	uint8_t printChar = c-32;
	
	for (int i=0; i < fontSize; i++) {
     bf4:	21 96       	adiw	r28, 0x01	; 1
     bf6:	80 91 0c 01 	lds	r24, 0x010C
     bfa:	90 91 0d 01 	lds	r25, 0x010D
     bfe:	c8 17       	cp	r28, r24
     c00:	d9 07       	cpc	r29, r25
     c02:	04 f3       	brlt	.-64     	; 0xbc4 <oled_inv_put_char+0x3e>
		position.col += fontSize;
		oled_is_out_of_bounds();
	}
	
	return 0;
}
     c04:	80 e0       	ldi	r24, 0x00	; 0
     c06:	90 e0       	ldi	r25, 0x00	; 0
     c08:	df 91       	pop	r29
     c0a:	cf 91       	pop	r28
     c0c:	1f 91       	pop	r17
     c0e:	0f 91       	pop	r16
     c10:	ff 90       	pop	r15
     c12:	ef 90       	pop	r14
     c14:	08 95       	ret

00000c16 <oled_set_adressing_mode>:
		fontSize = 8;
	}
}

void write_command(uint8_t command){
	ext_oled_cmd[0] = command;
     c16:	e0 91 10 01 	lds	r30, 0x0110
     c1a:	f0 91 11 01 	lds	r31, 0x0111
     c1e:	90 e2       	ldi	r25, 0x20	; 32
     c20:	90 83       	st	Z, r25
     c22:	e0 91 10 01 	lds	r30, 0x0110
     c26:	f0 91 11 01 	lds	r31, 0x0111
     c2a:	80 83       	st	Z, r24
     c2c:	08 95       	ret

00000c2e <oled_printf>:
	write_command(mode);
}

// ------------------ functions declared in header below this line---------------------

void oled_printf(char* data, ...){
     c2e:	cf 93       	push	r28
     c30:	df 93       	push	r29
     c32:	cd b7       	in	r28, 0x3d	; 61
     c34:	de b7       	in	r29, 0x3e	; 62
     c36:	fe 01       	movw	r30, r28
     c38:	35 96       	adiw	r30, 0x05	; 5
     c3a:	61 91       	ld	r22, Z+
     c3c:	71 91       	ld	r23, Z+
	va_list args;
	va_start(args, data);
	vfprintf(&mystdout, data, args);
     c3e:	af 01       	movw	r20, r30
     c40:	80 e2       	ldi	r24, 0x20	; 32
     c42:	91 e0       	ldi	r25, 0x01	; 1
     c44:	0e 94 d5 0a 	call	0x15aa	; 0x15aa <vfprintf>
	va_end(args);
	
}
     c48:	df 91       	pop	r29
     c4a:	cf 91       	pop	r28
     c4c:	08 95       	ret

00000c4e <oled_inv_printf>:

void oled_inv_printf(char* data, ...){
     c4e:	cf 93       	push	r28
     c50:	df 93       	push	r29
     c52:	cd b7       	in	r28, 0x3d	; 61
     c54:	de b7       	in	r29, 0x3e	; 62
     c56:	fe 01       	movw	r30, r28
     c58:	35 96       	adiw	r30, 0x05	; 5
     c5a:	61 91       	ld	r22, Z+
     c5c:	71 91       	ld	r23, Z+
	va_list args;
	va_start(args, data);
	vfprintf(&myinvstdout, data, args);
     c5e:	af 01       	movw	r20, r30
     c60:	82 e1       	ldi	r24, 0x12	; 18
     c62:	91 e0       	ldi	r25, 0x01	; 1
     c64:	0e 94 d5 0a 	call	0x15aa	; 0x15aa <vfprintf>
	va_end(args);
	
}
     c68:	df 91       	pop	r29
     c6a:	cf 91       	pop	r28
     c6c:	08 95       	ret

00000c6e <oled_goto_line>:

void oled_home(){
	oled_pos(0,0);
}

void oled_goto_line(int line){
     c6e:	cf 93       	push	r28
     c70:	df 93       	push	r29
     c72:	ec 01       	movw	r28, r24
	if (line > 7 || line < 0) {
     c74:	88 30       	cpi	r24, 0x08	; 8
     c76:	91 05       	cpc	r25, r1
     c78:	80 f4       	brcc	.+32     	; 0xc9a <oled_goto_line+0x2c>
		return 0;
	}
	else {
		position.row = line;
     c7a:	90 93 38 03 	sts	0x0338, r25
     c7e:	80 93 37 03 	sts	0x0337, r24
		oled_set_adressing_mode(PAGE_MODE);
     c82:	82 e0       	ldi	r24, 0x02	; 2
     c84:	0e 94 0b 06 	call	0xc16	; 0xc16 <oled_set_adressing_mode>
		write_command(0xB0 + line);
     c88:	c0 55       	subi	r28, 0x50	; 80
		fontSize = 8;
	}
}

void write_command(uint8_t command){
	ext_oled_cmd[0] = command;
     c8a:	e0 91 10 01 	lds	r30, 0x0110
     c8e:	f0 91 11 01 	lds	r31, 0x0111
     c92:	c0 83       	st	Z, r28
	}
	else {
		position.row = line;
		oled_set_adressing_mode(PAGE_MODE);
		write_command(0xB0 + line);
		oled_set_adressing_mode(HORIZONTAL_MODE);
     c94:	80 e0       	ldi	r24, 0x00	; 0
     c96:	0e 94 0b 06 	call	0xc16	; 0xc16 <oled_set_adressing_mode>
	}
}
     c9a:	df 91       	pop	r29
     c9c:	cf 91       	pop	r28
     c9e:	08 95       	ret

00000ca0 <oled_goto_column>:

void oled_goto_column(int column){
     ca0:	cf 93       	push	r28
     ca2:	df 93       	push	r29
     ca4:	ec 01       	movw	r28, r24
	if (column > 127 || column < 0) {
     ca6:	80 38       	cpi	r24, 0x80	; 128
     ca8:	91 05       	cpc	r25, r1
     caa:	50 f5       	brcc	.+84     	; 0xd00 <oled_goto_column+0x60>
		return 0;
	}
	else {
		position.col = column;
     cac:	90 93 3a 03 	sts	0x033A, r25
     cb0:	80 93 39 03 	sts	0x0339, r24
		oled_set_adressing_mode(PAGE_MODE);
     cb4:	82 e0       	ldi	r24, 0x02	; 2
     cb6:	0e 94 0b 06 	call	0xc16	; 0xc16 <oled_set_adressing_mode>
		
		int numLow = column % 16;
     cba:	ce 01       	movw	r24, r28
     cbc:	8f 70       	andi	r24, 0x0F	; 15
     cbe:	90 78       	andi	r25, 0x80	; 128
     cc0:	99 23       	and	r25, r25
     cc2:	24 f4       	brge	.+8      	; 0xccc <oled_goto_column+0x2c>
     cc4:	01 97       	sbiw	r24, 0x01	; 1
     cc6:	80 6f       	ori	r24, 0xF0	; 240
     cc8:	9f 6f       	ori	r25, 0xFF	; 255
     cca:	01 96       	adiw	r24, 0x01	; 1
		fontSize = 8;
	}
}

void write_command(uint8_t command){
	ext_oled_cmd[0] = command;
     ccc:	e0 91 10 01 	lds	r30, 0x0110
     cd0:	f0 91 11 01 	lds	r31, 0x0111
     cd4:	80 83       	st	Z, r24
	else {
		position.col = column;
		oled_set_adressing_mode(PAGE_MODE);
		
		int numLow = column % 16;
		int numHigh = column / 16;
     cd6:	ce 01       	movw	r24, r28
     cd8:	dd 23       	and	r29, r29
     cda:	0c f4       	brge	.+2      	; 0xcde <oled_goto_column+0x3e>
     cdc:	0f 96       	adiw	r24, 0x0f	; 15
     cde:	95 95       	asr	r25
     ce0:	87 95       	ror	r24
     ce2:	95 95       	asr	r25
     ce4:	87 95       	ror	r24
     ce6:	95 95       	asr	r25
     ce8:	87 95       	ror	r24
     cea:	95 95       	asr	r25
     cec:	87 95       	ror	r24
		
		write_command(numLow);
		write_command(16 + numHigh);
     cee:	80 5f       	subi	r24, 0xF0	; 240
		fontSize = 8;
	}
}

void write_command(uint8_t command){
	ext_oled_cmd[0] = command;
     cf0:	e0 91 10 01 	lds	r30, 0x0110
     cf4:	f0 91 11 01 	lds	r31, 0x0111
     cf8:	80 83       	st	Z, r24
		int numLow = column % 16;
		int numHigh = column / 16;
		
		write_command(numLow);
		write_command(16 + numHigh);
		oled_set_adressing_mode(HORIZONTAL_MODE);
     cfa:	80 e0       	ldi	r24, 0x00	; 0
     cfc:	0e 94 0b 06 	call	0xc16	; 0xc16 <oled_set_adressing_mode>
	}
	
}
     d00:	df 91       	pop	r29
     d02:	cf 91       	pop	r28
     d04:	08 95       	ret

00000d06 <oled_pos>:
		write_data(~0b00000000);
	}
	oled_goto_line(line);
}

void oled_pos(int row, int column){
     d06:	cf 93       	push	r28
     d08:	df 93       	push	r29
     d0a:	eb 01       	movw	r28, r22
	oled_goto_line(row);
     d0c:	0e 94 37 06 	call	0xc6e	; 0xc6e <oled_goto_line>
	oled_goto_column(column);
     d10:	ce 01       	movw	r24, r28
     d12:	0e 94 50 06 	call	0xca0	; 0xca0 <oled_goto_column>
}
     d16:	df 91       	pop	r29
     d18:	cf 91       	pop	r28
     d1a:	08 95       	ret

00000d1c <oled_home>:
	}
	oled_home();
}

void oled_home(){
	oled_pos(0,0);
     d1c:	60 e0       	ldi	r22, 0x00	; 0
     d1e:	70 e0       	ldi	r23, 0x00	; 0
     d20:	80 e0       	ldi	r24, 0x00	; 0
     d22:	90 e0       	ldi	r25, 0x00	; 0
     d24:	0e 94 83 06 	call	0xd06	; 0xd06 <oled_pos>
     d28:	08 95       	ret

00000d2a <oled_clear_line>:
	else {
		oled_goto_column(letterPlace*fontSize-1);
	}
}

void oled_clear_line(int line){
     d2a:	cf 93       	push	r28
     d2c:	df 93       	push	r29
     d2e:	ec 01       	movw	r28, r24
	oled_pos(line, 0);
     d30:	60 e0       	ldi	r22, 0x00	; 0
     d32:	70 e0       	ldi	r23, 0x00	; 0
     d34:	0e 94 83 06 	call	0xd06	; 0xd06 <oled_pos>
     d38:	20 e8       	ldi	r18, 0x80	; 128
     d3a:	30 e0       	ldi	r19, 0x00	; 0
void write_command(uint8_t command){
	ext_oled_cmd[0] = command;
}

void write_data(uint8_t data){
	ext_oled_data[0] = data;
     d3c:	e0 91 0e 01 	lds	r30, 0x010E
     d40:	f0 91 0f 01 	lds	r31, 0x010F
     d44:	10 82       	st	Z, r1
     d46:	21 50       	subi	r18, 0x01	; 1
     d48:	31 09       	sbc	r19, r1
}

void oled_clear_line(int line){
	oled_pos(line, 0);
	
	for (int col = 0; col < 128; col++) {
     d4a:	21 15       	cp	r18, r1
     d4c:	31 05       	cpc	r19, r1
     d4e:	b1 f7       	brne	.-20     	; 0xd3c <oled_clear_line+0x12>
		write_data(0b00000000);
	}
	oled_goto_line(line);
     d50:	ce 01       	movw	r24, r28
     d52:	0e 94 37 06 	call	0xc6e	; 0xc6e <oled_goto_line>
}
     d56:	df 91       	pop	r29
     d58:	cf 91       	pop	r28
     d5a:	08 95       	ret

00000d5c <oled_reset>:
	write_command(0xaf); // display on
	oled_reset();
	
}

void oled_reset(){
     d5c:	cf 93       	push	r28
     d5e:	df 93       	push	r29
	
	for (int line = 0; line < 8; line++) {
     d60:	c0 e0       	ldi	r28, 0x00	; 0
     d62:	d0 e0       	ldi	r29, 0x00	; 0
		oled_clear_line(line);
     d64:	ce 01       	movw	r24, r28
     d66:	0e 94 95 06 	call	0xd2a	; 0xd2a <oled_clear_line>
	
}

void oled_reset(){
	
	for (int line = 0; line < 8; line++) {
     d6a:	21 96       	adiw	r28, 0x01	; 1
     d6c:	c8 30       	cpi	r28, 0x08	; 8
     d6e:	d1 05       	cpc	r29, r1
     d70:	c9 f7       	brne	.-14     	; 0xd64 <oled_reset+0x8>
		oled_clear_line(line);
	}
	oled_home();
     d72:	0e 94 8e 06 	call	0xd1c	; 0xd1c <oled_home>
}
     d76:	df 91       	pop	r29
     d78:	cf 91       	pop	r28
     d7a:	08 95       	ret

00000d7c <oled_init>:
		fontSize = 8;
	}
}

void write_command(uint8_t command){
	ext_oled_cmd[0] = command;
     d7c:	e0 91 10 01 	lds	r30, 0x0110
     d80:	f0 91 11 01 	lds	r31, 0x0111
     d84:	8e ea       	ldi	r24, 0xAE	; 174
     d86:	80 83       	st	Z, r24
     d88:	e0 91 10 01 	lds	r30, 0x0110
     d8c:	f0 91 11 01 	lds	r31, 0x0111
     d90:	81 ea       	ldi	r24, 0xA1	; 161
     d92:	80 83       	st	Z, r24
     d94:	e0 91 10 01 	lds	r30, 0x0110
     d98:	f0 91 11 01 	lds	r31, 0x0111
     d9c:	8a ed       	ldi	r24, 0xDA	; 218
     d9e:	80 83       	st	Z, r24
     da0:	e0 91 10 01 	lds	r30, 0x0110
     da4:	f0 91 11 01 	lds	r31, 0x0111
     da8:	82 e1       	ldi	r24, 0x12	; 18
     daa:	80 83       	st	Z, r24
     dac:	e0 91 10 01 	lds	r30, 0x0110
     db0:	f0 91 11 01 	lds	r31, 0x0111
     db4:	88 ec       	ldi	r24, 0xC8	; 200
     db6:	80 83       	st	Z, r24
     db8:	e0 91 10 01 	lds	r30, 0x0110
     dbc:	f0 91 11 01 	lds	r31, 0x0111
     dc0:	88 ea       	ldi	r24, 0xA8	; 168
     dc2:	80 83       	st	Z, r24
     dc4:	e0 91 10 01 	lds	r30, 0x0110
     dc8:	f0 91 11 01 	lds	r31, 0x0111
     dcc:	8f e3       	ldi	r24, 0x3F	; 63
     dce:	80 83       	st	Z, r24
     dd0:	e0 91 10 01 	lds	r30, 0x0110
     dd4:	f0 91 11 01 	lds	r31, 0x0111
     dd8:	85 ed       	ldi	r24, 0xD5	; 213
     dda:	80 83       	st	Z, r24
     ddc:	e0 91 10 01 	lds	r30, 0x0110
     de0:	f0 91 11 01 	lds	r31, 0x0111
     de4:	80 e8       	ldi	r24, 0x80	; 128
     de6:	80 83       	st	Z, r24
     de8:	e0 91 10 01 	lds	r30, 0x0110
     dec:	f0 91 11 01 	lds	r31, 0x0111
     df0:	81 e8       	ldi	r24, 0x81	; 129
     df2:	80 83       	st	Z, r24
     df4:	e0 91 10 01 	lds	r30, 0x0110
     df8:	f0 91 11 01 	lds	r31, 0x0111
     dfc:	80 e5       	ldi	r24, 0x50	; 80
     dfe:	80 83       	st	Z, r24
     e00:	e0 91 10 01 	lds	r30, 0x0110
     e04:	f0 91 11 01 	lds	r31, 0x0111
     e08:	89 ed       	ldi	r24, 0xD9	; 217
     e0a:	80 83       	st	Z, r24
     e0c:	e0 91 10 01 	lds	r30, 0x0110
     e10:	f0 91 11 01 	lds	r31, 0x0111
     e14:	81 e2       	ldi	r24, 0x21	; 33
     e16:	80 83       	st	Z, r24
	write_command(0x81); //contrast control
	write_command(0x50);
	write_command(0xd9); //set pre-charge period
	write_command(0x21);
	
	oled_set_adressing_mode(HORIZONTAL_MODE);
     e18:	80 e0       	ldi	r24, 0x00	; 0
     e1a:	0e 94 0b 06 	call	0xc16	; 0xc16 <oled_set_adressing_mode>
		fontSize = 8;
	}
}

void write_command(uint8_t command){
	ext_oled_cmd[0] = command;
     e1e:	e0 91 10 01 	lds	r30, 0x0110
     e22:	f0 91 11 01 	lds	r31, 0x0111
     e26:	8b ed       	ldi	r24, 0xDB	; 219
     e28:	80 83       	st	Z, r24
     e2a:	e0 91 10 01 	lds	r30, 0x0110
     e2e:	f0 91 11 01 	lds	r31, 0x0111
     e32:	80 e3       	ldi	r24, 0x30	; 48
     e34:	80 83       	st	Z, r24
     e36:	e0 91 10 01 	lds	r30, 0x0110
     e3a:	f0 91 11 01 	lds	r31, 0x0111
     e3e:	8d ea       	ldi	r24, 0xAD	; 173
     e40:	80 83       	st	Z, r24
     e42:	e0 91 10 01 	lds	r30, 0x0110
     e46:	f0 91 11 01 	lds	r31, 0x0111
     e4a:	10 82       	st	Z, r1
     e4c:	e0 91 10 01 	lds	r30, 0x0110
     e50:	f0 91 11 01 	lds	r31, 0x0111
     e54:	84 ea       	ldi	r24, 0xA4	; 164
     e56:	80 83       	st	Z, r24
     e58:	e0 91 10 01 	lds	r30, 0x0110
     e5c:	f0 91 11 01 	lds	r31, 0x0111
     e60:	86 ea       	ldi	r24, 0xA6	; 166
     e62:	80 83       	st	Z, r24
     e64:	e0 91 10 01 	lds	r30, 0x0110
     e68:	f0 91 11 01 	lds	r31, 0x0111
     e6c:	8f ea       	ldi	r24, 0xAF	; 175
     e6e:	80 83       	st	Z, r24
	write_command(0xad); //master configuration
	write_command(0x00);
	write_command(0xa4); //out follows RAM content
	write_command(0xa6); //set normal display
	write_command(0xaf); // display on
	oled_reset();
     e70:	0e 94 ae 06 	call	0xd5c	; 0xd5c <oled_reset>
     e74:	08 95       	ret

00000e76 <new_menu>:
     e76:	0f 93       	push	r16
     e78:	1f 93       	push	r17
     e7a:	cf 93       	push	r28
     e7c:	df 93       	push	r29
     e7e:	8c 01       	movw	r16, r24
     e80:	eb 01       	movw	r28, r22
     e82:	89 e0       	ldi	r24, 0x09	; 9
     e84:	90 e0       	ldi	r25, 0x00	; 0
     e86:	0e 94 c4 08 	call	0x1188	; 0x1188 <malloc>
     e8a:	fc 01       	movw	r30, r24
     e8c:	11 83       	std	Z+1, r17	; 0x01
     e8e:	00 83       	st	Z, r16
     e90:	d4 83       	std	Z+4, r29	; 0x04
     e92:	c3 83       	std	Z+3, r28	; 0x03
     e94:	10 86       	std	Z+8, r1	; 0x08
     e96:	17 82       	std	Z+7, r1	; 0x07
     e98:	16 82       	std	Z+6, r1	; 0x06
     e9a:	15 82       	std	Z+5, r1	; 0x05
     e9c:	df 91       	pop	r29
     e9e:	cf 91       	pop	r28
     ea0:	1f 91       	pop	r17
     ea2:	0f 91       	pop	r16
     ea4:	08 95       	ret

00000ea6 <size_of_menu>:
     ea6:	dc 01       	movw	r26, r24
     ea8:	15 96       	adiw	r26, 0x05	; 5
     eaa:	ed 91       	ld	r30, X+
     eac:	fc 91       	ld	r31, X
     eae:	16 97       	sbiw	r26, 0x06	; 6
     eb0:	30 97       	sbiw	r30, 0x00	; 0
     eb2:	79 f0       	breq	.+30     	; 0xed2 <size_of_menu+0x2c>
     eb4:	07 80       	ldd	r0, Z+7	; 0x07
     eb6:	f0 85       	ldd	r31, Z+8	; 0x08
     eb8:	e0 2d       	mov	r30, r0
     eba:	30 97       	sbiw	r30, 0x00	; 0
     ebc:	69 f0       	breq	.+26     	; 0xed8 <size_of_menu+0x32>
     ebe:	21 e0       	ldi	r18, 0x01	; 1
     ec0:	30 e0       	ldi	r19, 0x00	; 0
     ec2:	2f 5f       	subi	r18, 0xFF	; 255
     ec4:	3f 4f       	sbci	r19, 0xFF	; 255
     ec6:	07 80       	ldd	r0, Z+7	; 0x07
     ec8:	f0 85       	ldd	r31, Z+8	; 0x08
     eca:	e0 2d       	mov	r30, r0
     ecc:	30 97       	sbiw	r30, 0x00	; 0
     ece:	c9 f7       	brne	.-14     	; 0xec2 <size_of_menu+0x1c>
     ed0:	06 c0       	rjmp	.+12     	; 0xede <size_of_menu+0x38>
     ed2:	80 e0       	ldi	r24, 0x00	; 0
     ed4:	90 e0       	ldi	r25, 0x00	; 0
     ed6:	08 95       	ret
     ed8:	81 e0       	ldi	r24, 0x01	; 1
     eda:	90 e0       	ldi	r25, 0x00	; 0
     edc:	08 95       	ret
     ede:	82 2f       	mov	r24, r18
     ee0:	93 2f       	mov	r25, r19
     ee2:	08 95       	ret

00000ee4 <oled_menu_print>:
     ee4:	0f 93       	push	r16
     ee6:	1f 93       	push	r17
     ee8:	cf 93       	push	r28
     eea:	df 93       	push	r29
     eec:	ec 01       	movw	r28, r24
     eee:	0e 94 ae 06 	call	0xd5c	; 0xd5c <oled_reset>
     ef2:	ce 01       	movw	r24, r28
     ef4:	0e 94 53 07 	call	0xea6	; 0xea6 <size_of_menu>
     ef8:	90 93 3e 03 	sts	0x033E, r25
     efc:	80 93 3d 03 	sts	0x033D, r24
     f00:	0d 81       	ldd	r16, Y+5	; 0x05
     f02:	1e 81       	ldd	r17, Y+6	; 0x06
     f04:	80 91 3d 03 	lds	r24, 0x033D
     f08:	90 91 3e 03 	lds	r25, 0x033E
     f0c:	18 16       	cp	r1, r24
     f0e:	19 06       	cpc	r1, r25
     f10:	64 f5       	brge	.+88     	; 0xf6a <oled_menu_print+0x86>
     f12:	c0 e0       	ldi	r28, 0x00	; 0
     f14:	d0 e0       	ldi	r29, 0x00	; 0
     f16:	60 e0       	ldi	r22, 0x00	; 0
     f18:	70 e0       	ldi	r23, 0x00	; 0
     f1a:	ce 01       	movw	r24, r28
     f1c:	0e 94 83 06 	call	0xd06	; 0xd06 <oled_pos>
     f20:	80 91 2e 01 	lds	r24, 0x012E
     f24:	90 91 2f 01 	lds	r25, 0x012F
     f28:	8c 17       	cp	r24, r28
     f2a:	9d 07       	cpc	r25, r29
     f2c:	51 f4       	brne	.+20     	; 0xf42 <oled_menu_print+0x5e>
     f2e:	f8 01       	movw	r30, r16
     f30:	81 81       	ldd	r24, Z+1	; 0x01
     f32:	8f 93       	push	r24
     f34:	80 81       	ld	r24, Z
     f36:	8f 93       	push	r24
     f38:	0e 94 27 06 	call	0xc4e	; 0xc4e <oled_inv_printf>
     f3c:	0f 90       	pop	r0
     f3e:	0f 90       	pop	r0
     f40:	09 c0       	rjmp	.+18     	; 0xf54 <oled_menu_print+0x70>
     f42:	f8 01       	movw	r30, r16
     f44:	81 81       	ldd	r24, Z+1	; 0x01
     f46:	8f 93       	push	r24
     f48:	80 81       	ld	r24, Z
     f4a:	8f 93       	push	r24
     f4c:	0e 94 17 06 	call	0xc2e	; 0xc2e <oled_printf>
     f50:	0f 90       	pop	r0
     f52:	0f 90       	pop	r0
     f54:	f8 01       	movw	r30, r16
     f56:	07 81       	ldd	r16, Z+7	; 0x07
     f58:	10 85       	ldd	r17, Z+8	; 0x08
     f5a:	21 96       	adiw	r28, 0x01	; 1
     f5c:	80 91 3d 03 	lds	r24, 0x033D
     f60:	90 91 3e 03 	lds	r25, 0x033E
     f64:	c8 17       	cp	r28, r24
     f66:	d9 07       	cpc	r29, r25
     f68:	b4 f2       	brlt	.-84     	; 0xf16 <oled_menu_print+0x32>
     f6a:	df 91       	pop	r29
     f6c:	cf 91       	pop	r28
     f6e:	1f 91       	pop	r17
     f70:	0f 91       	pop	r16
     f72:	08 95       	ret

00000f74 <oled_menu_init>:
     f74:	4f 92       	push	r4
     f76:	5f 92       	push	r5
     f78:	6f 92       	push	r6
     f7a:	7f 92       	push	r7
     f7c:	8f 92       	push	r8
     f7e:	9f 92       	push	r9
     f80:	af 92       	push	r10
     f82:	bf 92       	push	r11
     f84:	cf 92       	push	r12
     f86:	df 92       	push	r13
     f88:	ef 92       	push	r14
     f8a:	ff 92       	push	r15
     f8c:	0f 93       	push	r16
     f8e:	1f 93       	push	r17
     f90:	cf 93       	push	r28
     f92:	df 93       	push	r29
     f94:	60 e0       	ldi	r22, 0x00	; 0
     f96:	70 e0       	ldi	r23, 0x00	; 0
     f98:	84 ef       	ldi	r24, 0xF4	; 244
     f9a:	92 e0       	ldi	r25, 0x02	; 2
     f9c:	0e 94 3b 07 	call	0xe76	; 0xe76 <new_menu>
     fa0:	ec 01       	movw	r28, r24
     fa2:	bc 01       	movw	r22, r24
     fa4:	8e ef       	ldi	r24, 0xFE	; 254
     fa6:	92 e0       	ldi	r25, 0x02	; 2
     fa8:	0e 94 3b 07 	call	0xe76	; 0xe76 <new_menu>
     fac:	7c 01       	movw	r14, r24
     fae:	be 01       	movw	r22, r28
     fb0:	88 e0       	ldi	r24, 0x08	; 8
     fb2:	93 e0       	ldi	r25, 0x03	; 3
     fb4:	0e 94 3b 07 	call	0xe76	; 0xe76 <new_menu>
     fb8:	8c 01       	movw	r16, r24
     fba:	be 01       	movw	r22, r28
     fbc:	83 e1       	ldi	r24, 0x13	; 19
     fbe:	93 e0       	ldi	r25, 0x03	; 3
     fc0:	0e 94 3b 07 	call	0xe76	; 0xe76 <new_menu>
     fc4:	4c 01       	movw	r8, r24
     fc6:	bc 01       	movw	r22, r24
     fc8:	88 e1       	ldi	r24, 0x18	; 24
     fca:	93 e0       	ldi	r25, 0x03	; 3
     fcc:	0e 94 3b 07 	call	0xe76	; 0xe76 <new_menu>
     fd0:	6c 01       	movw	r12, r24
     fd2:	bc 01       	movw	r22, r24
     fd4:	8e e1       	ldi	r24, 0x1E	; 30
     fd6:	93 e0       	ldi	r25, 0x03	; 3
     fd8:	0e 94 3b 07 	call	0xe76	; 0xe76 <new_menu>
     fdc:	2c 01       	movw	r4, r24
     fde:	b7 01       	movw	r22, r14
     fe0:	84 e2       	ldi	r24, 0x24	; 36
     fe2:	93 e0       	ldi	r25, 0x03	; 3
     fe4:	0e 94 3b 07 	call	0xe76	; 0xe76 <new_menu>
     fe8:	5c 01       	movw	r10, r24
     fea:	b8 01       	movw	r22, r16
     fec:	8a e2       	ldi	r24, 0x2A	; 42
     fee:	93 e0       	ldi	r25, 0x03	; 3
     ff0:	0e 94 3b 07 	call	0xe76	; 0xe76 <new_menu>
     ff4:	3c 01       	movw	r6, r24
     ff6:	d0 93 3c 03 	sts	0x033C, r29
     ffa:	c0 93 3b 03 	sts	0x033B, r28
     ffe:	ce 01       	movw	r24, r28
    1000:	0e 94 53 07 	call	0xea6	; 0xea6 <size_of_menu>
    1004:	90 93 3e 03 	sts	0x033E, r25
    1008:	80 93 3d 03 	sts	0x033D, r24
    100c:	ce 01       	movw	r24, r28
    100e:	0e 94 72 07 	call	0xee4	; 0xee4 <oled_menu_print>
    1012:	fe 82       	std	Y+6, r15	; 0x06
    1014:	ed 82       	std	Y+5, r14	; 0x05
    1016:	f7 01       	movw	r30, r14
    1018:	10 87       	std	Z+8, r17	; 0x08
    101a:	07 83       	std	Z+7, r16	; 0x07
    101c:	f8 01       	movw	r30, r16
    101e:	90 86       	std	Z+8, r9	; 0x08
    1020:	87 82       	std	Z+7, r8	; 0x07
    1022:	f4 01       	movw	r30, r8
    1024:	d6 82       	std	Z+6, r13	; 0x06
    1026:	c5 82       	std	Z+5, r12	; 0x05
    1028:	f7 01       	movw	r30, r14
    102a:	b6 82       	std	Z+6, r11	; 0x06
    102c:	a5 82       	std	Z+5, r10	; 0x05
    102e:	f8 01       	movw	r30, r16
    1030:	76 82       	std	Z+6, r7	; 0x06
    1032:	65 82       	std	Z+5, r6	; 0x05
    1034:	f6 01       	movw	r30, r12
    1036:	56 82       	std	Z+6, r5	; 0x06
    1038:	45 82       	std	Z+5, r4	; 0x05
    103a:	80 91 3b 03 	lds	r24, 0x033B
    103e:	90 91 3c 03 	lds	r25, 0x033C
    1042:	df 91       	pop	r29
    1044:	cf 91       	pop	r28
    1046:	1f 91       	pop	r17
    1048:	0f 91       	pop	r16
    104a:	ff 90       	pop	r15
    104c:	ef 90       	pop	r14
    104e:	df 90       	pop	r13
    1050:	cf 90       	pop	r12
    1052:	bf 90       	pop	r11
    1054:	af 90       	pop	r10
    1056:	9f 90       	pop	r9
    1058:	8f 90       	pop	r8
    105a:	7f 90       	pop	r7
    105c:	6f 90       	pop	r6
    105e:	5f 90       	pop	r5
    1060:	4f 90       	pop	r4
    1062:	08 95       	ret

00001064 <SPI_init>:
    1064:	80 eb       	ldi	r24, 0xB0	; 176
    1066:	87 bb       	out	0x17, r24	; 23
    1068:	81 e5       	ldi	r24, 0x51	; 81
    106a:	8d b9       	out	0x0d, r24	; 13
    106c:	c4 9a       	sbi	0x18, 4	; 24
    106e:	08 95       	ret

00001070 <SPI_write>:
    1070:	8f b9       	out	0x0f, r24	; 15
    1072:	77 9b       	sbis	0x0e, 7	; 14
    1074:	fe cf       	rjmp	.-4      	; 0x1072 <SPI_write+0x2>
    1076:	08 95       	ret

00001078 <SPI_read>:
    1078:	1f b8       	out	0x0f, r1	; 15
    107a:	77 9b       	sbis	0x0e, 7	; 14
    107c:	fe cf       	rjmp	.-4      	; 0x107a <SPI_read+0x2>
    107e:	8f b1       	in	r24, 0x0f	; 15
    1080:	08 95       	ret

00001082 <__divmodhi4>:
    1082:	97 fb       	bst	r25, 7
    1084:	07 2e       	mov	r0, r23
    1086:	16 f4       	brtc	.+4      	; 0x108c <__divmodhi4+0xa>
    1088:	00 94       	com	r0
    108a:	07 d0       	rcall	.+14     	; 0x109a <__divmodhi4_neg1>
    108c:	77 fd       	sbrc	r23, 7
    108e:	09 d0       	rcall	.+18     	; 0x10a2 <__divmodhi4_neg2>
    1090:	0e 94 7f 08 	call	0x10fe	; 0x10fe <__udivmodhi4>
    1094:	07 fc       	sbrc	r0, 7
    1096:	05 d0       	rcall	.+10     	; 0x10a2 <__divmodhi4_neg2>
    1098:	3e f4       	brtc	.+14     	; 0x10a8 <__divmodhi4_exit>

0000109a <__divmodhi4_neg1>:
    109a:	90 95       	com	r25
    109c:	81 95       	neg	r24
    109e:	9f 4f       	sbci	r25, 0xFF	; 255
    10a0:	08 95       	ret

000010a2 <__divmodhi4_neg2>:
    10a2:	70 95       	com	r23
    10a4:	61 95       	neg	r22
    10a6:	7f 4f       	sbci	r23, 0xFF	; 255

000010a8 <__divmodhi4_exit>:
    10a8:	08 95       	ret

000010aa <__divmodsi4>:
    10aa:	05 2e       	mov	r0, r21
    10ac:	97 fb       	bst	r25, 7
    10ae:	1e f4       	brtc	.+6      	; 0x10b6 <__divmodsi4+0xc>
    10b0:	00 94       	com	r0
    10b2:	0e 94 6c 08 	call	0x10d8	; 0x10d8 <__negsi2>
    10b6:	57 fd       	sbrc	r21, 7
    10b8:	07 d0       	rcall	.+14     	; 0x10c8 <__divmodsi4_neg2>
    10ba:	0e 94 93 08 	call	0x1126	; 0x1126 <__udivmodsi4>
    10be:	07 fc       	sbrc	r0, 7
    10c0:	03 d0       	rcall	.+6      	; 0x10c8 <__divmodsi4_neg2>
    10c2:	4e f4       	brtc	.+18     	; 0x10d6 <__divmodsi4_exit>
    10c4:	0c 94 6c 08 	jmp	0x10d8	; 0x10d8 <__negsi2>

000010c8 <__divmodsi4_neg2>:
    10c8:	50 95       	com	r21
    10ca:	40 95       	com	r20
    10cc:	30 95       	com	r19
    10ce:	21 95       	neg	r18
    10d0:	3f 4f       	sbci	r19, 0xFF	; 255
    10d2:	4f 4f       	sbci	r20, 0xFF	; 255
    10d4:	5f 4f       	sbci	r21, 0xFF	; 255

000010d6 <__divmodsi4_exit>:
    10d6:	08 95       	ret

000010d8 <__negsi2>:
    10d8:	90 95       	com	r25
    10da:	80 95       	com	r24
    10dc:	70 95       	com	r23
    10de:	61 95       	neg	r22
    10e0:	7f 4f       	sbci	r23, 0xFF	; 255
    10e2:	8f 4f       	sbci	r24, 0xFF	; 255
    10e4:	9f 4f       	sbci	r25, 0xFF	; 255
    10e6:	08 95       	ret

000010e8 <__muluhisi3>:
    10e8:	0e 94 b5 08 	call	0x116a	; 0x116a <__umulhisi3>
    10ec:	a5 9f       	mul	r26, r21
    10ee:	90 0d       	add	r25, r0
    10f0:	b4 9f       	mul	r27, r20
    10f2:	90 0d       	add	r25, r0
    10f4:	a4 9f       	mul	r26, r20
    10f6:	80 0d       	add	r24, r0
    10f8:	91 1d       	adc	r25, r1
    10fa:	11 24       	eor	r1, r1
    10fc:	08 95       	ret

000010fe <__udivmodhi4>:
    10fe:	aa 1b       	sub	r26, r26
    1100:	bb 1b       	sub	r27, r27
    1102:	51 e1       	ldi	r21, 0x11	; 17
    1104:	07 c0       	rjmp	.+14     	; 0x1114 <__udivmodhi4_ep>

00001106 <__udivmodhi4_loop>:
    1106:	aa 1f       	adc	r26, r26
    1108:	bb 1f       	adc	r27, r27
    110a:	a6 17       	cp	r26, r22
    110c:	b7 07       	cpc	r27, r23
    110e:	10 f0       	brcs	.+4      	; 0x1114 <__udivmodhi4_ep>
    1110:	a6 1b       	sub	r26, r22
    1112:	b7 0b       	sbc	r27, r23

00001114 <__udivmodhi4_ep>:
    1114:	88 1f       	adc	r24, r24
    1116:	99 1f       	adc	r25, r25
    1118:	5a 95       	dec	r21
    111a:	a9 f7       	brne	.-22     	; 0x1106 <__udivmodhi4_loop>
    111c:	80 95       	com	r24
    111e:	90 95       	com	r25
    1120:	bc 01       	movw	r22, r24
    1122:	cd 01       	movw	r24, r26
    1124:	08 95       	ret

00001126 <__udivmodsi4>:
    1126:	a1 e2       	ldi	r26, 0x21	; 33
    1128:	1a 2e       	mov	r1, r26
    112a:	aa 1b       	sub	r26, r26
    112c:	bb 1b       	sub	r27, r27
    112e:	fd 01       	movw	r30, r26
    1130:	0d c0       	rjmp	.+26     	; 0x114c <__udivmodsi4_ep>

00001132 <__udivmodsi4_loop>:
    1132:	aa 1f       	adc	r26, r26
    1134:	bb 1f       	adc	r27, r27
    1136:	ee 1f       	adc	r30, r30
    1138:	ff 1f       	adc	r31, r31
    113a:	a2 17       	cp	r26, r18
    113c:	b3 07       	cpc	r27, r19
    113e:	e4 07       	cpc	r30, r20
    1140:	f5 07       	cpc	r31, r21
    1142:	20 f0       	brcs	.+8      	; 0x114c <__udivmodsi4_ep>
    1144:	a2 1b       	sub	r26, r18
    1146:	b3 0b       	sbc	r27, r19
    1148:	e4 0b       	sbc	r30, r20
    114a:	f5 0b       	sbc	r31, r21

0000114c <__udivmodsi4_ep>:
    114c:	66 1f       	adc	r22, r22
    114e:	77 1f       	adc	r23, r23
    1150:	88 1f       	adc	r24, r24
    1152:	99 1f       	adc	r25, r25
    1154:	1a 94       	dec	r1
    1156:	69 f7       	brne	.-38     	; 0x1132 <__udivmodsi4_loop>
    1158:	60 95       	com	r22
    115a:	70 95       	com	r23
    115c:	80 95       	com	r24
    115e:	90 95       	com	r25
    1160:	9b 01       	movw	r18, r22
    1162:	ac 01       	movw	r20, r24
    1164:	bd 01       	movw	r22, r26
    1166:	cf 01       	movw	r24, r30
    1168:	08 95       	ret

0000116a <__umulhisi3>:
    116a:	a2 9f       	mul	r26, r18
    116c:	b0 01       	movw	r22, r0
    116e:	b3 9f       	mul	r27, r19
    1170:	c0 01       	movw	r24, r0
    1172:	a3 9f       	mul	r26, r19
    1174:	70 0d       	add	r23, r0
    1176:	81 1d       	adc	r24, r1
    1178:	11 24       	eor	r1, r1
    117a:	91 1d       	adc	r25, r1
    117c:	b2 9f       	mul	r27, r18
    117e:	70 0d       	add	r23, r0
    1180:	81 1d       	adc	r24, r1
    1182:	11 24       	eor	r1, r1
    1184:	91 1d       	adc	r25, r1
    1186:	08 95       	ret

00001188 <malloc>:
    1188:	cf 93       	push	r28
    118a:	df 93       	push	r29
    118c:	82 30       	cpi	r24, 0x02	; 2
    118e:	91 05       	cpc	r25, r1
    1190:	10 f4       	brcc	.+4      	; 0x1196 <malloc+0xe>
    1192:	82 e0       	ldi	r24, 0x02	; 2
    1194:	90 e0       	ldi	r25, 0x00	; 0
    1196:	e0 91 41 03 	lds	r30, 0x0341
    119a:	f0 91 42 03 	lds	r31, 0x0342
    119e:	20 e0       	ldi	r18, 0x00	; 0
    11a0:	30 e0       	ldi	r19, 0x00	; 0
    11a2:	a0 e0       	ldi	r26, 0x00	; 0
    11a4:	b0 e0       	ldi	r27, 0x00	; 0
    11a6:	30 97       	sbiw	r30, 0x00	; 0
    11a8:	39 f1       	breq	.+78     	; 0x11f8 <malloc+0x70>
    11aa:	40 81       	ld	r20, Z
    11ac:	51 81       	ldd	r21, Z+1	; 0x01
    11ae:	48 17       	cp	r20, r24
    11b0:	59 07       	cpc	r21, r25
    11b2:	b8 f0       	brcs	.+46     	; 0x11e2 <malloc+0x5a>
    11b4:	48 17       	cp	r20, r24
    11b6:	59 07       	cpc	r21, r25
    11b8:	71 f4       	brne	.+28     	; 0x11d6 <malloc+0x4e>
    11ba:	82 81       	ldd	r24, Z+2	; 0x02
    11bc:	93 81       	ldd	r25, Z+3	; 0x03
    11be:	10 97       	sbiw	r26, 0x00	; 0
    11c0:	29 f0       	breq	.+10     	; 0x11cc <malloc+0x44>
    11c2:	13 96       	adiw	r26, 0x03	; 3
    11c4:	9c 93       	st	X, r25
    11c6:	8e 93       	st	-X, r24
    11c8:	12 97       	sbiw	r26, 0x02	; 2
    11ca:	2c c0       	rjmp	.+88     	; 0x1224 <malloc+0x9c>
    11cc:	90 93 42 03 	sts	0x0342, r25
    11d0:	80 93 41 03 	sts	0x0341, r24
    11d4:	27 c0       	rjmp	.+78     	; 0x1224 <malloc+0x9c>
    11d6:	21 15       	cp	r18, r1
    11d8:	31 05       	cpc	r19, r1
    11da:	31 f0       	breq	.+12     	; 0x11e8 <malloc+0x60>
    11dc:	42 17       	cp	r20, r18
    11de:	53 07       	cpc	r21, r19
    11e0:	18 f0       	brcs	.+6      	; 0x11e8 <malloc+0x60>
    11e2:	a9 01       	movw	r20, r18
    11e4:	db 01       	movw	r26, r22
    11e6:	01 c0       	rjmp	.+2      	; 0x11ea <malloc+0x62>
    11e8:	ef 01       	movw	r28, r30
    11ea:	9a 01       	movw	r18, r20
    11ec:	bd 01       	movw	r22, r26
    11ee:	df 01       	movw	r26, r30
    11f0:	02 80       	ldd	r0, Z+2	; 0x02
    11f2:	f3 81       	ldd	r31, Z+3	; 0x03
    11f4:	e0 2d       	mov	r30, r0
    11f6:	d7 cf       	rjmp	.-82     	; 0x11a6 <malloc+0x1e>
    11f8:	21 15       	cp	r18, r1
    11fa:	31 05       	cpc	r19, r1
    11fc:	f9 f0       	breq	.+62     	; 0x123c <malloc+0xb4>
    11fe:	28 1b       	sub	r18, r24
    1200:	39 0b       	sbc	r19, r25
    1202:	24 30       	cpi	r18, 0x04	; 4
    1204:	31 05       	cpc	r19, r1
    1206:	80 f4       	brcc	.+32     	; 0x1228 <malloc+0xa0>
    1208:	8a 81       	ldd	r24, Y+2	; 0x02
    120a:	9b 81       	ldd	r25, Y+3	; 0x03
    120c:	61 15       	cp	r22, r1
    120e:	71 05       	cpc	r23, r1
    1210:	21 f0       	breq	.+8      	; 0x121a <malloc+0x92>
    1212:	fb 01       	movw	r30, r22
    1214:	93 83       	std	Z+3, r25	; 0x03
    1216:	82 83       	std	Z+2, r24	; 0x02
    1218:	04 c0       	rjmp	.+8      	; 0x1222 <malloc+0x9a>
    121a:	90 93 42 03 	sts	0x0342, r25
    121e:	80 93 41 03 	sts	0x0341, r24
    1222:	fe 01       	movw	r30, r28
    1224:	32 96       	adiw	r30, 0x02	; 2
    1226:	44 c0       	rjmp	.+136    	; 0x12b0 <malloc+0x128>
    1228:	fe 01       	movw	r30, r28
    122a:	e2 0f       	add	r30, r18
    122c:	f3 1f       	adc	r31, r19
    122e:	81 93       	st	Z+, r24
    1230:	91 93       	st	Z+, r25
    1232:	22 50       	subi	r18, 0x02	; 2
    1234:	31 09       	sbc	r19, r1
    1236:	39 83       	std	Y+1, r19	; 0x01
    1238:	28 83       	st	Y, r18
    123a:	3a c0       	rjmp	.+116    	; 0x12b0 <malloc+0x128>
    123c:	20 91 3f 03 	lds	r18, 0x033F
    1240:	30 91 40 03 	lds	r19, 0x0340
    1244:	23 2b       	or	r18, r19
    1246:	41 f4       	brne	.+16     	; 0x1258 <malloc+0xd0>
    1248:	20 91 02 01 	lds	r18, 0x0102
    124c:	30 91 03 01 	lds	r19, 0x0103
    1250:	30 93 40 03 	sts	0x0340, r19
    1254:	20 93 3f 03 	sts	0x033F, r18
    1258:	20 91 00 01 	lds	r18, 0x0100
    125c:	30 91 01 01 	lds	r19, 0x0101
    1260:	21 15       	cp	r18, r1
    1262:	31 05       	cpc	r19, r1
    1264:	41 f4       	brne	.+16     	; 0x1276 <malloc+0xee>
    1266:	2d b7       	in	r18, 0x3d	; 61
    1268:	3e b7       	in	r19, 0x3e	; 62
    126a:	40 91 04 01 	lds	r20, 0x0104
    126e:	50 91 05 01 	lds	r21, 0x0105
    1272:	24 1b       	sub	r18, r20
    1274:	35 0b       	sbc	r19, r21
    1276:	e0 91 3f 03 	lds	r30, 0x033F
    127a:	f0 91 40 03 	lds	r31, 0x0340
    127e:	e2 17       	cp	r30, r18
    1280:	f3 07       	cpc	r31, r19
    1282:	a0 f4       	brcc	.+40     	; 0x12ac <malloc+0x124>
    1284:	2e 1b       	sub	r18, r30
    1286:	3f 0b       	sbc	r19, r31
    1288:	28 17       	cp	r18, r24
    128a:	39 07       	cpc	r19, r25
    128c:	78 f0       	brcs	.+30     	; 0x12ac <malloc+0x124>
    128e:	ac 01       	movw	r20, r24
    1290:	4e 5f       	subi	r20, 0xFE	; 254
    1292:	5f 4f       	sbci	r21, 0xFF	; 255
    1294:	24 17       	cp	r18, r20
    1296:	35 07       	cpc	r19, r21
    1298:	48 f0       	brcs	.+18     	; 0x12ac <malloc+0x124>
    129a:	4e 0f       	add	r20, r30
    129c:	5f 1f       	adc	r21, r31
    129e:	50 93 40 03 	sts	0x0340, r21
    12a2:	40 93 3f 03 	sts	0x033F, r20
    12a6:	81 93       	st	Z+, r24
    12a8:	91 93       	st	Z+, r25
    12aa:	02 c0       	rjmp	.+4      	; 0x12b0 <malloc+0x128>
    12ac:	e0 e0       	ldi	r30, 0x00	; 0
    12ae:	f0 e0       	ldi	r31, 0x00	; 0
    12b0:	cf 01       	movw	r24, r30
    12b2:	df 91       	pop	r29
    12b4:	cf 91       	pop	r28
    12b6:	08 95       	ret

000012b8 <free>:
    12b8:	cf 93       	push	r28
    12ba:	df 93       	push	r29
    12bc:	00 97       	sbiw	r24, 0x00	; 0
    12be:	09 f4       	brne	.+2      	; 0x12c2 <free+0xa>
    12c0:	87 c0       	rjmp	.+270    	; 0x13d0 <free+0x118>
    12c2:	fc 01       	movw	r30, r24
    12c4:	32 97       	sbiw	r30, 0x02	; 2
    12c6:	13 82       	std	Z+3, r1	; 0x03
    12c8:	12 82       	std	Z+2, r1	; 0x02
    12ca:	c0 91 41 03 	lds	r28, 0x0341
    12ce:	d0 91 42 03 	lds	r29, 0x0342
    12d2:	20 97       	sbiw	r28, 0x00	; 0
    12d4:	81 f4       	brne	.+32     	; 0x12f6 <free+0x3e>
    12d6:	20 81       	ld	r18, Z
    12d8:	31 81       	ldd	r19, Z+1	; 0x01
    12da:	28 0f       	add	r18, r24
    12dc:	39 1f       	adc	r19, r25
    12de:	80 91 3f 03 	lds	r24, 0x033F
    12e2:	90 91 40 03 	lds	r25, 0x0340
    12e6:	82 17       	cp	r24, r18
    12e8:	93 07       	cpc	r25, r19
    12ea:	79 f5       	brne	.+94     	; 0x134a <free+0x92>
    12ec:	f0 93 40 03 	sts	0x0340, r31
    12f0:	e0 93 3f 03 	sts	0x033F, r30
    12f4:	6d c0       	rjmp	.+218    	; 0x13d0 <free+0x118>
    12f6:	de 01       	movw	r26, r28
    12f8:	20 e0       	ldi	r18, 0x00	; 0
    12fa:	30 e0       	ldi	r19, 0x00	; 0
    12fc:	ae 17       	cp	r26, r30
    12fe:	bf 07       	cpc	r27, r31
    1300:	50 f4       	brcc	.+20     	; 0x1316 <free+0x5e>
    1302:	12 96       	adiw	r26, 0x02	; 2
    1304:	4d 91       	ld	r20, X+
    1306:	5c 91       	ld	r21, X
    1308:	13 97       	sbiw	r26, 0x03	; 3
    130a:	9d 01       	movw	r18, r26
    130c:	41 15       	cp	r20, r1
    130e:	51 05       	cpc	r21, r1
    1310:	09 f1       	breq	.+66     	; 0x1354 <free+0x9c>
    1312:	da 01       	movw	r26, r20
    1314:	f3 cf       	rjmp	.-26     	; 0x12fc <free+0x44>
    1316:	b3 83       	std	Z+3, r27	; 0x03
    1318:	a2 83       	std	Z+2, r26	; 0x02
    131a:	40 81       	ld	r20, Z
    131c:	51 81       	ldd	r21, Z+1	; 0x01
    131e:	84 0f       	add	r24, r20
    1320:	95 1f       	adc	r25, r21
    1322:	8a 17       	cp	r24, r26
    1324:	9b 07       	cpc	r25, r27
    1326:	71 f4       	brne	.+28     	; 0x1344 <free+0x8c>
    1328:	8d 91       	ld	r24, X+
    132a:	9c 91       	ld	r25, X
    132c:	11 97       	sbiw	r26, 0x01	; 1
    132e:	84 0f       	add	r24, r20
    1330:	95 1f       	adc	r25, r21
    1332:	02 96       	adiw	r24, 0x02	; 2
    1334:	91 83       	std	Z+1, r25	; 0x01
    1336:	80 83       	st	Z, r24
    1338:	12 96       	adiw	r26, 0x02	; 2
    133a:	8d 91       	ld	r24, X+
    133c:	9c 91       	ld	r25, X
    133e:	13 97       	sbiw	r26, 0x03	; 3
    1340:	93 83       	std	Z+3, r25	; 0x03
    1342:	82 83       	std	Z+2, r24	; 0x02
    1344:	21 15       	cp	r18, r1
    1346:	31 05       	cpc	r19, r1
    1348:	29 f4       	brne	.+10     	; 0x1354 <free+0x9c>
    134a:	f0 93 42 03 	sts	0x0342, r31
    134e:	e0 93 41 03 	sts	0x0341, r30
    1352:	3e c0       	rjmp	.+124    	; 0x13d0 <free+0x118>
    1354:	d9 01       	movw	r26, r18
    1356:	13 96       	adiw	r26, 0x03	; 3
    1358:	fc 93       	st	X, r31
    135a:	ee 93       	st	-X, r30
    135c:	12 97       	sbiw	r26, 0x02	; 2
    135e:	4d 91       	ld	r20, X+
    1360:	5d 91       	ld	r21, X+
    1362:	a4 0f       	add	r26, r20
    1364:	b5 1f       	adc	r27, r21
    1366:	ea 17       	cp	r30, r26
    1368:	fb 07       	cpc	r31, r27
    136a:	79 f4       	brne	.+30     	; 0x138a <free+0xd2>
    136c:	80 81       	ld	r24, Z
    136e:	91 81       	ldd	r25, Z+1	; 0x01
    1370:	84 0f       	add	r24, r20
    1372:	95 1f       	adc	r25, r21
    1374:	02 96       	adiw	r24, 0x02	; 2
    1376:	d9 01       	movw	r26, r18
    1378:	11 96       	adiw	r26, 0x01	; 1
    137a:	9c 93       	st	X, r25
    137c:	8e 93       	st	-X, r24
    137e:	82 81       	ldd	r24, Z+2	; 0x02
    1380:	93 81       	ldd	r25, Z+3	; 0x03
    1382:	13 96       	adiw	r26, 0x03	; 3
    1384:	9c 93       	st	X, r25
    1386:	8e 93       	st	-X, r24
    1388:	12 97       	sbiw	r26, 0x02	; 2
    138a:	e0 e0       	ldi	r30, 0x00	; 0
    138c:	f0 e0       	ldi	r31, 0x00	; 0
    138e:	8a 81       	ldd	r24, Y+2	; 0x02
    1390:	9b 81       	ldd	r25, Y+3	; 0x03
    1392:	00 97       	sbiw	r24, 0x00	; 0
    1394:	19 f0       	breq	.+6      	; 0x139c <free+0xe4>
    1396:	fe 01       	movw	r30, r28
    1398:	ec 01       	movw	r28, r24
    139a:	f9 cf       	rjmp	.-14     	; 0x138e <free+0xd6>
    139c:	ce 01       	movw	r24, r28
    139e:	02 96       	adiw	r24, 0x02	; 2
    13a0:	28 81       	ld	r18, Y
    13a2:	39 81       	ldd	r19, Y+1	; 0x01
    13a4:	82 0f       	add	r24, r18
    13a6:	93 1f       	adc	r25, r19
    13a8:	20 91 3f 03 	lds	r18, 0x033F
    13ac:	30 91 40 03 	lds	r19, 0x0340
    13b0:	28 17       	cp	r18, r24
    13b2:	39 07       	cpc	r19, r25
    13b4:	69 f4       	brne	.+26     	; 0x13d0 <free+0x118>
    13b6:	30 97       	sbiw	r30, 0x00	; 0
    13b8:	29 f4       	brne	.+10     	; 0x13c4 <free+0x10c>
    13ba:	10 92 42 03 	sts	0x0342, r1
    13be:	10 92 41 03 	sts	0x0341, r1
    13c2:	02 c0       	rjmp	.+4      	; 0x13c8 <free+0x110>
    13c4:	13 82       	std	Z+3, r1	; 0x03
    13c6:	12 82       	std	Z+2, r1	; 0x02
    13c8:	d0 93 40 03 	sts	0x0340, r29
    13cc:	c0 93 3f 03 	sts	0x033F, r28
    13d0:	df 91       	pop	r29
    13d2:	cf 91       	pop	r28
    13d4:	08 95       	ret

000013d6 <do_rand>:
    13d6:	8f 92       	push	r8
    13d8:	9f 92       	push	r9
    13da:	af 92       	push	r10
    13dc:	bf 92       	push	r11
    13de:	cf 92       	push	r12
    13e0:	df 92       	push	r13
    13e2:	ef 92       	push	r14
    13e4:	ff 92       	push	r15
    13e6:	cf 93       	push	r28
    13e8:	df 93       	push	r29
    13ea:	ec 01       	movw	r28, r24
    13ec:	68 81       	ld	r22, Y
    13ee:	79 81       	ldd	r23, Y+1	; 0x01
    13f0:	8a 81       	ldd	r24, Y+2	; 0x02
    13f2:	9b 81       	ldd	r25, Y+3	; 0x03
    13f4:	61 15       	cp	r22, r1
    13f6:	71 05       	cpc	r23, r1
    13f8:	81 05       	cpc	r24, r1
    13fa:	91 05       	cpc	r25, r1
    13fc:	21 f4       	brne	.+8      	; 0x1406 <do_rand+0x30>
    13fe:	64 e2       	ldi	r22, 0x24	; 36
    1400:	79 ed       	ldi	r23, 0xD9	; 217
    1402:	8b e5       	ldi	r24, 0x5B	; 91
    1404:	97 e0       	ldi	r25, 0x07	; 7
    1406:	2d e1       	ldi	r18, 0x1D	; 29
    1408:	33 ef       	ldi	r19, 0xF3	; 243
    140a:	41 e0       	ldi	r20, 0x01	; 1
    140c:	50 e0       	ldi	r21, 0x00	; 0
    140e:	0e 94 55 08 	call	0x10aa	; 0x10aa <__divmodsi4>
    1412:	49 01       	movw	r8, r18
    1414:	5a 01       	movw	r10, r20
    1416:	9b 01       	movw	r18, r22
    1418:	ac 01       	movw	r20, r24
    141a:	a7 ea       	ldi	r26, 0xA7	; 167
    141c:	b1 e4       	ldi	r27, 0x41	; 65
    141e:	0e 94 74 08 	call	0x10e8	; 0x10e8 <__muluhisi3>
    1422:	6b 01       	movw	r12, r22
    1424:	7c 01       	movw	r14, r24
    1426:	ac ee       	ldi	r26, 0xEC	; 236
    1428:	b4 ef       	ldi	r27, 0xF4	; 244
    142a:	a5 01       	movw	r20, r10
    142c:	94 01       	movw	r18, r8
    142e:	0e 94 73 0d 	call	0x1ae6	; 0x1ae6 <__mulohisi3>
    1432:	c6 0e       	add	r12, r22
    1434:	d7 1e       	adc	r13, r23
    1436:	e8 1e       	adc	r14, r24
    1438:	f9 1e       	adc	r15, r25
    143a:	f7 fe       	sbrs	r15, 7
    143c:	06 c0       	rjmp	.+12     	; 0x144a <do_rand+0x74>
    143e:	81 e0       	ldi	r24, 0x01	; 1
    1440:	c8 1a       	sub	r12, r24
    1442:	d1 08       	sbc	r13, r1
    1444:	e1 08       	sbc	r14, r1
    1446:	80 e8       	ldi	r24, 0x80	; 128
    1448:	f8 0a       	sbc	r15, r24
    144a:	c8 82       	st	Y, r12
    144c:	d9 82       	std	Y+1, r13	; 0x01
    144e:	ea 82       	std	Y+2, r14	; 0x02
    1450:	fb 82       	std	Y+3, r15	; 0x03
    1452:	c6 01       	movw	r24, r12
    1454:	9f 77       	andi	r25, 0x7F	; 127
    1456:	df 91       	pop	r29
    1458:	cf 91       	pop	r28
    145a:	ff 90       	pop	r15
    145c:	ef 90       	pop	r14
    145e:	df 90       	pop	r13
    1460:	cf 90       	pop	r12
    1462:	bf 90       	pop	r11
    1464:	af 90       	pop	r10
    1466:	9f 90       	pop	r9
    1468:	8f 90       	pop	r8
    146a:	08 95       	ret

0000146c <rand_r>:
    146c:	0e 94 eb 09 	call	0x13d6	; 0x13d6 <do_rand>
    1470:	08 95       	ret

00001472 <rand>:
    1472:	86 e0       	ldi	r24, 0x06	; 6
    1474:	91 e0       	ldi	r25, 0x01	; 1
    1476:	0e 94 eb 09 	call	0x13d6	; 0x13d6 <do_rand>
    147a:	08 95       	ret

0000147c <srand>:
    147c:	a0 e0       	ldi	r26, 0x00	; 0
    147e:	b0 e0       	ldi	r27, 0x00	; 0
    1480:	80 93 06 01 	sts	0x0106, r24
    1484:	90 93 07 01 	sts	0x0107, r25
    1488:	a0 93 08 01 	sts	0x0108, r26
    148c:	b0 93 09 01 	sts	0x0109, r27
    1490:	08 95       	ret

00001492 <fdevopen>:
    1492:	0f 93       	push	r16
    1494:	1f 93       	push	r17
    1496:	cf 93       	push	r28
    1498:	df 93       	push	r29
    149a:	ec 01       	movw	r28, r24
    149c:	8b 01       	movw	r16, r22
    149e:	00 97       	sbiw	r24, 0x00	; 0
    14a0:	31 f4       	brne	.+12     	; 0x14ae <fdevopen+0x1c>
    14a2:	61 15       	cp	r22, r1
    14a4:	71 05       	cpc	r23, r1
    14a6:	19 f4       	brne	.+6      	; 0x14ae <fdevopen+0x1c>
    14a8:	80 e0       	ldi	r24, 0x00	; 0
    14aa:	90 e0       	ldi	r25, 0x00	; 0
    14ac:	38 c0       	rjmp	.+112    	; 0x151e <fdevopen+0x8c>
    14ae:	6e e0       	ldi	r22, 0x0E	; 14
    14b0:	70 e0       	ldi	r23, 0x00	; 0
    14b2:	81 e0       	ldi	r24, 0x01	; 1
    14b4:	90 e0       	ldi	r25, 0x00	; 0
    14b6:	0e 94 a7 0c 	call	0x194e	; 0x194e <calloc>
    14ba:	fc 01       	movw	r30, r24
    14bc:	00 97       	sbiw	r24, 0x00	; 0
    14be:	a1 f3       	breq	.-24     	; 0x14a8 <fdevopen+0x16>
    14c0:	80 e8       	ldi	r24, 0x80	; 128
    14c2:	83 83       	std	Z+3, r24	; 0x03
    14c4:	01 15       	cp	r16, r1
    14c6:	11 05       	cpc	r17, r1
    14c8:	71 f0       	breq	.+28     	; 0x14e6 <fdevopen+0x54>
    14ca:	13 87       	std	Z+11, r17	; 0x0b
    14cc:	02 87       	std	Z+10, r16	; 0x0a
    14ce:	81 e8       	ldi	r24, 0x81	; 129
    14d0:	83 83       	std	Z+3, r24	; 0x03
    14d2:	80 91 43 03 	lds	r24, 0x0343
    14d6:	90 91 44 03 	lds	r25, 0x0344
    14da:	89 2b       	or	r24, r25
    14dc:	21 f4       	brne	.+8      	; 0x14e6 <fdevopen+0x54>
    14de:	f0 93 44 03 	sts	0x0344, r31
    14e2:	e0 93 43 03 	sts	0x0343, r30
    14e6:	20 97       	sbiw	r28, 0x00	; 0
    14e8:	c9 f0       	breq	.+50     	; 0x151c <fdevopen+0x8a>
    14ea:	d1 87       	std	Z+9, r29	; 0x09
    14ec:	c0 87       	std	Z+8, r28	; 0x08
    14ee:	83 81       	ldd	r24, Z+3	; 0x03
    14f0:	82 60       	ori	r24, 0x02	; 2
    14f2:	83 83       	std	Z+3, r24	; 0x03
    14f4:	80 91 45 03 	lds	r24, 0x0345
    14f8:	90 91 46 03 	lds	r25, 0x0346
    14fc:	89 2b       	or	r24, r25
    14fe:	71 f4       	brne	.+28     	; 0x151c <fdevopen+0x8a>
    1500:	f0 93 46 03 	sts	0x0346, r31
    1504:	e0 93 45 03 	sts	0x0345, r30
    1508:	80 91 47 03 	lds	r24, 0x0347
    150c:	90 91 48 03 	lds	r25, 0x0348
    1510:	89 2b       	or	r24, r25
    1512:	21 f4       	brne	.+8      	; 0x151c <fdevopen+0x8a>
    1514:	f0 93 48 03 	sts	0x0348, r31
    1518:	e0 93 47 03 	sts	0x0347, r30
    151c:	cf 01       	movw	r24, r30
    151e:	df 91       	pop	r29
    1520:	cf 91       	pop	r28
    1522:	1f 91       	pop	r17
    1524:	0f 91       	pop	r16
    1526:	08 95       	ret

00001528 <printf>:
    1528:	a0 e0       	ldi	r26, 0x00	; 0
    152a:	b0 e0       	ldi	r27, 0x00	; 0
    152c:	ea e9       	ldi	r30, 0x9A	; 154
    152e:	fa e0       	ldi	r31, 0x0A	; 10
    1530:	0c 94 88 0d 	jmp	0x1b10	; 0x1b10 <__prologue_saves__+0x20>
    1534:	fe 01       	movw	r30, r28
    1536:	35 96       	adiw	r30, 0x05	; 5
    1538:	61 91       	ld	r22, Z+
    153a:	71 91       	ld	r23, Z+
    153c:	af 01       	movw	r20, r30
    153e:	80 91 45 03 	lds	r24, 0x0345
    1542:	90 91 46 03 	lds	r25, 0x0346
    1546:	0e 94 d5 0a 	call	0x15aa	; 0x15aa <vfprintf>
    154a:	e2 e0       	ldi	r30, 0x02	; 2
    154c:	0c 94 a4 0d 	jmp	0x1b48	; 0x1b48 <__epilogue_restores__+0x20>

00001550 <puts>:
    1550:	0f 93       	push	r16
    1552:	1f 93       	push	r17
    1554:	cf 93       	push	r28
    1556:	df 93       	push	r29
    1558:	e0 91 45 03 	lds	r30, 0x0345
    155c:	f0 91 46 03 	lds	r31, 0x0346
    1560:	23 81       	ldd	r18, Z+3	; 0x03
    1562:	21 ff       	sbrs	r18, 1
    1564:	1b c0       	rjmp	.+54     	; 0x159c <puts+0x4c>
    1566:	ec 01       	movw	r28, r24
    1568:	00 e0       	ldi	r16, 0x00	; 0
    156a:	10 e0       	ldi	r17, 0x00	; 0
    156c:	89 91       	ld	r24, Y+
    156e:	60 91 45 03 	lds	r22, 0x0345
    1572:	70 91 46 03 	lds	r23, 0x0346
    1576:	db 01       	movw	r26, r22
    1578:	18 96       	adiw	r26, 0x08	; 8
    157a:	ed 91       	ld	r30, X+
    157c:	fc 91       	ld	r31, X
    157e:	19 97       	sbiw	r26, 0x09	; 9
    1580:	88 23       	and	r24, r24
    1582:	31 f0       	breq	.+12     	; 0x1590 <puts+0x40>
    1584:	09 95       	icall
    1586:	89 2b       	or	r24, r25
    1588:	89 f3       	breq	.-30     	; 0x156c <puts+0x1c>
    158a:	0f ef       	ldi	r16, 0xFF	; 255
    158c:	1f ef       	ldi	r17, 0xFF	; 255
    158e:	ee cf       	rjmp	.-36     	; 0x156c <puts+0x1c>
    1590:	8a e0       	ldi	r24, 0x0A	; 10
    1592:	09 95       	icall
    1594:	89 2b       	or	r24, r25
    1596:	11 f4       	brne	.+4      	; 0x159c <puts+0x4c>
    1598:	c8 01       	movw	r24, r16
    159a:	02 c0       	rjmp	.+4      	; 0x15a0 <puts+0x50>
    159c:	8f ef       	ldi	r24, 0xFF	; 255
    159e:	9f ef       	ldi	r25, 0xFF	; 255
    15a0:	df 91       	pop	r29
    15a2:	cf 91       	pop	r28
    15a4:	1f 91       	pop	r17
    15a6:	0f 91       	pop	r16
    15a8:	08 95       	ret

000015aa <vfprintf>:
    15aa:	ac e0       	ldi	r26, 0x0C	; 12
    15ac:	b0 e0       	ldi	r27, 0x00	; 0
    15ae:	eb ed       	ldi	r30, 0xDB	; 219
    15b0:	fa e0       	ldi	r31, 0x0A	; 10
    15b2:	0c 94 78 0d 	jmp	0x1af0	; 0x1af0 <__prologue_saves__>
    15b6:	7c 01       	movw	r14, r24
    15b8:	6b 01       	movw	r12, r22
    15ba:	8a 01       	movw	r16, r20
    15bc:	fc 01       	movw	r30, r24
    15be:	17 82       	std	Z+7, r1	; 0x07
    15c0:	16 82       	std	Z+6, r1	; 0x06
    15c2:	83 81       	ldd	r24, Z+3	; 0x03
    15c4:	81 ff       	sbrs	r24, 1
    15c6:	bd c1       	rjmp	.+890    	; 0x1942 <vfprintf+0x398>
    15c8:	ce 01       	movw	r24, r28
    15ca:	01 96       	adiw	r24, 0x01	; 1
    15cc:	4c 01       	movw	r8, r24
    15ce:	f7 01       	movw	r30, r14
    15d0:	93 81       	ldd	r25, Z+3	; 0x03
    15d2:	f6 01       	movw	r30, r12
    15d4:	93 fd       	sbrc	r25, 3
    15d6:	85 91       	lpm	r24, Z+
    15d8:	93 ff       	sbrs	r25, 3
    15da:	81 91       	ld	r24, Z+
    15dc:	6f 01       	movw	r12, r30
    15de:	88 23       	and	r24, r24
    15e0:	09 f4       	brne	.+2      	; 0x15e4 <vfprintf+0x3a>
    15e2:	ab c1       	rjmp	.+854    	; 0x193a <vfprintf+0x390>
    15e4:	85 32       	cpi	r24, 0x25	; 37
    15e6:	39 f4       	brne	.+14     	; 0x15f6 <vfprintf+0x4c>
    15e8:	93 fd       	sbrc	r25, 3
    15ea:	85 91       	lpm	r24, Z+
    15ec:	93 ff       	sbrs	r25, 3
    15ee:	81 91       	ld	r24, Z+
    15f0:	6f 01       	movw	r12, r30
    15f2:	85 32       	cpi	r24, 0x25	; 37
    15f4:	29 f4       	brne	.+10     	; 0x1600 <vfprintf+0x56>
    15f6:	b7 01       	movw	r22, r14
    15f8:	90 e0       	ldi	r25, 0x00	; 0
    15fa:	0e 94 e0 0c 	call	0x19c0	; 0x19c0 <fputc>
    15fe:	e7 cf       	rjmp	.-50     	; 0x15ce <vfprintf+0x24>
    1600:	51 2c       	mov	r5, r1
    1602:	31 2c       	mov	r3, r1
    1604:	20 e0       	ldi	r18, 0x00	; 0
    1606:	20 32       	cpi	r18, 0x20	; 32
    1608:	a0 f4       	brcc	.+40     	; 0x1632 <vfprintf+0x88>
    160a:	8b 32       	cpi	r24, 0x2B	; 43
    160c:	69 f0       	breq	.+26     	; 0x1628 <vfprintf+0x7e>
    160e:	30 f4       	brcc	.+12     	; 0x161c <vfprintf+0x72>
    1610:	80 32       	cpi	r24, 0x20	; 32
    1612:	59 f0       	breq	.+22     	; 0x162a <vfprintf+0x80>
    1614:	83 32       	cpi	r24, 0x23	; 35
    1616:	69 f4       	brne	.+26     	; 0x1632 <vfprintf+0x88>
    1618:	20 61       	ori	r18, 0x10	; 16
    161a:	2c c0       	rjmp	.+88     	; 0x1674 <vfprintf+0xca>
    161c:	8d 32       	cpi	r24, 0x2D	; 45
    161e:	39 f0       	breq	.+14     	; 0x162e <vfprintf+0x84>
    1620:	80 33       	cpi	r24, 0x30	; 48
    1622:	39 f4       	brne	.+14     	; 0x1632 <vfprintf+0x88>
    1624:	21 60       	ori	r18, 0x01	; 1
    1626:	26 c0       	rjmp	.+76     	; 0x1674 <vfprintf+0xca>
    1628:	22 60       	ori	r18, 0x02	; 2
    162a:	24 60       	ori	r18, 0x04	; 4
    162c:	23 c0       	rjmp	.+70     	; 0x1674 <vfprintf+0xca>
    162e:	28 60       	ori	r18, 0x08	; 8
    1630:	21 c0       	rjmp	.+66     	; 0x1674 <vfprintf+0xca>
    1632:	27 fd       	sbrc	r18, 7
    1634:	27 c0       	rjmp	.+78     	; 0x1684 <vfprintf+0xda>
    1636:	30 ed       	ldi	r19, 0xD0	; 208
    1638:	38 0f       	add	r19, r24
    163a:	3a 30       	cpi	r19, 0x0A	; 10
    163c:	78 f4       	brcc	.+30     	; 0x165c <vfprintf+0xb2>
    163e:	26 ff       	sbrs	r18, 6
    1640:	06 c0       	rjmp	.+12     	; 0x164e <vfprintf+0xa4>
    1642:	fa e0       	ldi	r31, 0x0A	; 10
    1644:	5f 9e       	mul	r5, r31
    1646:	30 0d       	add	r19, r0
    1648:	11 24       	eor	r1, r1
    164a:	53 2e       	mov	r5, r19
    164c:	13 c0       	rjmp	.+38     	; 0x1674 <vfprintf+0xca>
    164e:	8a e0       	ldi	r24, 0x0A	; 10
    1650:	38 9e       	mul	r3, r24
    1652:	30 0d       	add	r19, r0
    1654:	11 24       	eor	r1, r1
    1656:	33 2e       	mov	r3, r19
    1658:	20 62       	ori	r18, 0x20	; 32
    165a:	0c c0       	rjmp	.+24     	; 0x1674 <vfprintf+0xca>
    165c:	8e 32       	cpi	r24, 0x2E	; 46
    165e:	21 f4       	brne	.+8      	; 0x1668 <vfprintf+0xbe>
    1660:	26 fd       	sbrc	r18, 6
    1662:	6b c1       	rjmp	.+726    	; 0x193a <vfprintf+0x390>
    1664:	20 64       	ori	r18, 0x40	; 64
    1666:	06 c0       	rjmp	.+12     	; 0x1674 <vfprintf+0xca>
    1668:	8c 36       	cpi	r24, 0x6C	; 108
    166a:	11 f4       	brne	.+4      	; 0x1670 <vfprintf+0xc6>
    166c:	20 68       	ori	r18, 0x80	; 128
    166e:	02 c0       	rjmp	.+4      	; 0x1674 <vfprintf+0xca>
    1670:	88 36       	cpi	r24, 0x68	; 104
    1672:	41 f4       	brne	.+16     	; 0x1684 <vfprintf+0xda>
    1674:	f6 01       	movw	r30, r12
    1676:	93 fd       	sbrc	r25, 3
    1678:	85 91       	lpm	r24, Z+
    167a:	93 ff       	sbrs	r25, 3
    167c:	81 91       	ld	r24, Z+
    167e:	6f 01       	movw	r12, r30
    1680:	81 11       	cpse	r24, r1
    1682:	c1 cf       	rjmp	.-126    	; 0x1606 <vfprintf+0x5c>
    1684:	98 2f       	mov	r25, r24
    1686:	9f 7d       	andi	r25, 0xDF	; 223
    1688:	95 54       	subi	r25, 0x45	; 69
    168a:	93 30       	cpi	r25, 0x03	; 3
    168c:	28 f4       	brcc	.+10     	; 0x1698 <vfprintf+0xee>
    168e:	0c 5f       	subi	r16, 0xFC	; 252
    1690:	1f 4f       	sbci	r17, 0xFF	; 255
    1692:	ff e3       	ldi	r31, 0x3F	; 63
    1694:	f9 83       	std	Y+1, r31	; 0x01
    1696:	0d c0       	rjmp	.+26     	; 0x16b2 <vfprintf+0x108>
    1698:	83 36       	cpi	r24, 0x63	; 99
    169a:	31 f0       	breq	.+12     	; 0x16a8 <vfprintf+0xfe>
    169c:	83 37       	cpi	r24, 0x73	; 115
    169e:	71 f0       	breq	.+28     	; 0x16bc <vfprintf+0x112>
    16a0:	83 35       	cpi	r24, 0x53	; 83
    16a2:	09 f0       	breq	.+2      	; 0x16a6 <vfprintf+0xfc>
    16a4:	5b c0       	rjmp	.+182    	; 0x175c <vfprintf+0x1b2>
    16a6:	22 c0       	rjmp	.+68     	; 0x16ec <vfprintf+0x142>
    16a8:	f8 01       	movw	r30, r16
    16aa:	80 81       	ld	r24, Z
    16ac:	89 83       	std	Y+1, r24	; 0x01
    16ae:	0e 5f       	subi	r16, 0xFE	; 254
    16b0:	1f 4f       	sbci	r17, 0xFF	; 255
    16b2:	44 24       	eor	r4, r4
    16b4:	43 94       	inc	r4
    16b6:	51 2c       	mov	r5, r1
    16b8:	54 01       	movw	r10, r8
    16ba:	15 c0       	rjmp	.+42     	; 0x16e6 <vfprintf+0x13c>
    16bc:	38 01       	movw	r6, r16
    16be:	f2 e0       	ldi	r31, 0x02	; 2
    16c0:	6f 0e       	add	r6, r31
    16c2:	71 1c       	adc	r7, r1
    16c4:	f8 01       	movw	r30, r16
    16c6:	a0 80       	ld	r10, Z
    16c8:	b1 80       	ldd	r11, Z+1	; 0x01
    16ca:	26 ff       	sbrs	r18, 6
    16cc:	03 c0       	rjmp	.+6      	; 0x16d4 <vfprintf+0x12a>
    16ce:	65 2d       	mov	r22, r5
    16d0:	70 e0       	ldi	r23, 0x00	; 0
    16d2:	02 c0       	rjmp	.+4      	; 0x16d8 <vfprintf+0x12e>
    16d4:	6f ef       	ldi	r22, 0xFF	; 255
    16d6:	7f ef       	ldi	r23, 0xFF	; 255
    16d8:	c5 01       	movw	r24, r10
    16da:	2c 87       	std	Y+12, r18	; 0x0c
    16dc:	0e 94 d5 0c 	call	0x19aa	; 0x19aa <strnlen>
    16e0:	2c 01       	movw	r4, r24
    16e2:	83 01       	movw	r16, r6
    16e4:	2c 85       	ldd	r18, Y+12	; 0x0c
    16e6:	2f 77       	andi	r18, 0x7F	; 127
    16e8:	22 2e       	mov	r2, r18
    16ea:	17 c0       	rjmp	.+46     	; 0x171a <vfprintf+0x170>
    16ec:	38 01       	movw	r6, r16
    16ee:	f2 e0       	ldi	r31, 0x02	; 2
    16f0:	6f 0e       	add	r6, r31
    16f2:	71 1c       	adc	r7, r1
    16f4:	f8 01       	movw	r30, r16
    16f6:	a0 80       	ld	r10, Z
    16f8:	b1 80       	ldd	r11, Z+1	; 0x01
    16fa:	26 ff       	sbrs	r18, 6
    16fc:	03 c0       	rjmp	.+6      	; 0x1704 <vfprintf+0x15a>
    16fe:	65 2d       	mov	r22, r5
    1700:	70 e0       	ldi	r23, 0x00	; 0
    1702:	02 c0       	rjmp	.+4      	; 0x1708 <vfprintf+0x15e>
    1704:	6f ef       	ldi	r22, 0xFF	; 255
    1706:	7f ef       	ldi	r23, 0xFF	; 255
    1708:	c5 01       	movw	r24, r10
    170a:	2c 87       	std	Y+12, r18	; 0x0c
    170c:	0e 94 c3 0c 	call	0x1986	; 0x1986 <strnlen_P>
    1710:	2c 01       	movw	r4, r24
    1712:	2c 85       	ldd	r18, Y+12	; 0x0c
    1714:	20 68       	ori	r18, 0x80	; 128
    1716:	22 2e       	mov	r2, r18
    1718:	83 01       	movw	r16, r6
    171a:	23 fc       	sbrc	r2, 3
    171c:	1b c0       	rjmp	.+54     	; 0x1754 <vfprintf+0x1aa>
    171e:	83 2d       	mov	r24, r3
    1720:	90 e0       	ldi	r25, 0x00	; 0
    1722:	48 16       	cp	r4, r24
    1724:	59 06       	cpc	r5, r25
    1726:	b0 f4       	brcc	.+44     	; 0x1754 <vfprintf+0x1aa>
    1728:	b7 01       	movw	r22, r14
    172a:	80 e2       	ldi	r24, 0x20	; 32
    172c:	90 e0       	ldi	r25, 0x00	; 0
    172e:	0e 94 e0 0c 	call	0x19c0	; 0x19c0 <fputc>
    1732:	3a 94       	dec	r3
    1734:	f4 cf       	rjmp	.-24     	; 0x171e <vfprintf+0x174>
    1736:	f5 01       	movw	r30, r10
    1738:	27 fc       	sbrc	r2, 7
    173a:	85 91       	lpm	r24, Z+
    173c:	27 fe       	sbrs	r2, 7
    173e:	81 91       	ld	r24, Z+
    1740:	5f 01       	movw	r10, r30
    1742:	b7 01       	movw	r22, r14
    1744:	90 e0       	ldi	r25, 0x00	; 0
    1746:	0e 94 e0 0c 	call	0x19c0	; 0x19c0 <fputc>
    174a:	31 10       	cpse	r3, r1
    174c:	3a 94       	dec	r3
    174e:	f1 e0       	ldi	r31, 0x01	; 1
    1750:	4f 1a       	sub	r4, r31
    1752:	51 08       	sbc	r5, r1
    1754:	41 14       	cp	r4, r1
    1756:	51 04       	cpc	r5, r1
    1758:	71 f7       	brne	.-36     	; 0x1736 <vfprintf+0x18c>
    175a:	e5 c0       	rjmp	.+458    	; 0x1926 <vfprintf+0x37c>
    175c:	84 36       	cpi	r24, 0x64	; 100
    175e:	11 f0       	breq	.+4      	; 0x1764 <vfprintf+0x1ba>
    1760:	89 36       	cpi	r24, 0x69	; 105
    1762:	39 f5       	brne	.+78     	; 0x17b2 <vfprintf+0x208>
    1764:	f8 01       	movw	r30, r16
    1766:	27 ff       	sbrs	r18, 7
    1768:	07 c0       	rjmp	.+14     	; 0x1778 <vfprintf+0x1ce>
    176a:	60 81       	ld	r22, Z
    176c:	71 81       	ldd	r23, Z+1	; 0x01
    176e:	82 81       	ldd	r24, Z+2	; 0x02
    1770:	93 81       	ldd	r25, Z+3	; 0x03
    1772:	0c 5f       	subi	r16, 0xFC	; 252
    1774:	1f 4f       	sbci	r17, 0xFF	; 255
    1776:	08 c0       	rjmp	.+16     	; 0x1788 <vfprintf+0x1de>
    1778:	60 81       	ld	r22, Z
    177a:	71 81       	ldd	r23, Z+1	; 0x01
    177c:	88 27       	eor	r24, r24
    177e:	77 fd       	sbrc	r23, 7
    1780:	80 95       	com	r24
    1782:	98 2f       	mov	r25, r24
    1784:	0e 5f       	subi	r16, 0xFE	; 254
    1786:	1f 4f       	sbci	r17, 0xFF	; 255
    1788:	2f 76       	andi	r18, 0x6F	; 111
    178a:	b2 2e       	mov	r11, r18
    178c:	97 ff       	sbrs	r25, 7
    178e:	09 c0       	rjmp	.+18     	; 0x17a2 <vfprintf+0x1f8>
    1790:	90 95       	com	r25
    1792:	80 95       	com	r24
    1794:	70 95       	com	r23
    1796:	61 95       	neg	r22
    1798:	7f 4f       	sbci	r23, 0xFF	; 255
    179a:	8f 4f       	sbci	r24, 0xFF	; 255
    179c:	9f 4f       	sbci	r25, 0xFF	; 255
    179e:	20 68       	ori	r18, 0x80	; 128
    17a0:	b2 2e       	mov	r11, r18
    17a2:	2a e0       	ldi	r18, 0x0A	; 10
    17a4:	30 e0       	ldi	r19, 0x00	; 0
    17a6:	a4 01       	movw	r20, r8
    17a8:	0e 94 12 0d 	call	0x1a24	; 0x1a24 <__ultoa_invert>
    17ac:	a8 2e       	mov	r10, r24
    17ae:	a8 18       	sub	r10, r8
    17b0:	44 c0       	rjmp	.+136    	; 0x183a <vfprintf+0x290>
    17b2:	85 37       	cpi	r24, 0x75	; 117
    17b4:	29 f4       	brne	.+10     	; 0x17c0 <vfprintf+0x216>
    17b6:	2f 7e       	andi	r18, 0xEF	; 239
    17b8:	b2 2e       	mov	r11, r18
    17ba:	2a e0       	ldi	r18, 0x0A	; 10
    17bc:	30 e0       	ldi	r19, 0x00	; 0
    17be:	25 c0       	rjmp	.+74     	; 0x180a <vfprintf+0x260>
    17c0:	f2 2f       	mov	r31, r18
    17c2:	f9 7f       	andi	r31, 0xF9	; 249
    17c4:	bf 2e       	mov	r11, r31
    17c6:	8f 36       	cpi	r24, 0x6F	; 111
    17c8:	c1 f0       	breq	.+48     	; 0x17fa <vfprintf+0x250>
    17ca:	18 f4       	brcc	.+6      	; 0x17d2 <vfprintf+0x228>
    17cc:	88 35       	cpi	r24, 0x58	; 88
    17ce:	79 f0       	breq	.+30     	; 0x17ee <vfprintf+0x244>
    17d0:	b4 c0       	rjmp	.+360    	; 0x193a <vfprintf+0x390>
    17d2:	80 37       	cpi	r24, 0x70	; 112
    17d4:	19 f0       	breq	.+6      	; 0x17dc <vfprintf+0x232>
    17d6:	88 37       	cpi	r24, 0x78	; 120
    17d8:	21 f0       	breq	.+8      	; 0x17e2 <vfprintf+0x238>
    17da:	af c0       	rjmp	.+350    	; 0x193a <vfprintf+0x390>
    17dc:	2f 2f       	mov	r18, r31
    17de:	20 61       	ori	r18, 0x10	; 16
    17e0:	b2 2e       	mov	r11, r18
    17e2:	b4 fe       	sbrs	r11, 4
    17e4:	0d c0       	rjmp	.+26     	; 0x1800 <vfprintf+0x256>
    17e6:	8b 2d       	mov	r24, r11
    17e8:	84 60       	ori	r24, 0x04	; 4
    17ea:	b8 2e       	mov	r11, r24
    17ec:	09 c0       	rjmp	.+18     	; 0x1800 <vfprintf+0x256>
    17ee:	24 ff       	sbrs	r18, 4
    17f0:	0a c0       	rjmp	.+20     	; 0x1806 <vfprintf+0x25c>
    17f2:	9f 2f       	mov	r25, r31
    17f4:	96 60       	ori	r25, 0x06	; 6
    17f6:	b9 2e       	mov	r11, r25
    17f8:	06 c0       	rjmp	.+12     	; 0x1806 <vfprintf+0x25c>
    17fa:	28 e0       	ldi	r18, 0x08	; 8
    17fc:	30 e0       	ldi	r19, 0x00	; 0
    17fe:	05 c0       	rjmp	.+10     	; 0x180a <vfprintf+0x260>
    1800:	20 e1       	ldi	r18, 0x10	; 16
    1802:	30 e0       	ldi	r19, 0x00	; 0
    1804:	02 c0       	rjmp	.+4      	; 0x180a <vfprintf+0x260>
    1806:	20 e1       	ldi	r18, 0x10	; 16
    1808:	32 e0       	ldi	r19, 0x02	; 2
    180a:	f8 01       	movw	r30, r16
    180c:	b7 fe       	sbrs	r11, 7
    180e:	07 c0       	rjmp	.+14     	; 0x181e <vfprintf+0x274>
    1810:	60 81       	ld	r22, Z
    1812:	71 81       	ldd	r23, Z+1	; 0x01
    1814:	82 81       	ldd	r24, Z+2	; 0x02
    1816:	93 81       	ldd	r25, Z+3	; 0x03
    1818:	0c 5f       	subi	r16, 0xFC	; 252
    181a:	1f 4f       	sbci	r17, 0xFF	; 255
    181c:	06 c0       	rjmp	.+12     	; 0x182a <vfprintf+0x280>
    181e:	60 81       	ld	r22, Z
    1820:	71 81       	ldd	r23, Z+1	; 0x01
    1822:	80 e0       	ldi	r24, 0x00	; 0
    1824:	90 e0       	ldi	r25, 0x00	; 0
    1826:	0e 5f       	subi	r16, 0xFE	; 254
    1828:	1f 4f       	sbci	r17, 0xFF	; 255
    182a:	a4 01       	movw	r20, r8
    182c:	0e 94 12 0d 	call	0x1a24	; 0x1a24 <__ultoa_invert>
    1830:	a8 2e       	mov	r10, r24
    1832:	a8 18       	sub	r10, r8
    1834:	fb 2d       	mov	r31, r11
    1836:	ff 77       	andi	r31, 0x7F	; 127
    1838:	bf 2e       	mov	r11, r31
    183a:	b6 fe       	sbrs	r11, 6
    183c:	0b c0       	rjmp	.+22     	; 0x1854 <vfprintf+0x2aa>
    183e:	2b 2d       	mov	r18, r11
    1840:	2e 7f       	andi	r18, 0xFE	; 254
    1842:	a5 14       	cp	r10, r5
    1844:	50 f4       	brcc	.+20     	; 0x185a <vfprintf+0x2b0>
    1846:	b4 fe       	sbrs	r11, 4
    1848:	0a c0       	rjmp	.+20     	; 0x185e <vfprintf+0x2b4>
    184a:	b2 fc       	sbrc	r11, 2
    184c:	08 c0       	rjmp	.+16     	; 0x185e <vfprintf+0x2b4>
    184e:	2b 2d       	mov	r18, r11
    1850:	2e 7e       	andi	r18, 0xEE	; 238
    1852:	05 c0       	rjmp	.+10     	; 0x185e <vfprintf+0x2b4>
    1854:	7a 2c       	mov	r7, r10
    1856:	2b 2d       	mov	r18, r11
    1858:	03 c0       	rjmp	.+6      	; 0x1860 <vfprintf+0x2b6>
    185a:	7a 2c       	mov	r7, r10
    185c:	01 c0       	rjmp	.+2      	; 0x1860 <vfprintf+0x2b6>
    185e:	75 2c       	mov	r7, r5
    1860:	24 ff       	sbrs	r18, 4
    1862:	0d c0       	rjmp	.+26     	; 0x187e <vfprintf+0x2d4>
    1864:	fe 01       	movw	r30, r28
    1866:	ea 0d       	add	r30, r10
    1868:	f1 1d       	adc	r31, r1
    186a:	80 81       	ld	r24, Z
    186c:	80 33       	cpi	r24, 0x30	; 48
    186e:	11 f4       	brne	.+4      	; 0x1874 <vfprintf+0x2ca>
    1870:	29 7e       	andi	r18, 0xE9	; 233
    1872:	09 c0       	rjmp	.+18     	; 0x1886 <vfprintf+0x2dc>
    1874:	22 ff       	sbrs	r18, 2
    1876:	06 c0       	rjmp	.+12     	; 0x1884 <vfprintf+0x2da>
    1878:	73 94       	inc	r7
    187a:	73 94       	inc	r7
    187c:	04 c0       	rjmp	.+8      	; 0x1886 <vfprintf+0x2dc>
    187e:	82 2f       	mov	r24, r18
    1880:	86 78       	andi	r24, 0x86	; 134
    1882:	09 f0       	breq	.+2      	; 0x1886 <vfprintf+0x2dc>
    1884:	73 94       	inc	r7
    1886:	23 fd       	sbrc	r18, 3
    1888:	13 c0       	rjmp	.+38     	; 0x18b0 <vfprintf+0x306>
    188a:	20 ff       	sbrs	r18, 0
    188c:	06 c0       	rjmp	.+12     	; 0x189a <vfprintf+0x2f0>
    188e:	5a 2c       	mov	r5, r10
    1890:	73 14       	cp	r7, r3
    1892:	18 f4       	brcc	.+6      	; 0x189a <vfprintf+0x2f0>
    1894:	53 0c       	add	r5, r3
    1896:	57 18       	sub	r5, r7
    1898:	73 2c       	mov	r7, r3
    189a:	73 14       	cp	r7, r3
    189c:	68 f4       	brcc	.+26     	; 0x18b8 <vfprintf+0x30e>
    189e:	b7 01       	movw	r22, r14
    18a0:	80 e2       	ldi	r24, 0x20	; 32
    18a2:	90 e0       	ldi	r25, 0x00	; 0
    18a4:	2c 87       	std	Y+12, r18	; 0x0c
    18a6:	0e 94 e0 0c 	call	0x19c0	; 0x19c0 <fputc>
    18aa:	73 94       	inc	r7
    18ac:	2c 85       	ldd	r18, Y+12	; 0x0c
    18ae:	f5 cf       	rjmp	.-22     	; 0x189a <vfprintf+0x2f0>
    18b0:	73 14       	cp	r7, r3
    18b2:	10 f4       	brcc	.+4      	; 0x18b8 <vfprintf+0x30e>
    18b4:	37 18       	sub	r3, r7
    18b6:	01 c0       	rjmp	.+2      	; 0x18ba <vfprintf+0x310>
    18b8:	31 2c       	mov	r3, r1
    18ba:	24 ff       	sbrs	r18, 4
    18bc:	12 c0       	rjmp	.+36     	; 0x18e2 <vfprintf+0x338>
    18be:	b7 01       	movw	r22, r14
    18c0:	80 e3       	ldi	r24, 0x30	; 48
    18c2:	90 e0       	ldi	r25, 0x00	; 0
    18c4:	2c 87       	std	Y+12, r18	; 0x0c
    18c6:	0e 94 e0 0c 	call	0x19c0	; 0x19c0 <fputc>
    18ca:	2c 85       	ldd	r18, Y+12	; 0x0c
    18cc:	22 ff       	sbrs	r18, 2
    18ce:	17 c0       	rjmp	.+46     	; 0x18fe <vfprintf+0x354>
    18d0:	21 ff       	sbrs	r18, 1
    18d2:	03 c0       	rjmp	.+6      	; 0x18da <vfprintf+0x330>
    18d4:	88 e5       	ldi	r24, 0x58	; 88
    18d6:	90 e0       	ldi	r25, 0x00	; 0
    18d8:	02 c0       	rjmp	.+4      	; 0x18de <vfprintf+0x334>
    18da:	88 e7       	ldi	r24, 0x78	; 120
    18dc:	90 e0       	ldi	r25, 0x00	; 0
    18de:	b7 01       	movw	r22, r14
    18e0:	0c c0       	rjmp	.+24     	; 0x18fa <vfprintf+0x350>
    18e2:	82 2f       	mov	r24, r18
    18e4:	86 78       	andi	r24, 0x86	; 134
    18e6:	59 f0       	breq	.+22     	; 0x18fe <vfprintf+0x354>
    18e8:	21 fd       	sbrc	r18, 1
    18ea:	02 c0       	rjmp	.+4      	; 0x18f0 <vfprintf+0x346>
    18ec:	80 e2       	ldi	r24, 0x20	; 32
    18ee:	01 c0       	rjmp	.+2      	; 0x18f2 <vfprintf+0x348>
    18f0:	8b e2       	ldi	r24, 0x2B	; 43
    18f2:	27 fd       	sbrc	r18, 7
    18f4:	8d e2       	ldi	r24, 0x2D	; 45
    18f6:	b7 01       	movw	r22, r14
    18f8:	90 e0       	ldi	r25, 0x00	; 0
    18fa:	0e 94 e0 0c 	call	0x19c0	; 0x19c0 <fputc>
    18fe:	a5 14       	cp	r10, r5
    1900:	38 f4       	brcc	.+14     	; 0x1910 <vfprintf+0x366>
    1902:	b7 01       	movw	r22, r14
    1904:	80 e3       	ldi	r24, 0x30	; 48
    1906:	90 e0       	ldi	r25, 0x00	; 0
    1908:	0e 94 e0 0c 	call	0x19c0	; 0x19c0 <fputc>
    190c:	5a 94       	dec	r5
    190e:	f7 cf       	rjmp	.-18     	; 0x18fe <vfprintf+0x354>
    1910:	aa 94       	dec	r10
    1912:	f4 01       	movw	r30, r8
    1914:	ea 0d       	add	r30, r10
    1916:	f1 1d       	adc	r31, r1
    1918:	80 81       	ld	r24, Z
    191a:	b7 01       	movw	r22, r14
    191c:	90 e0       	ldi	r25, 0x00	; 0
    191e:	0e 94 e0 0c 	call	0x19c0	; 0x19c0 <fputc>
    1922:	a1 10       	cpse	r10, r1
    1924:	f5 cf       	rjmp	.-22     	; 0x1910 <vfprintf+0x366>
    1926:	33 20       	and	r3, r3
    1928:	09 f4       	brne	.+2      	; 0x192c <vfprintf+0x382>
    192a:	51 ce       	rjmp	.-862    	; 0x15ce <vfprintf+0x24>
    192c:	b7 01       	movw	r22, r14
    192e:	80 e2       	ldi	r24, 0x20	; 32
    1930:	90 e0       	ldi	r25, 0x00	; 0
    1932:	0e 94 e0 0c 	call	0x19c0	; 0x19c0 <fputc>
    1936:	3a 94       	dec	r3
    1938:	f6 cf       	rjmp	.-20     	; 0x1926 <vfprintf+0x37c>
    193a:	f7 01       	movw	r30, r14
    193c:	86 81       	ldd	r24, Z+6	; 0x06
    193e:	97 81       	ldd	r25, Z+7	; 0x07
    1940:	02 c0       	rjmp	.+4      	; 0x1946 <vfprintf+0x39c>
    1942:	8f ef       	ldi	r24, 0xFF	; 255
    1944:	9f ef       	ldi	r25, 0xFF	; 255
    1946:	2c 96       	adiw	r28, 0x0c	; 12
    1948:	e2 e1       	ldi	r30, 0x12	; 18
    194a:	0c 94 94 0d 	jmp	0x1b28	; 0x1b28 <__epilogue_restores__>

0000194e <calloc>:
    194e:	0f 93       	push	r16
    1950:	1f 93       	push	r17
    1952:	cf 93       	push	r28
    1954:	df 93       	push	r29
    1956:	86 9f       	mul	r24, r22
    1958:	80 01       	movw	r16, r0
    195a:	87 9f       	mul	r24, r23
    195c:	10 0d       	add	r17, r0
    195e:	96 9f       	mul	r25, r22
    1960:	10 0d       	add	r17, r0
    1962:	11 24       	eor	r1, r1
    1964:	c8 01       	movw	r24, r16
    1966:	0e 94 c4 08 	call	0x1188	; 0x1188 <malloc>
    196a:	ec 01       	movw	r28, r24
    196c:	00 97       	sbiw	r24, 0x00	; 0
    196e:	29 f0       	breq	.+10     	; 0x197a <calloc+0x2c>
    1970:	a8 01       	movw	r20, r16
    1972:	60 e0       	ldi	r22, 0x00	; 0
    1974:	70 e0       	ldi	r23, 0x00	; 0
    1976:	0e 94 ce 0c 	call	0x199c	; 0x199c <memset>
    197a:	ce 01       	movw	r24, r28
    197c:	df 91       	pop	r29
    197e:	cf 91       	pop	r28
    1980:	1f 91       	pop	r17
    1982:	0f 91       	pop	r16
    1984:	08 95       	ret

00001986 <strnlen_P>:
    1986:	fc 01       	movw	r30, r24
    1988:	05 90       	lpm	r0, Z+
    198a:	61 50       	subi	r22, 0x01	; 1
    198c:	70 40       	sbci	r23, 0x00	; 0
    198e:	01 10       	cpse	r0, r1
    1990:	d8 f7       	brcc	.-10     	; 0x1988 <strnlen_P+0x2>
    1992:	80 95       	com	r24
    1994:	90 95       	com	r25
    1996:	8e 0f       	add	r24, r30
    1998:	9f 1f       	adc	r25, r31
    199a:	08 95       	ret

0000199c <memset>:
    199c:	dc 01       	movw	r26, r24
    199e:	01 c0       	rjmp	.+2      	; 0x19a2 <memset+0x6>
    19a0:	6d 93       	st	X+, r22
    19a2:	41 50       	subi	r20, 0x01	; 1
    19a4:	50 40       	sbci	r21, 0x00	; 0
    19a6:	e0 f7       	brcc	.-8      	; 0x19a0 <memset+0x4>
    19a8:	08 95       	ret

000019aa <strnlen>:
    19aa:	fc 01       	movw	r30, r24
    19ac:	61 50       	subi	r22, 0x01	; 1
    19ae:	70 40       	sbci	r23, 0x00	; 0
    19b0:	01 90       	ld	r0, Z+
    19b2:	01 10       	cpse	r0, r1
    19b4:	d8 f7       	brcc	.-10     	; 0x19ac <strnlen+0x2>
    19b6:	80 95       	com	r24
    19b8:	90 95       	com	r25
    19ba:	8e 0f       	add	r24, r30
    19bc:	9f 1f       	adc	r25, r31
    19be:	08 95       	ret

000019c0 <fputc>:
    19c0:	0f 93       	push	r16
    19c2:	1f 93       	push	r17
    19c4:	cf 93       	push	r28
    19c6:	df 93       	push	r29
    19c8:	18 2f       	mov	r17, r24
    19ca:	09 2f       	mov	r16, r25
    19cc:	eb 01       	movw	r28, r22
    19ce:	8b 81       	ldd	r24, Y+3	; 0x03
    19d0:	81 fd       	sbrc	r24, 1
    19d2:	03 c0       	rjmp	.+6      	; 0x19da <fputc+0x1a>
    19d4:	8f ef       	ldi	r24, 0xFF	; 255
    19d6:	9f ef       	ldi	r25, 0xFF	; 255
    19d8:	20 c0       	rjmp	.+64     	; 0x1a1a <fputc+0x5a>
    19da:	82 ff       	sbrs	r24, 2
    19dc:	10 c0       	rjmp	.+32     	; 0x19fe <fputc+0x3e>
    19de:	4e 81       	ldd	r20, Y+6	; 0x06
    19e0:	5f 81       	ldd	r21, Y+7	; 0x07
    19e2:	2c 81       	ldd	r18, Y+4	; 0x04
    19e4:	3d 81       	ldd	r19, Y+5	; 0x05
    19e6:	42 17       	cp	r20, r18
    19e8:	53 07       	cpc	r21, r19
    19ea:	7c f4       	brge	.+30     	; 0x1a0a <fputc+0x4a>
    19ec:	e8 81       	ld	r30, Y
    19ee:	f9 81       	ldd	r31, Y+1	; 0x01
    19f0:	9f 01       	movw	r18, r30
    19f2:	2f 5f       	subi	r18, 0xFF	; 255
    19f4:	3f 4f       	sbci	r19, 0xFF	; 255
    19f6:	39 83       	std	Y+1, r19	; 0x01
    19f8:	28 83       	st	Y, r18
    19fa:	10 83       	st	Z, r17
    19fc:	06 c0       	rjmp	.+12     	; 0x1a0a <fputc+0x4a>
    19fe:	e8 85       	ldd	r30, Y+8	; 0x08
    1a00:	f9 85       	ldd	r31, Y+9	; 0x09
    1a02:	81 2f       	mov	r24, r17
    1a04:	09 95       	icall
    1a06:	89 2b       	or	r24, r25
    1a08:	29 f7       	brne	.-54     	; 0x19d4 <fputc+0x14>
    1a0a:	2e 81       	ldd	r18, Y+6	; 0x06
    1a0c:	3f 81       	ldd	r19, Y+7	; 0x07
    1a0e:	2f 5f       	subi	r18, 0xFF	; 255
    1a10:	3f 4f       	sbci	r19, 0xFF	; 255
    1a12:	3f 83       	std	Y+7, r19	; 0x07
    1a14:	2e 83       	std	Y+6, r18	; 0x06
    1a16:	81 2f       	mov	r24, r17
    1a18:	90 2f       	mov	r25, r16
    1a1a:	df 91       	pop	r29
    1a1c:	cf 91       	pop	r28
    1a1e:	1f 91       	pop	r17
    1a20:	0f 91       	pop	r16
    1a22:	08 95       	ret

00001a24 <__ultoa_invert>:
    1a24:	fa 01       	movw	r30, r20
    1a26:	aa 27       	eor	r26, r26
    1a28:	28 30       	cpi	r18, 0x08	; 8
    1a2a:	51 f1       	breq	.+84     	; 0x1a80 <__ultoa_invert+0x5c>
    1a2c:	20 31       	cpi	r18, 0x10	; 16
    1a2e:	81 f1       	breq	.+96     	; 0x1a90 <__ultoa_invert+0x6c>
    1a30:	e8 94       	clt
    1a32:	6f 93       	push	r22
    1a34:	6e 7f       	andi	r22, 0xFE	; 254
    1a36:	6e 5f       	subi	r22, 0xFE	; 254
    1a38:	7f 4f       	sbci	r23, 0xFF	; 255
    1a3a:	8f 4f       	sbci	r24, 0xFF	; 255
    1a3c:	9f 4f       	sbci	r25, 0xFF	; 255
    1a3e:	af 4f       	sbci	r26, 0xFF	; 255
    1a40:	b1 e0       	ldi	r27, 0x01	; 1
    1a42:	3e d0       	rcall	.+124    	; 0x1ac0 <__ultoa_invert+0x9c>
    1a44:	b4 e0       	ldi	r27, 0x04	; 4
    1a46:	3c d0       	rcall	.+120    	; 0x1ac0 <__ultoa_invert+0x9c>
    1a48:	67 0f       	add	r22, r23
    1a4a:	78 1f       	adc	r23, r24
    1a4c:	89 1f       	adc	r24, r25
    1a4e:	9a 1f       	adc	r25, r26
    1a50:	a1 1d       	adc	r26, r1
    1a52:	68 0f       	add	r22, r24
    1a54:	79 1f       	adc	r23, r25
    1a56:	8a 1f       	adc	r24, r26
    1a58:	91 1d       	adc	r25, r1
    1a5a:	a1 1d       	adc	r26, r1
    1a5c:	6a 0f       	add	r22, r26
    1a5e:	71 1d       	adc	r23, r1
    1a60:	81 1d       	adc	r24, r1
    1a62:	91 1d       	adc	r25, r1
    1a64:	a1 1d       	adc	r26, r1
    1a66:	20 d0       	rcall	.+64     	; 0x1aa8 <__ultoa_invert+0x84>
    1a68:	09 f4       	brne	.+2      	; 0x1a6c <__ultoa_invert+0x48>
    1a6a:	68 94       	set
    1a6c:	3f 91       	pop	r19
    1a6e:	2a e0       	ldi	r18, 0x0A	; 10
    1a70:	26 9f       	mul	r18, r22
    1a72:	11 24       	eor	r1, r1
    1a74:	30 19       	sub	r19, r0
    1a76:	30 5d       	subi	r19, 0xD0	; 208
    1a78:	31 93       	st	Z+, r19
    1a7a:	de f6       	brtc	.-74     	; 0x1a32 <__ultoa_invert+0xe>
    1a7c:	cf 01       	movw	r24, r30
    1a7e:	08 95       	ret
    1a80:	46 2f       	mov	r20, r22
    1a82:	47 70       	andi	r20, 0x07	; 7
    1a84:	40 5d       	subi	r20, 0xD0	; 208
    1a86:	41 93       	st	Z+, r20
    1a88:	b3 e0       	ldi	r27, 0x03	; 3
    1a8a:	0f d0       	rcall	.+30     	; 0x1aaa <__ultoa_invert+0x86>
    1a8c:	c9 f7       	brne	.-14     	; 0x1a80 <__ultoa_invert+0x5c>
    1a8e:	f6 cf       	rjmp	.-20     	; 0x1a7c <__ultoa_invert+0x58>
    1a90:	46 2f       	mov	r20, r22
    1a92:	4f 70       	andi	r20, 0x0F	; 15
    1a94:	40 5d       	subi	r20, 0xD0	; 208
    1a96:	4a 33       	cpi	r20, 0x3A	; 58
    1a98:	18 f0       	brcs	.+6      	; 0x1aa0 <__ultoa_invert+0x7c>
    1a9a:	49 5d       	subi	r20, 0xD9	; 217
    1a9c:	31 fd       	sbrc	r19, 1
    1a9e:	40 52       	subi	r20, 0x20	; 32
    1aa0:	41 93       	st	Z+, r20
    1aa2:	02 d0       	rcall	.+4      	; 0x1aa8 <__ultoa_invert+0x84>
    1aa4:	a9 f7       	brne	.-22     	; 0x1a90 <__ultoa_invert+0x6c>
    1aa6:	ea cf       	rjmp	.-44     	; 0x1a7c <__ultoa_invert+0x58>
    1aa8:	b4 e0       	ldi	r27, 0x04	; 4
    1aaa:	a6 95       	lsr	r26
    1aac:	97 95       	ror	r25
    1aae:	87 95       	ror	r24
    1ab0:	77 95       	ror	r23
    1ab2:	67 95       	ror	r22
    1ab4:	ba 95       	dec	r27
    1ab6:	c9 f7       	brne	.-14     	; 0x1aaa <__ultoa_invert+0x86>
    1ab8:	00 97       	sbiw	r24, 0x00	; 0
    1aba:	61 05       	cpc	r22, r1
    1abc:	71 05       	cpc	r23, r1
    1abe:	08 95       	ret
    1ac0:	9b 01       	movw	r18, r22
    1ac2:	ac 01       	movw	r20, r24
    1ac4:	0a 2e       	mov	r0, r26
    1ac6:	06 94       	lsr	r0
    1ac8:	57 95       	ror	r21
    1aca:	47 95       	ror	r20
    1acc:	37 95       	ror	r19
    1ace:	27 95       	ror	r18
    1ad0:	ba 95       	dec	r27
    1ad2:	c9 f7       	brne	.-14     	; 0x1ac6 <__ultoa_invert+0xa2>
    1ad4:	62 0f       	add	r22, r18
    1ad6:	73 1f       	adc	r23, r19
    1ad8:	84 1f       	adc	r24, r20
    1ada:	95 1f       	adc	r25, r21
    1adc:	a0 1d       	adc	r26, r0
    1ade:	08 95       	ret

00001ae0 <__mulshisi3>:
    1ae0:	b7 ff       	sbrs	r27, 7
    1ae2:	0c 94 74 08 	jmp	0x10e8	; 0x10e8 <__muluhisi3>

00001ae6 <__mulohisi3>:
    1ae6:	0e 94 74 08 	call	0x10e8	; 0x10e8 <__muluhisi3>
    1aea:	82 1b       	sub	r24, r18
    1aec:	93 0b       	sbc	r25, r19
    1aee:	08 95       	ret

00001af0 <__prologue_saves__>:
    1af0:	2f 92       	push	r2
    1af2:	3f 92       	push	r3
    1af4:	4f 92       	push	r4
    1af6:	5f 92       	push	r5
    1af8:	6f 92       	push	r6
    1afa:	7f 92       	push	r7
    1afc:	8f 92       	push	r8
    1afe:	9f 92       	push	r9
    1b00:	af 92       	push	r10
    1b02:	bf 92       	push	r11
    1b04:	cf 92       	push	r12
    1b06:	df 92       	push	r13
    1b08:	ef 92       	push	r14
    1b0a:	ff 92       	push	r15
    1b0c:	0f 93       	push	r16
    1b0e:	1f 93       	push	r17
    1b10:	cf 93       	push	r28
    1b12:	df 93       	push	r29
    1b14:	cd b7       	in	r28, 0x3d	; 61
    1b16:	de b7       	in	r29, 0x3e	; 62
    1b18:	ca 1b       	sub	r28, r26
    1b1a:	db 0b       	sbc	r29, r27
    1b1c:	0f b6       	in	r0, 0x3f	; 63
    1b1e:	f8 94       	cli
    1b20:	de bf       	out	0x3e, r29	; 62
    1b22:	0f be       	out	0x3f, r0	; 63
    1b24:	cd bf       	out	0x3d, r28	; 61
    1b26:	09 94       	ijmp

00001b28 <__epilogue_restores__>:
    1b28:	2a 88       	ldd	r2, Y+18	; 0x12
    1b2a:	39 88       	ldd	r3, Y+17	; 0x11
    1b2c:	48 88       	ldd	r4, Y+16	; 0x10
    1b2e:	5f 84       	ldd	r5, Y+15	; 0x0f
    1b30:	6e 84       	ldd	r6, Y+14	; 0x0e
    1b32:	7d 84       	ldd	r7, Y+13	; 0x0d
    1b34:	8c 84       	ldd	r8, Y+12	; 0x0c
    1b36:	9b 84       	ldd	r9, Y+11	; 0x0b
    1b38:	aa 84       	ldd	r10, Y+10	; 0x0a
    1b3a:	b9 84       	ldd	r11, Y+9	; 0x09
    1b3c:	c8 84       	ldd	r12, Y+8	; 0x08
    1b3e:	df 80       	ldd	r13, Y+7	; 0x07
    1b40:	ee 80       	ldd	r14, Y+6	; 0x06
    1b42:	fd 80       	ldd	r15, Y+5	; 0x05
    1b44:	0c 81       	ldd	r16, Y+4	; 0x04
    1b46:	1b 81       	ldd	r17, Y+3	; 0x03
    1b48:	aa 81       	ldd	r26, Y+2	; 0x02
    1b4a:	b9 81       	ldd	r27, Y+1	; 0x01
    1b4c:	ce 0f       	add	r28, r30
    1b4e:	d1 1d       	adc	r29, r1
    1b50:	0f b6       	in	r0, 0x3f	; 63
    1b52:	f8 94       	cli
    1b54:	de bf       	out	0x3e, r29	; 62
    1b56:	0f be       	out	0x3f, r0	; 63
    1b58:	cd bf       	out	0x3d, r28	; 61
    1b5a:	ed 01       	movw	r28, r26
    1b5c:	08 95       	ret

00001b5e <_exit>:
    1b5e:	f8 94       	cli

00001b60 <__stop_program>:
    1b60:	ff cf       	rjmp	.-2      	; 0x1b60 <__stop_program>
