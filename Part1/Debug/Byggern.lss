
Byggern.elf:     file format elf32-avr

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .data         000002a2  00800100  0000246e  00002502  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  1 .text         0000246e  00000000  00000000  00000094  2**1
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .bss          0000004f  008003a2  008003a2  000027a4  2**0
                  ALLOC
  3 .comment      0000005c  00000000  00000000  000027a4  2**0
                  CONTENTS, READONLY
  4 .debug_aranges 000003a8  00000000  00000000  00002800  2**0
                  CONTENTS, READONLY, DEBUGGING
  5 .debug_info   00003e40  00000000  00000000  00002ba8  2**0
                  CONTENTS, READONLY, DEBUGGING
  6 .debug_abbrev 000017b6  00000000  00000000  000069e8  2**0
                  CONTENTS, READONLY, DEBUGGING
  7 .debug_line   00001620  00000000  00000000  0000819e  2**0
                  CONTENTS, READONLY, DEBUGGING
  8 .debug_frame  00000a80  00000000  00000000  000097c0  2**2
                  CONTENTS, READONLY, DEBUGGING
  9 .debug_str    00000bb4  00000000  00000000  0000a240  2**0
                  CONTENTS, READONLY, DEBUGGING
 10 .debug_loc    00002997  00000000  00000000  0000adf4  2**0
                  CONTENTS, READONLY, DEBUGGING
 11 .debug_ranges 00000328  00000000  00000000  0000d78b  2**0
                  CONTENTS, READONLY, DEBUGGING

Disassembly of section .text:

00000000 <__vectors>:
       0:	0c 94 b4 01 	jmp	0x368	; 0x368 <__ctors_end>
       4:	0c 94 d0 02 	jmp	0x5a0	; 0x5a0 <__vector_1>
       8:	0c 94 d3 01 	jmp	0x3a6	; 0x3a6 <__vector_2>
       c:	0c 94 d1 01 	jmp	0x3a2	; 0x3a2 <__bad_interrupt>
      10:	0c 94 d1 01 	jmp	0x3a2	; 0x3a2 <__bad_interrupt>
      14:	0c 94 d1 01 	jmp	0x3a2	; 0x3a2 <__bad_interrupt>
      18:	0c 94 d1 01 	jmp	0x3a2	; 0x3a2 <__bad_interrupt>
      1c:	0c 94 d1 01 	jmp	0x3a2	; 0x3a2 <__bad_interrupt>
      20:	0c 94 d1 01 	jmp	0x3a2	; 0x3a2 <__bad_interrupt>
      24:	0c 94 d1 01 	jmp	0x3a2	; 0x3a2 <__bad_interrupt>
      28:	0c 94 d1 01 	jmp	0x3a2	; 0x3a2 <__bad_interrupt>
      2c:	0c 94 d1 01 	jmp	0x3a2	; 0x3a2 <__bad_interrupt>
      30:	0c 94 d1 01 	jmp	0x3a2	; 0x3a2 <__bad_interrupt>
      34:	0c 94 d1 01 	jmp	0x3a2	; 0x3a2 <__bad_interrupt>
      38:	0c 94 d1 01 	jmp	0x3a2	; 0x3a2 <__bad_interrupt>
      3c:	0c 94 d1 01 	jmp	0x3a2	; 0x3a2 <__bad_interrupt>
      40:	0c 94 d1 01 	jmp	0x3a2	; 0x3a2 <__bad_interrupt>
      44:	0c 94 d1 01 	jmp	0x3a2	; 0x3a2 <__bad_interrupt>
      48:	0c 94 d1 01 	jmp	0x3a2	; 0x3a2 <__bad_interrupt>
      4c:	0c 94 d1 01 	jmp	0x3a2	; 0x3a2 <__bad_interrupt>
      50:	0c 94 d1 01 	jmp	0x3a2	; 0x3a2 <__bad_interrupt>
      54:	0c 94 d1 01 	jmp	0x3a2	; 0x3a2 <__bad_interrupt>
      58:	0c 94 d1 01 	jmp	0x3a2	; 0x3a2 <__bad_interrupt>
      5c:	0c 94 d1 01 	jmp	0x3a2	; 0x3a2 <__bad_interrupt>
      60:	0c 94 d1 01 	jmp	0x3a2	; 0x3a2 <__bad_interrupt>
      64:	0c 94 d1 01 	jmp	0x3a2	; 0x3a2 <__bad_interrupt>
      68:	0c 94 d1 01 	jmp	0x3a2	; 0x3a2 <__bad_interrupt>
      6c:	0c 94 d1 01 	jmp	0x3a2	; 0x3a2 <__bad_interrupt>

00000070 <__trampolines_end>:
	...
      78:	00 06       	cpc	r0, r16
      7a:	5f 5f       	subi	r21, 0xFF	; 255
      7c:	06 00       	.word	0x0006	; ????
      7e:	00 00       	nop
      80:	00 07       	cpc	r16, r16
      82:	07 00       	.word	0x0007	; ????
      84:	07 07       	cpc	r16, r23
      86:	00 00       	nop
      88:	14 7f       	andi	r17, 0xF4	; 244
      8a:	7f 14       	cp	r7, r15
      8c:	7f 7f       	andi	r23, 0xFF	; 255
      8e:	14 00       	.word	0x0014	; ????
      90:	24 2e       	mov	r2, r20
      92:	6b 6b       	ori	r22, 0xBB	; 187
      94:	3a 12       	cpse	r3, r26
      96:	00 00       	nop
      98:	46 66       	ori	r20, 0x66	; 102
      9a:	30 18       	sub	r3, r0
      9c:	0c 66       	ori	r16, 0x6C	; 108
      9e:	62 00       	.word	0x0062	; ????
      a0:	30 7a       	andi	r19, 0xA0	; 160
      a2:	4f 5d       	subi	r20, 0xDF	; 223
      a4:	37 7a       	andi	r19, 0xA7	; 167
      a6:	48 00       	.word	0x0048	; ????
      a8:	04 07       	cpc	r16, r20
      aa:	03 00       	.word	0x0003	; ????
      ac:	00 00       	nop
      ae:	00 00       	nop
      b0:	00 1c       	adc	r0, r0
      b2:	3e 63       	ori	r19, 0x3E	; 62
      b4:	41 00       	.word	0x0041	; ????
      b6:	00 00       	nop
      b8:	00 41       	sbci	r16, 0x10	; 16
      ba:	63 3e       	cpi	r22, 0xE3	; 227
      bc:	1c 00       	.word	0x001c	; ????
      be:	00 00       	nop
      c0:	08 2a       	or	r0, r24
      c2:	3e 1c       	adc	r3, r14
      c4:	1c 3e       	cpi	r17, 0xEC	; 236
      c6:	2a 08       	sbc	r2, r10
      c8:	08 08       	sbc	r0, r8
      ca:	3e 3e       	cpi	r19, 0xEE	; 238
      cc:	08 08       	sbc	r0, r8
      ce:	00 00       	nop
      d0:	00 a0       	ldd	r0, Z+32	; 0x20
      d2:	e0 60       	ori	r30, 0x00	; 0
      d4:	00 00       	nop
      d6:	00 00       	nop
      d8:	08 08       	sbc	r0, r8
      da:	08 08       	sbc	r0, r8
      dc:	08 08       	sbc	r0, r8
      de:	00 00       	nop
      e0:	00 00       	nop
      e2:	60 60       	ori	r22, 0x00	; 0
      e4:	00 00       	nop
      e6:	00 00       	nop
      e8:	60 30       	cpi	r22, 0x00	; 0
      ea:	18 0c       	add	r1, r8
      ec:	06 03       	mulsu	r16, r22
      ee:	01 00       	.word	0x0001	; ????
      f0:	3e 7f       	andi	r19, 0xFE	; 254
      f2:	59 4d       	sbci	r21, 0xD9	; 217
      f4:	7f 3e       	cpi	r23, 0xEF	; 239
      f6:	00 00       	nop
      f8:	42 42       	sbci	r20, 0x22	; 34
      fa:	7f 7f       	andi	r23, 0xFF	; 255
      fc:	40 40       	sbci	r20, 0x00	; 0
      fe:	00 00       	nop
     100:	62 73       	andi	r22, 0x32	; 50
     102:	59 49       	sbci	r21, 0x99	; 153
     104:	6f 66       	ori	r22, 0x6F	; 111
     106:	00 00       	nop
     108:	22 63       	ori	r18, 0x32	; 50
     10a:	49 49       	sbci	r20, 0x99	; 153
     10c:	7f 36       	cpi	r23, 0x6F	; 111
     10e:	00 00       	nop
     110:	18 1c       	adc	r1, r8
     112:	16 13       	cpse	r17, r22
     114:	7f 7f       	andi	r23, 0xFF	; 255
     116:	10 00       	.word	0x0010	; ????
     118:	27 67       	ori	r18, 0x77	; 119
     11a:	45 45       	sbci	r20, 0x55	; 85
     11c:	7d 39       	cpi	r23, 0x9D	; 157
     11e:	00 00       	nop
     120:	3c 7e       	andi	r19, 0xEC	; 236
     122:	4b 49       	sbci	r20, 0x9B	; 155
     124:	79 30       	cpi	r23, 0x09	; 9
     126:	00 00       	nop
     128:	03 63       	ori	r16, 0x33	; 51
     12a:	71 19       	sub	r23, r1
     12c:	0f 07       	cpc	r16, r31
     12e:	00 00       	nop
     130:	36 7f       	andi	r19, 0xF6	; 246
     132:	49 49       	sbci	r20, 0x99	; 153
     134:	7f 36       	cpi	r23, 0x6F	; 111
     136:	00 00       	nop
     138:	06 4f       	sbci	r16, 0xF6	; 246
     13a:	49 69       	ori	r20, 0x99	; 153
     13c:	3f 1e       	adc	r3, r31
     13e:	00 00       	nop
     140:	00 00       	nop
     142:	6c 6c       	ori	r22, 0xCC	; 204
     144:	00 00       	nop
     146:	00 00       	nop
     148:	00 a0       	ldd	r0, Z+32	; 0x20
     14a:	ec 6c       	ori	r30, 0xCC	; 204
     14c:	00 00       	nop
     14e:	00 00       	nop
     150:	08 1c       	adc	r0, r8
     152:	36 63       	ori	r19, 0x36	; 54
     154:	41 00       	.word	0x0041	; ????
     156:	00 00       	nop
     158:	14 14       	cp	r1, r4
     15a:	14 14       	cp	r1, r4
     15c:	14 14       	cp	r1, r4
     15e:	00 00       	nop
     160:	00 41       	sbci	r16, 0x10	; 16
     162:	63 36       	cpi	r22, 0x63	; 99
     164:	1c 08       	sbc	r1, r12
     166:	00 00       	nop
     168:	02 03       	mulsu	r16, r18
     16a:	51 59       	subi	r21, 0x91	; 145
     16c:	0f 06       	cpc	r0, r31
     16e:	00 00       	nop
     170:	3e 7f       	andi	r19, 0xFE	; 254
     172:	41 5d       	subi	r20, 0xD1	; 209
     174:	5d 1f       	adc	r21, r29
     176:	1e 00       	.word	0x001e	; ????
     178:	7c 7e       	andi	r23, 0xEC	; 236
     17a:	13 13       	cpse	r17, r19
     17c:	7e 7c       	andi	r23, 0xCE	; 206
     17e:	00 00       	nop
     180:	41 7f       	andi	r20, 0xF1	; 241
     182:	7f 49       	sbci	r23, 0x9F	; 159
     184:	49 7f       	andi	r20, 0xF9	; 249
     186:	36 00       	.word	0x0036	; ????
     188:	1c 3e       	cpi	r17, 0xEC	; 236
     18a:	63 41       	sbci	r22, 0x13	; 19
     18c:	41 63       	ori	r20, 0x31	; 49
     18e:	22 00       	.word	0x0022	; ????
     190:	41 7f       	andi	r20, 0xF1	; 241
     192:	7f 41       	sbci	r23, 0x1F	; 31
     194:	63 7f       	andi	r22, 0xF3	; 243
     196:	1c 00       	.word	0x001c	; ????
     198:	41 7f       	andi	r20, 0xF1	; 241
     19a:	7f 49       	sbci	r23, 0x9F	; 159
     19c:	5d 41       	sbci	r21, 0x1D	; 29
     19e:	63 00       	.word	0x0063	; ????
     1a0:	41 7f       	andi	r20, 0xF1	; 241
     1a2:	7f 49       	sbci	r23, 0x9F	; 159
     1a4:	1d 01       	movw	r2, r26
     1a6:	03 00       	.word	0x0003	; ????
     1a8:	1c 3e       	cpi	r17, 0xEC	; 236
     1aa:	63 41       	sbci	r22, 0x13	; 19
     1ac:	51 73       	andi	r21, 0x31	; 49
     1ae:	72 00       	.word	0x0072	; ????
     1b0:	7f 7f       	andi	r23, 0xFF	; 255
     1b2:	08 08       	sbc	r0, r8
     1b4:	7f 7f       	andi	r23, 0xFF	; 255
     1b6:	00 00       	nop
     1b8:	00 41       	sbci	r16, 0x10	; 16
     1ba:	7f 7f       	andi	r23, 0xFF	; 255
     1bc:	41 00       	.word	0x0041	; ????
     1be:	00 00       	nop
     1c0:	30 70       	andi	r19, 0x00	; 0
     1c2:	40 41       	sbci	r20, 0x10	; 16
     1c4:	7f 3f       	cpi	r23, 0xFF	; 255
     1c6:	01 00       	.word	0x0001	; ????
     1c8:	41 7f       	andi	r20, 0xF1	; 241
     1ca:	7f 08       	sbc	r7, r15
     1cc:	1c 77       	andi	r17, 0x7C	; 124
     1ce:	63 00       	.word	0x0063	; ????
     1d0:	41 7f       	andi	r20, 0xF1	; 241
     1d2:	7f 41       	sbci	r23, 0x1F	; 31
     1d4:	40 60       	ori	r20, 0x00	; 0
     1d6:	70 00       	.word	0x0070	; ????
     1d8:	7f 7f       	andi	r23, 0xFF	; 255
     1da:	06 0c       	add	r0, r6
     1dc:	06 7f       	andi	r16, 0xF6	; 246
     1de:	7f 00       	.word	0x007f	; ????
     1e0:	7f 7f       	andi	r23, 0xFF	; 255
     1e2:	06 0c       	add	r0, r6
     1e4:	18 7f       	andi	r17, 0xF8	; 248
     1e6:	7f 00       	.word	0x007f	; ????
     1e8:	1c 3e       	cpi	r17, 0xEC	; 236
     1ea:	63 41       	sbci	r22, 0x13	; 19
     1ec:	63 3e       	cpi	r22, 0xE3	; 227
     1ee:	1c 00       	.word	0x001c	; ????
     1f0:	41 7f       	andi	r20, 0xF1	; 241
     1f2:	7f 49       	sbci	r23, 0x9F	; 159
     1f4:	09 0f       	add	r16, r25
     1f6:	06 00       	.word	0x0006	; ????
     1f8:	1e 3f       	cpi	r17, 0xFE	; 254
     1fa:	21 71       	andi	r18, 0x11	; 17
     1fc:	7f 5e       	subi	r23, 0xEF	; 239
     1fe:	00 00       	nop
     200:	41 7f       	andi	r20, 0xF1	; 241
     202:	7f 19       	sub	r23, r15
     204:	39 6f       	ori	r19, 0xF9	; 249
     206:	46 00       	.word	0x0046	; ????
     208:	26 67       	ori	r18, 0x76	; 118
     20a:	4d 59       	subi	r20, 0x9D	; 157
     20c:	7b 32       	cpi	r23, 0x2B	; 43
     20e:	00 00       	nop
     210:	03 41       	sbci	r16, 0x13	; 19
     212:	7f 7f       	andi	r23, 0xFF	; 255
     214:	41 03       	mulsu	r20, r17
     216:	00 00       	nop
     218:	7f 7f       	andi	r23, 0xFF	; 255
     21a:	40 40       	sbci	r20, 0x00	; 0
     21c:	7f 7f       	andi	r23, 0xFF	; 255
     21e:	00 00       	nop
     220:	1f 3f       	cpi	r17, 0xFF	; 255
     222:	60 60       	ori	r22, 0x00	; 0
     224:	3f 1f       	adc	r19, r31
     226:	00 00       	nop
     228:	7f 7f       	andi	r23, 0xFF	; 255
     22a:	30 18       	sub	r3, r0
     22c:	30 7f       	andi	r19, 0xF0	; 240
     22e:	7f 00       	.word	0x007f	; ????
     230:	63 77       	andi	r22, 0x73	; 115
     232:	1c 08       	sbc	r1, r12
     234:	1c 77       	andi	r17, 0x7C	; 124
     236:	63 00       	.word	0x0063	; ????
     238:	07 4f       	sbci	r16, 0xF7	; 247
     23a:	78 78       	andi	r23, 0x88	; 136
     23c:	4f 07       	cpc	r20, r31
     23e:	00 00       	nop
     240:	67 73       	andi	r22, 0x37	; 55
     242:	59 4d       	sbci	r21, 0xD9	; 217
     244:	47 63       	ori	r20, 0x37	; 55
     246:	71 00       	.word	0x0071	; ????
     248:	00 7f       	andi	r16, 0xF0	; 240
     24a:	7f 41       	sbci	r23, 0x1F	; 31
     24c:	41 00       	.word	0x0041	; ????
     24e:	00 00       	nop
     250:	01 03       	mulsu	r16, r17
     252:	06 0c       	add	r0, r6
     254:	18 30       	cpi	r17, 0x08	; 8
     256:	60 00       	.word	0x0060	; ????
     258:	00 41       	sbci	r16, 0x10	; 16
     25a:	41 7f       	andi	r20, 0xF1	; 241
     25c:	7f 00       	.word	0x007f	; ????
     25e:	00 00       	nop
     260:	08 0c       	add	r0, r8
     262:	06 03       	mulsu	r16, r22
     264:	06 0c       	add	r0, r6
     266:	08 00       	.word	0x0008	; ????
     268:	80 80       	ld	r8, Z
     26a:	80 80       	ld	r8, Z
     26c:	80 80       	ld	r8, Z
     26e:	80 80       	ld	r8, Z
     270:	00 00       	nop
     272:	03 07       	cpc	r16, r19
     274:	04 00       	.word	0x0004	; ????
     276:	00 00       	nop
     278:	20 74       	andi	r18, 0x40	; 64
     27a:	54 54       	subi	r21, 0x44	; 68
     27c:	3c 78       	andi	r19, 0x8C	; 140
     27e:	40 00       	.word	0x0040	; ????
     280:	41 3f       	cpi	r20, 0xF1	; 241
     282:	7f 44       	sbci	r23, 0x4F	; 79
     284:	44 7c       	andi	r20, 0xC4	; 196
     286:	38 00       	.word	0x0038	; ????
     288:	38 7c       	andi	r19, 0xC8	; 200
     28a:	44 44       	sbci	r20, 0x44	; 68
     28c:	6c 28       	or	r6, r12
     28e:	00 00       	nop
     290:	30 78       	andi	r19, 0x80	; 128
     292:	48 49       	sbci	r20, 0x98	; 152
     294:	3f 7f       	andi	r19, 0xFF	; 255
     296:	40 00       	.word	0x0040	; ????
     298:	38 7c       	andi	r19, 0xC8	; 200
     29a:	54 54       	subi	r21, 0x44	; 68
     29c:	5c 18       	sub	r5, r12
     29e:	00 00       	nop
     2a0:	48 7e       	andi	r20, 0xE8	; 232
     2a2:	7f 49       	sbci	r23, 0x9F	; 159
     2a4:	03 02       	muls	r16, r19
     2a6:	00 00       	nop
     2a8:	98 bc       	out	0x28, r9	; 40
     2aa:	a4 a4       	ldd	r10, Z+44	; 0x2c
     2ac:	f8 7c       	andi	r31, 0xC8	; 200
     2ae:	04 00       	.word	0x0004	; ????
     2b0:	41 7f       	andi	r20, 0xF1	; 241
     2b2:	7f 08       	sbc	r7, r15
     2b4:	04 7c       	andi	r16, 0xC4	; 196
     2b6:	78 00       	.word	0x0078	; ????
     2b8:	00 44       	sbci	r16, 0x40	; 64
     2ba:	7d 7d       	andi	r23, 0xDD	; 221
     2bc:	40 00       	.word	0x0040	; ????
     2be:	00 00       	nop
     2c0:	40 c4       	rjmp	.+2176   	; 0xb42 <gethighscore>
     2c2:	84 fd       	sbrc	r24, 4
     2c4:	7d 00       	.word	0x007d	; ????
     2c6:	00 00       	nop
     2c8:	41 7f       	andi	r20, 0xF1	; 241
     2ca:	7f 10       	cpse	r7, r15
     2cc:	38 6c       	ori	r19, 0xC8	; 200
     2ce:	44 00       	.word	0x0044	; ????
     2d0:	00 41       	sbci	r16, 0x10	; 16
     2d2:	7f 7f       	andi	r23, 0xFF	; 255
     2d4:	40 00       	.word	0x0040	; ????
     2d6:	00 00       	nop
     2d8:	7c 7c       	andi	r23, 0xCC	; 204
     2da:	0c 18       	sub	r0, r12
     2dc:	0c 7c       	andi	r16, 0xCC	; 204
     2de:	78 00       	.word	0x0078	; ????
     2e0:	7c 7c       	andi	r23, 0xCC	; 204
     2e2:	04 04       	cpc	r0, r4
     2e4:	7c 78       	andi	r23, 0x8C	; 140
     2e6:	00 00       	nop
     2e8:	38 7c       	andi	r19, 0xC8	; 200
     2ea:	44 44       	sbci	r20, 0x44	; 68
     2ec:	7c 38       	cpi	r23, 0x8C	; 140
     2ee:	00 00       	nop
     2f0:	84 fc       	sbrc	r8, 4
     2f2:	f8 a4       	ldd	r15, Y+40	; 0x28
     2f4:	24 3c       	cpi	r18, 0xC4	; 196
     2f6:	18 00       	.word	0x0018	; ????
     2f8:	18 3c       	cpi	r17, 0xC8	; 200
     2fa:	24 a4       	ldd	r2, Z+44	; 0x2c
     2fc:	f8 fc       	.word	0xfcf8	; ????
     2fe:	84 00       	.word	0x0084	; ????
     300:	44 7c       	andi	r20, 0xC4	; 196
     302:	78 44       	sbci	r23, 0x48	; 72
     304:	1c 18       	sub	r1, r12
     306:	00 00       	nop
     308:	48 5c       	subi	r20, 0xC8	; 200
     30a:	54 54       	subi	r21, 0x44	; 68
     30c:	74 24       	eor	r7, r4
     30e:	00 00       	nop
     310:	00 04       	cpc	r0, r0
     312:	3e 7f       	andi	r19, 0xFE	; 254
     314:	44 24       	eor	r4, r4
     316:	00 00       	nop
     318:	3c 7c       	andi	r19, 0xCC	; 204
     31a:	40 40       	sbci	r20, 0x00	; 0
     31c:	3c 7c       	andi	r19, 0xCC	; 204
     31e:	40 00       	.word	0x0040	; ????
     320:	1c 3c       	cpi	r17, 0xCC	; 204
     322:	60 60       	ori	r22, 0x00	; 0
     324:	3c 1c       	adc	r3, r12
     326:	00 00       	nop
     328:	3c 7c       	andi	r19, 0xCC	; 204
     32a:	60 30       	cpi	r22, 0x00	; 0
     32c:	60 7c       	andi	r22, 0xC0	; 192
     32e:	3c 00       	.word	0x003c	; ????
     330:	44 6c       	ori	r20, 0xC4	; 196
     332:	38 10       	cpse	r3, r8
     334:	38 6c       	ori	r19, 0xC8	; 200
     336:	44 00       	.word	0x0044	; ????
     338:	9c bc       	out	0x2c, r9	; 44
     33a:	a0 a0       	ldd	r10, Z+32	; 0x20
     33c:	fc 7c       	andi	r31, 0xCC	; 204
     33e:	00 00       	nop
     340:	4c 64       	ori	r20, 0x4C	; 76
     342:	74 5c       	subi	r23, 0xC4	; 196
     344:	4c 64       	ori	r20, 0x4C	; 76
     346:	00 00       	nop
     348:	08 08       	sbc	r0, r8
     34a:	3e 77       	andi	r19, 0x7E	; 126
     34c:	41 41       	sbci	r20, 0x11	; 17
     34e:	00 00       	nop
     350:	00 00       	nop
     352:	00 77       	andi	r16, 0x70	; 112
     354:	77 00       	.word	0x0077	; ????
     356:	00 00       	nop
     358:	41 41       	sbci	r20, 0x11	; 17
     35a:	77 3e       	cpi	r23, 0xE7	; 231
     35c:	08 08       	sbc	r0, r8
     35e:	00 00       	nop
     360:	02 03       	mulsu	r16, r18
     362:	01 03       	mulsu	r16, r17
     364:	02 03       	mulsu	r16, r18
     366:	01 00       	.word	0x0001	; ????

00000368 <__ctors_end>:
     368:	11 24       	eor	r1, r1
     36a:	1f be       	out	0x3f, r1	; 63
     36c:	cf ef       	ldi	r28, 0xFF	; 255
     36e:	d4 e0       	ldi	r29, 0x04	; 4
     370:	de bf       	out	0x3e, r29	; 62
     372:	cd bf       	out	0x3d, r28	; 61

00000374 <__do_copy_data>:
     374:	13 e0       	ldi	r17, 0x03	; 3
     376:	a0 e0       	ldi	r26, 0x00	; 0
     378:	b1 e0       	ldi	r27, 0x01	; 1
     37a:	ee e6       	ldi	r30, 0x6E	; 110
     37c:	f4 e2       	ldi	r31, 0x24	; 36
     37e:	02 c0       	rjmp	.+4      	; 0x384 <__do_copy_data+0x10>
     380:	05 90       	lpm	r0, Z+
     382:	0d 92       	st	X+, r0
     384:	a2 3a       	cpi	r26, 0xA2	; 162
     386:	b1 07       	cpc	r27, r17
     388:	d9 f7       	brne	.-10     	; 0x380 <__do_copy_data+0xc>

0000038a <__do_clear_bss>:
     38a:	23 e0       	ldi	r18, 0x03	; 3
     38c:	a2 ea       	ldi	r26, 0xA2	; 162
     38e:	b3 e0       	ldi	r27, 0x03	; 3
     390:	01 c0       	rjmp	.+2      	; 0x394 <.do_clear_bss_start>

00000392 <.do_clear_bss_loop>:
     392:	1d 92       	st	X+, r1

00000394 <.do_clear_bss_start>:
     394:	a1 3f       	cpi	r26, 0xF1	; 241
     396:	b2 07       	cpc	r27, r18
     398:	e1 f7       	brne	.-8      	; 0x392 <.do_clear_bss_loop>
     39a:	0e 94 44 02 	call	0x488	; 0x488 <main>
     39e:	0c 94 35 12 	jmp	0x246a	; 0x246a <_exit>

000003a2 <__bad_interrupt>:
     3a2:	0c 94 00 00 	jmp	0	; 0x0 <__vectors>

000003a6 <__vector_2>:
#endif

volatile char* ext_adc = ADC_ADDRESS;
volatile char ADC_data;

ISR(INT1_vect){
     3a6:	1f 92       	push	r1
     3a8:	0f 92       	push	r0
     3aa:	0f b6       	in	r0, 0x3f	; 63
     3ac:	0f 92       	push	r0
     3ae:	11 24       	eor	r1, r1
     3b0:	8f 93       	push	r24
     3b2:	ef 93       	push	r30
     3b4:	ff 93       	push	r31
	
	ADC_data = ext_adc[0x00];
     3b6:	e0 91 06 01 	lds	r30, 0x0106
     3ba:	f0 91 07 01 	lds	r31, 0x0107
     3be:	80 81       	ld	r24, Z
     3c0:	80 93 c3 03 	sts	0x03C3, r24
}
     3c4:	ff 91       	pop	r31
     3c6:	ef 91       	pop	r30
     3c8:	8f 91       	pop	r24
     3ca:	0f 90       	pop	r0
     3cc:	0f be       	out	0x3f, r0	; 63
     3ce:	0f 90       	pop	r0
     3d0:	1f 90       	pop	r1
     3d2:	18 95       	reti

000003d4 <ADC_init>:

void ADC_init(void){
	

	clear_bit(DDRD, PD3);
     3d4:	8b 98       	cbi	0x11, 3	; 17
	set_bit(PORTD, PD3);	
     3d6:	93 9a       	sbi	0x12, 3	; 18
	
	cli();
     3d8:	f8 94       	cli
	
	set_bit(MCUCR, ISC11);
     3da:	85 b7       	in	r24, 0x35	; 53
     3dc:	88 60       	ori	r24, 0x08	; 8
     3de:	85 bf       	out	0x35, r24	; 53
	clear_bit(MCUCR, ISC10);
     3e0:	85 b7       	in	r24, 0x35	; 53
     3e2:	8b 7f       	andi	r24, 0xFB	; 251
     3e4:	85 bf       	out	0x35, r24	; 53
	
	set_bit(GICR,INT1);
     3e6:	8b b7       	in	r24, 0x3b	; 59
     3e8:	80 68       	ori	r24, 0x80	; 128
     3ea:	8b bf       	out	0x3b, r24	; 59

	sei();
     3ec:	78 94       	sei
     3ee:	08 95       	ret

000003f0 <get_ADC_data>:
}

char get_ADC_data(void){
	return ext_adc[0x00]; 
     3f0:	e0 91 06 01 	lds	r30, 0x0106
     3f4:	f0 91 07 01 	lds	r31, 0x0107
     3f8:	80 81       	ld	r24, Z
}
     3fa:	08 95       	ret

000003fc <ADC_start_read>:

void ADC_start_read(ADC_channel channel){
	
	char data = 0x00;
	switch (channel) {
     3fc:	81 30       	cpi	r24, 0x01	; 1
     3fe:	39 f0       	breq	.+14     	; 0x40e <ADC_start_read+0x12>
     400:	60 f0       	brcs	.+24     	; 0x41a <ADC_start_read+0x1e>
     402:	82 30       	cpi	r24, 0x02	; 2
     404:	31 f0       	breq	.+12     	; 0x412 <ADC_start_read+0x16>
     406:	83 30       	cpi	r24, 0x03	; 3
     408:	31 f0       	breq	.+12     	; 0x416 <ADC_start_read+0x1a>
	return ext_adc[0x00]; 
}

void ADC_start_read(ADC_channel channel){
	
	char data = 0x00;
     40a:	80 e0       	ldi	r24, 0x00	; 0
     40c:	07 c0       	rjmp	.+14     	; 0x41c <ADC_start_read+0x20>
	switch (channel) {
		case CHANNEL1 :
		data = 0x04;
		break;
		case CHANNEL2 :
		data = 0x05;
     40e:	85 e0       	ldi	r24, 0x05	; 5
		break;
     410:	05 c0       	rjmp	.+10     	; 0x41c <ADC_start_read+0x20>
		case CHANNEL3 :
		data = 0x06;
     412:	86 e0       	ldi	r24, 0x06	; 6
		break;
     414:	03 c0       	rjmp	.+6      	; 0x41c <ADC_start_read+0x20>
		case CHANNEL4 :
		data = 0x07;
     416:	87 e0       	ldi	r24, 0x07	; 7
		break;
     418:	01 c0       	rjmp	.+2      	; 0x41c <ADC_start_read+0x20>
void ADC_start_read(ADC_channel channel){
	
	char data = 0x00;
	switch (channel) {
		case CHANNEL1 :
		data = 0x04;
     41a:	84 e0       	ldi	r24, 0x04	; 4
		break;
		default:
		break;
	}
	
	ext_adc[0] = data;
     41c:	e0 91 06 01 	lds	r30, 0x0106
     420:	f0 91 07 01 	lds	r31, 0x0107
     424:	80 83       	st	Z, r24
     426:	08 95       	ret

00000428 <joyupdatejoystickavrage>:
long map(long x, long in_min, long in_max, long out_min, long out_max)
{
	return (x - in_min) * (out_max - out_min) / (in_max - in_min) + out_min;
}
JoystickDir joyupdatejoystickavrage(JoystickDir input){
	joystickarray[nextIndex] = input;
     428:	20 91 a2 03 	lds	r18, 0x03A2
     42c:	30 91 a3 03 	lds	r19, 0x03A3
     430:	f9 01       	movw	r30, r18
     432:	ee 0f       	add	r30, r30
     434:	ff 1f       	adc	r31, r31
     436:	ec 53       	subi	r30, 0x3C	; 60
     438:	fc 4f       	sbci	r31, 0xFC	; 252
     43a:	90 e0       	ldi	r25, 0x00	; 0
     43c:	91 83       	std	Z+1, r25	; 0x01
     43e:	80 83       	st	Z, r24
	nextIndex ++;
     440:	2f 5f       	subi	r18, 0xFF	; 255
     442:	3f 4f       	sbci	r19, 0xFF	; 255
	if(nextIndex > 5){
     444:	26 30       	cpi	r18, 0x06	; 6
     446:	31 05       	cpc	r19, r1
     448:	2c f4       	brge	.+10     	; 0x454 <joyupdatejoystickavrage+0x2c>
{
	return (x - in_min) * (out_max - out_min) / (in_max - in_min) + out_min;
}
JoystickDir joyupdatejoystickavrage(JoystickDir input){
	joystickarray[nextIndex] = input;
	nextIndex ++;
     44a:	30 93 a3 03 	sts	0x03A3, r19
     44e:	20 93 a2 03 	sts	0x03A2, r18
     452:	04 c0       	rjmp	.+8      	; 0x45c <joyupdatejoystickavrage+0x34>
	if(nextIndex > 5){
		nextIndex = 0;
     454:	10 92 a3 03 	sts	0x03A3, r1
     458:	10 92 a2 03 	sts	0x03A2, r1
     45c:	e4 ec       	ldi	r30, 0xC4	; 196
     45e:	f3 e0       	ldi	r31, 0x03	; 3
     460:	4e ec       	ldi	r20, 0xCE	; 206
     462:	53 e0       	ldi	r21, 0x03	; 3
	}
	int count = 0;
     464:	20 e0       	ldi	r18, 0x00	; 0
     466:	30 e0       	ldi	r19, 0x00	; 0
	for(int i = 0; i < 5; i++){
		if(joystickarray[i] == 0){
     468:	81 91       	ld	r24, Z+
     46a:	91 91       	ld	r25, Z+
     46c:	89 2b       	or	r24, r25
     46e:	11 f4       	brne	.+4      	; 0x474 <joyupdatejoystickavrage+0x4c>
			count++;
     470:	2f 5f       	subi	r18, 0xFF	; 255
     472:	3f 4f       	sbci	r19, 0xFF	; 255
	nextIndex ++;
	if(nextIndex > 5){
		nextIndex = 0;
	}
	int count = 0;
	for(int i = 0; i < 5; i++){
     474:	e4 17       	cp	r30, r20
     476:	f5 07       	cpc	r31, r21
     478:	b9 f7       	brne	.-18     	; 0x468 <joyupdatejoystickavrage+0x40>
		if(joystickarray[i] == 0){
			count++;
		}
	}
	if(count > 2){
     47a:	23 30       	cpi	r18, 0x03	; 3
     47c:	31 05       	cpc	r19, r1
     47e:	14 f0       	brlt	.+4      	; 0x484 <joyupdatejoystickavrage+0x5c>
		return LEFT;
     480:	80 e0       	ldi	r24, 0x00	; 0
     482:	08 95       	ret
	}
	return NEUTRAL;
     484:	84 e0       	ldi	r24, 0x04	; 4
}
     486:	08 95       	ret

00000488 <main>:
int nextIndex = 0;
int joystickarray[6];
long map(long x, long in_min, long in_max, long out_min, long out_max);
JoystickDir joyupdatejoystickavrage(JoystickDir input);
int main( )
{
     488:	cf 93       	push	r28
     48a:	df 93       	push	r29
     48c:	00 d0       	rcall	.+0      	; 0x48e <main+0x6>
     48e:	00 d0       	rcall	.+0      	; 0x490 <main+0x8>
     490:	1f 92       	push	r1
     492:	cd b7       	in	r28, 0x3d	; 61
     494:	de b7       	in	r29, 0x3e	; 62
	My_serial_Init ( MYUBRR );
     496:	8f e1       	ldi	r24, 0x1F	; 31
     498:	90 e0       	ldi	r25, 0x00	; 0
     49a:	0e 94 ce 04 	call	0x99c	; 0x99c <My_serial_Init>
	#else
		//round up by default
		__ticks_dc = (uint32_t)(ceil(fabs(__tmp)));
	#endif

	__builtin_avr_delay_cycles(__ticks_dc);
     49e:	2f ef       	ldi	r18, 0xFF	; 255
     4a0:	8f ef       	ldi	r24, 0xFF	; 255
     4a2:	9e e0       	ldi	r25, 0x0E	; 14
     4a4:	21 50       	subi	r18, 0x01	; 1
     4a6:	80 40       	sbci	r24, 0x00	; 0
     4a8:	90 40       	sbci	r25, 0x00	; 0
     4aa:	e1 f7       	brne	.-8      	; 0x4a4 <main+0x1c>
     4ac:	00 c0       	rjmp	.+0      	; 0x4ae <main+0x26>
     4ae:	00 00       	nop
	_delay_ms(1000);
	ADC_init();
     4b0:	0e 94 ea 01 	call	0x3d4	; 0x3d4 <ADC_init>
	Joystick_calibrate();
     4b4:	0e 94 05 07 	call	0xe0a	; 0xe0a <Joystick_calibrate>
	oled_init();
     4b8:	0e 94 80 0a 	call	0x1500	; 0x1500 <oled_init>
	oled_menu_init();
     4bc:	0e 94 ca 0b 	call	0x1794	; 0x1794 <oled_menu_init>
	Joystick myjoystick;
	gamevars mygame;
	gamevars mygameold;
	menu_option lastOption;
	int updatescore = 0;
	oled_menu_select(0);
     4c0:	80 e0       	ldi	r24, 0x00	; 0
     4c2:	90 e0       	ldi	r25, 0x00	; 0
     4c4:	0e 94 55 0c 	call	0x18aa	; 0x18aa <oled_menu_select>
	can_init(MODE_NORMAL);
     4c8:	80 e0       	ldi	r24, 0x00	; 0
     4ca:	0e 94 e4 02 	call	0x5c8	; 0x5c8 <can_init>
	printf("NEW START!!!!");
     4ce:	87 e1       	ldi	r24, 0x17	; 23
     4d0:	92 e0       	ldi	r25, 0x02	; 2
     4d2:	9f 93       	push	r25
     4d4:	8f 93       	push	r24
     4d6:	0e 94 22 0f 	call	0x1e44	; 0x1e44 <printf>
	int sendinfoflag =0;
	int gamemode = 0;
	JoystickDir myjoystickhold = NEUTRAL;
	initHighscore();
     4da:	0e 94 f0 05 	call	0xbe0	; 0xbe0 <initHighscore>
     4de:	0f 90       	pop	r0
     4e0:	0f 90       	pop	r0
	oled_menu_select(0);
	can_init(MODE_NORMAL);
	printf("NEW START!!!!");
	int sendinfoflag =0;
	int gamemode = 0;
	JoystickDir myjoystickhold = NEUTRAL;
     4e2:	68 94       	set
     4e4:	99 24       	eor	r9, r9
     4e6:	92 f8       	bld	r9, 2
	int updatescore = 0;
	oled_menu_select(0);
	can_init(MODE_NORMAL);
	printf("NEW START!!!!");
	int sendinfoflag =0;
	int gamemode = 0;
     4e8:	c1 2c       	mov	r12, r1
     4ea:	d1 2c       	mov	r13, r1
	menu_option lastOption;
	int updatescore = 0;
	oled_menu_select(0);
	can_init(MODE_NORMAL);
	printf("NEW START!!!!");
	int sendinfoflag =0;
     4ec:	00 e0       	ldi	r16, 0x00	; 0
     4ee:	10 e0       	ldi	r17, 0x00	; 0
	initHighscore();
	while(1)
	{
		mygame = getInfo();
		if(mygame.enemypoints != mygameold.enemypoints || mygame.mypoints != mygameold.mypoints){
			updatescore = 1;
     4f0:	33 24       	eor	r3, r3
     4f2:	33 94       	inc	r3
     4f4:	21 2c       	mov	r2, r1
     4f6:	03 c0       	rjmp	.+6      	; 0x4fe <main+0x76>
     4f8:	9b 2c       	mov	r9, r11
     4fa:	52 01       	movw	r10, r4
     4fc:	73 01       	movw	r14, r6
	int gamemode = 0;
	JoystickDir myjoystickhold = NEUTRAL;
	initHighscore();
	while(1)
	{
		mygame = getInfo();
     4fe:	0e 94 67 05 	call	0xace	; 0xace <getInfo>
     502:	2b 01       	movw	r4, r22
     504:	3c 01       	movw	r6, r24
		if(mygame.enemypoints != mygameold.enemypoints || mygame.mypoints != mygameold.mypoints){
     506:	e6 14       	cp	r14, r6
     508:	f7 04       	cpc	r15, r7
     50a:	51 f4       	brne	.+20     	; 0x520 <__stack+0x21>
     50c:	33 2d       	mov	r19, r3
     50e:	22 2d       	mov	r18, r2
     510:	a6 16       	cp	r10, r22
     512:	b7 06       	cpc	r11, r23
     514:	11 f4       	brne	.+4      	; 0x51a <__stack+0x1b>
     516:	30 e0       	ldi	r19, 0x00	; 0
     518:	20 e0       	ldi	r18, 0x00	; 0
			updatescore = 1;
     51a:	e3 2e       	mov	r14, r19
     51c:	f2 2e       	mov	r15, r18
     51e:	02 c0       	rjmp	.+4      	; 0x524 <__stack+0x25>
     520:	e3 2c       	mov	r14, r3
     522:	f2 2c       	mov	r15, r2
		}
		else{
			updatescore = 0;
		}
		mygameold = mygame;
		myjoystick = joystickPos();
     524:	0e 94 62 07 	call	0xec4	; 0xec4 <joystickPos>
     528:	b6 2e       	mov	r11, r22
		
		if(myjoystick.Dir != myjoystickhold){
     52a:	96 16       	cp	r9, r22
     52c:	f9 f0       	breq	.+62     	; 0x56c <__stack+0x6d>
			if(joyupdatejoystickavrage(myjoystick.Dir) == LEFT){
     52e:	86 2f       	mov	r24, r22
     530:	0e 94 14 02 	call	0x428	; 0x428 <joyupdatejoystickavrage>
     534:	81 11       	cpse	r24, r1
     536:	03 c0       	rjmp	.+6      	; 0x53e <__stack+0x3f>
				sendReset();
     538:	0e 94 21 05 	call	0xa42	; 0xa42 <sendReset>
     53c:	0b c0       	rjmp	.+22     	; 0x554 <__stack+0x55>
				lastOption = NONE;
			}
			if(lastOption == SinglePlayer || lastOption == Multiplayer){
     53e:	8f ef       	ldi	r24, 0xFF	; 255
     540:	88 0d       	add	r24, r8
     542:	82 30       	cpi	r24, 0x02	; 2
     544:	b8 f0       	brcs	.+46     	; 0x574 <__stack+0x75>
				gamemode = 1;
			}
			else if(lastOption == Highscore || lastOption == Medium || lastOption == Hard || lastOption == Easy){
     546:	23 e0       	ldi	r18, 0x03	; 3
     548:	82 16       	cp	r8, r18
     54a:	81 f0       	breq	.+32     	; 0x56c <__stack+0x6d>
     54c:	89 ef       	ldi	r24, 0xF9	; 249
     54e:	88 0d       	add	r24, r8
     550:	83 30       	cpi	r24, 0x03	; 3
     552:	60 f0       	brcs	.+24     	; 0x56c <__stack+0x6d>
				//lastOption = printgame(lastOption,mygame);
			}
			else{
				lastOption = printgame(oled_menu_select(),mygame);
     554:	0e 94 55 0c 	call	0x18aa	; 0x18aa <oled_menu_select>
     558:	b3 01       	movw	r22, r6
     55a:	a2 01       	movw	r20, r4
     55c:	0e 94 04 08 	call	0x1008	; 0x1008 <printgame>
     560:	88 2e       	mov	r8, r24
				sendInfo(lastOption);
     562:	0e 94 e1 04 	call	0x9c2	; 0x9c2 <sendInfo>
				gamemode = 0;
     566:	c1 2c       	mov	r12, r1
     568:	d1 2c       	mov	r13, r1
     56a:	c6 cf       	rjmp	.-116    	; 0x4f8 <main+0x70>
			}
		}
		myjoystickhold = myjoystick.Dir;
		if(gamemode){
     56c:	c1 14       	cp	r12, r1
     56e:	d1 04       	cpc	r13, r1
     570:	19 f2       	breq	.-122    	; 0x4f8 <main+0x70>
     572:	02 c0       	rjmp	.+4      	; 0x578 <__stack+0x79>
			if(joyupdatejoystickavrage(myjoystick.Dir) == LEFT){
				sendReset();
				lastOption = NONE;
			}
			if(lastOption == SinglePlayer || lastOption == Multiplayer){
				gamemode = 1;
     574:	c3 2c       	mov	r12, r3
     576:	d2 2c       	mov	r13, r2
				gamemode = 0;
			}
		}
		myjoystickhold = myjoystick.Dir;
		if(gamemode){
			if(updatescore){
     578:	ef 28       	or	r14, r15
     57a:	31 f0       	breq	.+12     	; 0x588 <__stack+0x89>
				lastOption = printgame(lastOption,mygame);
     57c:	b3 01       	movw	r22, r6
     57e:	a2 01       	movw	r20, r4
     580:	88 2d       	mov	r24, r8
     582:	0e 94 04 08 	call	0x1008	; 0x1008 <printgame>
     586:	88 2e       	mov	r8, r24
			}
			sendinfoflag++;
     588:	0f 5f       	subi	r16, 0xFF	; 255
     58a:	1f 4f       	sbci	r17, 0xFF	; 255
			if(sendinfoflag > 50){
     58c:	03 33       	cpi	r16, 0x33	; 51
     58e:	11 05       	cpc	r17, r1
     590:	0c f4       	brge	.+2      	; 0x594 <__stack+0x95>
     592:	b2 cf       	rjmp	.-156    	; 0x4f8 <main+0x70>
				sendInfo(lastOption);
     594:	88 2d       	mov	r24, r8
     596:	0e 94 e1 04 	call	0x9c2	; 0x9c2 <sendInfo>
				sendinfoflag = 0;
     59a:	00 e0       	ldi	r16, 0x00	; 0
     59c:	10 e0       	ldi	r17, 0x00	; 0
     59e:	ac cf       	rjmp	.-168    	; 0x4f8 <main+0x70>

000005a0 <__vector_1>:
#include <avr/delay.h>

volatile int flag = 0;


ISR(INT0_vect){
     5a0:	1f 92       	push	r1
     5a2:	0f 92       	push	r0
     5a4:	0f b6       	in	r0, 0x3f	; 63
     5a6:	0f 92       	push	r0
     5a8:	11 24       	eor	r1, r1
     5aa:	8f 93       	push	r24
     5ac:	9f 93       	push	r25
	flag = 1;
     5ae:	81 e0       	ldi	r24, 0x01	; 1
     5b0:	90 e0       	ldi	r25, 0x00	; 0
     5b2:	90 93 a7 03 	sts	0x03A7, r25
     5b6:	80 93 a6 03 	sts	0x03A6, r24
}
     5ba:	9f 91       	pop	r25
     5bc:	8f 91       	pop	r24
     5be:	0f 90       	pop	r0
     5c0:	0f be       	out	0x3f, r0	; 63
     5c2:	0f 90       	pop	r0
     5c4:	1f 90       	pop	r1
     5c6:	18 95       	reti

000005c8 <can_init>:

void can_init(uint8_t mode){

	mcp_2515_init(mode);
     5c8:	0e 94 85 04 	call	0x90a	; 0x90a <mcp_2515_init>
	
	
	mcp_2515_write(MCP_CANINTE, MCP_RX_INT);
     5cc:	63 e0       	ldi	r22, 0x03	; 3
     5ce:	8b e2       	ldi	r24, 0x2B	; 43
     5d0:	0e 94 6c 04 	call	0x8d8	; 0x8d8 <mcp_2515_write>
	
	// Disable global interrupts
	cli();
     5d4:	f8 94       	cli
	// Interrupt on falling edge PD2
	set_bit(MCUCR, ISC01);
     5d6:	85 b7       	in	r24, 0x35	; 53
     5d8:	82 60       	ori	r24, 0x02	; 2
     5da:	85 bf       	out	0x35, r24	; 53
	clear_bit(MCUCR, ISC00);
     5dc:	85 b7       	in	r24, 0x35	; 53
     5de:	8e 7f       	andi	r24, 0xFE	; 254
     5e0:	85 bf       	out	0x35, r24	; 53
	// Enable interrupt on PD2
	set_bit(GICR,INT0);
     5e2:	8b b7       	in	r24, 0x3b	; 59
     5e4:	80 64       	ori	r24, 0x40	; 64
     5e6:	8b bf       	out	0x3b, r24	; 59
	// Enable global interrupts
	sei();
     5e8:	78 94       	sei
     5ea:	08 95       	ret

000005ec <can_interrupt>:
	 
	
}

uint8_t can_interrupt(){
	if (flag){	
     5ec:	80 91 a6 03 	lds	r24, 0x03A6
     5f0:	90 91 a7 03 	lds	r25, 0x03A7
     5f4:	89 2b       	or	r24, r25
     5f6:	31 f0       	breq	.+12     	; 0x604 <can_interrupt+0x18>
		flag = 0;
     5f8:	10 92 a7 03 	sts	0x03A7, r1
     5fc:	10 92 a6 03 	sts	0x03A6, r1
		return 1;
     600:	81 e0       	ldi	r24, 0x01	; 1
     602:	08 95       	ret
	}
	return 0;
     604:	80 e0       	ldi	r24, 0x00	; 0
}
     606:	08 95       	ret

00000608 <can_transmit_complete>:
	// Request to send message, send if successful
	mcp_2515_request_to_send(MCP_RTS_TX0 + buffer_number);
	
}

int can_transmit_complete(int buffer_number){
     608:	cf 93       	push	r28
     60a:	df 93       	push	r29
     60c:	ec 01       	movw	r28, r24
	uint8_t transmit_flag = mcp_2515_read(MCP_CANINTF);
     60e:	8c e2       	ldi	r24, 0x2C	; 44
     610:	0e 94 5a 04 	call	0x8b4	; 0x8b4 <mcp_2515_read>
	uint8_t interrupt_bits = (transmit_flag & (MCP_TX0IF + buffer_number*2));
     614:	9e 01       	movw	r18, r28
     616:	2e 5f       	subi	r18, 0xFE	; 254
     618:	3f 4f       	sbci	r19, 0xFF	; 255
     61a:	42 2f       	mov	r20, r18
     61c:	44 0f       	add	r20, r20
     61e:	84 23       	and	r24, r20
	
	if(interrupt_bits == (MCP_TX0IF + buffer_number*2)){
     620:	48 2f       	mov	r20, r24
     622:	50 e0       	ldi	r21, 0x00	; 0
     624:	22 0f       	add	r18, r18
     626:	33 1f       	adc	r19, r19
     628:	81 e0       	ldi	r24, 0x01	; 1
     62a:	90 e0       	ldi	r25, 0x00	; 0
     62c:	42 17       	cp	r20, r18
     62e:	53 07       	cpc	r21, r19
     630:	11 f4       	brne	.+4      	; 0x636 <can_transmit_complete+0x2e>
     632:	80 e0       	ldi	r24, 0x00	; 0
     634:	90 e0       	ldi	r25, 0x00	; 0
			return 0;
	}
	return 1;
}
     636:	df 91       	pop	r29
     638:	cf 91       	pop	r28
     63a:	08 95       	ret

0000063c <can_message_send>:
	}
	
	return message1;
}

void can_message_send(can_message* message){
     63c:	ef 92       	push	r14
     63e:	ff 92       	push	r15
     640:	0f 93       	push	r16
     642:	1f 93       	push	r17
     644:	cf 93       	push	r28
     646:	df 93       	push	r29
     648:	ec 01       	movw	r28, r24
	
	static int buffer_number = 0;
	
	while (!can_transmit_complete(buffer_number)){
     64a:	11 c0       	rjmp	.+34     	; 0x66e <can_message_send+0x32>
		buffer_number +=1;
     64c:	20 91 a4 03 	lds	r18, 0x03A4
     650:	30 91 a5 03 	lds	r19, 0x03A5
     654:	2f 5f       	subi	r18, 0xFF	; 255
     656:	3f 4f       	sbci	r19, 0xFF	; 255
     658:	30 93 a5 03 	sts	0x03A5, r19
     65c:	20 93 a4 03 	sts	0x03A4, r18
		if (buffer_number > 2) {
     660:	23 30       	cpi	r18, 0x03	; 3
     662:	31 05       	cpc	r19, r1
     664:	24 f0       	brlt	.+8      	; 0x66e <can_message_send+0x32>
			buffer_number = 0;
     666:	10 92 a5 03 	sts	0x03A5, r1
     66a:	10 92 a4 03 	sts	0x03A4, r1

void can_message_send(can_message* message){
	
	static int buffer_number = 0;
	
	while (!can_transmit_complete(buffer_number)){
     66e:	80 91 a4 03 	lds	r24, 0x03A4
     672:	90 91 a5 03 	lds	r25, 0x03A5
     676:	0e 94 04 03 	call	0x608	; 0x608 <can_transmit_complete>
     67a:	89 2b       	or	r24, r25
     67c:	39 f3       	breq	.-50     	; 0x64c <can_message_send+0x10>
		if (buffer_number > 2) {
			buffer_number = 0;
		}
	}
	
	unsigned int ID = message->id;
     67e:	88 81       	ld	r24, Y
     680:	99 81       	ldd	r25, Y+1	; 0x01
	char id_high = ID / 8;
	char id_low = ID % 8;
     682:	28 2f       	mov	r18, r24
     684:	27 70       	andi	r18, 0x07	; 7
     686:	f2 2e       	mov	r15, r18
			buffer_number = 0;
		}
	}
	
	unsigned int ID = message->id;
	char id_high = ID / 8;
     688:	bc 01       	movw	r22, r24
     68a:	76 95       	lsr	r23
     68c:	67 95       	ror	r22
     68e:	76 95       	lsr	r23
     690:	67 95       	ror	r22
     692:	76 95       	lsr	r23
     694:	67 95       	ror	r22
	char id_low = ID % 8;
	id_low = id_low*0b100000;
	mcp_2515_write(MCP_TXB0SIDH + 16 * buffer_number, id_high);
     696:	04 ea       	ldi	r16, 0xA4	; 164
     698:	13 e0       	ldi	r17, 0x03	; 3
     69a:	f8 01       	movw	r30, r16
     69c:	80 81       	ld	r24, Z
     69e:	82 95       	swap	r24
     6a0:	80 7f       	andi	r24, 0xF0	; 240
     6a2:	8f 5c       	subi	r24, 0xCF	; 207
     6a4:	0e 94 6c 04 	call	0x8d8	; 0x8d8 <mcp_2515_write>
	}
	
	unsigned int ID = message->id;
	char id_high = ID / 8;
	char id_low = ID % 8;
	id_low = id_low*0b100000;
     6a8:	6f 2d       	mov	r22, r15
     6aa:	62 95       	swap	r22
     6ac:	66 0f       	add	r22, r22
     6ae:	60 7e       	andi	r22, 0xE0	; 224
	mcp_2515_write(MCP_TXB0SIDH + 16 * buffer_number, id_high);
	mcp_2515_write(MCP_TXB0SIDL + 16 * buffer_number, id_low);
     6b0:	f8 01       	movw	r30, r16
     6b2:	80 81       	ld	r24, Z
     6b4:	82 95       	swap	r24
     6b6:	80 7f       	andi	r24, 0xF0	; 240
     6b8:	8e 5c       	subi	r24, 0xCE	; 206
     6ba:	0e 94 6c 04 	call	0x8d8	; 0x8d8 <mcp_2515_write>
	
	// Define data length of message
	uint8_t data_length = message->length;
     6be:	ea 80       	ldd	r14, Y+2	; 0x02
	mcp_2515_write(MCP_TXB0DLC + 16 * buffer_number, data_length);
     6c0:	f8 01       	movw	r30, r16
     6c2:	80 81       	ld	r24, Z
     6c4:	82 95       	swap	r24
     6c6:	80 7f       	andi	r24, 0xF0	; 240
     6c8:	6e 2d       	mov	r22, r14
     6ca:	8b 5c       	subi	r24, 0xCB	; 203
     6cc:	0e 94 6c 04 	call	0x8d8	; 0x8d8 <mcp_2515_write>
	
	// Write data bytes to transmit buffer
	char* data_bytes = message->data;
     6d0:	23 96       	adiw	r28, 0x03	; 3
	for (uint8_t byte = 0; byte < data_length; byte++) {
     6d2:	ee 20       	and	r14, r14
     6d4:	81 f0       	breq	.+32     	; 0x6f6 <can_message_send+0xba>
     6d6:	f1 2c       	mov	r15, r1
		mcp_2515_write(MCP_TXB0Dm + byte + 16 * buffer_number, data_bytes[byte]);
     6d8:	69 91       	ld	r22, Y+
     6da:	f8 01       	movw	r30, r16
     6dc:	80 81       	ld	r24, Z
     6de:	2f 2d       	mov	r18, r15
     6e0:	f0 e1       	ldi	r31, 0x10	; 16
     6e2:	8f 9f       	mul	r24, r31
     6e4:	20 0d       	add	r18, r0
     6e6:	11 24       	eor	r1, r1
     6e8:	82 2f       	mov	r24, r18
     6ea:	8a 5c       	subi	r24, 0xCA	; 202
     6ec:	0e 94 6c 04 	call	0x8d8	; 0x8d8 <mcp_2515_write>
	uint8_t data_length = message->length;
	mcp_2515_write(MCP_TXB0DLC + 16 * buffer_number, data_length);
	
	// Write data bytes to transmit buffer
	char* data_bytes = message->data;
	for (uint8_t byte = 0; byte < data_length; byte++) {
     6f0:	f3 94       	inc	r15
     6f2:	fe 10       	cpse	r15, r14
     6f4:	f1 cf       	rjmp	.-30     	; 0x6d8 <can_message_send+0x9c>
		mcp_2515_write(MCP_TXB0Dm + byte + 16 * buffer_number, data_bytes[byte]);
	}
	
	// Request to send message, send if successful
	mcp_2515_request_to_send(MCP_RTS_TX0 + buffer_number);
     6f6:	80 91 a4 03 	lds	r24, 0x03A4
     6fa:	8f 57       	subi	r24, 0x7F	; 127
     6fc:	0e 94 a1 04 	call	0x942	; 0x942 <mcp_2515_request_to_send>
	
}
     700:	df 91       	pop	r29
     702:	cf 91       	pop	r28
     704:	1f 91       	pop	r17
     706:	0f 91       	pop	r16
     708:	ff 90       	pop	r15
     70a:	ef 90       	pop	r14
     70c:	08 95       	ret

0000070e <can_message_receive>:
			return 0;
	}
	return 1;
}

void can_message_receive(int rec_buff_num, can_message* received_message){
     70e:	0f 93       	push	r16
     710:	1f 93       	push	r17
     712:	cf 93       	push	r28
     714:	df 93       	push	r29
     716:	eb 01       	movw	r28, r22
	uint8_t id_high = mcp_2515_read(MCP_RXB0SIDH + 16 * rec_buff_num);
     718:	18 2f       	mov	r17, r24
     71a:	12 95       	swap	r17
     71c:	10 7f       	andi	r17, 0xF0	; 240
     71e:	81 e6       	ldi	r24, 0x61	; 97
     720:	81 0f       	add	r24, r17
     722:	0e 94 5a 04 	call	0x8b4	; 0x8b4 <mcp_2515_read>
     726:	08 2f       	mov	r16, r24
	uint8_t id_low = mcp_2515_read(MCP_RXB0SIDL + 16 * rec_buff_num);
     728:	82 e6       	ldi	r24, 0x62	; 98
     72a:	81 0f       	add	r24, r17
     72c:	0e 94 5a 04 	call	0x8b4	; 0x8b4 <mcp_2515_read>
	uint8_t mask = 0b11100000;
	id_low = (id_low & mask);
	received_message->id = 0b1000*id_high + id_low/0b100000;
     730:	20 2f       	mov	r18, r16
     732:	30 e0       	ldi	r19, 0x00	; 0
     734:	22 0f       	add	r18, r18
     736:	33 1f       	adc	r19, r19
     738:	22 0f       	add	r18, r18
     73a:	33 1f       	adc	r19, r19
     73c:	22 0f       	add	r18, r18
     73e:	33 1f       	adc	r19, r19
     740:	82 95       	swap	r24
     742:	86 95       	lsr	r24
     744:	87 70       	andi	r24, 0x07	; 7
     746:	28 0f       	add	r18, r24
     748:	31 1d       	adc	r19, r1
     74a:	39 83       	std	Y+1, r19	; 0x01
     74c:	28 83       	st	Y, r18
	
	uint8_t data_length = mcp_2515_read(MCP_RXB0DLC + 16 * rec_buff_num);
     74e:	85 e6       	ldi	r24, 0x65	; 101
     750:	81 0f       	add	r24, r17
     752:	0e 94 5a 04 	call	0x8b4	; 0x8b4 <mcp_2515_read>
	mask = 0b1111;
	received_message->length = (data_length & mask);
     756:	98 2f       	mov	r25, r24
     758:	9f 70       	andi	r25, 0x0F	; 15
     75a:	9a 83       	std	Y+2, r25	; 0x02
	
	for (uint8_t byte = 0; byte < data_length; byte++) {
     75c:	88 23       	and	r24, r24
     75e:	59 f0       	breq	.+22     	; 0x776 <can_message_receive+0x68>
     760:	1a 59       	subi	r17, 0x9A	; 154
     762:	23 96       	adiw	r28, 0x03	; 3
     764:	08 2f       	mov	r16, r24
     766:	01 0f       	add	r16, r17
		received_message->data[byte] = mcp_2515_read(MCP_RXB0DM + byte + 16 * rec_buff_num);
     768:	81 2f       	mov	r24, r17
     76a:	0e 94 5a 04 	call	0x8b4	; 0x8b4 <mcp_2515_read>
     76e:	89 93       	st	Y+, r24
     770:	1f 5f       	subi	r17, 0xFF	; 255
	
	uint8_t data_length = mcp_2515_read(MCP_RXB0DLC + 16 * rec_buff_num);
	mask = 0b1111;
	received_message->length = (data_length & mask);
	
	for (uint8_t byte = 0; byte < data_length; byte++) {
     772:	10 13       	cpse	r17, r16
     774:	f9 cf       	rjmp	.-14     	; 0x768 <can_message_receive+0x5a>
		received_message->data[byte] = mcp_2515_read(MCP_RXB0DM + byte + 16 * rec_buff_num);
	}
}
     776:	df 91       	pop	r29
     778:	cf 91       	pop	r28
     77a:	1f 91       	pop	r17
     77c:	0f 91       	pop	r16
     77e:	08 95       	ret

00000780 <can_int_vect>:

void can_int_vect(int* v) { 
     780:	cf 93       	push	r28
     782:	df 93       	push	r29
     784:	ec 01       	movw	r28, r24
	uint8_t int_flag = mcp_2515_read(MCP_CANINTF);
     786:	8c e2       	ldi	r24, 0x2C	; 44
     788:	0e 94 5a 04 	call	0x8b4	; 0x8b4 <mcp_2515_read>
	v[0] = (int_flag & MCP_RX0IF);
     78c:	98 2f       	mov	r25, r24
     78e:	91 70       	andi	r25, 0x01	; 1
     790:	98 83       	st	Y, r25
     792:	19 82       	std	Y+1, r1	; 0x01
	v[1] = (int_flag & MCP_RX1IF);
     794:	82 70       	andi	r24, 0x02	; 2
     796:	90 e0       	ldi	r25, 0x00	; 0
     798:	9b 83       	std	Y+3, r25	; 0x03
     79a:	8a 83       	std	Y+2, r24	; 0x02
}
     79c:	df 91       	pop	r29
     79e:	cf 91       	pop	r28
     7a0:	08 95       	ret

000007a2 <can_handle_messages>:
		return 1;
	}
	return 0;
}

can_message can_handle_messages(){
     7a2:	0f 93       	push	r16
     7a4:	1f 93       	push	r17
     7a6:	cf 93       	push	r28
     7a8:	df 93       	push	r29
     7aa:	cd b7       	in	r28, 0x3d	; 61
     7ac:	de b7       	in	r29, 0x3e	; 62
     7ae:	68 97       	sbiw	r28, 0x18	; 24
     7b0:	0f b6       	in	r0, 0x3f	; 63
     7b2:	f8 94       	cli
     7b4:	de bf       	out	0x3e, r29	; 62
     7b6:	0f be       	out	0x3f, r0	; 63
     7b8:	cd bf       	out	0x3d, r28	; 61
     7ba:	8c 01       	movw	r16, r24
	uint8_t v[2] = {0};
     7bc:	1a 82       	std	Y+2, r1	; 0x02
     7be:	19 82       	std	Y+1, r1	; 0x01

	can_int_vect(v);
     7c0:	ce 01       	movw	r24, r28
     7c2:	01 96       	adiw	r24, 0x01	; 1
     7c4:	0e 94 c0 03 	call	0x780	; 0x780 <can_int_vect>

	can_message message1;
	if (v[0]){
     7c8:	89 81       	ldd	r24, Y+1	; 0x01
     7ca:	88 23       	and	r24, r24
     7cc:	29 f1       	breq	.+74     	; 0x818 <can_handle_messages+0x76>
		can_message_receive(0, &message1);
     7ce:	be 01       	movw	r22, r28
     7d0:	6d 5f       	subi	r22, 0xFD	; 253
     7d2:	7f 4f       	sbci	r23, 0xFF	; 255
     7d4:	80 e0       	ldi	r24, 0x00	; 0
     7d6:	90 e0       	ldi	r25, 0x00	; 0
     7d8:	0e 94 87 03 	call	0x70e	; 0x70e <can_message_receive>
		mcp_2515_bit_modify(MCP_CANINTF, 1, 0);
     7dc:	40 e0       	ldi	r20, 0x00	; 0
     7de:	61 e0       	ldi	r22, 0x01	; 1
     7e0:	8c e2       	ldi	r24, 0x2C	; 44
     7e2:	0e 94 ac 04 	call	0x958	; 0x958 <mcp_2515_bit_modify>
		mcp_2515_bit_modify(MCP_CANINTF, 1, 0);
     7e6:	40 e0       	ldi	r20, 0x00	; 0
     7e8:	61 e0       	ldi	r22, 0x01	; 1
     7ea:	8c e2       	ldi	r24, 0x2C	; 44
     7ec:	0e 94 ac 04 	call	0x958	; 0x958 <mcp_2515_bit_modify>
		can_int_vect(v);
     7f0:	ce 01       	movw	r24, r28
     7f2:	01 96       	adiw	r24, 0x01	; 1
     7f4:	0e 94 c0 03 	call	0x780	; 0x780 <can_int_vect>
		if (!v[1]){
     7f8:	8a 81       	ldd	r24, Y+2	; 0x02
     7fa:	81 11       	cpse	r24, r1
     7fc:	04 c0       	rjmp	.+8      	; 0x806 <can_handle_messages+0x64>
			flag = 0;
     7fe:	10 92 a7 03 	sts	0x03A7, r1
     802:	10 92 a6 03 	sts	0x03A6, r1
		}
		return message1;
     806:	8b e0       	ldi	r24, 0x0B	; 11
     808:	fe 01       	movw	r30, r28
     80a:	33 96       	adiw	r30, 0x03	; 3
     80c:	d8 01       	movw	r26, r16
     80e:	01 90       	ld	r0, Z+
     810:	0d 92       	st	X+, r0
     812:	8a 95       	dec	r24
     814:	e1 f7       	brne	.-8      	; 0x80e <can_handle_messages+0x6c>
     816:	30 c0       	rjmp	.+96     	; 0x878 <can_handle_messages+0xd6>
	}
	
	can_message message2;
	
	if (v[1]){
     818:	8a 81       	ldd	r24, Y+2	; 0x02
     81a:	88 23       	and	r24, r24
     81c:	29 f1       	breq	.+74     	; 0x868 <can_handle_messages+0xc6>
		can_message_receive(1, &message2);
     81e:	be 01       	movw	r22, r28
     820:	62 5f       	subi	r22, 0xF2	; 242
     822:	7f 4f       	sbci	r23, 0xFF	; 255
     824:	81 e0       	ldi	r24, 0x01	; 1
     826:	90 e0       	ldi	r25, 0x00	; 0
     828:	0e 94 87 03 	call	0x70e	; 0x70e <can_message_receive>
		mcp_2515_bit_modify(MCP_CANINTF, 2, 0);
     82c:	40 e0       	ldi	r20, 0x00	; 0
     82e:	62 e0       	ldi	r22, 0x02	; 2
     830:	8c e2       	ldi	r24, 0x2C	; 44
     832:	0e 94 ac 04 	call	0x958	; 0x958 <mcp_2515_bit_modify>
		mcp_2515_bit_modify(MCP_CANINTF, 2, 0);
     836:	40 e0       	ldi	r20, 0x00	; 0
     838:	62 e0       	ldi	r22, 0x02	; 2
     83a:	8c e2       	ldi	r24, 0x2C	; 44
     83c:	0e 94 ac 04 	call	0x958	; 0x958 <mcp_2515_bit_modify>
		can_int_vect(v);
     840:	ce 01       	movw	r24, r28
     842:	01 96       	adiw	r24, 0x01	; 1
     844:	0e 94 c0 03 	call	0x780	; 0x780 <can_int_vect>
		if (!v[0]){
     848:	89 81       	ldd	r24, Y+1	; 0x01
     84a:	81 11       	cpse	r24, r1
     84c:	04 c0       	rjmp	.+8      	; 0x856 <can_handle_messages+0xb4>
			flag = 0;
     84e:	10 92 a7 03 	sts	0x03A7, r1
     852:	10 92 a6 03 	sts	0x03A6, r1
		}
		return message2;
     856:	8b e0       	ldi	r24, 0x0B	; 11
     858:	fe 01       	movw	r30, r28
     85a:	3e 96       	adiw	r30, 0x0e	; 14
     85c:	d8 01       	movw	r26, r16
     85e:	01 90       	ld	r0, Z+
     860:	0d 92       	st	X+, r0
     862:	8a 95       	dec	r24
     864:	e1 f7       	brne	.-8      	; 0x85e <can_handle_messages+0xbc>
     866:	08 c0       	rjmp	.+16     	; 0x878 <can_handle_messages+0xd6>
	}
	
	return message1;
     868:	8b e0       	ldi	r24, 0x0B	; 11
     86a:	fe 01       	movw	r30, r28
     86c:	33 96       	adiw	r30, 0x03	; 3
     86e:	d8 01       	movw	r26, r16
     870:	01 90       	ld	r0, Z+
     872:	0d 92       	st	X+, r0
     874:	8a 95       	dec	r24
     876:	e1 f7       	brne	.-8      	; 0x870 <can_handle_messages+0xce>
}
     878:	c8 01       	movw	r24, r16
     87a:	68 96       	adiw	r28, 0x18	; 24
     87c:	0f b6       	in	r0, 0x3f	; 63
     87e:	f8 94       	cli
     880:	de bf       	out	0x3e, r29	; 62
     882:	0f be       	out	0x3f, r0	; 63
     884:	cd bf       	out	0x3d, r28	; 61
     886:	df 91       	pop	r29
     888:	cf 91       	pop	r28
     88a:	1f 91       	pop	r17
     88c:	0f 91       	pop	r16
     88e:	08 95       	ret

00000890 <activate_slave>:

#include <avr/io.h>
#include <avr/delay.h>

void activate_slave(){
	clear_bit(PORTB, PB4);
     890:	c4 98       	cbi	0x18, 4	; 24
     892:	08 95       	ret

00000894 <deactivate_slave>:
}

void deactivate_slave(){
	set_bit(PORTB, PB4);
     894:	c4 9a       	sbi	0x18, 4	; 24
     896:	08 95       	ret

00000898 <mcp_2515_reset>:
	}
	return 0;
}

void mcp_2515_reset(){
	activate_slave();
     898:	0e 94 48 04 	call	0x890	; 0x890 <activate_slave>
	SPI_write(MCP_RESET);
     89c:	80 ec       	ldi	r24, 0xC0	; 192
     89e:	0e 94 1f 0d 	call	0x1a3e	; 0x1a3e <SPI_write>
	deactivate_slave();
     8a2:	0e 94 4a 04 	call	0x894	; 0x894 <deactivate_slave>
     8a6:	83 ec       	ldi	r24, 0xC3	; 195
     8a8:	99 e0       	ldi	r25, 0x09	; 9
     8aa:	01 97       	sbiw	r24, 0x01	; 1
     8ac:	f1 f7       	brne	.-4      	; 0x8aa <mcp_2515_reset+0x12>
     8ae:	00 c0       	rjmp	.+0      	; 0x8b0 <mcp_2515_reset+0x18>
     8b0:	00 00       	nop
     8b2:	08 95       	ret

000008b4 <mcp_2515_read>:
	_delay_ms(10);
}

uint8_t mcp_2515_read(uint8_t address){
     8b4:	cf 93       	push	r28
     8b6:	c8 2f       	mov	r28, r24
	activate_slave();
     8b8:	0e 94 48 04 	call	0x890	; 0x890 <activate_slave>
	
	uint8_t data;
	
	SPI_write(MCP_READ);
     8bc:	83 e0       	ldi	r24, 0x03	; 3
     8be:	0e 94 1f 0d 	call	0x1a3e	; 0x1a3e <SPI_write>
	SPI_write(address);
     8c2:	8c 2f       	mov	r24, r28
     8c4:	0e 94 1f 0d 	call	0x1a3e	; 0x1a3e <SPI_write>
	data = SPI_read();
     8c8:	0e 94 23 0d 	call	0x1a46	; 0x1a46 <SPI_read>
     8cc:	c8 2f       	mov	r28, r24
	
	deactivate_slave();
     8ce:	0e 94 4a 04 	call	0x894	; 0x894 <deactivate_slave>
	
	return data;
}
     8d2:	8c 2f       	mov	r24, r28
     8d4:	cf 91       	pop	r28
     8d6:	08 95       	ret

000008d8 <mcp_2515_write>:


void mcp_2515_write(uint8_t address, uint8_t data) {
     8d8:	cf 93       	push	r28
     8da:	df 93       	push	r29
     8dc:	d8 2f       	mov	r29, r24
     8de:	c6 2f       	mov	r28, r22
	activate_slave();
     8e0:	0e 94 48 04 	call	0x890	; 0x890 <activate_slave>
	
	SPI_write(MCP_WRITE);
     8e4:	82 e0       	ldi	r24, 0x02	; 2
     8e6:	0e 94 1f 0d 	call	0x1a3e	; 0x1a3e <SPI_write>
	SPI_write(address);
     8ea:	8d 2f       	mov	r24, r29
     8ec:	0e 94 1f 0d 	call	0x1a3e	; 0x1a3e <SPI_write>
	SPI_write(data);
     8f0:	8c 2f       	mov	r24, r28
     8f2:	0e 94 1f 0d 	call	0x1a3e	; 0x1a3e <SPI_write>
	
	deactivate_slave();
     8f6:	0e 94 4a 04 	call	0x894	; 0x894 <deactivate_slave>
}
     8fa:	df 91       	pop	r29
     8fc:	cf 91       	pop	r28
     8fe:	08 95       	ret

00000900 <mcp_2515_set_mode>:
void deactivate_slave(){
	set_bit(PORTB, PB4);
}

void mcp_2515_set_mode(uint8_t mode){
	mcp_2515_write(MCP_CANCTRL, mode);
     900:	68 2f       	mov	r22, r24
     902:	8f e0       	ldi	r24, 0x0F	; 15
     904:	0e 94 6c 04 	call	0x8d8	; 0x8d8 <mcp_2515_write>
     908:	08 95       	ret

0000090a <mcp_2515_init>:
}

uint8_t mcp_2515_init(uint8_t mode){
     90a:	cf 93       	push	r28
     90c:	c8 2f       	mov	r28, r24
	
	uint8_t val;
	SPI_init();
     90e:	0e 94 19 0d 	call	0x1a32	; 0x1a32 <SPI_init>
	
	mcp_2515_reset();
     912:	0e 94 4c 04 	call	0x898	; 0x898 <mcp_2515_reset>
	
	val = mcp_2515_read(MCP_CANSTAT);
     916:	8e e0       	ldi	r24, 0x0E	; 14
     918:	0e 94 5a 04 	call	0x8b4	; 0x8b4 <mcp_2515_read>
	uint8_t mode_bits = (val & MODE_MASK);
     91c:	80 7e       	andi	r24, 0xE0	; 224
	if(mode_bits != MODE_CONFIG){
     91e:	80 38       	cpi	r24, 0x80	; 128
     920:	69 f4       	brne	.+26     	; 0x93c <mcp_2515_init+0x32>
		return 1;
	}
	
	mcp_2515_set_mode(mode);
     922:	8c 2f       	mov	r24, r28
     924:	0e 94 80 04 	call	0x900	; 0x900 <mcp_2515_set_mode>
	
	val = mcp_2515_read(MCP_CANSTAT);
     928:	8e e0       	ldi	r24, 0x0E	; 14
     92a:	0e 94 5a 04 	call	0x8b4	; 0x8b4 <mcp_2515_read>
	mode_bits = (val & MODE_MASK);
     92e:	98 2f       	mov	r25, r24
     930:	90 7e       	andi	r25, 0xE0	; 224
	
	if(mode_bits != mode){
     932:	81 e0       	ldi	r24, 0x01	; 1
     934:	c9 13       	cpse	r28, r25
     936:	03 c0       	rjmp	.+6      	; 0x93e <mcp_2515_init+0x34>
     938:	80 e0       	ldi	r24, 0x00	; 0
     93a:	01 c0       	rjmp	.+2      	; 0x93e <mcp_2515_init+0x34>
	mcp_2515_reset();
	
	val = mcp_2515_read(MCP_CANSTAT);
	uint8_t mode_bits = (val & MODE_MASK);
	if(mode_bits != MODE_CONFIG){
		return 1;
     93c:	81 e0       	ldi	r24, 0x01	; 1
	
	if(mode_bits != mode){
		return 1;
	}
	return 0;
}
     93e:	cf 91       	pop	r28
     940:	08 95       	ret

00000942 <mcp_2515_request_to_send>:
	SPI_write(data);
	
	deactivate_slave();
}

void mcp_2515_request_to_send(char buffer) {
     942:	cf 93       	push	r28
     944:	c8 2f       	mov	r28, r24
	activate_slave();
     946:	0e 94 48 04 	call	0x890	; 0x890 <activate_slave>
	
	SPI_write(buffer);
     94a:	8c 2f       	mov	r24, r28
     94c:	0e 94 1f 0d 	call	0x1a3e	; 0x1a3e <SPI_write>
	
	deactivate_slave();
     950:	0e 94 4a 04 	call	0x894	; 0x894 <deactivate_slave>
}
     954:	cf 91       	pop	r28
     956:	08 95       	ret

00000958 <mcp_2515_bit_modify>:

void mcp_2515_bit_modify(uint8_t adress, uint8_t mask, uint8_t data) {
     958:	1f 93       	push	r17
     95a:	cf 93       	push	r28
     95c:	df 93       	push	r29
     95e:	18 2f       	mov	r17, r24
     960:	d6 2f       	mov	r29, r22
     962:	c4 2f       	mov	r28, r20
	activate_slave();
     964:	0e 94 48 04 	call	0x890	; 0x890 <activate_slave>
	
	SPI_write(MCP_BITMOD);
     968:	85 e0       	ldi	r24, 0x05	; 5
     96a:	0e 94 1f 0d 	call	0x1a3e	; 0x1a3e <SPI_write>
	SPI_write(adress);
     96e:	81 2f       	mov	r24, r17
     970:	0e 94 1f 0d 	call	0x1a3e	; 0x1a3e <SPI_write>
	SPI_write(mask);
     974:	8d 2f       	mov	r24, r29
     976:	0e 94 1f 0d 	call	0x1a3e	; 0x1a3e <SPI_write>
	SPI_write(data);
     97a:	8c 2f       	mov	r24, r28
     97c:	0e 94 1f 0d 	call	0x1a3e	; 0x1a3e <SPI_write>
	
	deactivate_slave();
     980:	0e 94 4a 04 	call	0x894	; 0x894 <deactivate_slave>
}
     984:	df 91       	pop	r29
     986:	cf 91       	pop	r28
     988:	1f 91       	pop	r17
     98a:	08 95       	ret

0000098c <My_serial_Transmit>:
}

void My_serial_Transmit( unsigned char data )
{
	/* Wait for empty transmit buffer */
	while ( !( UCSR0A & (1<<UDRE0)) )
     98c:	5d 9b       	sbis	0x0b, 5	; 11
     98e:	fe cf       	rjmp	.-4      	; 0x98c <My_serial_Transmit>
	;
	/* Put data into buffer, sends the data */
	UDR0 = data;
     990:	8c b9       	out	0x0c, r24	; 12
     992:	08 95       	ret

00000994 <My_serial_Receive>:
}

unsigned char My_serial_Receive( void )
{
	/* Wait for data to be received */
	while ( !(UCSR0A & (1<<RXC0)) );
     994:	5f 9b       	sbis	0x0b, 7	; 11
     996:	fe cf       	rjmp	.-4      	; 0x994 <My_serial_Receive>
	/* Get and return received data from buffer */
	return UDR0;
     998:	8c b1       	in	r24, 0x0c	; 12
     99a:	08 95       	ret

0000099c <My_serial_Init>:
#include "DriverATmega162.h"

void My_serial_Init( unsigned int ubrr )
{
	
	MCUCR |= (1 << SRE);
     99c:	25 b7       	in	r18, 0x35	; 53
     99e:	20 68       	ori	r18, 0x80	; 128
     9a0:	25 bf       	out	0x35, r18	; 53
	SFIOR |= (1 << XMM2);
     9a2:	20 b7       	in	r18, 0x30	; 48
     9a4:	20 62       	ori	r18, 0x20	; 32
     9a6:	20 bf       	out	0x30, r18	; 48
	
	/* Set baud rate */
	UBRR0H = (unsigned char)(ubrr>>8);
     9a8:	90 bd       	out	0x20, r25	; 32
	UBRR0L = (unsigned char)ubrr;
     9aa:	89 b9       	out	0x09, r24	; 9
	/* Enable receiver and transmitter */
	UCSR0B = (1<<RXEN0)|(1<<TXEN0);
     9ac:	88 e1       	ldi	r24, 0x18	; 24
     9ae:	8a b9       	out	0x0a, r24	; 10
	/* Set frame format: 8data, 2stop bit */
	UCSR0C = (1<<URSEL0)|(1<<USBS0)|(3<<UCSZ00);
     9b0:	8e e8       	ldi	r24, 0x8E	; 142
     9b2:	80 bd       	out	0x20, r24	; 32
	
	fdevopen(My_serial_Transmit, My_serial_Receive);
     9b4:	6a ec       	ldi	r22, 0xCA	; 202
     9b6:	74 e0       	ldi	r23, 0x04	; 4
     9b8:	86 ec       	ldi	r24, 0xC6	; 198
     9ba:	94 e0       	ldi	r25, 0x04	; 4
     9bc:	0e 94 d7 0e 	call	0x1dae	; 0x1dae <fdevopen>
     9c0:	08 95       	ret

000009c2 <sendInfo>:
#include "GameInfo.h"
gamevars game = {.enemypoints = 0,.mypoints=0};
can_message newmessage;
int sendinfoFlag =0;

void sendInfo(menu_option lastOption){
     9c2:	ff 92       	push	r15
     9c4:	0f 93       	push	r16
     9c6:	1f 93       	push	r17
     9c8:	cf 93       	push	r28
     9ca:	df 93       	push	r29
     9cc:	cd b7       	in	r28, 0x3d	; 61
     9ce:	de b7       	in	r29, 0x3e	; 62
     9d0:	60 97       	sbiw	r28, 0x10	; 16
     9d2:	0f b6       	in	r0, 0x3f	; 63
     9d4:	f8 94       	cli
     9d6:	de bf       	out	0x3e, r29	; 62
     9d8:	0f be       	out	0x3f, r0	; 63
     9da:	cd bf       	out	0x3d, r28	; 61
     9dc:	18 2f       	mov	r17, r24
	slider_str slider = slider_position();
     9de:	0e 94 f2 0c 	call	0x19e4	; 0x19e4 <slider_position>
     9e2:	f8 2e       	mov	r15, r24
     9e4:	09 2f       	mov	r16, r25
	
	Joystick minJoystick = joystickPos();
     9e6:	0e 94 62 07 	call	0xec4	; 0xec4 <joystickPos>
     9ea:	6d 83       	std	Y+5, r22	; 0x05
	printf("SEND INFO\r\n");
     9ec:	85 e2       	ldi	r24, 0x25	; 37
     9ee:	92 e0       	ldi	r25, 0x02	; 2
     9f0:	0e 94 36 0f 	call	0x1e6c	; 0x1e6c <puts>
	can_message canMessage;
	canMessage.id = 1;
     9f4:	21 e0       	ldi	r18, 0x01	; 1
     9f6:	30 e0       	ldi	r19, 0x00	; 0
     9f8:	3f 83       	std	Y+7, r19	; 0x07
     9fa:	2e 83       	std	Y+6, r18	; 0x06
	canMessage.data[0] = slider.L;
     9fc:	f9 86       	std	Y+9, r15	; 0x09
	canMessage.data[1] = slider.R;
     9fe:	0a 87       	std	Y+10, r16	; 0x0a
	canMessage.data[2] = slider_left_button();
     a00:	0e 94 13 0d 	call	0x1a26	; 0x1a26 <slider_left_button>
     a04:	8b 87       	std	Y+11, r24	; 0x0b
	canMessage.data[3] = slider_right_button();
     a06:	0e 94 0e 0d 	call	0x1a1c	; 0x1a1c <slider_right_button>
     a0a:	8c 87       	std	Y+12, r24	; 0x0c
	canMessage.data[4] = lastOption;
     a0c:	1d 87       	std	Y+13, r17	; 0x0d
	if(minJoystick.Dir == LEFT){
     a0e:	8d 81       	ldd	r24, Y+5	; 0x05
     a10:	81 11       	cpse	r24, r1
     a12:	05 c0       	rjmp	.+10     	; 0xa1e <sendInfo+0x5c>
		canMessage.data[5] = 'R';
     a14:	82 e5       	ldi	r24, 0x52	; 82
     a16:	8e 87       	std	Y+14, r24	; 0x0e
		canMessage.length = 6;
     a18:	86 e0       	ldi	r24, 0x06	; 6
     a1a:	88 87       	std	Y+8, r24	; 0x08
     a1c:	02 c0       	rjmp	.+4      	; 0xa22 <sendInfo+0x60>
	}
	else
	{
		canMessage.length = 5;
     a1e:	85 e0       	ldi	r24, 0x05	; 5
     a20:	88 87       	std	Y+8, r24	; 0x08
	}
	can_message_send(&canMessage);
     a22:	ce 01       	movw	r24, r28
     a24:	06 96       	adiw	r24, 0x06	; 6
     a26:	0e 94 1e 03 	call	0x63c	; 0x63c <can_message_send>
	
}
     a2a:	60 96       	adiw	r28, 0x10	; 16
     a2c:	0f b6       	in	r0, 0x3f	; 63
     a2e:	f8 94       	cli
     a30:	de bf       	out	0x3e, r29	; 62
     a32:	0f be       	out	0x3f, r0	; 63
     a34:	cd bf       	out	0x3d, r28	; 61
     a36:	df 91       	pop	r29
     a38:	cf 91       	pop	r28
     a3a:	1f 91       	pop	r17
     a3c:	0f 91       	pop	r16
     a3e:	ff 90       	pop	r15
     a40:	08 95       	ret

00000a42 <sendReset>:
void sendReset(){
     a42:	cf 93       	push	r28
     a44:	df 93       	push	r29
     a46:	cd b7       	in	r28, 0x3d	; 61
     a48:	de b7       	in	r29, 0x3e	; 62
     a4a:	2b 97       	sbiw	r28, 0x0b	; 11
     a4c:	0f b6       	in	r0, 0x3f	; 63
     a4e:	f8 94       	cli
     a50:	de bf       	out	0x3e, r29	; 62
     a52:	0f be       	out	0x3f, r0	; 63
     a54:	cd bf       	out	0x3d, r28	; 61
	can_message canMessage;
	canMessage.id = 2;
     a56:	82 e0       	ldi	r24, 0x02	; 2
     a58:	90 e0       	ldi	r25, 0x00	; 0
     a5a:	9a 83       	std	Y+2, r25	; 0x02
     a5c:	89 83       	std	Y+1, r24	; 0x01
	canMessage.data[0] = 1;
     a5e:	81 e0       	ldi	r24, 0x01	; 1
     a60:	8c 83       	std	Y+4, r24	; 0x04
	canMessage.length = 1;
     a62:	8b 83       	std	Y+3, r24	; 0x03
	can_message_send(&canMessage);
     a64:	ce 01       	movw	r24, r28
     a66:	01 96       	adiw	r24, 0x01	; 1
     a68:	0e 94 1e 03 	call	0x63c	; 0x63c <can_message_send>
}
     a6c:	2b 96       	adiw	r28, 0x0b	; 11
     a6e:	0f b6       	in	r0, 0x3f	; 63
     a70:	f8 94       	cli
     a72:	de bf       	out	0x3e, r29	; 62
     a74:	0f be       	out	0x3f, r0	; 63
     a76:	cd bf       	out	0x3d, r28	; 61
     a78:	df 91       	pop	r29
     a7a:	cf 91       	pop	r28
     a7c:	08 95       	ret

00000a7e <sendDificulty>:
void sendDificulty(menu_option diff){
     a7e:	cf 93       	push	r28
     a80:	df 93       	push	r29
     a82:	cd b7       	in	r28, 0x3d	; 61
     a84:	de b7       	in	r29, 0x3e	; 62
     a86:	2b 97       	sbiw	r28, 0x0b	; 11
     a88:	0f b6       	in	r0, 0x3f	; 63
     a8a:	f8 94       	cli
     a8c:	de bf       	out	0x3e, r29	; 62
     a8e:	0f be       	out	0x3f, r0	; 63
     a90:	cd bf       	out	0x3d, r28	; 61
	can_message canMessage;
	canMessage.id = 3;
     a92:	23 e0       	ldi	r18, 0x03	; 3
     a94:	30 e0       	ldi	r19, 0x00	; 0
     a96:	3a 83       	std	Y+2, r19	; 0x02
     a98:	29 83       	std	Y+1, r18	; 0x01
	if(diff == Easy){
     a9a:	87 30       	cpi	r24, 0x07	; 7
     a9c:	11 f4       	brne	.+4      	; 0xaa2 <sendDificulty+0x24>
		canMessage.data[0] = 0;
     a9e:	1c 82       	std	Y+4, r1	; 0x04
     aa0:	07 c0       	rjmp	.+14     	; 0xab0 <sendDificulty+0x32>
	}
	else if (diff == Medium){
     aa2:	88 30       	cpi	r24, 0x08	; 8
     aa4:	19 f4       	brne	.+6      	; 0xaac <sendDificulty+0x2e>
		canMessage.data[0] = 1;
     aa6:	81 e0       	ldi	r24, 0x01	; 1
     aa8:	8c 83       	std	Y+4, r24	; 0x04
     aaa:	02 c0       	rjmp	.+4      	; 0xab0 <sendDificulty+0x32>
	}
	else{
		canMessage.data[0] = 2;
     aac:	82 e0       	ldi	r24, 0x02	; 2
     aae:	8c 83       	std	Y+4, r24	; 0x04
	}
	canMessage.length = 1;
     ab0:	81 e0       	ldi	r24, 0x01	; 1
     ab2:	8b 83       	std	Y+3, r24	; 0x03
	can_message_send(&canMessage);
     ab4:	ce 01       	movw	r24, r28
     ab6:	01 96       	adiw	r24, 0x01	; 1
     ab8:	0e 94 1e 03 	call	0x63c	; 0x63c <can_message_send>
}
     abc:	2b 96       	adiw	r28, 0x0b	; 11
     abe:	0f b6       	in	r0, 0x3f	; 63
     ac0:	f8 94       	cli
     ac2:	de bf       	out	0x3e, r29	; 62
     ac4:	0f be       	out	0x3f, r0	; 63
     ac6:	cd bf       	out	0x3d, r28	; 61
     ac8:	df 91       	pop	r29
     aca:	cf 91       	pop	r28
     acc:	08 95       	ret

00000ace <getInfo>:
gamevars getInfo(){
     ace:	cf 93       	push	r28
     ad0:	df 93       	push	r29
     ad2:	cd b7       	in	r28, 0x3d	; 61
     ad4:	de b7       	in	r29, 0x3e	; 62
     ad6:	2b 97       	sbiw	r28, 0x0b	; 11
     ad8:	0f b6       	in	r0, 0x3f	; 63
     ada:	f8 94       	cli
     adc:	de bf       	out	0x3e, r29	; 62
     ade:	0f be       	out	0x3f, r0	; 63
     ae0:	cd bf       	out	0x3d, r28	; 61
	if(can_interrupt()){
     ae2:	0e 94 f6 02 	call	0x5ec	; 0x5ec <can_interrupt>
     ae6:	88 23       	and	r24, r24
     ae8:	d9 f0       	breq	.+54     	; 0xb20 <getInfo+0x52>
		newmessage = can_handle_messages();
     aea:	ce 01       	movw	r24, r28
     aec:	01 96       	adiw	r24, 0x01	; 1
     aee:	0e 94 d1 03 	call	0x7a2	; 0x7a2 <can_handle_messages>
     af2:	8b e0       	ldi	r24, 0x0B	; 11
     af4:	fe 01       	movw	r30, r28
     af6:	31 96       	adiw	r30, 0x01	; 1
     af8:	a0 ed       	ldi	r26, 0xD0	; 208
     afa:	b3 e0       	ldi	r27, 0x03	; 3
     afc:	01 90       	ld	r0, Z+
     afe:	0d 92       	st	X+, r0
     b00:	8a 95       	dec	r24
     b02:	e1 f7       	brne	.-8      	; 0xafc <getInfo+0x2e>
		game.enemypoints = newmessage.data[0];
     b04:	80 91 d3 03 	lds	r24, 0x03D3
     b08:	90 e0       	ldi	r25, 0x00	; 0
     b0a:	90 93 ab 03 	sts	0x03AB, r25
     b0e:	80 93 aa 03 	sts	0x03AA, r24
		game.mypoints = newmessage.data[1];
     b12:	80 91 d4 03 	lds	r24, 0x03D4
     b16:	90 e0       	ldi	r25, 0x00	; 0
     b18:	90 93 a9 03 	sts	0x03A9, r25
     b1c:	80 93 a8 03 	sts	0x03A8, r24
		//printf("MY POINTS    %d \r\n",game.mypoints);
		//printf("ENEMYPOINTS    %d  ",game.enemypoints);
		}
		
	
	return game;
     b20:	60 91 a8 03 	lds	r22, 0x03A8
     b24:	70 91 a9 03 	lds	r23, 0x03A9
     b28:	80 91 aa 03 	lds	r24, 0x03AA
     b2c:	90 91 ab 03 	lds	r25, 0x03AB
     b30:	2b 96       	adiw	r28, 0x0b	; 11
     b32:	0f b6       	in	r0, 0x3f	; 63
     b34:	f8 94       	cli
     b36:	de bf       	out	0x3e, r29	; 62
     b38:	0f be       	out	0x3f, r0	; 63
     b3a:	cd bf       	out	0x3d, r28	; 61
     b3c:	df 91       	pop	r29
     b3e:	cf 91       	pop	r28
     b40:	08 95       	ret

00000b42 <gethighscore>:
char newname[5] = "";
int havehighscore = 0;
void initHighscore(){
		sethighscore("12300");
}
char* gethighscore(){
     b42:	ef 92       	push	r14
     b44:	ff 92       	push	r15
     b46:	0f 93       	push	r16
     b48:	1f 93       	push	r17
     b4a:	cf 93       	push	r28
     b4c:	df 93       	push	r29
     b4e:	00 d0       	rcall	.+0      	; 0xb50 <gethighscore+0xe>
     b50:	00 d0       	rcall	.+0      	; 0xb52 <gethighscore+0x10>
     b52:	1f 92       	push	r1
     b54:	cd b7       	in	r28, 0x3d	; 61
     b56:	de b7       	in	r29, 0x3e	; 62
	if(!havehighscore){
     b58:	80 91 ac 03 	lds	r24, 0x03AC
     b5c:	90 91 ad 03 	lds	r25, 0x03AD
     b60:	89 2b       	or	r24, r25
     b62:	89 f0       	breq	.+34     	; 0xb86 <gethighscore+0x44>
     b64:	ce 01       	movw	r24, r28
     b66:	01 96       	adiw	r24, 0x01	; 1
     b68:	7c 01       	movw	r14, r24
     b6a:	03 e0       	ldi	r16, 0x03	; 3
     b6c:	10 e0       	ldi	r17, 0x00	; 0
		return "NOSCORE";
	}
	char hold[5];
	for(int i = 3 ; i < 8 ; i++){
		hold[i-3] = SRAM_read(i);
     b6e:	c8 01       	movw	r24, r16
     b70:	0e 94 39 0d 	call	0x1a72	; 0x1a72 <SRAM_read>
     b74:	f7 01       	movw	r30, r14
     b76:	81 93       	st	Z+, r24
     b78:	7f 01       	movw	r14, r30
char* gethighscore(){
	if(!havehighscore){
		return "NOSCORE";
	}
	char hold[5];
	for(int i = 3 ; i < 8 ; i++){
     b7a:	0f 5f       	subi	r16, 0xFF	; 255
     b7c:	1f 4f       	sbci	r17, 0xFF	; 255
     b7e:	08 30       	cpi	r16, 0x08	; 8
     b80:	11 05       	cpc	r17, r1
     b82:	a9 f7       	brne	.-22     	; 0xb6e <gethighscore+0x2c>
     b84:	03 c0       	rjmp	.+6      	; 0xb8c <gethighscore+0x4a>
void initHighscore(){
		sethighscore("12300");
}
char* gethighscore(){
	if(!havehighscore){
		return "NOSCORE";
     b86:	80 e3       	ldi	r24, 0x30	; 48
     b88:	92 e0       	ldi	r25, 0x02	; 2
     b8a:	02 c0       	rjmp	.+4      	; 0xb90 <gethighscore+0x4e>
	}
	char hold[5];
	for(int i = 3 ; i < 8 ; i++){
		hold[i-3] = SRAM_read(i);
	}
	return hold;
     b8c:	ce 01       	movw	r24, r28
     b8e:	01 96       	adiw	r24, 0x01	; 1
}
     b90:	0f 90       	pop	r0
     b92:	0f 90       	pop	r0
     b94:	0f 90       	pop	r0
     b96:	0f 90       	pop	r0
     b98:	0f 90       	pop	r0
     b9a:	df 91       	pop	r29
     b9c:	cf 91       	pop	r28
     b9e:	1f 91       	pop	r17
     ba0:	0f 91       	pop	r16
     ba2:	ff 90       	pop	r15
     ba4:	ef 90       	pop	r14
     ba6:	08 95       	ret

00000ba8 <sethighscore>:
void sethighscore(char* array){
     ba8:	0f 93       	push	r16
     baa:	1f 93       	push	r17
     bac:	cf 93       	push	r28
     bae:	df 93       	push	r29
	havehighscore = 1;
     bb0:	21 e0       	ldi	r18, 0x01	; 1
     bb2:	30 e0       	ldi	r19, 0x00	; 0
     bb4:	30 93 ad 03 	sts	0x03AD, r19
     bb8:	20 93 ac 03 	sts	0x03AC, r18
     bbc:	8c 01       	movw	r16, r24
	for(int i = 3; i < 8 ; i++){
     bbe:	c3 e0       	ldi	r28, 0x03	; 3
     bc0:	d0 e0       	ldi	r29, 0x00	; 0
		SRAM_write(i,array[i-3]);
     bc2:	f8 01       	movw	r30, r16
     bc4:	61 91       	ld	r22, Z+
     bc6:	8f 01       	movw	r16, r30
     bc8:	ce 01       	movw	r24, r28
     bca:	0e 94 28 0d 	call	0x1a50	; 0x1a50 <SRAM_write>
	}
	return hold;
}
void sethighscore(char* array){
	havehighscore = 1;
	for(int i = 3; i < 8 ; i++){
     bce:	21 96       	adiw	r28, 0x01	; 1
     bd0:	c8 30       	cpi	r28, 0x08	; 8
     bd2:	d1 05       	cpc	r29, r1
     bd4:	b1 f7       	brne	.-20     	; 0xbc2 <sethighscore+0x1a>
		SRAM_write(i,array[i-3]);
	}
}
     bd6:	df 91       	pop	r29
     bd8:	cf 91       	pop	r28
     bda:	1f 91       	pop	r17
     bdc:	0f 91       	pop	r16
     bde:	08 95       	ret

00000be0 <initHighscore>:
int chosenLetters = 0;
int sliderbuttonhold = 0;
char newname[5] = "";
int havehighscore = 0;
void initHighscore(){
		sethighscore("12300");
     be0:	88 e3       	ldi	r24, 0x38	; 56
     be2:	92 e0       	ldi	r25, 0x02	; 2
     be4:	0e 94 d4 05 	call	0xba8	; 0xba8 <sethighscore>
     be8:	08 95       	ret

00000bea <score>:
	for(int i = 3; i < 8 ; i++){
		SRAM_write(i,array[i-3]);
	}
}

int score(char*array){
     bea:	fc 01       	movw	r30, r24
	int num = (int)array[3]-48;
     bec:	23 81       	ldd	r18, Z+3	; 0x03
     bee:	30 e0       	ldi	r19, 0x00	; 0
     bf0:	20 53       	subi	r18, 0x30	; 48
     bf2:	31 09       	sbc	r19, r1
	num *= 10;
     bf4:	c9 01       	movw	r24, r18
     bf6:	88 0f       	add	r24, r24
     bf8:	99 1f       	adc	r25, r25
     bfa:	22 0f       	add	r18, r18
     bfc:	33 1f       	adc	r19, r19
     bfe:	22 0f       	add	r18, r18
     c00:	33 1f       	adc	r19, r19
     c02:	22 0f       	add	r18, r18
     c04:	33 1f       	adc	r19, r19
     c06:	28 0f       	add	r18, r24
     c08:	39 1f       	adc	r19, r25
	num += (int)array[4]-48;
     c0a:	84 81       	ldd	r24, Z+4	; 0x04
     c0c:	90 e0       	ldi	r25, 0x00	; 0
     c0e:	c0 97       	sbiw	r24, 0x30	; 48
	return num;
}
     c10:	82 0f       	add	r24, r18
     c12:	93 1f       	adc	r25, r19
     c14:	08 95       	ret

00000c16 <Chosename>:

long maplols(long x, long in_min, long in_max, long out_min, long out_max)
{
	return (x - in_min) * (out_max - out_min) / (in_max - in_min) + out_min;
}
char* Chosename(){
     c16:	4f 92       	push	r4
     c18:	5f 92       	push	r5
     c1a:	6f 92       	push	r6
     c1c:	7f 92       	push	r7
     c1e:	8f 92       	push	r8
     c20:	9f 92       	push	r9
     c22:	af 92       	push	r10
     c24:	bf 92       	push	r11
     c26:	cf 92       	push	r12
     c28:	df 92       	push	r13
     c2a:	ef 92       	push	r14
     c2c:	ff 92       	push	r15
     c2e:	0f 93       	push	r16
     c30:	1f 93       	push	r17
     c32:	cf 93       	push	r28
     c34:	df 93       	push	r29
	while(chosenLetters < 3){
     c36:	80 91 b5 03 	lds	r24, 0x03B5
     c3a:	90 91 b6 03 	lds	r25, 0x03B6
     c3e:	03 97       	sbiw	r24, 0x03	; 3
     c40:	0c f0       	brlt	.+2      	; 0xc44 <Chosename+0x2e>
     c42:	cc c0       	rjmp	.+408    	; 0xddc <Chosename+0x1c6>
	return num;
}

long maplols(long x, long in_min, long in_max, long out_min, long out_max)
{
	return (x - in_min) * (out_max - out_min) / (in_max - in_min) + out_min;
     c44:	81 2c       	mov	r8, r1
     c46:	91 2c       	mov	r9, r1
     c48:	54 01       	movw	r10, r8
     c4a:	8a 94       	dec	r8
		slider = slider_position().R;
		letter = maplols(slider,0,255,65,90);
		newname[chosenLetters] = (char)letter;
		if(lastletter != letter){
			oled_reset();
			oled_printf("New highscore!");
     c4c:	0f 2e       	mov	r0, r31
     c4e:	fe e3       	ldi	r31, 0x3E	; 62
     c50:	cf 2e       	mov	r12, r31
     c52:	f2 e0       	ldi	r31, 0x02	; 2
     c54:	df 2e       	mov	r13, r31
     c56:	f0 2d       	mov	r31, r0
			oled_pos(1,0);
			oled_printf("Select your name");
     c58:	0f 2e       	mov	r0, r31
     c5a:	fd e4       	ldi	r31, 0x4D	; 77
     c5c:	ef 2e       	mov	r14, r31
     c5e:	f2 e0       	ldi	r31, 0x02	; 2
     c60:	ff 2e       	mov	r15, r31
     c62:	f0 2d       	mov	r31, r0
			oled_pos(2,0);
			oled_printf("with slider:");
     c64:	0e e5       	ldi	r16, 0x5E	; 94
     c66:	12 e0       	ldi	r17, 0x02	; 2
			oled_pos(3,0);
			oled_printf(newname);
     c68:	ce ea       	ldi	r28, 0xAE	; 174
     c6a:	d3 e0       	ldi	r29, 0x03	; 3
{
	return (x - in_min) * (out_max - out_min) / (in_max - in_min) + out_min;
}
char* Chosename(){
	while(chosenLetters < 3){
		slider = slider_position().R;
     c6c:	0e 94 f2 0c 	call	0x19e4	; 0x19e4 <slider_position>
     c70:	89 2f       	mov	r24, r25
     c72:	90 e0       	ldi	r25, 0x00	; 0
     c74:	a0 e0       	ldi	r26, 0x00	; 0
     c76:	b0 e0       	ldi	r27, 0x00	; 0
     c78:	80 93 bb 03 	sts	0x03BB, r24
     c7c:	90 93 bc 03 	sts	0x03BC, r25
     c80:	a0 93 bd 03 	sts	0x03BD, r26
     c84:	b0 93 be 03 	sts	0x03BE, r27
	return num;
}

long maplols(long x, long in_min, long in_max, long out_min, long out_max)
{
	return (x - in_min) * (out_max - out_min) / (in_max - in_min) + out_min;
     c88:	ac 01       	movw	r20, r24
     c8a:	bd 01       	movw	r22, r26
     c8c:	44 0f       	add	r20, r20
     c8e:	55 1f       	adc	r21, r21
     c90:	66 1f       	adc	r22, r22
     c92:	77 1f       	adc	r23, r23
     c94:	44 0f       	add	r20, r20
     c96:	55 1f       	adc	r21, r21
     c98:	66 1f       	adc	r22, r22
     c9a:	77 1f       	adc	r23, r23
     c9c:	84 0f       	add	r24, r20
     c9e:	95 1f       	adc	r25, r21
     ca0:	a6 1f       	adc	r26, r22
     ca2:	b7 1f       	adc	r27, r23
     ca4:	ac 01       	movw	r20, r24
     ca6:	bd 01       	movw	r22, r26
     ca8:	44 0f       	add	r20, r20
     caa:	55 1f       	adc	r21, r21
     cac:	66 1f       	adc	r22, r22
     cae:	77 1f       	adc	r23, r23
     cb0:	44 0f       	add	r20, r20
     cb2:	55 1f       	adc	r21, r21
     cb4:	66 1f       	adc	r22, r22
     cb6:	77 1f       	adc	r23, r23
     cb8:	2c 01       	movw	r4, r24
     cba:	3d 01       	movw	r6, r26
     cbc:	44 0e       	add	r4, r20
     cbe:	55 1e       	adc	r5, r21
     cc0:	66 1e       	adc	r6, r22
     cc2:	77 1e       	adc	r7, r23
     cc4:	c3 01       	movw	r24, r6
     cc6:	b2 01       	movw	r22, r4
     cc8:	a5 01       	movw	r20, r10
     cca:	94 01       	movw	r18, r8
     ccc:	0e 94 5b 0d 	call	0x1ab6	; 0x1ab6 <__divmodsi4>
     cd0:	ba 01       	movw	r22, r20
     cd2:	a9 01       	movw	r20, r18
     cd4:	4f 5b       	subi	r20, 0xBF	; 191
     cd6:	5f 4f       	sbci	r21, 0xFF	; 255
     cd8:	6f 4f       	sbci	r22, 0xFF	; 255
     cda:	7f 4f       	sbci	r23, 0xFF	; 255
}
char* Chosename(){
	while(chosenLetters < 3){
		slider = slider_position().R;
		letter = maplols(slider,0,255,65,90);
     cdc:	40 93 b7 03 	sts	0x03B7, r20
     ce0:	50 93 b8 03 	sts	0x03B8, r21
     ce4:	60 93 b9 03 	sts	0x03B9, r22
     ce8:	70 93 ba 03 	sts	0x03BA, r23
		newname[chosenLetters] = (char)letter;
     cec:	e0 91 b5 03 	lds	r30, 0x03B5
     cf0:	f0 91 b6 03 	lds	r31, 0x03B6
     cf4:	e2 55       	subi	r30, 0x52	; 82
     cf6:	fc 4f       	sbci	r31, 0xFC	; 252
     cf8:	40 83       	st	Z, r20
		if(lastletter != letter){
     cfa:	80 91 08 01 	lds	r24, 0x0108
     cfe:	90 91 09 01 	lds	r25, 0x0109
     d02:	a0 91 0a 01 	lds	r26, 0x010A
     d06:	b0 91 0b 01 	lds	r27, 0x010B
     d0a:	84 17       	cp	r24, r20
     d0c:	95 07       	cpc	r25, r21
     d0e:	a6 07       	cpc	r26, r22
     d10:	b7 07       	cpc	r27, r23
     d12:	61 f1       	breq	.+88     	; 0xd6c <Chosename+0x156>
			oled_reset();
     d14:	0e 94 70 0a 	call	0x14e0	; 0x14e0 <oled_reset>
			oled_printf("New highscore!");
     d18:	df 92       	push	r13
     d1a:	cf 92       	push	r12
     d1c:	0e 94 d9 09 	call	0x13b2	; 0x13b2 <oled_printf>
			oled_pos(1,0);
     d20:	60 e0       	ldi	r22, 0x00	; 0
     d22:	70 e0       	ldi	r23, 0x00	; 0
     d24:	81 e0       	ldi	r24, 0x01	; 1
     d26:	90 e0       	ldi	r25, 0x00	; 0
     d28:	0e 94 45 0a 	call	0x148a	; 0x148a <oled_pos>
			oled_printf("Select your name");
     d2c:	ff 92       	push	r15
     d2e:	ef 92       	push	r14
     d30:	0e 94 d9 09 	call	0x13b2	; 0x13b2 <oled_printf>
			oled_pos(2,0);
     d34:	60 e0       	ldi	r22, 0x00	; 0
     d36:	70 e0       	ldi	r23, 0x00	; 0
     d38:	82 e0       	ldi	r24, 0x02	; 2
     d3a:	90 e0       	ldi	r25, 0x00	; 0
     d3c:	0e 94 45 0a 	call	0x148a	; 0x148a <oled_pos>
			oled_printf("with slider:");
     d40:	1f 93       	push	r17
     d42:	0f 93       	push	r16
     d44:	0e 94 d9 09 	call	0x13b2	; 0x13b2 <oled_printf>
			oled_pos(3,0);
     d48:	60 e0       	ldi	r22, 0x00	; 0
     d4a:	70 e0       	ldi	r23, 0x00	; 0
     d4c:	83 e0       	ldi	r24, 0x03	; 3
     d4e:	90 e0       	ldi	r25, 0x00	; 0
     d50:	0e 94 45 0a 	call	0x148a	; 0x148a <oled_pos>
			oled_printf(newname);
     d54:	df 93       	push	r29
     d56:	cf 93       	push	r28
     d58:	0e 94 d9 09 	call	0x13b2	; 0x13b2 <oled_printf>
     d5c:	8d b7       	in	r24, 0x3d	; 61
     d5e:	9e b7       	in	r25, 0x3e	; 62
     d60:	08 96       	adiw	r24, 0x08	; 8
     d62:	0f b6       	in	r0, 0x3f	; 63
     d64:	f8 94       	cli
     d66:	9e bf       	out	0x3e, r25	; 62
     d68:	0f be       	out	0x3f, r0	; 63
     d6a:	8d bf       	out	0x3d, r24	; 61
		}
		lastletter = letter;
     d6c:	80 91 b7 03 	lds	r24, 0x03B7
     d70:	90 91 b8 03 	lds	r25, 0x03B8
     d74:	a0 91 b9 03 	lds	r26, 0x03B9
     d78:	b0 91 ba 03 	lds	r27, 0x03BA
     d7c:	80 93 08 01 	sts	0x0108, r24
     d80:	90 93 09 01 	sts	0x0109, r25
     d84:	a0 93 0a 01 	sts	0x010A, r26
     d88:	b0 93 0b 01 	sts	0x010B, r27
		int sliderbutton = 0;
		if(slider_left_button() > 0){
     d8c:	0e 94 13 0d 	call	0x1a26	; 0x1a26 <slider_left_button>
     d90:	31 e0       	ldi	r19, 0x01	; 1
     d92:	20 e0       	ldi	r18, 0x00	; 0
     d94:	18 16       	cp	r1, r24
     d96:	19 06       	cpc	r1, r25
     d98:	0c f0       	brlt	.+2      	; 0xd9c <Chosename+0x186>
     d9a:	30 e0       	ldi	r19, 0x00	; 0
			oled_printf("with slider:");
			oled_pos(3,0);
			oled_printf(newname);
		}
		lastletter = letter;
		int sliderbutton = 0;
     d9c:	83 2f       	mov	r24, r19
     d9e:	92 2f       	mov	r25, r18
		if(slider_left_button() > 0){
			sliderbutton = 1;
		}
		if(sliderbutton && sliderbutton != sliderbuttonhold){
     da0:	00 97       	sbiw	r24, 0x00	; 0
     da2:	89 f0       	breq	.+34     	; 0xdc6 <Chosename+0x1b0>
     da4:	20 91 b3 03 	lds	r18, 0x03B3
     da8:	30 91 b4 03 	lds	r19, 0x03B4
     dac:	28 17       	cp	r18, r24
     dae:	39 07       	cpc	r19, r25
     db0:	51 f0       	breq	.+20     	; 0xdc6 <Chosename+0x1b0>
			chosenLetters = chosenLetters + 1;
     db2:	20 91 b5 03 	lds	r18, 0x03B5
     db6:	30 91 b6 03 	lds	r19, 0x03B6
     dba:	2f 5f       	subi	r18, 0xFF	; 255
     dbc:	3f 4f       	sbci	r19, 0xFF	; 255
     dbe:	30 93 b6 03 	sts	0x03B6, r19
     dc2:	20 93 b5 03 	sts	0x03B5, r18
		}
		sliderbuttonhold = sliderbutton;
     dc6:	90 93 b4 03 	sts	0x03B4, r25
     dca:	80 93 b3 03 	sts	0x03B3, r24
long maplols(long x, long in_min, long in_max, long out_min, long out_max)
{
	return (x - in_min) * (out_max - out_min) / (in_max - in_min) + out_min;
}
char* Chosename(){
	while(chosenLetters < 3){
     dce:	80 91 b5 03 	lds	r24, 0x03B5
     dd2:	90 91 b6 03 	lds	r25, 0x03B6
     dd6:	03 97       	sbiw	r24, 0x03	; 3
     dd8:	0c f4       	brge	.+2      	; 0xddc <Chosename+0x1c6>
     dda:	48 cf       	rjmp	.-368    	; 0xc6c <Chosename+0x56>
		if(sliderbutton && sliderbutton != sliderbuttonhold){
			chosenLetters = chosenLetters + 1;
		}
		sliderbuttonhold = sliderbutton;
	}
	chosenLetters = 0;
     ddc:	10 92 b6 03 	sts	0x03B6, r1
     de0:	10 92 b5 03 	sts	0x03B5, r1
	return newname;
     de4:	8e ea       	ldi	r24, 0xAE	; 174
     de6:	93 e0       	ldi	r25, 0x03	; 3
     de8:	df 91       	pop	r29
     dea:	cf 91       	pop	r28
     dec:	1f 91       	pop	r17
     dee:	0f 91       	pop	r16
     df0:	ff 90       	pop	r15
     df2:	ef 90       	pop	r14
     df4:	df 90       	pop	r13
     df6:	cf 90       	pop	r12
     df8:	bf 90       	pop	r11
     dfa:	af 90       	pop	r10
     dfc:	9f 90       	pop	r9
     dfe:	8f 90       	pop	r8
     e00:	7f 90       	pop	r7
     e02:	6f 90       	pop	r6
     e04:	5f 90       	pop	r5
     e06:	4f 90       	pop	r4
     e08:	08 95       	ret

00000e0a <Joystick_calibrate>:

uint8_t center_x , center_y;

void Joystick_calibrate(void){
	
	ADC_start_read(CHANNEL1);
     e0a:	80 e0       	ldi	r24, 0x00	; 0
     e0c:	0e 94 fe 01 	call	0x3fc	; 0x3fc <ADC_start_read>
	#else
		//round up by default
		__ticks_dc = (uint32_t)(ceil(fabs(__tmp)));
	#endif

	__builtin_avr_delay_cycles(__ticks_dc);
     e10:	82 e4       	ldi	r24, 0x42	; 66
     e12:	8a 95       	dec	r24
     e14:	f1 f7       	brne	.-4      	; 0xe12 <Joystick_calibrate+0x8>
     e16:	00 c0       	rjmp	.+0      	; 0xe18 <Joystick_calibrate+0xe>
	_delay_us(200);
	center_x = get_ADC_data();
     e18:	0e 94 f8 01 	call	0x3f0	; 0x3f0 <get_ADC_data>
     e1c:	80 93 db 03 	sts	0x03DB, r24
	ADC_start_read(CHANNEL2);
     e20:	81 e0       	ldi	r24, 0x01	; 1
     e22:	0e 94 fe 01 	call	0x3fc	; 0x3fc <ADC_start_read>
     e26:	82 e4       	ldi	r24, 0x42	; 66
     e28:	8a 95       	dec	r24
     e2a:	f1 f7       	brne	.-4      	; 0xe28 <Joystick_calibrate+0x1e>
     e2c:	00 c0       	rjmp	.+0      	; 0xe2e <Joystick_calibrate+0x24>
	_delay_us(200);
	center_y = get_ADC_data();
     e2e:	0e 94 f8 01 	call	0x3f0	; 0x3f0 <get_ADC_data>
     e32:	80 93 dc 03 	sts	0x03DC, r24
     e36:	08 95       	ret

00000e38 <JoystickDirection>:
	return position; 
	
	
}

Joystick JoystickDirection(Joystick position){
     e38:	cf 93       	push	r28
     e3a:	df 93       	push	r29
     e3c:	cd b7       	in	r28, 0x3d	; 61
     e3e:	de b7       	in	r29, 0x3e	; 62
     e40:	2a 97       	sbiw	r28, 0x0a	; 10
     e42:	0f b6       	in	r0, 0x3f	; 63
     e44:	f8 94       	cli
     e46:	de bf       	out	0x3e, r29	; 62
     e48:	0f be       	out	0x3f, r0	; 63
     e4a:	cd bf       	out	0x3d, r28	; 61
     e4c:	4e 83       	std	Y+6, r20	; 0x06
     e4e:	5f 83       	std	Y+7, r21	; 0x07
     e50:	68 87       	std	Y+8, r22	; 0x08
     e52:	79 87       	std	Y+9, r23	; 0x09
     e54:	8e 81       	ldd	r24, Y+6	; 0x06
     e56:	9f 81       	ldd	r25, Y+7	; 0x07
     e58:	28 85       	ldd	r18, Y+8	; 0x08
     e5a:	39 85       	ldd	r19, Y+9	; 0x09
	position.Dir = NEUTRAL;
	if(position.xPos < -60 ){
     e5c:	84 3c       	cpi	r24, 0xC4	; 196
     e5e:	4f ef       	ldi	r20, 0xFF	; 255
     e60:	94 07       	cpc	r25, r20
     e62:	2c f0       	brlt	.+10     	; 0xe6e <JoystickDirection+0x36>
		position.Dir = LEFT; 
	} else if (position.xPos > 50 ){
     e64:	83 33       	cpi	r24, 0x33	; 51
     e66:	91 05       	cpc	r25, r1
     e68:	24 f4       	brge	.+8      	; 0xe72 <JoystickDirection+0x3a>
	
	
}

Joystick JoystickDirection(Joystick position){
	position.Dir = NEUTRAL;
     e6a:	64 e0       	ldi	r22, 0x04	; 4
     e6c:	03 c0       	rjmp	.+6      	; 0xe74 <JoystickDirection+0x3c>
	if(position.xPos < -60 ){
		position.Dir = LEFT; 
     e6e:	60 e0       	ldi	r22, 0x00	; 0
     e70:	01 c0       	rjmp	.+2      	; 0xe74 <JoystickDirection+0x3c>
	} else if (position.xPos > 50 ){
		position.Dir = RIGHT;
     e72:	61 e0       	ldi	r22, 0x01	; 1
	}
	if(position.yPos < -50){
     e74:	2e 3c       	cpi	r18, 0xCE	; 206
     e76:	4f ef       	ldi	r20, 0xFF	; 255
     e78:	34 07       	cpc	r19, r20
     e7a:	24 f0       	brlt	.+8      	; 0xe84 <JoystickDirection+0x4c>
		position.Dir = DOWN; 
	} else if (position.yPos > 50){
     e7c:	23 33       	cpi	r18, 0x33	; 51
     e7e:	31 05       	cpc	r19, r1
     e80:	1c f4       	brge	.+6      	; 0xe88 <JoystickDirection+0x50>
     e82:	03 c0       	rjmp	.+6      	; 0xe8a <JoystickDirection+0x52>
		position.Dir = LEFT; 
	} else if (position.xPos > 50 ){
		position.Dir = RIGHT;
	}
	if(position.yPos < -50){
		position.Dir = DOWN; 
     e84:	63 e0       	ldi	r22, 0x03	; 3
     e86:	01 c0       	rjmp	.+2      	; 0xe8a <JoystickDirection+0x52>
	} else if (position.yPos > 50){
		position.Dir = UP; 
     e88:	62 e0       	ldi	r22, 0x02	; 2
	}
	if(position.xPos == 0 && position.yPos == 0){
     e8a:	00 97       	sbiw	r24, 0x00	; 0
     e8c:	21 f4       	brne	.+8      	; 0xe96 <JoystickDirection+0x5e>
     e8e:	21 15       	cp	r18, r1
     e90:	31 05       	cpc	r19, r1
     e92:	09 f4       	brne	.+2      	; 0xe96 <JoystickDirection+0x5e>
		position.Dir = NEUTRAL; 
     e94:	64 e0       	ldi	r22, 0x04	; 4
	}
	if(position.Dir > 4){
		position.Dir = 4;
	}
	
	return position;
     e96:	9a 83       	std	Y+2, r25	; 0x02
     e98:	89 83       	std	Y+1, r24	; 0x01
     e9a:	3c 83       	std	Y+4, r19	; 0x04
     e9c:	2b 83       	std	Y+3, r18	; 0x03
     e9e:	65 30       	cpi	r22, 0x05	; 5
     ea0:	08 f0       	brcs	.+2      	; 0xea4 <JoystickDirection+0x6c>
     ea2:	64 e0       	ldi	r22, 0x04	; 4
     ea4:	29 81       	ldd	r18, Y+1	; 0x01
     ea6:	3a 81       	ldd	r19, Y+2	; 0x02
     ea8:	4b 81       	ldd	r20, Y+3	; 0x03
     eaa:	5c 81       	ldd	r21, Y+4	; 0x04
}
     eac:	70 e0       	ldi	r23, 0x00	; 0
     eae:	80 e0       	ldi	r24, 0x00	; 0
     eb0:	90 e0       	ldi	r25, 0x00	; 0
     eb2:	2a 96       	adiw	r28, 0x0a	; 10
     eb4:	0f b6       	in	r0, 0x3f	; 63
     eb6:	f8 94       	cli
     eb8:	de bf       	out	0x3e, r29	; 62
     eba:	0f be       	out	0x3f, r0	; 63
     ebc:	cd bf       	out	0x3d, r28	; 61
     ebe:	df 91       	pop	r29
     ec0:	cf 91       	pop	r28
     ec2:	08 95       	ret

00000ec4 <joystickPos>:
	_delay_us(200);
	center_y = get_ADC_data();
	 
}

Joystick joystickPos(void){
     ec4:	0f 93       	push	r16
     ec6:	1f 93       	push	r17
     ec8:	cf 93       	push	r28
     eca:	df 93       	push	r29
     ecc:	cd b7       	in	r28, 0x3d	; 61
     ece:	de b7       	in	r29, 0x3e	; 62
     ed0:	2a 97       	sbiw	r28, 0x0a	; 10
     ed2:	0f b6       	in	r0, 0x3f	; 63
     ed4:	f8 94       	cli
     ed6:	de bf       	out	0x3e, r29	; 62
     ed8:	0f be       	out	0x3f, r0	; 63
     eda:	cd bf       	out	0x3d, r28	; 61
	uint8_t x, y; 
	Joystick position;
	position.xPos = 0;
	position.yPos = 0;
	
	ADC_start_read(CHANNEL1);
     edc:	80 e0       	ldi	r24, 0x00	; 0
     ede:	0e 94 fe 01 	call	0x3fc	; 0x3fc <ADC_start_read>
	#else
		//round up by default
		__ticks_dc = (uint32_t)(ceil(fabs(__tmp)));
	#endif

	__builtin_avr_delay_cycles(__ticks_dc);
     ee2:	81 ee       	ldi	r24, 0xE1	; 225
     ee4:	94 e0       	ldi	r25, 0x04	; 4
     ee6:	01 97       	sbiw	r24, 0x01	; 1
     ee8:	f1 f7       	brne	.-4      	; 0xee6 <joystickPos+0x22>
     eea:	00 c0       	rjmp	.+0      	; 0xeec <joystickPos+0x28>
     eec:	00 00       	nop
	_delay_ms(5);
	x = get_ADC_data();
     eee:	0e 94 f8 01 	call	0x3f0	; 0x3f0 <get_ADC_data>
	
	if(x > center_x){
     ef2:	20 91 db 03 	lds	r18, 0x03DB
     ef6:	28 17       	cp	r18, r24
     ef8:	a0 f4       	brcc	.+40     	; 0xf22 <joystickPos+0x5e>
		position.xPos = 100 * (x - center_x) / (0xFF - center_x);
     efa:	30 e0       	ldi	r19, 0x00	; 0
     efc:	99 27       	eor	r25, r25
     efe:	ac 01       	movw	r20, r24
     f00:	42 1b       	sub	r20, r18
     f02:	53 0b       	sbc	r21, r19
     f04:	64 e6       	ldi	r22, 0x64	; 100
     f06:	64 9f       	mul	r22, r20
     f08:	c0 01       	movw	r24, r0
     f0a:	65 9f       	mul	r22, r21
     f0c:	90 0d       	add	r25, r0
     f0e:	11 24       	eor	r1, r1
     f10:	6f ef       	ldi	r22, 0xFF	; 255
     f12:	70 e0       	ldi	r23, 0x00	; 0
     f14:	62 1b       	sub	r22, r18
     f16:	73 0b       	sbc	r23, r19
     f18:	0e 94 47 0d 	call	0x1a8e	; 0x1a8e <__divmodhi4>
     f1c:	16 2f       	mov	r17, r22
     f1e:	07 2f       	mov	r16, r23
     f20:	15 c0       	rjmp	.+42     	; 0xf4c <joystickPos+0x88>
	} else if (x < center_x){
     f22:	82 17       	cp	r24, r18
     f24:	88 f4       	brcc	.+34     	; 0xf48 <joystickPos+0x84>
		position.xPos = 100 * (x - center_x) / (center_x - 0);
     f26:	62 2f       	mov	r22, r18
     f28:	70 e0       	ldi	r23, 0x00	; 0
     f2a:	99 27       	eor	r25, r25
     f2c:	9c 01       	movw	r18, r24
     f2e:	26 1b       	sub	r18, r22
     f30:	37 0b       	sbc	r19, r23
     f32:	44 e6       	ldi	r20, 0x64	; 100
     f34:	42 9f       	mul	r20, r18
     f36:	c0 01       	movw	r24, r0
     f38:	43 9f       	mul	r20, r19
     f3a:	90 0d       	add	r25, r0
     f3c:	11 24       	eor	r1, r1
     f3e:	0e 94 47 0d 	call	0x1a8e	; 0x1a8e <__divmodhi4>
     f42:	16 2f       	mov	r17, r22
     f44:	07 2f       	mov	r16, r23
     f46:	02 c0       	rjmp	.+4      	; 0xf4c <joystickPos+0x88>
	} else {
		position.xPos = 0;
     f48:	10 e0       	ldi	r17, 0x00	; 0
     f4a:	00 e0       	ldi	r16, 0x00	; 0
	}
	ADC_start_read(CHANNEL2);
     f4c:	81 e0       	ldi	r24, 0x01	; 1
     f4e:	0e 94 fe 01 	call	0x3fc	; 0x3fc <ADC_start_read>
     f52:	81 ee       	ldi	r24, 0xE1	; 225
     f54:	94 e0       	ldi	r25, 0x04	; 4
     f56:	01 97       	sbiw	r24, 0x01	; 1
     f58:	f1 f7       	brne	.-4      	; 0xf56 <joystickPos+0x92>
     f5a:	00 c0       	rjmp	.+0      	; 0xf5c <joystickPos+0x98>
     f5c:	00 00       	nop
	_delay_ms(5);
	y = get_ADC_data();
     f5e:	0e 94 f8 01 	call	0x3f0	; 0x3f0 <get_ADC_data>
	if(y > center_y){
     f62:	20 91 dc 03 	lds	r18, 0x03DC
     f66:	28 17       	cp	r18, r24
     f68:	a0 f4       	brcc	.+40     	; 0xf92 <joystickPos+0xce>
		position.yPos = 100 * (y - center_y) / (0xFF - center_y);
     f6a:	30 e0       	ldi	r19, 0x00	; 0
     f6c:	99 27       	eor	r25, r25
     f6e:	ac 01       	movw	r20, r24
     f70:	42 1b       	sub	r20, r18
     f72:	53 0b       	sbc	r21, r19
     f74:	64 e6       	ldi	r22, 0x64	; 100
     f76:	64 9f       	mul	r22, r20
     f78:	c0 01       	movw	r24, r0
     f7a:	65 9f       	mul	r22, r21
     f7c:	90 0d       	add	r25, r0
     f7e:	11 24       	eor	r1, r1
     f80:	4f ef       	ldi	r20, 0xFF	; 255
     f82:	50 e0       	ldi	r21, 0x00	; 0
     f84:	ba 01       	movw	r22, r20
     f86:	62 1b       	sub	r22, r18
     f88:	73 0b       	sbc	r23, r19
     f8a:	0e 94 47 0d 	call	0x1a8e	; 0x1a8e <__divmodhi4>
     f8e:	86 2f       	mov	r24, r22
     f90:	14 c0       	rjmp	.+40     	; 0xfba <joystickPos+0xf6>
		} else if (y < center_y){
     f92:	82 17       	cp	r24, r18
     f94:	80 f4       	brcc	.+32     	; 0xfb6 <joystickPos+0xf2>
		position.yPos = 100 * (y - center_y) / (center_y - 0);
     f96:	30 e0       	ldi	r19, 0x00	; 0
     f98:	99 27       	eor	r25, r25
     f9a:	ac 01       	movw	r20, r24
     f9c:	42 1b       	sub	r20, r18
     f9e:	53 0b       	sbc	r21, r19
     fa0:	64 e6       	ldi	r22, 0x64	; 100
     fa2:	64 9f       	mul	r22, r20
     fa4:	c0 01       	movw	r24, r0
     fa6:	65 9f       	mul	r22, r21
     fa8:	90 0d       	add	r25, r0
     faa:	11 24       	eor	r1, r1
     fac:	b9 01       	movw	r22, r18
     fae:	0e 94 47 0d 	call	0x1a8e	; 0x1a8e <__divmodhi4>
     fb2:	86 2f       	mov	r24, r22
     fb4:	02 c0       	rjmp	.+4      	; 0xfba <joystickPos+0xf6>
		} else {
		position.yPos = 0;
     fb6:	80 e0       	ldi	r24, 0x00	; 0
     fb8:	70 e0       	ldi	r23, 0x00	; 0
	}
	position = JoystickDirection(position);
     fba:	41 2f       	mov	r20, r17
     fbc:	68 2f       	mov	r22, r24
     fbe:	50 2f       	mov	r21, r16
     fc0:	8a 85       	ldd	r24, Y+10	; 0x0a
     fc2:	0e 94 1c 07 	call	0xe38	; 0xe38 <JoystickDirection>
     fc6:	2e 83       	std	Y+6, r18	; 0x06
     fc8:	3f 83       	std	Y+7, r19	; 0x07
     fca:	48 87       	std	Y+8, r20	; 0x08
     fcc:	59 87       	std	Y+9, r21	; 0x09
     fce:	6a 87       	std	Y+10, r22	; 0x0a
	return position; 
     fd0:	85 e0       	ldi	r24, 0x05	; 5
     fd2:	fe 01       	movw	r30, r28
     fd4:	36 96       	adiw	r30, 0x06	; 6
     fd6:	de 01       	movw	r26, r28
     fd8:	11 96       	adiw	r26, 0x01	; 1
     fda:	01 90       	ld	r0, Z+
     fdc:	0d 92       	st	X+, r0
     fde:	8a 95       	dec	r24
     fe0:	e1 f7       	brne	.-8      	; 0xfda <joystickPos+0x116>
     fe2:	29 81       	ldd	r18, Y+1	; 0x01
     fe4:	3a 81       	ldd	r19, Y+2	; 0x02
     fe6:	4b 81       	ldd	r20, Y+3	; 0x03
     fe8:	5c 81       	ldd	r21, Y+4	; 0x04
     fea:	6d 81       	ldd	r22, Y+5	; 0x05
	
	
}
     fec:	70 e0       	ldi	r23, 0x00	; 0
     fee:	80 e0       	ldi	r24, 0x00	; 0
     ff0:	90 e0       	ldi	r25, 0x00	; 0
     ff2:	2a 96       	adiw	r28, 0x0a	; 10
     ff4:	0f b6       	in	r0, 0x3f	; 63
     ff6:	f8 94       	cli
     ff8:	de bf       	out	0x3e, r29	; 62
     ffa:	0f be       	out	0x3f, r0	; 63
     ffc:	cd bf       	out	0x3d, r28	; 61
     ffe:	df 91       	pop	r29
    1000:	cf 91       	pop	r28
    1002:	1f 91       	pop	r17
    1004:	0f 91       	pop	r16
    1006:	08 95       	ret

00001008 <printgame>:
can_message cali;
char pointarray[4] = "";
char name[5] = "aaaaa";

menu_option printgame(menu_option choice,gamevars game)
{
    1008:	af 92       	push	r10
    100a:	bf 92       	push	r11
    100c:	df 92       	push	r13
    100e:	ef 92       	push	r14
    1010:	ff 92       	push	r15
    1012:	0f 93       	push	r16
    1014:	1f 93       	push	r17
    1016:	cf 93       	push	r28
    1018:	df 93       	push	r29
    101a:	00 d0       	rcall	.+0      	; 0x101c <printgame+0x14>
    101c:	00 d0       	rcall	.+0      	; 0x101e <printgame+0x16>
    101e:	1f 92       	push	r1
    1020:	cd b7       	in	r28, 0x3d	; 61
    1022:	de b7       	in	r29, 0x3e	; 62
    1024:	d8 2e       	mov	r13, r24
    1026:	7a 01       	movw	r14, r20
    1028:	8b 01       	movw	r16, r22
	switch(choice){ 
    102a:	83 e0       	ldi	r24, 0x03	; 3
    102c:	d8 16       	cp	r13, r24
    102e:	09 f4       	brne	.+2      	; 0x1032 <printgame+0x2a>
    1030:	a8 c0       	rjmp	.+336    	; 0x1182 <printgame+0x17a>
    1032:	8d 15       	cp	r24, r13
    1034:	40 f0       	brcs	.+16     	; 0x1046 <printgame+0x3e>
    1036:	e1 e0       	ldi	r30, 0x01	; 1
    1038:	de 16       	cp	r13, r30
    103a:	89 f0       	breq	.+34     	; 0x105e <printgame+0x56>
    103c:	f2 e0       	ldi	r31, 0x02	; 2
    103e:	df 16       	cp	r13, r31
    1040:	09 f4       	brne	.+2      	; 0x1044 <printgame+0x3c>
    1042:	6d c0       	rjmp	.+218    	; 0x111e <printgame+0x116>
    1044:	0c c1       	rjmp	.+536    	; 0x125e <printgame+0x256>
    1046:	88 e0       	ldi	r24, 0x08	; 8
    1048:	d8 16       	cp	r13, r24
    104a:	09 f4       	brne	.+2      	; 0x104e <printgame+0x46>
    104c:	e9 c0       	rjmp	.+466    	; 0x1220 <printgame+0x218>
    104e:	e9 e0       	ldi	r30, 0x09	; 9
    1050:	de 16       	cp	r13, r30
    1052:	09 f4       	brne	.+2      	; 0x1056 <printgame+0x4e>
    1054:	f4 c0       	rjmp	.+488    	; 0x123e <printgame+0x236>
    1056:	f7 e0       	ldi	r31, 0x07	; 7
    1058:	df 12       	cpse	r13, r31
    105a:	01 c1       	rjmp	.+514    	; 0x125e <printgame+0x256>
    105c:	d2 c0       	rjmp	.+420    	; 0x1202 <printgame+0x1fa>
		case SinglePlayer:
			oled_reset();
    105e:	0e 94 70 0a 	call	0x14e0	; 0x14e0 <oled_reset>
			oled_printf("Your score :");
    1062:	8b e6       	ldi	r24, 0x6B	; 107
    1064:	92 e0       	ldi	r25, 0x02	; 2
    1066:	9f 93       	push	r25
    1068:	8f 93       	push	r24
    106a:	0e 94 d9 09 	call	0x13b2	; 0x13b2 <oled_printf>
			oled_pos(1,0);
    106e:	60 e0       	ldi	r22, 0x00	; 0
    1070:	70 e0       	ldi	r23, 0x00	; 0
    1072:	81 e0       	ldi	r24, 0x01	; 1
    1074:	90 e0       	ldi	r25, 0x00	; 0
    1076:	0e 94 45 0a 	call	0x148a	; 0x148a <oled_pos>
			pointarray[0] = (game.mypoints%100-game.mypoints%10)/10 + '0';
    107a:	0f 2e       	mov	r0, r31
    107c:	fa e0       	ldi	r31, 0x0A	; 10
    107e:	af 2e       	mov	r10, r31
    1080:	b1 2c       	mov	r11, r1
    1082:	f0 2d       	mov	r31, r0
    1084:	c7 01       	movw	r24, r14
    1086:	b5 01       	movw	r22, r10
    1088:	0e 94 47 0d 	call	0x1a8e	; 0x1a8e <__divmodhi4>
    108c:	9c 01       	movw	r18, r24
    108e:	ef eb       	ldi	r30, 0xBF	; 191
    1090:	f3 e0       	ldi	r31, 0x03	; 3
    1092:	c7 01       	movw	r24, r14
    1094:	64 e6       	ldi	r22, 0x64	; 100
    1096:	70 e0       	ldi	r23, 0x00	; 0
    1098:	0e 94 47 0d 	call	0x1a8e	; 0x1a8e <__divmodhi4>
    109c:	82 1b       	sub	r24, r18
    109e:	93 0b       	sbc	r25, r19
    10a0:	b5 01       	movw	r22, r10
    10a2:	0e 94 47 0d 	call	0x1a8e	; 0x1a8e <__divmodhi4>
    10a6:	60 5d       	subi	r22, 0xD0	; 208
    10a8:	60 83       	st	Z, r22
			pointarray[1] = game.mypoints%10 + '0';
    10aa:	20 5d       	subi	r18, 0xD0	; 208
    10ac:	20 93 c0 03 	sts	0x03C0, r18
			oled_printf(pointarray);
    10b0:	ff 93       	push	r31
    10b2:	ef 93       	push	r30
    10b4:	0e 94 d9 09 	call	0x13b2	; 0x13b2 <oled_printf>
			if(game.enemypoints > 0)
    10b8:	0f 90       	pop	r0
    10ba:	0f 90       	pop	r0
    10bc:	0f 90       	pop	r0
    10be:	0f 90       	pop	r0
    10c0:	10 16       	cp	r1, r16
    10c2:	11 06       	cpc	r1, r17
    10c4:	0c f0       	brlt	.+2      	; 0x10c8 <printgame+0xc0>
    10c6:	c9 c0       	rjmp	.+402    	; 0x125a <printgame+0x252>
			{	
				oled_pos(2,0);
    10c8:	60 e0       	ldi	r22, 0x00	; 0
    10ca:	70 e0       	ldi	r23, 0x00	; 0
    10cc:	82 e0       	ldi	r24, 0x02	; 2
    10ce:	90 e0       	ldi	r25, 0x00	; 0
    10d0:	0e 94 45 0a 	call	0x148a	; 0x148a <oled_pos>
				oled_printf("GAME OVER");
    10d4:	88 e7       	ldi	r24, 0x78	; 120
    10d6:	92 e0       	ldi	r25, 0x02	; 2
    10d8:	9f 93       	push	r25
    10da:	8f 93       	push	r24
    10dc:	0e 94 d9 09 	call	0x13b2	; 0x13b2 <oled_printf>
				oled_pos(3,0);
    10e0:	60 e0       	ldi	r22, 0x00	; 0
    10e2:	70 e0       	ldi	r23, 0x00	; 0
    10e4:	83 e0       	ldi	r24, 0x03	; 3
    10e6:	90 e0       	ldi	r25, 0x00	; 0
    10e8:	0e 94 45 0a 	call	0x148a	; 0x148a <oled_pos>
				if(game.mypoints > score(gethighscore())){
    10ec:	0e 94 a1 05 	call	0xb42	; 0xb42 <gethighscore>
    10f0:	0e 94 f5 05 	call	0xbea	; 0xbea <score>
    10f4:	0f 90       	pop	r0
    10f6:	0f 90       	pop	r0
    10f8:	8e 15       	cp	r24, r14
    10fa:	9f 05       	cpc	r25, r15
    10fc:	0c f0       	brlt	.+2      	; 0x1100 <printgame+0xf8>
    10fe:	ad c0       	rjmp	.+346    	; 0x125a <printgame+0x252>
					char* testing = Chosename();
    1100:	0e 94 0b 06 	call	0xc16	; 0xc16 <Chosename>
					testing[3] = pointarray[0];
    1104:	20 91 bf 03 	lds	r18, 0x03BF
    1108:	fc 01       	movw	r30, r24
    110a:	23 83       	std	Z+3, r18	; 0x03
					testing[4] = pointarray[1];
    110c:	20 91 c0 03 	lds	r18, 0x03C0
    1110:	24 83       	std	Z+4, r18	; 0x04
					sethighscore(testing);
    1112:	0e 94 d4 05 	call	0xba8	; 0xba8 <sethighscore>
					sendReset();
    1116:	0e 94 21 05 	call	0xa42	; 0xa42 <sendReset>
					return Highscore;
    111a:	83 e0       	ldi	r24, 0x03	; 3
    111c:	a1 c0       	rjmp	.+322    	; 0x1260 <printgame+0x258>
				}
			}
		break;
		case Multiplayer:
			oled_reset();
    111e:	0e 94 70 0a 	call	0x14e0	; 0x14e0 <oled_reset>
			oled_printf("Opponents score :");
    1122:	82 e8       	ldi	r24, 0x82	; 130
    1124:	92 e0       	ldi	r25, 0x02	; 2
    1126:	9f 93       	push	r25
    1128:	8f 93       	push	r24
    112a:	0e 94 d9 09 	call	0x13b2	; 0x13b2 <oled_printf>
			oled_pos(1,0);
    112e:	60 e0       	ldi	r22, 0x00	; 0
    1130:	70 e0       	ldi	r23, 0x00	; 0
    1132:	81 e0       	ldi	r24, 0x01	; 1
    1134:	90 e0       	ldi	r25, 0x00	; 0
    1136:	0e 94 45 0a 	call	0x148a	; 0x148a <oled_pos>
			pointarray[0] = (game.enemypoints%100-game.enemypoints%10)/10 + '0';
    113a:	0f 2e       	mov	r0, r31
    113c:	fa e0       	ldi	r31, 0x0A	; 10
    113e:	ef 2e       	mov	r14, r31
    1140:	f1 2c       	mov	r15, r1
    1142:	f0 2d       	mov	r31, r0
    1144:	c8 01       	movw	r24, r16
    1146:	b7 01       	movw	r22, r14
    1148:	0e 94 47 0d 	call	0x1a8e	; 0x1a8e <__divmodhi4>
    114c:	9c 01       	movw	r18, r24
    114e:	ef eb       	ldi	r30, 0xBF	; 191
    1150:	f3 e0       	ldi	r31, 0x03	; 3
    1152:	c8 01       	movw	r24, r16
    1154:	64 e6       	ldi	r22, 0x64	; 100
    1156:	70 e0       	ldi	r23, 0x00	; 0
    1158:	0e 94 47 0d 	call	0x1a8e	; 0x1a8e <__divmodhi4>
    115c:	82 1b       	sub	r24, r18
    115e:	93 0b       	sbc	r25, r19
    1160:	b7 01       	movw	r22, r14
    1162:	0e 94 47 0d 	call	0x1a8e	; 0x1a8e <__divmodhi4>
    1166:	60 5d       	subi	r22, 0xD0	; 208
    1168:	60 83       	st	Z, r22
			pointarray[1] = game.enemypoints%10 + '0';
    116a:	20 5d       	subi	r18, 0xD0	; 208
    116c:	20 93 c0 03 	sts	0x03C0, r18
			oled_printf(pointarray);
    1170:	ff 93       	push	r31
    1172:	ef 93       	push	r30
    1174:	0e 94 d9 09 	call	0x13b2	; 0x13b2 <oled_printf>
		break;
    1178:	0f 90       	pop	r0
    117a:	0f 90       	pop	r0
    117c:	0f 90       	pop	r0
    117e:	0f 90       	pop	r0
    1180:	6c c0       	rjmp	.+216    	; 0x125a <printgame+0x252>
		
		case Highscore:
			oled_reset();
    1182:	0e 94 70 0a 	call	0x14e0	; 0x14e0 <oled_reset>
			oled_printf("----------------");
    1186:	04 e9       	ldi	r16, 0x94	; 148
    1188:	12 e0       	ldi	r17, 0x02	; 2
    118a:	1f 93       	push	r17
    118c:	0f 93       	push	r16
    118e:	0e 94 d9 09 	call	0x13b2	; 0x13b2 <oled_printf>
			oled_pos(1,0);
    1192:	60 e0       	ldi	r22, 0x00	; 0
    1194:	70 e0       	ldi	r23, 0x00	; 0
    1196:	81 e0       	ldi	r24, 0x01	; 1
    1198:	90 e0       	ldi	r25, 0x00	; 0
    119a:	0e 94 45 0a 	call	0x148a	; 0x148a <oled_pos>
			oled_printf("HIGHSCORES: ");
    119e:	85 ea       	ldi	r24, 0xA5	; 165
    11a0:	92 e0       	ldi	r25, 0x02	; 2
    11a2:	9f 93       	push	r25
    11a4:	8f 93       	push	r24
    11a6:	0e 94 d9 09 	call	0x13b2	; 0x13b2 <oled_printf>
			oled_pos(2,0);
    11aa:	60 e0       	ldi	r22, 0x00	; 0
    11ac:	70 e0       	ldi	r23, 0x00	; 0
    11ae:	82 e0       	ldi	r24, 0x02	; 2
    11b0:	90 e0       	ldi	r25, 0x00	; 0
    11b2:	0e 94 45 0a 	call	0x148a	; 0x148a <oled_pos>
			oled_printf("----------------");
    11b6:	1f 93       	push	r17
    11b8:	0f 93       	push	r16
    11ba:	0e 94 d9 09 	call	0x13b2	; 0x13b2 <oled_printf>
			oled_pos(4,0);
    11be:	60 e0       	ldi	r22, 0x00	; 0
    11c0:	70 e0       	ldi	r23, 0x00	; 0
    11c2:	84 e0       	ldi	r24, 0x04	; 4
    11c4:	90 e0       	ldi	r25, 0x00	; 0
    11c6:	0e 94 45 0a 	call	0x148a	; 0x148a <oled_pos>
			char toscreen[5];
			char* hold = gethighscore();
    11ca:	0e 94 a1 05 	call	0xb42	; 0xb42 <gethighscore>
    11ce:	dc 01       	movw	r26, r24
    11d0:	fe 01       	movw	r30, r28
    11d2:	31 96       	adiw	r30, 0x01	; 1
    11d4:	9e 01       	movw	r18, r28
    11d6:	2a 5f       	subi	r18, 0xFA	; 250
    11d8:	3f 4f       	sbci	r19, 0xFF	; 255
    11da:	0f 90       	pop	r0
    11dc:	0f 90       	pop	r0
    11de:	0f 90       	pop	r0
    11e0:	0f 90       	pop	r0
    11e2:	0f 90       	pop	r0
    11e4:	0f 90       	pop	r0
			for(int i = 0; i < 5 ; i++){
				toscreen[i] = hold[i];
    11e6:	8d 91       	ld	r24, X+
    11e8:	81 93       	st	Z+, r24
			oled_pos(2,0);
			oled_printf("----------------");
			oled_pos(4,0);
			char toscreen[5];
			char* hold = gethighscore();
			for(int i = 0; i < 5 ; i++){
    11ea:	e2 17       	cp	r30, r18
    11ec:	f3 07       	cpc	r31, r19
    11ee:	d9 f7       	brne	.-10     	; 0x11e6 <printgame+0x1de>
				toscreen[i] = hold[i];
			}
			oled_printf(toscreen);
    11f0:	ce 01       	movw	r24, r28
    11f2:	01 96       	adiw	r24, 0x01	; 1
    11f4:	9f 93       	push	r25
    11f6:	8f 93       	push	r24
    11f8:	0e 94 d9 09 	call	0x13b2	; 0x13b2 <oled_printf>
		break;
    11fc:	0f 90       	pop	r0
    11fe:	0f 90       	pop	r0
    1200:	2c c0       	rjmp	.+88     	; 0x125a <printgame+0x252>
		case Easy:
			sendDificulty(Easy);
    1202:	87 e0       	ldi	r24, 0x07	; 7
    1204:	90 e0       	ldi	r25, 0x00	; 0
    1206:	0e 94 3f 05 	call	0xa7e	; 0xa7e <sendDificulty>
			oled_reset();
    120a:	0e 94 70 0a 	call	0x14e0	; 0x14e0 <oled_reset>
			oled_printf("EASY IT IS!!");
    120e:	82 eb       	ldi	r24, 0xB2	; 178
    1210:	92 e0       	ldi	r25, 0x02	; 2
    1212:	9f 93       	push	r25
    1214:	8f 93       	push	r24
    1216:	0e 94 d9 09 	call	0x13b2	; 0x13b2 <oled_printf>
		break;
    121a:	0f 90       	pop	r0
    121c:	0f 90       	pop	r0
    121e:	1d c0       	rjmp	.+58     	; 0x125a <printgame+0x252>
		case Medium:
			sendDificulty(Medium);
    1220:	88 e0       	ldi	r24, 0x08	; 8
    1222:	90 e0       	ldi	r25, 0x00	; 0
    1224:	0e 94 3f 05 	call	0xa7e	; 0xa7e <sendDificulty>
			oled_reset();
    1228:	0e 94 70 0a 	call	0x14e0	; 0x14e0 <oled_reset>
			oled_printf("Medium IT IS!!");
    122c:	8f eb       	ldi	r24, 0xBF	; 191
    122e:	92 e0       	ldi	r25, 0x02	; 2
    1230:	9f 93       	push	r25
    1232:	8f 93       	push	r24
    1234:	0e 94 d9 09 	call	0x13b2	; 0x13b2 <oled_printf>
		break;
    1238:	0f 90       	pop	r0
    123a:	0f 90       	pop	r0
    123c:	0e c0       	rjmp	.+28     	; 0x125a <printgame+0x252>
		case Hard:
			sendDificulty(Hard);
    123e:	89 e0       	ldi	r24, 0x09	; 9
    1240:	90 e0       	ldi	r25, 0x00	; 0
    1242:	0e 94 3f 05 	call	0xa7e	; 0xa7e <sendDificulty>
			oled_reset();
    1246:	0e 94 70 0a 	call	0x14e0	; 0x14e0 <oled_reset>
			oled_printf("Hard IT IS!!");
    124a:	8e ec       	ldi	r24, 0xCE	; 206
    124c:	92 e0       	ldi	r25, 0x02	; 2
    124e:	9f 93       	push	r25
    1250:	8f 93       	push	r24
    1252:	0e 94 d9 09 	call	0x13b2	; 0x13b2 <oled_printf>
		break;
    1256:	0f 90       	pop	r0
    1258:	0f 90       	pop	r0
	}
	return choice;
    125a:	8d 2d       	mov	r24, r13
    125c:	01 c0       	rjmp	.+2      	; 0x1260 <printgame+0x258>
    125e:	8d 2d       	mov	r24, r13
}
    1260:	0f 90       	pop	r0
    1262:	0f 90       	pop	r0
    1264:	0f 90       	pop	r0
    1266:	0f 90       	pop	r0
    1268:	0f 90       	pop	r0
    126a:	df 91       	pop	r29
    126c:	cf 91       	pop	r28
    126e:	1f 91       	pop	r17
    1270:	0f 91       	pop	r16
    1272:	ff 90       	pop	r15
    1274:	ef 90       	pop	r14
    1276:	df 90       	pop	r13
    1278:	bf 90       	pop	r11
    127a:	af 90       	pop	r10
    127c:	08 95       	ret

0000127e <oled_is_out_of_bounds>:
volatile oled_position_t position;

const fontSize = 8;

void oled_is_out_of_bounds() {
	if (position.col > 127) {
    127e:	80 91 df 03 	lds	r24, 0x03DF
    1282:	90 91 e0 03 	lds	r25, 0x03E0
    1286:	80 38       	cpi	r24, 0x80	; 128
    1288:	91 05       	cpc	r25, r1
    128a:	bc f0       	brlt	.+46     	; 0x12ba <oled_is_out_of_bounds+0x3c>
		position.col -= 128;
    128c:	ef ed       	ldi	r30, 0xDF	; 223
    128e:	f3 e0       	ldi	r31, 0x03	; 3
    1290:	80 81       	ld	r24, Z
    1292:	91 81       	ldd	r25, Z+1	; 0x01
    1294:	80 58       	subi	r24, 0x80	; 128
    1296:	91 09       	sbc	r25, r1
    1298:	91 83       	std	Z+1, r25	; 0x01
    129a:	80 83       	st	Z, r24
		position.row += 1;
    129c:	ed ed       	ldi	r30, 0xDD	; 221
    129e:	f3 e0       	ldi	r31, 0x03	; 3
    12a0:	80 81       	ld	r24, Z
    12a2:	91 81       	ldd	r25, Z+1	; 0x01
    12a4:	01 96       	adiw	r24, 0x01	; 1
    12a6:	91 83       	std	Z+1, r25	; 0x01
    12a8:	80 83       	st	Z, r24
		if (position.row > 7) {
    12aa:	80 81       	ld	r24, Z
    12ac:	91 81       	ldd	r25, Z+1	; 0x01
    12ae:	08 97       	sbiw	r24, 0x08	; 8
    12b0:	24 f0       	brlt	.+8      	; 0x12ba <oled_is_out_of_bounds+0x3c>
			position.row = 0;
    12b2:	10 92 de 03 	sts	0x03DE, r1
    12b6:	10 92 dd 03 	sts	0x03DD, r1
    12ba:	08 95       	ret

000012bc <oled_put_char>:

void write_data(uint8_t data){
	ext_oled_data[0] = data;
}

int oled_put_char(unsigned char c){
    12bc:	ef 92       	push	r14
    12be:	ff 92       	push	r15
    12c0:	0f 93       	push	r16
    12c2:	1f 93       	push	r17
    12c4:	cf 93       	push	r28
    12c6:	df 93       	push	r29
	uint8_t printChar = c-32;
    12c8:	80 52       	subi	r24, 0x20	; 32
    12ca:	e8 2e       	mov	r14, r24
    12cc:	f1 2c       	mov	r15, r1
    12ce:	c7 01       	movw	r24, r14
    12d0:	88 0f       	add	r24, r24
    12d2:	99 1f       	adc	r25, r25
    12d4:	88 0f       	add	r24, r24
    12d6:	99 1f       	adc	r25, r25
    12d8:	88 0f       	add	r24, r24
    12da:	99 1f       	adc	r25, r25
	
	for (int i=0; i < fontSize; i++) {
    12dc:	c0 e0       	ldi	r28, 0x00	; 0
    12de:	d0 e0       	ldi	r29, 0x00	; 0
    12e0:	9c 01       	movw	r18, r24
    12e2:	20 59       	subi	r18, 0x90	; 144
    12e4:	3f 4f       	sbci	r19, 0xFF	; 255
    12e6:	79 01       	movw	r14, r18
		write_data(pgm_read_word(&font_8x8[printChar][i]));
		position.col += fontSize;
    12e8:	0f ed       	ldi	r16, 0xDF	; 223
    12ea:	13 e0       	ldi	r17, 0x03	; 3
    12ec:	f7 01       	movw	r30, r14
    12ee:	ec 0f       	add	r30, r28
    12f0:	fd 1f       	adc	r31, r29

int oled_put_char(unsigned char c){
	uint8_t printChar = c-32;
	
	for (int i=0; i < fontSize; i++) {
		write_data(pgm_read_word(&font_8x8[printChar][i]));
    12f2:	85 91       	lpm	r24, Z+
    12f4:	94 91       	lpm	r25, Z
void write_command(uint8_t command){
	ext_oled_cmd[0] = command;
}

void write_data(uint8_t data){
	ext_oled_data[0] = data;
    12f6:	e0 91 0c 01 	lds	r30, 0x010C
    12fa:	f0 91 0d 01 	lds	r31, 0x010D
    12fe:	80 83       	st	Z, r24
int oled_put_char(unsigned char c){
	uint8_t printChar = c-32;
	
	for (int i=0; i < fontSize; i++) {
		write_data(pgm_read_word(&font_8x8[printChar][i]));
		position.col += fontSize;
    1300:	f8 01       	movw	r30, r16
    1302:	80 81       	ld	r24, Z
    1304:	91 81       	ldd	r25, Z+1	; 0x01
    1306:	08 96       	adiw	r24, 0x08	; 8
    1308:	91 83       	std	Z+1, r25	; 0x01
    130a:	80 83       	st	Z, r24
		oled_is_out_of_bounds();
    130c:	0e 94 3f 09 	call	0x127e	; 0x127e <oled_is_out_of_bounds>
}

int oled_put_char(unsigned char c){
	uint8_t printChar = c-32;
	
	for (int i=0; i < fontSize; i++) {
    1310:	21 96       	adiw	r28, 0x01	; 1
    1312:	c8 30       	cpi	r28, 0x08	; 8
    1314:	d1 05       	cpc	r29, r1
    1316:	51 f7       	brne	.-44     	; 0x12ec <oled_put_char+0x30>
		position.col += fontSize;
		oled_is_out_of_bounds();
	}
	
	return 0;
}
    1318:	80 e0       	ldi	r24, 0x00	; 0
    131a:	90 e0       	ldi	r25, 0x00	; 0
    131c:	df 91       	pop	r29
    131e:	cf 91       	pop	r28
    1320:	1f 91       	pop	r17
    1322:	0f 91       	pop	r16
    1324:	ff 90       	pop	r15
    1326:	ef 90       	pop	r14
    1328:	08 95       	ret

0000132a <oled_inv_put_char>:

int oled_inv_put_char(unsigned char c){
    132a:	ef 92       	push	r14
    132c:	ff 92       	push	r15
    132e:	0f 93       	push	r16
    1330:	1f 93       	push	r17
    1332:	cf 93       	push	r28
    1334:	df 93       	push	r29
	uint8_t printChar = c-32;
    1336:	80 52       	subi	r24, 0x20	; 32
    1338:	e8 2e       	mov	r14, r24
    133a:	f1 2c       	mov	r15, r1
    133c:	c7 01       	movw	r24, r14
    133e:	88 0f       	add	r24, r24
    1340:	99 1f       	adc	r25, r25
    1342:	88 0f       	add	r24, r24
    1344:	99 1f       	adc	r25, r25
    1346:	88 0f       	add	r24, r24
    1348:	99 1f       	adc	r25, r25
	
	for (int i=0; i < fontSize; i++) {
    134a:	c0 e0       	ldi	r28, 0x00	; 0
    134c:	d0 e0       	ldi	r29, 0x00	; 0
    134e:	9c 01       	movw	r18, r24
    1350:	20 59       	subi	r18, 0x90	; 144
    1352:	3f 4f       	sbci	r19, 0xFF	; 255
    1354:	79 01       	movw	r14, r18
		write_data(~pgm_read_word(&font_8x8[printChar][i]));
		position.col += fontSize;
    1356:	0f ed       	ldi	r16, 0xDF	; 223
    1358:	13 e0       	ldi	r17, 0x03	; 3
    135a:	f7 01       	movw	r30, r14
    135c:	ec 0f       	add	r30, r28
    135e:	fd 1f       	adc	r31, r29

int oled_inv_put_char(unsigned char c){
	uint8_t printChar = c-32;
	
	for (int i=0; i < fontSize; i++) {
		write_data(~pgm_read_word(&font_8x8[printChar][i]));
    1360:	85 91       	lpm	r24, Z+
    1362:	94 91       	lpm	r25, Z
    1364:	80 95       	com	r24
void write_command(uint8_t command){
	ext_oled_cmd[0] = command;
}

void write_data(uint8_t data){
	ext_oled_data[0] = data;
    1366:	e0 91 0c 01 	lds	r30, 0x010C
    136a:	f0 91 0d 01 	lds	r31, 0x010D
    136e:	80 83       	st	Z, r24
int oled_inv_put_char(unsigned char c){
	uint8_t printChar = c-32;
	
	for (int i=0; i < fontSize; i++) {
		write_data(~pgm_read_word(&font_8x8[printChar][i]));
		position.col += fontSize;
    1370:	f8 01       	movw	r30, r16
    1372:	80 81       	ld	r24, Z
    1374:	91 81       	ldd	r25, Z+1	; 0x01
    1376:	08 96       	adiw	r24, 0x08	; 8
    1378:	91 83       	std	Z+1, r25	; 0x01
    137a:	80 83       	st	Z, r24
		oled_is_out_of_bounds();
    137c:	0e 94 3f 09 	call	0x127e	; 0x127e <oled_is_out_of_bounds>
}

int oled_inv_put_char(unsigned char c){
	uint8_t printChar = c-32;
	
	for (int i=0; i < fontSize; i++) {
    1380:	21 96       	adiw	r28, 0x01	; 1
    1382:	c8 30       	cpi	r28, 0x08	; 8
    1384:	d1 05       	cpc	r29, r1
    1386:	49 f7       	brne	.-46     	; 0x135a <oled_inv_put_char+0x30>
		position.col += fontSize;
		oled_is_out_of_bounds();
	}
	
	return 0;
}
    1388:	80 e0       	ldi	r24, 0x00	; 0
    138a:	90 e0       	ldi	r25, 0x00	; 0
    138c:	df 91       	pop	r29
    138e:	cf 91       	pop	r28
    1390:	1f 91       	pop	r17
    1392:	0f 91       	pop	r16
    1394:	ff 90       	pop	r15
    1396:	ef 90       	pop	r14
    1398:	08 95       	ret

0000139a <oled_set_adressing_mode>:
		}
	}
}

void write_command(uint8_t command){
	ext_oled_cmd[0] = command;
    139a:	e0 91 0e 01 	lds	r30, 0x010E
    139e:	f0 91 0f 01 	lds	r31, 0x010F
    13a2:	90 e2       	ldi	r25, 0x20	; 32
    13a4:	90 83       	st	Z, r25
    13a6:	e0 91 0e 01 	lds	r30, 0x010E
    13aa:	f0 91 0f 01 	lds	r31, 0x010F
    13ae:	80 83       	st	Z, r24
    13b0:	08 95       	ret

000013b2 <oled_printf>:
	write_command(mode);
}

// ------------------ functions declared in header below this line---------------------

void oled_printf(char* data, ...){
    13b2:	cf 93       	push	r28
    13b4:	df 93       	push	r29
    13b6:	cd b7       	in	r28, 0x3d	; 61
    13b8:	de b7       	in	r29, 0x3e	; 62
    13ba:	fe 01       	movw	r30, r28
    13bc:	35 96       	adiw	r30, 0x05	; 5
    13be:	61 91       	ld	r22, Z+
    13c0:	71 91       	ld	r23, Z+
	va_list args;
	va_start(args, data);
	vfprintf(&mystdout, data, args);
    13c2:	af 01       	movw	r20, r30
    13c4:	8e e1       	ldi	r24, 0x1E	; 30
    13c6:	91 e0       	ldi	r25, 0x01	; 1
    13c8:	0e 94 63 0f 	call	0x1ec6	; 0x1ec6 <vfprintf>
	va_end(args);
	
}
    13cc:	df 91       	pop	r29
    13ce:	cf 91       	pop	r28
    13d0:	08 95       	ret

000013d2 <oled_inv_printf>:

void oled_inv_printf(char* data, ...){
    13d2:	cf 93       	push	r28
    13d4:	df 93       	push	r29
    13d6:	cd b7       	in	r28, 0x3d	; 61
    13d8:	de b7       	in	r29, 0x3e	; 62
    13da:	fe 01       	movw	r30, r28
    13dc:	35 96       	adiw	r30, 0x05	; 5
    13de:	61 91       	ld	r22, Z+
    13e0:	71 91       	ld	r23, Z+
	va_list args;
	va_start(args, data);
	vfprintf(&myinvstdout, data, args);
    13e2:	af 01       	movw	r20, r30
    13e4:	80 e1       	ldi	r24, 0x10	; 16
    13e6:	91 e0       	ldi	r25, 0x01	; 1
    13e8:	0e 94 63 0f 	call	0x1ec6	; 0x1ec6 <vfprintf>
	va_end(args);
	
}
    13ec:	df 91       	pop	r29
    13ee:	cf 91       	pop	r28
    13f0:	08 95       	ret

000013f2 <oled_goto_line>:

void oled_home(){
	oled_pos(0,0);
}

void oled_goto_line(int line){
    13f2:	cf 93       	push	r28
    13f4:	df 93       	push	r29
    13f6:	ec 01       	movw	r28, r24
	if (line > 7 || line < 0) {
    13f8:	88 30       	cpi	r24, 0x08	; 8
    13fa:	91 05       	cpc	r25, r1
    13fc:	80 f4       	brcc	.+32     	; 0x141e <oled_goto_line+0x2c>
		return 0;
	}
	else {
		position.row = line;
    13fe:	90 93 de 03 	sts	0x03DE, r25
    1402:	80 93 dd 03 	sts	0x03DD, r24
		oled_set_adressing_mode(PAGE_MODE);
    1406:	82 e0       	ldi	r24, 0x02	; 2
    1408:	0e 94 cd 09 	call	0x139a	; 0x139a <oled_set_adressing_mode>
		write_command(0xB0 + line);
    140c:	c0 55       	subi	r28, 0x50	; 80
		}
	}
}

void write_command(uint8_t command){
	ext_oled_cmd[0] = command;
    140e:	e0 91 0e 01 	lds	r30, 0x010E
    1412:	f0 91 0f 01 	lds	r31, 0x010F
    1416:	c0 83       	st	Z, r28
	}
	else {
		position.row = line;
		oled_set_adressing_mode(PAGE_MODE);
		write_command(0xB0 + line);
		oled_set_adressing_mode(HORIZONTAL_MODE);
    1418:	80 e0       	ldi	r24, 0x00	; 0
    141a:	0e 94 cd 09 	call	0x139a	; 0x139a <oled_set_adressing_mode>
	}
}
    141e:	df 91       	pop	r29
    1420:	cf 91       	pop	r28
    1422:	08 95       	ret

00001424 <oled_goto_column>:

void oled_goto_column(int column){
    1424:	cf 93       	push	r28
    1426:	df 93       	push	r29
    1428:	ec 01       	movw	r28, r24
	if (column > 127 || column < 0) {
    142a:	80 38       	cpi	r24, 0x80	; 128
    142c:	91 05       	cpc	r25, r1
    142e:	50 f5       	brcc	.+84     	; 0x1484 <oled_goto_column+0x60>
		return 0;
	}
	else {
		position.col = column;
    1430:	90 93 e0 03 	sts	0x03E0, r25
    1434:	80 93 df 03 	sts	0x03DF, r24
		oled_set_adressing_mode(PAGE_MODE);
    1438:	82 e0       	ldi	r24, 0x02	; 2
    143a:	0e 94 cd 09 	call	0x139a	; 0x139a <oled_set_adressing_mode>
		
		int numLow = column % 16;
    143e:	ce 01       	movw	r24, r28
    1440:	8f 70       	andi	r24, 0x0F	; 15
    1442:	90 78       	andi	r25, 0x80	; 128
    1444:	99 23       	and	r25, r25
    1446:	24 f4       	brge	.+8      	; 0x1450 <oled_goto_column+0x2c>
    1448:	01 97       	sbiw	r24, 0x01	; 1
    144a:	80 6f       	ori	r24, 0xF0	; 240
    144c:	9f 6f       	ori	r25, 0xFF	; 255
    144e:	01 96       	adiw	r24, 0x01	; 1
		}
	}
}

void write_command(uint8_t command){
	ext_oled_cmd[0] = command;
    1450:	e0 91 0e 01 	lds	r30, 0x010E
    1454:	f0 91 0f 01 	lds	r31, 0x010F
    1458:	80 83       	st	Z, r24
	else {
		position.col = column;
		oled_set_adressing_mode(PAGE_MODE);
		
		int numLow = column % 16;
		int numHigh = column / 16;
    145a:	ce 01       	movw	r24, r28
    145c:	dd 23       	and	r29, r29
    145e:	0c f4       	brge	.+2      	; 0x1462 <oled_goto_column+0x3e>
    1460:	0f 96       	adiw	r24, 0x0f	; 15
    1462:	95 95       	asr	r25
    1464:	87 95       	ror	r24
    1466:	95 95       	asr	r25
    1468:	87 95       	ror	r24
    146a:	95 95       	asr	r25
    146c:	87 95       	ror	r24
    146e:	95 95       	asr	r25
    1470:	87 95       	ror	r24
		
		write_command(numLow);
		write_command(16 + numHigh);
    1472:	80 5f       	subi	r24, 0xF0	; 240
		}
	}
}

void write_command(uint8_t command){
	ext_oled_cmd[0] = command;
    1474:	e0 91 0e 01 	lds	r30, 0x010E
    1478:	f0 91 0f 01 	lds	r31, 0x010F
    147c:	80 83       	st	Z, r24
		int numLow = column % 16;
		int numHigh = column / 16;
		
		write_command(numLow);
		write_command(16 + numHigh);
		oled_set_adressing_mode(HORIZONTAL_MODE);
    147e:	80 e0       	ldi	r24, 0x00	; 0
    1480:	0e 94 cd 09 	call	0x139a	; 0x139a <oled_set_adressing_mode>
	}
	
}
    1484:	df 91       	pop	r29
    1486:	cf 91       	pop	r28
    1488:	08 95       	ret

0000148a <oled_pos>:
		write_data(~0b00000000);
	}
	oled_goto_line(line);
}

void oled_pos(int row, int column){
    148a:	cf 93       	push	r28
    148c:	df 93       	push	r29
    148e:	eb 01       	movw	r28, r22
	oled_goto_line(row);
    1490:	0e 94 f9 09 	call	0x13f2	; 0x13f2 <oled_goto_line>
	oled_goto_column(column);
    1494:	ce 01       	movw	r24, r28
    1496:	0e 94 12 0a 	call	0x1424	; 0x1424 <oled_goto_column>
}
    149a:	df 91       	pop	r29
    149c:	cf 91       	pop	r28
    149e:	08 95       	ret

000014a0 <oled_home>:
	}
	oled_home();
}

void oled_home(){
	oled_pos(0,0);
    14a0:	60 e0       	ldi	r22, 0x00	; 0
    14a2:	70 e0       	ldi	r23, 0x00	; 0
    14a4:	80 e0       	ldi	r24, 0x00	; 0
    14a6:	90 e0       	ldi	r25, 0x00	; 0
    14a8:	0e 94 45 0a 	call	0x148a	; 0x148a <oled_pos>
    14ac:	08 95       	ret

000014ae <oled_clear_line>:
		write_command(16 + numHigh);
		oled_set_adressing_mode(HORIZONTAL_MODE);
	}
	
}
void oled_clear_line(int line){
    14ae:	cf 93       	push	r28
    14b0:	df 93       	push	r29
    14b2:	ec 01       	movw	r28, r24
	oled_pos(line, 0);
    14b4:	60 e0       	ldi	r22, 0x00	; 0
    14b6:	70 e0       	ldi	r23, 0x00	; 0
    14b8:	0e 94 45 0a 	call	0x148a	; 0x148a <oled_pos>
    14bc:	20 e8       	ldi	r18, 0x80	; 128
    14be:	30 e0       	ldi	r19, 0x00	; 0
void write_command(uint8_t command){
	ext_oled_cmd[0] = command;
}

void write_data(uint8_t data){
	ext_oled_data[0] = data;
    14c0:	e0 91 0c 01 	lds	r30, 0x010C
    14c4:	f0 91 0d 01 	lds	r31, 0x010D
    14c8:	10 82       	st	Z, r1
    14ca:	21 50       	subi	r18, 0x01	; 1
    14cc:	31 09       	sbc	r19, r1
	
}
void oled_clear_line(int line){
	oled_pos(line, 0);
	
	for (int col = 0; col < 128; col++) {
    14ce:	21 15       	cp	r18, r1
    14d0:	31 05       	cpc	r19, r1
    14d2:	b1 f7       	brne	.-20     	; 0x14c0 <oled_clear_line+0x12>
		write_data(0b00000000);
	}
	oled_goto_line(line);
    14d4:	ce 01       	movw	r24, r28
    14d6:	0e 94 f9 09 	call	0x13f2	; 0x13f2 <oled_goto_line>
}
    14da:	df 91       	pop	r29
    14dc:	cf 91       	pop	r28
    14de:	08 95       	ret

000014e0 <oled_reset>:
	write_command(0xaf); // display on
	oled_reset();
	
}

void oled_reset(){
    14e0:	cf 93       	push	r28
    14e2:	df 93       	push	r29
	
	for (int line = 0; line < 8; line++) {
    14e4:	c0 e0       	ldi	r28, 0x00	; 0
    14e6:	d0 e0       	ldi	r29, 0x00	; 0
		oled_clear_line(line);
    14e8:	ce 01       	movw	r24, r28
    14ea:	0e 94 57 0a 	call	0x14ae	; 0x14ae <oled_clear_line>
	
}

void oled_reset(){
	
	for (int line = 0; line < 8; line++) {
    14ee:	21 96       	adiw	r28, 0x01	; 1
    14f0:	c8 30       	cpi	r28, 0x08	; 8
    14f2:	d1 05       	cpc	r29, r1
    14f4:	c9 f7       	brne	.-14     	; 0x14e8 <oled_reset+0x8>
		oled_clear_line(line);
	}
	oled_home();
    14f6:	0e 94 50 0a 	call	0x14a0	; 0x14a0 <oled_home>
}
    14fa:	df 91       	pop	r29
    14fc:	cf 91       	pop	r28
    14fe:	08 95       	ret

00001500 <oled_init>:
		}
	}
}

void write_command(uint8_t command){
	ext_oled_cmd[0] = command;
    1500:	e0 91 0e 01 	lds	r30, 0x010E
    1504:	f0 91 0f 01 	lds	r31, 0x010F
    1508:	8e ea       	ldi	r24, 0xAE	; 174
    150a:	80 83       	st	Z, r24
    150c:	e0 91 0e 01 	lds	r30, 0x010E
    1510:	f0 91 0f 01 	lds	r31, 0x010F
    1514:	81 ea       	ldi	r24, 0xA1	; 161
    1516:	80 83       	st	Z, r24
    1518:	e0 91 0e 01 	lds	r30, 0x010E
    151c:	f0 91 0f 01 	lds	r31, 0x010F
    1520:	8a ed       	ldi	r24, 0xDA	; 218
    1522:	80 83       	st	Z, r24
    1524:	e0 91 0e 01 	lds	r30, 0x010E
    1528:	f0 91 0f 01 	lds	r31, 0x010F
    152c:	82 e1       	ldi	r24, 0x12	; 18
    152e:	80 83       	st	Z, r24
    1530:	e0 91 0e 01 	lds	r30, 0x010E
    1534:	f0 91 0f 01 	lds	r31, 0x010F
    1538:	88 ec       	ldi	r24, 0xC8	; 200
    153a:	80 83       	st	Z, r24
    153c:	e0 91 0e 01 	lds	r30, 0x010E
    1540:	f0 91 0f 01 	lds	r31, 0x010F
    1544:	88 ea       	ldi	r24, 0xA8	; 168
    1546:	80 83       	st	Z, r24
    1548:	e0 91 0e 01 	lds	r30, 0x010E
    154c:	f0 91 0f 01 	lds	r31, 0x010F
    1550:	8f e3       	ldi	r24, 0x3F	; 63
    1552:	80 83       	st	Z, r24
    1554:	e0 91 0e 01 	lds	r30, 0x010E
    1558:	f0 91 0f 01 	lds	r31, 0x010F
    155c:	85 ed       	ldi	r24, 0xD5	; 213
    155e:	80 83       	st	Z, r24
    1560:	e0 91 0e 01 	lds	r30, 0x010E
    1564:	f0 91 0f 01 	lds	r31, 0x010F
    1568:	80 e8       	ldi	r24, 0x80	; 128
    156a:	80 83       	st	Z, r24
    156c:	e0 91 0e 01 	lds	r30, 0x010E
    1570:	f0 91 0f 01 	lds	r31, 0x010F
    1574:	81 e8       	ldi	r24, 0x81	; 129
    1576:	80 83       	st	Z, r24
    1578:	e0 91 0e 01 	lds	r30, 0x010E
    157c:	f0 91 0f 01 	lds	r31, 0x010F
    1580:	80 e5       	ldi	r24, 0x50	; 80
    1582:	80 83       	st	Z, r24
    1584:	e0 91 0e 01 	lds	r30, 0x010E
    1588:	f0 91 0f 01 	lds	r31, 0x010F
    158c:	89 ed       	ldi	r24, 0xD9	; 217
    158e:	80 83       	st	Z, r24
    1590:	e0 91 0e 01 	lds	r30, 0x010E
    1594:	f0 91 0f 01 	lds	r31, 0x010F
    1598:	81 e2       	ldi	r24, 0x21	; 33
    159a:	80 83       	st	Z, r24
	write_command(0x81); //contrast control
	write_command(0x50);
	write_command(0xd9); //set pre-charge period
	write_command(0x21);
	
	oled_set_adressing_mode(HORIZONTAL_MODE);
    159c:	80 e0       	ldi	r24, 0x00	; 0
    159e:	0e 94 cd 09 	call	0x139a	; 0x139a <oled_set_adressing_mode>
		}
	}
}

void write_command(uint8_t command){
	ext_oled_cmd[0] = command;
    15a2:	e0 91 0e 01 	lds	r30, 0x010E
    15a6:	f0 91 0f 01 	lds	r31, 0x010F
    15aa:	8b ed       	ldi	r24, 0xDB	; 219
    15ac:	80 83       	st	Z, r24
    15ae:	e0 91 0e 01 	lds	r30, 0x010E
    15b2:	f0 91 0f 01 	lds	r31, 0x010F
    15b6:	80 e3       	ldi	r24, 0x30	; 48
    15b8:	80 83       	st	Z, r24
    15ba:	e0 91 0e 01 	lds	r30, 0x010E
    15be:	f0 91 0f 01 	lds	r31, 0x010F
    15c2:	8d ea       	ldi	r24, 0xAD	; 173
    15c4:	80 83       	st	Z, r24
    15c6:	e0 91 0e 01 	lds	r30, 0x010E
    15ca:	f0 91 0f 01 	lds	r31, 0x010F
    15ce:	10 82       	st	Z, r1
    15d0:	e0 91 0e 01 	lds	r30, 0x010E
    15d4:	f0 91 0f 01 	lds	r31, 0x010F
    15d8:	84 ea       	ldi	r24, 0xA4	; 164
    15da:	80 83       	st	Z, r24
    15dc:	e0 91 0e 01 	lds	r30, 0x010E
    15e0:	f0 91 0f 01 	lds	r31, 0x010F
    15e4:	86 ea       	ldi	r24, 0xA6	; 166
    15e6:	80 83       	st	Z, r24
    15e8:	e0 91 0e 01 	lds	r30, 0x010E
    15ec:	f0 91 0f 01 	lds	r31, 0x010F
    15f0:	8f ea       	ldi	r24, 0xAF	; 175
    15f2:	80 83       	st	Z, r24
	write_command(0xad); //master configuration
	write_command(0x00);
	write_command(0xa4); //out follows RAM content
	write_command(0xa6); //set normal display
	write_command(0xaf); // display on
	oled_reset();
    15f4:	0e 94 70 0a 	call	0x14e0	; 0x14e0 <oled_reset>
    15f8:	08 95       	ret

000015fa <new_menu>:
void set_first_child(menu* mymenu, menu* first_child) {
	mymenu->first_child = first_child;
}


menu* new_menu(char* name, menu* parent) {
    15fa:	0f 93       	push	r16
    15fc:	1f 93       	push	r17
    15fe:	cf 93       	push	r28
    1600:	df 93       	push	r29
    1602:	8c 01       	movw	r16, r24
    1604:	eb 01       	movw	r28, r22
	menu* nextmenu = malloc(sizeof(menu));
    1606:	89 e0       	ldi	r24, 0x09	; 9
    1608:	90 e0       	ldi	r25, 0x00	; 0
    160a:	0e 94 b0 0d 	call	0x1b60	; 0x1b60 <malloc>
    160e:	fc 01       	movw	r30, r24
 	nextmenu->title = name;
    1610:	11 83       	std	Z+1, r17	; 0x01
    1612:	00 83       	st	Z, r16
	nextmenu->parent = parent;
    1614:	d4 83       	std	Z+4, r29	; 0x04
    1616:	c3 83       	std	Z+3, r28	; 0x03
 	nextmenu->right_sibling = NULL;
    1618:	10 86       	std	Z+8, r1	; 0x08
    161a:	17 82       	std	Z+7, r1	; 0x07
	nextmenu->first_child = NULL;
    161c:	16 82       	std	Z+6, r1	; 0x06
    161e:	15 82       	std	Z+5, r1	; 0x05
	return nextmenu;
}
    1620:	df 91       	pop	r29
    1622:	cf 91       	pop	r28
    1624:	1f 91       	pop	r17
    1626:	0f 91       	pop	r16
    1628:	08 95       	ret

0000162a <size_of_menu>:

int size_of_menu(menu* mymenu) {
	
	int menu_size = 0;
	
	mymenu = mymenu->first_child;
    162a:	dc 01       	movw	r26, r24
    162c:	15 96       	adiw	r26, 0x05	; 5
    162e:	ed 91       	ld	r30, X+
    1630:	fc 91       	ld	r31, X
    1632:	16 97       	sbiw	r26, 0x06	; 6
	if (mymenu == NULL) {
    1634:	30 97       	sbiw	r30, 0x00	; 0
    1636:	79 f0       	breq	.+30     	; 0x1656 <size_of_menu+0x2c>
		return menu_size;
	}
	menu_size ++;
	while (mymenu->right_sibling != NULL) {
    1638:	07 80       	ldd	r0, Z+7	; 0x07
    163a:	f0 85       	ldd	r31, Z+8	; 0x08
    163c:	e0 2d       	mov	r30, r0
    163e:	30 97       	sbiw	r30, 0x00	; 0
    1640:	69 f0       	breq	.+26     	; 0x165c <size_of_menu+0x32>
    1642:	21 e0       	ldi	r18, 0x01	; 1
    1644:	30 e0       	ldi	r19, 0x00	; 0
		mymenu = mymenu->right_sibling;
		menu_size++;
    1646:	2f 5f       	subi	r18, 0xFF	; 255
    1648:	3f 4f       	sbci	r19, 0xFF	; 255
	mymenu = mymenu->first_child;
	if (mymenu == NULL) {
		return menu_size;
	}
	menu_size ++;
	while (mymenu->right_sibling != NULL) {
    164a:	07 80       	ldd	r0, Z+7	; 0x07
    164c:	f0 85       	ldd	r31, Z+8	; 0x08
    164e:	e0 2d       	mov	r30, r0
    1650:	30 97       	sbiw	r30, 0x00	; 0
    1652:	c9 f7       	brne	.-14     	; 0x1646 <size_of_menu+0x1c>
    1654:	06 c0       	rjmp	.+12     	; 0x1662 <size_of_menu+0x38>
	
	int menu_size = 0;
	
	mymenu = mymenu->first_child;
	if (mymenu == NULL) {
		return menu_size;
    1656:	80 e0       	ldi	r24, 0x00	; 0
    1658:	90 e0       	ldi	r25, 0x00	; 0
    165a:	08 95       	ret
	}
	menu_size ++;
	while (mymenu->right_sibling != NULL) {
    165c:	81 e0       	ldi	r24, 0x01	; 1
    165e:	90 e0       	ldi	r25, 0x00	; 0
    1660:	08 95       	ret
		mymenu = mymenu->right_sibling;
		menu_size++;
    1662:	82 2f       	mov	r24, r18
    1664:	93 2f       	mov	r25, r19
	}
	return menu_size;
}
    1666:	08 95       	ret

00001668 <goto_menu>:
	return NONE;
}

void goto_menu() {
	int i = 0;
	menu* selected_menu = current_menu;
    1668:	a0 91 e3 03 	lds	r26, 0x03E3
    166c:	b0 91 e4 03 	lds	r27, 0x03E4
	if(current_menu->first_child != NULL){
    1670:	15 96       	adiw	r26, 0x05	; 5
    1672:	ed 91       	ld	r30, X+
    1674:	fc 91       	ld	r31, X
    1676:	16 97       	sbiw	r26, 0x06	; 6
    1678:	30 97       	sbiw	r30, 0x00	; 0
    167a:	a9 f0       	breq	.+42     	; 0x16a6 <goto_menu+0x3e>
		
		selected_menu = current_menu->first_child;
		for (i; i < current_line; i++)
    167c:	80 91 2c 01 	lds	r24, 0x012C
    1680:	90 91 2d 01 	lds	r25, 0x012D
    1684:	18 16       	cp	r1, r24
    1686:	19 06       	cpc	r1, r25
    1688:	7c f4       	brge	.+30     	; 0x16a8 <goto_menu+0x40>
    168a:	80 e0       	ldi	r24, 0x00	; 0
    168c:	90 e0       	ldi	r25, 0x00	; 0
		{
			selected_menu = selected_menu->right_sibling;
    168e:	07 80       	ldd	r0, Z+7	; 0x07
    1690:	f0 85       	ldd	r31, Z+8	; 0x08
    1692:	e0 2d       	mov	r30, r0
	int i = 0;
	menu* selected_menu = current_menu;
	if(current_menu->first_child != NULL){
		
		selected_menu = current_menu->first_child;
		for (i; i < current_line; i++)
    1694:	01 96       	adiw	r24, 0x01	; 1
    1696:	20 91 2c 01 	lds	r18, 0x012C
    169a:	30 91 2d 01 	lds	r19, 0x012D
    169e:	82 17       	cp	r24, r18
    16a0:	93 07       	cpc	r25, r19
    16a2:	ac f3       	brlt	.-22     	; 0x168e <goto_menu+0x26>
    16a4:	01 c0       	rjmp	.+2      	; 0x16a8 <goto_menu+0x40>
	return NONE;
}

void goto_menu() {
	int i = 0;
	menu* selected_menu = current_menu;
    16a6:	fd 01       	movw	r30, r26
		for (i; i < current_line; i++)
		{
			selected_menu = selected_menu->right_sibling;
		}
	}
	current_menu = selected_menu;
    16a8:	f0 93 e4 03 	sts	0x03E4, r31
    16ac:	e0 93 e3 03 	sts	0x03E3, r30
    16b0:	08 95       	ret

000016b2 <oled_menu_print>:
}
void oled_menu_print(menu* mymenu){
    16b2:	0f 93       	push	r16
    16b4:	1f 93       	push	r17
    16b6:	cf 93       	push	r28
    16b8:	df 93       	push	r29
    16ba:	ec 01       	movw	r28, r24
	oled_reset(); 
    16bc:	0e 94 70 0a 	call	0x14e0	; 0x14e0 <oled_reset>
	oled_printf("----------------");
    16c0:	04 e9       	ldi	r16, 0x94	; 148
    16c2:	12 e0       	ldi	r17, 0x02	; 2
    16c4:	1f 93       	push	r17
    16c6:	0f 93       	push	r16
    16c8:	0e 94 d9 09 	call	0x13b2	; 0x13b2 <oled_printf>
	oled_pos(1,0);
    16cc:	60 e0       	ldi	r22, 0x00	; 0
    16ce:	70 e0       	ldi	r23, 0x00	; 0
    16d0:	81 e0       	ldi	r24, 0x01	; 1
    16d2:	90 e0       	ldi	r25, 0x00	; 0
    16d4:	0e 94 45 0a 	call	0x148a	; 0x148a <oled_pos>
	oled_printf(mymenu->title);
    16d8:	89 81       	ldd	r24, Y+1	; 0x01
    16da:	8f 93       	push	r24
    16dc:	88 81       	ld	r24, Y
    16de:	8f 93       	push	r24
    16e0:	0e 94 d9 09 	call	0x13b2	; 0x13b2 <oled_printf>
	oled_pos(2,0);
    16e4:	60 e0       	ldi	r22, 0x00	; 0
    16e6:	70 e0       	ldi	r23, 0x00	; 0
    16e8:	82 e0       	ldi	r24, 0x02	; 2
    16ea:	90 e0       	ldi	r25, 0x00	; 0
    16ec:	0e 94 45 0a 	call	0x148a	; 0x148a <oled_pos>
	oled_printf("----------------");
    16f0:	1f 93       	push	r17
    16f2:	0f 93       	push	r16
    16f4:	0e 94 d9 09 	call	0x13b2	; 0x13b2 <oled_printf>
	oled_pos(4,0);
    16f8:	60 e0       	ldi	r22, 0x00	; 0
    16fa:	70 e0       	ldi	r23, 0x00	; 0
    16fc:	84 e0       	ldi	r24, 0x04	; 4
    16fe:	90 e0       	ldi	r25, 0x00	; 0
    1700:	0e 94 45 0a 	call	0x148a	; 0x148a <oled_pos>
	current_menu_size = size_of_menu(mymenu);
    1704:	ce 01       	movw	r24, r28
    1706:	0e 94 15 0b 	call	0x162a	; 0x162a <size_of_menu>
    170a:	90 93 e6 03 	sts	0x03E6, r25
    170e:	80 93 e5 03 	sts	0x03E5, r24
	mymenu = mymenu->first_child;
    1712:	0d 81       	ldd	r16, Y+5	; 0x05
    1714:	1e 81       	ldd	r17, Y+6	; 0x06
	for(int i = 0; i < current_menu_size; i++){
    1716:	80 91 e5 03 	lds	r24, 0x03E5
    171a:	90 91 e6 03 	lds	r25, 0x03E6
    171e:	0f 90       	pop	r0
    1720:	0f 90       	pop	r0
    1722:	0f 90       	pop	r0
    1724:	0f 90       	pop	r0
    1726:	0f 90       	pop	r0
    1728:	0f 90       	pop	r0
    172a:	18 16       	cp	r1, r24
    172c:	19 06       	cpc	r1, r25
    172e:	6c f5       	brge	.+90     	; 0x178a <oled_menu_print+0xd8>
    1730:	c0 e0       	ldi	r28, 0x00	; 0
    1732:	d0 e0       	ldi	r29, 0x00	; 0
		oled_pos(i+4,0);
    1734:	60 e0       	ldi	r22, 0x00	; 0
    1736:	70 e0       	ldi	r23, 0x00	; 0
    1738:	ce 01       	movw	r24, r28
    173a:	04 96       	adiw	r24, 0x04	; 4
    173c:	0e 94 45 0a 	call	0x148a	; 0x148a <oled_pos>
		if(current_line == i){
    1740:	80 91 2c 01 	lds	r24, 0x012C
    1744:	90 91 2d 01 	lds	r25, 0x012D
    1748:	8c 17       	cp	r24, r28
    174a:	9d 07       	cpc	r25, r29
    174c:	51 f4       	brne	.+20     	; 0x1762 <oled_menu_print+0xb0>
			oled_inv_printf(mymenu->title);
    174e:	f8 01       	movw	r30, r16
    1750:	81 81       	ldd	r24, Z+1	; 0x01
    1752:	8f 93       	push	r24
    1754:	80 81       	ld	r24, Z
    1756:	8f 93       	push	r24
    1758:	0e 94 e9 09 	call	0x13d2	; 0x13d2 <oled_inv_printf>
    175c:	0f 90       	pop	r0
    175e:	0f 90       	pop	r0
    1760:	09 c0       	rjmp	.+18     	; 0x1774 <oled_menu_print+0xc2>
		}
		else{
			oled_printf(mymenu->title);
    1762:	f8 01       	movw	r30, r16
    1764:	81 81       	ldd	r24, Z+1	; 0x01
    1766:	8f 93       	push	r24
    1768:	80 81       	ld	r24, Z
    176a:	8f 93       	push	r24
    176c:	0e 94 d9 09 	call	0x13b2	; 0x13b2 <oled_printf>
    1770:	0f 90       	pop	r0
    1772:	0f 90       	pop	r0
		}
		mymenu = mymenu->right_sibling;
    1774:	f8 01       	movw	r30, r16
    1776:	07 81       	ldd	r16, Z+7	; 0x07
    1778:	10 85       	ldd	r17, Z+8	; 0x08
	oled_pos(2,0);
	oled_printf("----------------");
	oled_pos(4,0);
	current_menu_size = size_of_menu(mymenu);
	mymenu = mymenu->first_child;
	for(int i = 0; i < current_menu_size; i++){
    177a:	21 96       	adiw	r28, 0x01	; 1
    177c:	80 91 e5 03 	lds	r24, 0x03E5
    1780:	90 91 e6 03 	lds	r25, 0x03E6
    1784:	c8 17       	cp	r28, r24
    1786:	d9 07       	cpc	r29, r25
    1788:	ac f2       	brlt	.-86     	; 0x1734 <oled_menu_print+0x82>
		}
		mymenu = mymenu->right_sibling;
	}
	mymenu = mymenu->parent;
	
    178a:	df 91       	pop	r29
    178c:	cf 91       	pop	r28
    178e:	1f 91       	pop	r17
    1790:	0f 91       	pop	r16
    1792:	08 95       	ret

00001794 <oled_menu_init>:
		menu_size++;
	}
	return menu_size;
}

menu* oled_menu_init(void) {
    1794:	2f 92       	push	r2
    1796:	3f 92       	push	r3
    1798:	4f 92       	push	r4
    179a:	5f 92       	push	r5
    179c:	6f 92       	push	r6
    179e:	7f 92       	push	r7
    17a0:	8f 92       	push	r8
    17a2:	9f 92       	push	r9
    17a4:	af 92       	push	r10
    17a6:	bf 92       	push	r11
    17a8:	cf 92       	push	r12
    17aa:	df 92       	push	r13
    17ac:	ef 92       	push	r14
    17ae:	ff 92       	push	r15
    17b0:	0f 93       	push	r16
    17b2:	1f 93       	push	r17
    17b4:	cf 93       	push	r28
    17b6:	df 93       	push	r29
	print = 1;
    17b8:	81 e0       	ldi	r24, 0x01	; 1
    17ba:	90 e0       	ldi	r25, 0x00	; 0
    17bc:	90 93 e2 03 	sts	0x03E2, r25
    17c0:	80 93 e1 03 	sts	0x03E1, r24
	menu* main_menu = new_menu("Main Menu", NULL);
    17c4:	60 e0       	ldi	r22, 0x00	; 0
    17c6:	70 e0       	ldi	r23, 0x00	; 0
    17c8:	8b ed       	ldi	r24, 0xDB	; 219
    17ca:	92 e0       	ldi	r25, 0x02	; 2
    17cc:	0e 94 fd 0a 	call	0x15fa	; 0x15fa <new_menu>
    17d0:	ec 01       	movw	r28, r24
	menu* play_game = new_menu("Play Game", main_menu);
    17d2:	bc 01       	movw	r22, r24
    17d4:	85 ee       	ldi	r24, 0xE5	; 229
    17d6:	92 e0       	ldi	r25, 0x02	; 2
    17d8:	0e 94 fd 0a 	call	0x15fa	; 0x15fa <new_menu>
    17dc:	7c 01       	movw	r14, r24
	menu* highscores = new_menu("Highscores", main_menu);
    17de:	be 01       	movw	r22, r28
    17e0:	8f ee       	ldi	r24, 0xEF	; 239
    17e2:	92 e0       	ldi	r25, 0x02	; 2
    17e4:	0e 94 fd 0a 	call	0x15fa	; 0x15fa <new_menu>
    17e8:	4c 01       	movw	r8, r24
	menu* singelP = new_menu("Singel Player", play_game);
    17ea:	b7 01       	movw	r22, r14
    17ec:	8a ef       	ldi	r24, 0xFA	; 250
    17ee:	92 e0       	ldi	r25, 0x02	; 2
    17f0:	0e 94 fd 0a 	call	0x15fa	; 0x15fa <new_menu>
    17f4:	5c 01       	movw	r10, r24
	menu* multiP = new_menu("Multi Player", play_game);
    17f6:	b7 01       	movw	r22, r14
    17f8:	88 e0       	ldi	r24, 0x08	; 8
    17fa:	93 e0       	ldi	r25, 0x03	; 3
    17fc:	0e 94 fd 0a 	call	0x15fa	; 0x15fa <new_menu>
    1800:	2c 01       	movw	r4, r24
	menu* difficulty = new_menu("Difficulty", main_menu);
    1802:	be 01       	movw	r22, r28
    1804:	85 e1       	ldi	r24, 0x15	; 21
    1806:	93 e0       	ldi	r25, 0x03	; 3
    1808:	0e 94 fd 0a 	call	0x15fa	; 0x15fa <new_menu>
    180c:	8c 01       	movw	r16, r24
	menu* d_easy = new_menu("Easy", difficulty);
    180e:	bc 01       	movw	r22, r24
    1810:	80 e2       	ldi	r24, 0x20	; 32
    1812:	93 e0       	ldi	r25, 0x03	; 3
    1814:	0e 94 fd 0a 	call	0x15fa	; 0x15fa <new_menu>
    1818:	6c 01       	movw	r12, r24
	menu* d_medium = new_menu("Medium", difficulty);
    181a:	b8 01       	movw	r22, r16
    181c:	85 e2       	ldi	r24, 0x25	; 37
    181e:	93 e0       	ldi	r25, 0x03	; 3
    1820:	0e 94 fd 0a 	call	0x15fa	; 0x15fa <new_menu>
    1824:	3c 01       	movw	r6, r24
	menu* d_hard = new_menu("Hard", difficulty);
    1826:	b8 01       	movw	r22, r16
    1828:	8c e2       	ldi	r24, 0x2C	; 44
    182a:	93 e0       	ldi	r25, 0x03	; 3
    182c:	0e 94 fd 0a 	call	0x15fa	; 0x15fa <new_menu>
    1830:	1c 01       	movw	r2, r24
	
	
	current_menu = main_menu;
    1832:	d0 93 e4 03 	sts	0x03E4, r29
    1836:	c0 93 e3 03 	sts	0x03E3, r28
	current_menu_size = size_of_menu(current_menu);
    183a:	ce 01       	movw	r24, r28
    183c:	0e 94 15 0b 	call	0x162a	; 0x162a <size_of_menu>
    1840:	90 93 e6 03 	sts	0x03E6, r25
    1844:	80 93 e5 03 	sts	0x03E5, r24
	oled_menu_print(current_menu);
    1848:	ce 01       	movw	r24, r28
    184a:	0e 94 59 0b 	call	0x16b2	; 0x16b2 <oled_menu_print>
	mymenu->right_sibling = right_sibling;
}


void set_first_child(menu* mymenu, menu* first_child) {
	mymenu->first_child = first_child;
    184e:	fe 82       	std	Y+6, r15	; 0x06
    1850:	ed 82       	std	Y+5, r14	; 0x05
volatile int current_menu_size;
volatile int print;


void set_right_sibling(menu* mymenu, menu* right_sibling) {
	mymenu->right_sibling = right_sibling;
    1852:	f7 01       	movw	r30, r14
    1854:	90 86       	std	Z+8, r9	; 0x08
    1856:	87 82       	std	Z+7, r8	; 0x07
    1858:	f4 01       	movw	r30, r8
    185a:	10 87       	std	Z+8, r17	; 0x08
    185c:	07 83       	std	Z+7, r16	; 0x07
}


void set_first_child(menu* mymenu, menu* first_child) {
	mymenu->first_child = first_child;
    185e:	f7 01       	movw	r30, r14
    1860:	b6 82       	std	Z+6, r11	; 0x06
    1862:	a5 82       	std	Z+5, r10	; 0x05
volatile int current_menu_size;
volatile int print;


void set_right_sibling(menu* mymenu, menu* right_sibling) {
	mymenu->right_sibling = right_sibling;
    1864:	f5 01       	movw	r30, r10
    1866:	50 86       	std	Z+8, r5	; 0x08
    1868:	47 82       	std	Z+7, r4	; 0x07
}


void set_first_child(menu* mymenu, menu* first_child) {
	mymenu->first_child = first_child;
    186a:	f8 01       	movw	r30, r16
    186c:	d6 82       	std	Z+6, r13	; 0x06
    186e:	c5 82       	std	Z+5, r12	; 0x05
volatile int current_menu_size;
volatile int print;


void set_right_sibling(menu* mymenu, menu* right_sibling) {
	mymenu->right_sibling = right_sibling;
    1870:	f6 01       	movw	r30, r12
    1872:	70 86       	std	Z+8, r7	; 0x08
    1874:	67 82       	std	Z+7, r6	; 0x07
    1876:	f3 01       	movw	r30, r6
    1878:	30 86       	std	Z+8, r3	; 0x08
    187a:	27 82       	std	Z+7, r2	; 0x07
	set_first_child(difficulty, d_easy);
	set_right_sibling(d_easy, d_medium);
	set_right_sibling(d_medium, d_hard);

	return current_menu;
}
    187c:	80 91 e3 03 	lds	r24, 0x03E3
    1880:	90 91 e4 03 	lds	r25, 0x03E4
    1884:	df 91       	pop	r29
    1886:	cf 91       	pop	r28
    1888:	1f 91       	pop	r17
    188a:	0f 91       	pop	r16
    188c:	ff 90       	pop	r15
    188e:	ef 90       	pop	r14
    1890:	df 90       	pop	r13
    1892:	cf 90       	pop	r12
    1894:	bf 90       	pop	r11
    1896:	af 90       	pop	r10
    1898:	9f 90       	pop	r9
    189a:	8f 90       	pop	r8
    189c:	7f 90       	pop	r7
    189e:	6f 90       	pop	r6
    18a0:	5f 90       	pop	r5
    18a2:	4f 90       	pop	r4
    18a4:	3f 90       	pop	r3
    18a6:	2f 90       	pop	r2
    18a8:	08 95       	ret

000018aa <oled_menu_select>:


menu_option oled_menu_select(){
    18aa:	1f 93       	push	r17
    18ac:	cf 93       	push	r28
    18ae:	df 93       	push	r29
    18b0:	00 d0       	rcall	.+0      	; 0x18b2 <oled_menu_select+0x8>
    18b2:	00 d0       	rcall	.+0      	; 0x18b4 <oled_menu_select+0xa>
    18b4:	1f 92       	push	r1
    18b6:	cd b7       	in	r28, 0x3d	; 61
    18b8:	de b7       	in	r29, 0x3e	; 62
	
	JoystickDir direction = joystickPos().Dir;
    18ba:	0e 94 62 07 	call	0xec4	; 0xec4 <joystickPos>
    18be:	29 83       	std	Y+1, r18	; 0x01
    18c0:	3a 83       	std	Y+2, r19	; 0x02
    18c2:	4b 83       	std	Y+3, r20	; 0x03
    18c4:	5c 83       	std	Y+4, r21	; 0x04
    18c6:	6d 83       	std	Y+5, r22	; 0x05
    18c8:	16 2f       	mov	r17, r22
	current_menu_size = size_of_menu(current_menu);
    18ca:	80 91 e3 03 	lds	r24, 0x03E3
    18ce:	90 91 e4 03 	lds	r25, 0x03E4
    18d2:	0e 94 15 0b 	call	0x162a	; 0x162a <size_of_menu>
    18d6:	90 93 e6 03 	sts	0x03E6, r25
    18da:	80 93 e5 03 	sts	0x03E5, r24
	
	if(direction == UP){
    18de:	12 30       	cpi	r17, 0x02	; 2
    18e0:	51 f4       	brne	.+20     	; 0x18f6 <oled_menu_select+0x4c>
		current_line--;
    18e2:	80 91 2c 01 	lds	r24, 0x012C
    18e6:	90 91 2d 01 	lds	r25, 0x012D
    18ea:	01 97       	sbiw	r24, 0x01	; 1
    18ec:	90 93 2d 01 	sts	0x012D, r25
    18f0:	80 93 2c 01 	sts	0x012C, r24
    18f4:	0b c0       	rjmp	.+22     	; 0x190c <oled_menu_select+0x62>
	}
	if(direction == DOWN){
    18f6:	13 30       	cpi	r17, 0x03	; 3
    18f8:	49 f4       	brne	.+18     	; 0x190c <oled_menu_select+0x62>
		current_line++;
    18fa:	80 91 2c 01 	lds	r24, 0x012C
    18fe:	90 91 2d 01 	lds	r25, 0x012D
    1902:	01 96       	adiw	r24, 0x01	; 1
    1904:	90 93 2d 01 	sts	0x012D, r25
    1908:	80 93 2c 01 	sts	0x012C, r24
	}
	if(current_line > current_menu_size-1){
    190c:	20 91 e5 03 	lds	r18, 0x03E5
    1910:	30 91 e6 03 	lds	r19, 0x03E6
    1914:	80 91 2c 01 	lds	r24, 0x012C
    1918:	90 91 2d 01 	lds	r25, 0x012D
    191c:	21 50       	subi	r18, 0x01	; 1
    191e:	31 09       	sbc	r19, r1
    1920:	28 17       	cp	r18, r24
    1922:	39 07       	cpc	r19, r25
    1924:	4c f4       	brge	.+18     	; 0x1938 <oled_menu_select+0x8e>
		current_line = current_menu_size-1;
    1926:	80 91 e5 03 	lds	r24, 0x03E5
    192a:	90 91 e6 03 	lds	r25, 0x03E6
    192e:	01 97       	sbiw	r24, 0x01	; 1
    1930:	90 93 2d 01 	sts	0x012D, r25
    1934:	80 93 2c 01 	sts	0x012C, r24
	}
	if(current_line < 0){
    1938:	80 91 2c 01 	lds	r24, 0x012C
    193c:	90 91 2d 01 	lds	r25, 0x012D
    1940:	99 23       	and	r25, r25
    1942:	24 f4       	brge	.+8      	; 0x194c <oled_menu_select+0xa2>
		current_line = 0;
    1944:	10 92 2d 01 	sts	0x012D, r1
    1948:	10 92 2c 01 	sts	0x012C, r1
	}
	if (direction == RIGHT) {
    194c:	11 30       	cpi	r17, 0x01	; 1
    194e:	01 f5       	brne	.+64     	; 0x1990 <oled_menu_select+0xe6>
		goto_menu();
    1950:	0e 94 34 0b 	call	0x1668	; 0x1668 <goto_menu>
		if (current_menu->title == "Singel Player"){
    1954:	e0 91 e3 03 	lds	r30, 0x03E3
    1958:	f0 91 e4 03 	lds	r31, 0x03E4
    195c:	80 81       	ld	r24, Z
    195e:	91 81       	ldd	r25, Z+1	; 0x01
    1960:	22 e0       	ldi	r18, 0x02	; 2
    1962:	8a 3f       	cpi	r24, 0xFA	; 250
    1964:	92 07       	cpc	r25, r18
    1966:	51 f1       	breq	.+84     	; 0x19bc <oled_menu_select+0x112>
			return SinglePlayer;
		}
		else if (current_menu->title == "Highscores"){
    1968:	22 e0       	ldi	r18, 0x02	; 2
    196a:	8f 3e       	cpi	r24, 0xEF	; 239
    196c:	92 07       	cpc	r25, r18
    196e:	41 f1       	breq	.+80     	; 0x19c0 <oled_menu_select+0x116>
			return Highscore;
		}
		else if (current_menu->title == "Multi Player"){
    1970:	23 e0       	ldi	r18, 0x03	; 3
    1972:	88 30       	cpi	r24, 0x08	; 8
    1974:	92 07       	cpc	r25, r18
    1976:	31 f1       	breq	.+76     	; 0x19c4 <oled_menu_select+0x11a>
			return Multiplayer;
		}
		else if (current_menu->title == "Easy"){
    1978:	23 e0       	ldi	r18, 0x03	; 3
    197a:	80 32       	cpi	r24, 0x20	; 32
    197c:	92 07       	cpc	r25, r18
    197e:	21 f1       	breq	.+72     	; 0x19c8 <oled_menu_select+0x11e>
			return Easy;
			//current_menu = current_menu->parent;
			//current_menu = current_menu->parent;
		}
		else if (current_menu->title == "Medium"){
    1980:	23 e0       	ldi	r18, 0x03	; 3
    1982:	85 32       	cpi	r24, 0x25	; 37
    1984:	92 07       	cpc	r25, r18
    1986:	11 f1       	breq	.+68     	; 0x19cc <oled_menu_select+0x122>
			return Medium;
			//current_menu = current_menu->parent;
			//current_menu = current_menu->parent;
		}
		else if (current_menu->title == "Hard"){
    1988:	8c 52       	subi	r24, 0x2C	; 44
    198a:	93 40       	sbci	r25, 0x03	; 3
    198c:	79 f4       	brne	.+30     	; 0x19ac <oled_menu_select+0x102>
    198e:	20 c0       	rjmp	.+64     	; 0x19d0 <oled_menu_select+0x126>
			//current_menu = current_menu->parent;
			//current_menu = current_menu->parent;
		}
	}
	
	if (direction == LEFT) {
    1990:	11 11       	cpse	r17, r1
    1992:	0c c0       	rjmp	.+24     	; 0x19ac <oled_menu_select+0x102>
		if(current_menu->parent != NULL){
    1994:	e0 91 e3 03 	lds	r30, 0x03E3
    1998:	f0 91 e4 03 	lds	r31, 0x03E4
    199c:	83 81       	ldd	r24, Z+3	; 0x03
    199e:	94 81       	ldd	r25, Z+4	; 0x04
    19a0:	00 97       	sbiw	r24, 0x00	; 0
    19a2:	21 f0       	breq	.+8      	; 0x19ac <oled_menu_select+0x102>
		current_menu = current_menu->parent;
    19a4:	90 93 e4 03 	sts	0x03E4, r25
    19a8:	80 93 e3 03 	sts	0x03E3, r24
		}
	}
	oled_menu_print(current_menu);
    19ac:	80 91 e3 03 	lds	r24, 0x03E3
    19b0:	90 91 e4 03 	lds	r25, 0x03E4
    19b4:	0e 94 59 0b 	call	0x16b2	; 0x16b2 <oled_menu_print>
	return NONE;
    19b8:	80 e0       	ldi	r24, 0x00	; 0
    19ba:	0b c0       	rjmp	.+22     	; 0x19d2 <oled_menu_select+0x128>
		current_line = 0;
	}
	if (direction == RIGHT) {
		goto_menu();
		if (current_menu->title == "Singel Player"){
			return SinglePlayer;
    19bc:	81 e0       	ldi	r24, 0x01	; 1
    19be:	09 c0       	rjmp	.+18     	; 0x19d2 <oled_menu_select+0x128>
		}
		else if (current_menu->title == "Highscores"){
			return Highscore;
    19c0:	83 e0       	ldi	r24, 0x03	; 3
    19c2:	07 c0       	rjmp	.+14     	; 0x19d2 <oled_menu_select+0x128>
		}
		else if (current_menu->title == "Multi Player"){
			return Multiplayer;
    19c4:	82 e0       	ldi	r24, 0x02	; 2
    19c6:	05 c0       	rjmp	.+10     	; 0x19d2 <oled_menu_select+0x128>
		}
		else if (current_menu->title == "Easy"){
			return Easy;
    19c8:	87 e0       	ldi	r24, 0x07	; 7
    19ca:	03 c0       	rjmp	.+6      	; 0x19d2 <oled_menu_select+0x128>
			//current_menu = current_menu->parent;
			//current_menu = current_menu->parent;
		}
		else if (current_menu->title == "Medium"){
			return Medium;
    19cc:	88 e0       	ldi	r24, 0x08	; 8
    19ce:	01 c0       	rjmp	.+2      	; 0x19d2 <oled_menu_select+0x128>
			//current_menu = current_menu->parent;
			//current_menu = current_menu->parent;
		}
		else if (current_menu->title == "Hard"){
			return Hard;
    19d0:	89 e0       	ldi	r24, 0x09	; 9
		current_menu = current_menu->parent;
		}
	}
	oled_menu_print(current_menu);
	return NONE;
}
    19d2:	0f 90       	pop	r0
    19d4:	0f 90       	pop	r0
    19d6:	0f 90       	pop	r0
    19d8:	0f 90       	pop	r0
    19da:	0f 90       	pop	r0
    19dc:	df 91       	pop	r29
    19de:	cf 91       	pop	r28
    19e0:	1f 91       	pop	r17
    19e2:	08 95       	ret

000019e4 <slider_position>:
 *  Author: juliessk
 */ 
#include "slider.h"


slider_str slider_position(void){
    19e4:	cf 93       	push	r28
	slider_str sliderposition;
	ADC_start_read(CHANNEL3);
    19e6:	82 e0       	ldi	r24, 0x02	; 2
    19e8:	0e 94 fe 01 	call	0x3fc	; 0x3fc <ADC_start_read>
    19ec:	81 ee       	ldi	r24, 0xE1	; 225
    19ee:	94 e0       	ldi	r25, 0x04	; 4
    19f0:	01 97       	sbiw	r24, 0x01	; 1
    19f2:	f1 f7       	brne	.-4      	; 0x19f0 <slider_position+0xc>
    19f4:	00 c0       	rjmp	.+0      	; 0x19f6 <slider_position+0x12>
    19f6:	00 00       	nop
	_delay_ms(5);
	sliderposition.L = get_ADC_data();
    19f8:	0e 94 f8 01 	call	0x3f0	; 0x3f0 <get_ADC_data>
    19fc:	c8 2f       	mov	r28, r24
	ADC_start_read(CHANNEL4);
    19fe:	83 e0       	ldi	r24, 0x03	; 3
    1a00:	0e 94 fe 01 	call	0x3fc	; 0x3fc <ADC_start_read>
    1a04:	81 ee       	ldi	r24, 0xE1	; 225
    1a06:	94 e0       	ldi	r25, 0x04	; 4
    1a08:	01 97       	sbiw	r24, 0x01	; 1
    1a0a:	f1 f7       	brne	.-4      	; 0x1a08 <slider_position+0x24>
    1a0c:	00 c0       	rjmp	.+0      	; 0x1a0e <slider_position+0x2a>
    1a0e:	00 00       	nop
	_delay_ms(5);
	sliderposition.R =  get_ADC_data();
    1a10:	0e 94 f8 01 	call	0x3f0	; 0x3f0 <get_ADC_data>
    1a14:	98 2f       	mov	r25, r24
	
	return sliderposition;
}
    1a16:	8c 2f       	mov	r24, r28
    1a18:	cf 91       	pop	r28
    1a1a:	08 95       	ret

00001a1c <slider_right_button>:

int slider_right_button(void){
	if((PINB & 0b00000010) != 0){ //PB1
    1a1c:	86 b3       	in	r24, 0x16	; 22
		return 1;
	}
	return 0;
}
    1a1e:	86 95       	lsr	r24
    1a20:	81 70       	andi	r24, 0x01	; 1
    1a22:	90 e0       	ldi	r25, 0x00	; 0
    1a24:	08 95       	ret

00001a26 <slider_left_button>:

int slider_left_button(void){
	if((PINB & 0b00000100) != 0){ //PB2
    1a26:	86 b3       	in	r24, 0x16	; 22
		return 1;
	}
	return 0;
}
    1a28:	82 fb       	bst	r24, 2
    1a2a:	88 27       	eor	r24, r24
    1a2c:	80 f9       	bld	r24, 0
    1a2e:	90 e0       	ldi	r25, 0x00	; 0
    1a30:	08 95       	ret

00001a32 <SPI_init>:
#include "bit_macros.h"
#include <avr/delay.h>
void SPI_init(){
	
	// Set SS, MOSI and SCK output
	DDRB = (1<<PB4)|(1<<PB5)|(1<<PB7);
    1a32:	80 eb       	ldi	r24, 0xB0	; 176
    1a34:	87 bb       	out	0x17, r24	; 23
	// Enable SPI, Master, set clock rate fck/16
	SPCR = (1<<SPE)|(1<<MSTR)|(1<<SPR0);
    1a36:	81 e5       	ldi	r24, 0x51	; 81
    1a38:	8d b9       	out	0x0d, r24	; 13
	
	/* Set SS-pin high */
	set_bit(PORTB, PB4);
    1a3a:	c4 9a       	sbi	0x18, 4	; 24
    1a3c:	08 95       	ret

00001a3e <SPI_write>:

void SPI_write(char cData) {
	
	
	/* Start transmission */
	SPDR = cData;
    1a3e:	8f b9       	out	0x0f, r24	; 15
	
	/* Wait for transmission complete */
	loop_until_bit_is_set(SPSR, SPIF);
    1a40:	77 9b       	sbis	0x0e, 7	; 14
    1a42:	fe cf       	rjmp	.-4      	; 0x1a40 <SPI_write+0x2>
	
}
    1a44:	08 95       	ret

00001a46 <SPI_read>:

char SPI_read() {
	
	/* Start shifting registers by putting a char in the register */
	SPDR = 0x00;
    1a46:	1f b8       	out	0x0f, r1	; 15
	//_delay_ms(10);
	/* Wait for receive complete */ 
	loop_until_bit_is_set(SPSR,SPIF);
    1a48:	77 9b       	sbis	0x0e, 7	; 14
    1a4a:	fe cf       	rjmp	.-4      	; 0x1a48 <SPI_read+0x2>
	
	return SPDR;
    1a4c:	8f b1       	in	r24, 0x0f	; 15
}
    1a4e:	08 95       	ret

00001a50 <SRAM_write>:
#ifndef SRAM_FIRST_ADDRESS
#define SRAM_FIRST_ADDRESS 0x1800
#endif

int SRAM_write(uint16_t address, char data){
	if (address > 0x7FF){
    1a50:	81 15       	cp	r24, r1
    1a52:	28 e0       	ldi	r18, 0x08	; 8
    1a54:	92 07       	cpc	r25, r18
    1a56:	38 f0       	brcs	.+14     	; 0x1a66 <SRAM_write+0x16>
		printf("SRAM error, trying to write to an address that is too big\n");
    1a58:	81 e3       	ldi	r24, 0x31	; 49
    1a5a:	93 e0       	ldi	r25, 0x03	; 3
    1a5c:	0e 94 36 0f 	call	0x1e6c	; 0x1e6c <puts>
		return EXIT_FAILURE;
    1a60:	81 e0       	ldi	r24, 0x01	; 1
    1a62:	90 e0       	ldi	r25, 0x00	; 0
    1a64:	08 95       	ret
	}
	
	volatile char* ext_ram = SRAM_FIRST_ADDRESS;
	ext_ram[address] = data;
    1a66:	fc 01       	movw	r30, r24
    1a68:	f8 5e       	subi	r31, 0xE8	; 232
    1a6a:	60 83       	st	Z, r22
	
	return 0;
    1a6c:	80 e0       	ldi	r24, 0x00	; 0
    1a6e:	90 e0       	ldi	r25, 0x00	; 0
}
    1a70:	08 95       	ret

00001a72 <SRAM_read>:

char SRAM_read(uint16_t address){
	if (address > 0x7FF){
    1a72:	81 15       	cp	r24, r1
    1a74:	28 e0       	ldi	r18, 0x08	; 8
    1a76:	92 07       	cpc	r25, r18
    1a78:	30 f0       	brcs	.+12     	; 0x1a86 <SRAM_read+0x14>
		printf("SRAM error, trying to read an address that is too big\n");
    1a7a:	8b e6       	ldi	r24, 0x6B	; 107
    1a7c:	93 e0       	ldi	r25, 0x03	; 3
    1a7e:	0e 94 36 0f 	call	0x1e6c	; 0x1e6c <puts>
		return EXIT_FAILURE;
    1a82:	81 e0       	ldi	r24, 0x01	; 1
    1a84:	08 95       	ret
	}
	
	volatile char* ext_ram = SRAM_FIRST_ADDRESS;
	return ext_ram[address];
    1a86:	fc 01       	movw	r30, r24
    1a88:	f8 5e       	subi	r31, 0xE8	; 232
    1a8a:	80 81       	ld	r24, Z
	
}
    1a8c:	08 95       	ret

00001a8e <__divmodhi4>:
    1a8e:	97 fb       	bst	r25, 7
    1a90:	07 2e       	mov	r0, r23
    1a92:	16 f4       	brtc	.+4      	; 0x1a98 <__divmodhi4+0xa>
    1a94:	00 94       	com	r0
    1a96:	07 d0       	rcall	.+14     	; 0x1aa6 <__divmodhi4_neg1>
    1a98:	77 fd       	sbrc	r23, 7
    1a9a:	09 d0       	rcall	.+18     	; 0x1aae <__divmodhi4_neg2>
    1a9c:	0e 94 7a 0d 	call	0x1af4	; 0x1af4 <__udivmodhi4>
    1aa0:	07 fc       	sbrc	r0, 7
    1aa2:	05 d0       	rcall	.+10     	; 0x1aae <__divmodhi4_neg2>
    1aa4:	3e f4       	brtc	.+14     	; 0x1ab4 <__divmodhi4_exit>

00001aa6 <__divmodhi4_neg1>:
    1aa6:	90 95       	com	r25
    1aa8:	81 95       	neg	r24
    1aaa:	9f 4f       	sbci	r25, 0xFF	; 255
    1aac:	08 95       	ret

00001aae <__divmodhi4_neg2>:
    1aae:	70 95       	com	r23
    1ab0:	61 95       	neg	r22
    1ab2:	7f 4f       	sbci	r23, 0xFF	; 255

00001ab4 <__divmodhi4_exit>:
    1ab4:	08 95       	ret

00001ab6 <__divmodsi4>:
    1ab6:	05 2e       	mov	r0, r21
    1ab8:	97 fb       	bst	r25, 7
    1aba:	1e f4       	brtc	.+6      	; 0x1ac2 <__divmodsi4+0xc>
    1abc:	00 94       	com	r0
    1abe:	0e 94 72 0d 	call	0x1ae4	; 0x1ae4 <__negsi2>
    1ac2:	57 fd       	sbrc	r21, 7
    1ac4:	07 d0       	rcall	.+14     	; 0x1ad4 <__divmodsi4_neg2>
    1ac6:	0e 94 8e 0d 	call	0x1b1c	; 0x1b1c <__udivmodsi4>
    1aca:	07 fc       	sbrc	r0, 7
    1acc:	03 d0       	rcall	.+6      	; 0x1ad4 <__divmodsi4_neg2>
    1ace:	4e f4       	brtc	.+18     	; 0x1ae2 <__divmodsi4_exit>
    1ad0:	0c 94 72 0d 	jmp	0x1ae4	; 0x1ae4 <__negsi2>

00001ad4 <__divmodsi4_neg2>:
    1ad4:	50 95       	com	r21
    1ad6:	40 95       	com	r20
    1ad8:	30 95       	com	r19
    1ada:	21 95       	neg	r18
    1adc:	3f 4f       	sbci	r19, 0xFF	; 255
    1ade:	4f 4f       	sbci	r20, 0xFF	; 255
    1ae0:	5f 4f       	sbci	r21, 0xFF	; 255

00001ae2 <__divmodsi4_exit>:
    1ae2:	08 95       	ret

00001ae4 <__negsi2>:
    1ae4:	90 95       	com	r25
    1ae6:	80 95       	com	r24
    1ae8:	70 95       	com	r23
    1aea:	61 95       	neg	r22
    1aec:	7f 4f       	sbci	r23, 0xFF	; 255
    1aee:	8f 4f       	sbci	r24, 0xFF	; 255
    1af0:	9f 4f       	sbci	r25, 0xFF	; 255
    1af2:	08 95       	ret

00001af4 <__udivmodhi4>:
    1af4:	aa 1b       	sub	r26, r26
    1af6:	bb 1b       	sub	r27, r27
    1af8:	51 e1       	ldi	r21, 0x11	; 17
    1afa:	07 c0       	rjmp	.+14     	; 0x1b0a <__udivmodhi4_ep>

00001afc <__udivmodhi4_loop>:
    1afc:	aa 1f       	adc	r26, r26
    1afe:	bb 1f       	adc	r27, r27
    1b00:	a6 17       	cp	r26, r22
    1b02:	b7 07       	cpc	r27, r23
    1b04:	10 f0       	brcs	.+4      	; 0x1b0a <__udivmodhi4_ep>
    1b06:	a6 1b       	sub	r26, r22
    1b08:	b7 0b       	sbc	r27, r23

00001b0a <__udivmodhi4_ep>:
    1b0a:	88 1f       	adc	r24, r24
    1b0c:	99 1f       	adc	r25, r25
    1b0e:	5a 95       	dec	r21
    1b10:	a9 f7       	brne	.-22     	; 0x1afc <__udivmodhi4_loop>
    1b12:	80 95       	com	r24
    1b14:	90 95       	com	r25
    1b16:	bc 01       	movw	r22, r24
    1b18:	cd 01       	movw	r24, r26
    1b1a:	08 95       	ret

00001b1c <__udivmodsi4>:
    1b1c:	a1 e2       	ldi	r26, 0x21	; 33
    1b1e:	1a 2e       	mov	r1, r26
    1b20:	aa 1b       	sub	r26, r26
    1b22:	bb 1b       	sub	r27, r27
    1b24:	fd 01       	movw	r30, r26
    1b26:	0d c0       	rjmp	.+26     	; 0x1b42 <__udivmodsi4_ep>

00001b28 <__udivmodsi4_loop>:
    1b28:	aa 1f       	adc	r26, r26
    1b2a:	bb 1f       	adc	r27, r27
    1b2c:	ee 1f       	adc	r30, r30
    1b2e:	ff 1f       	adc	r31, r31
    1b30:	a2 17       	cp	r26, r18
    1b32:	b3 07       	cpc	r27, r19
    1b34:	e4 07       	cpc	r30, r20
    1b36:	f5 07       	cpc	r31, r21
    1b38:	20 f0       	brcs	.+8      	; 0x1b42 <__udivmodsi4_ep>
    1b3a:	a2 1b       	sub	r26, r18
    1b3c:	b3 0b       	sbc	r27, r19
    1b3e:	e4 0b       	sbc	r30, r20
    1b40:	f5 0b       	sbc	r31, r21

00001b42 <__udivmodsi4_ep>:
    1b42:	66 1f       	adc	r22, r22
    1b44:	77 1f       	adc	r23, r23
    1b46:	88 1f       	adc	r24, r24
    1b48:	99 1f       	adc	r25, r25
    1b4a:	1a 94       	dec	r1
    1b4c:	69 f7       	brne	.-38     	; 0x1b28 <__udivmodsi4_loop>
    1b4e:	60 95       	com	r22
    1b50:	70 95       	com	r23
    1b52:	80 95       	com	r24
    1b54:	90 95       	com	r25
    1b56:	9b 01       	movw	r18, r22
    1b58:	ac 01       	movw	r20, r24
    1b5a:	bd 01       	movw	r22, r26
    1b5c:	cf 01       	movw	r24, r30
    1b5e:	08 95       	ret

00001b60 <malloc>:
    1b60:	cf 93       	push	r28
    1b62:	df 93       	push	r29
    1b64:	82 30       	cpi	r24, 0x02	; 2
    1b66:	91 05       	cpc	r25, r1
    1b68:	10 f4       	brcc	.+4      	; 0x1b6e <malloc+0xe>
    1b6a:	82 e0       	ldi	r24, 0x02	; 2
    1b6c:	90 e0       	ldi	r25, 0x00	; 0
    1b6e:	e0 91 e9 03 	lds	r30, 0x03E9
    1b72:	f0 91 ea 03 	lds	r31, 0x03EA
    1b76:	20 e0       	ldi	r18, 0x00	; 0
    1b78:	30 e0       	ldi	r19, 0x00	; 0
    1b7a:	a0 e0       	ldi	r26, 0x00	; 0
    1b7c:	b0 e0       	ldi	r27, 0x00	; 0
    1b7e:	30 97       	sbiw	r30, 0x00	; 0
    1b80:	39 f1       	breq	.+78     	; 0x1bd0 <malloc+0x70>
    1b82:	40 81       	ld	r20, Z
    1b84:	51 81       	ldd	r21, Z+1	; 0x01
    1b86:	48 17       	cp	r20, r24
    1b88:	59 07       	cpc	r21, r25
    1b8a:	b8 f0       	brcs	.+46     	; 0x1bba <malloc+0x5a>
    1b8c:	48 17       	cp	r20, r24
    1b8e:	59 07       	cpc	r21, r25
    1b90:	71 f4       	brne	.+28     	; 0x1bae <malloc+0x4e>
    1b92:	82 81       	ldd	r24, Z+2	; 0x02
    1b94:	93 81       	ldd	r25, Z+3	; 0x03
    1b96:	10 97       	sbiw	r26, 0x00	; 0
    1b98:	29 f0       	breq	.+10     	; 0x1ba4 <malloc+0x44>
    1b9a:	13 96       	adiw	r26, 0x03	; 3
    1b9c:	9c 93       	st	X, r25
    1b9e:	8e 93       	st	-X, r24
    1ba0:	12 97       	sbiw	r26, 0x02	; 2
    1ba2:	2c c0       	rjmp	.+88     	; 0x1bfc <malloc+0x9c>
    1ba4:	90 93 ea 03 	sts	0x03EA, r25
    1ba8:	80 93 e9 03 	sts	0x03E9, r24
    1bac:	27 c0       	rjmp	.+78     	; 0x1bfc <malloc+0x9c>
    1bae:	21 15       	cp	r18, r1
    1bb0:	31 05       	cpc	r19, r1
    1bb2:	31 f0       	breq	.+12     	; 0x1bc0 <malloc+0x60>
    1bb4:	42 17       	cp	r20, r18
    1bb6:	53 07       	cpc	r21, r19
    1bb8:	18 f0       	brcs	.+6      	; 0x1bc0 <malloc+0x60>
    1bba:	a9 01       	movw	r20, r18
    1bbc:	db 01       	movw	r26, r22
    1bbe:	01 c0       	rjmp	.+2      	; 0x1bc2 <malloc+0x62>
    1bc0:	ef 01       	movw	r28, r30
    1bc2:	9a 01       	movw	r18, r20
    1bc4:	bd 01       	movw	r22, r26
    1bc6:	df 01       	movw	r26, r30
    1bc8:	02 80       	ldd	r0, Z+2	; 0x02
    1bca:	f3 81       	ldd	r31, Z+3	; 0x03
    1bcc:	e0 2d       	mov	r30, r0
    1bce:	d7 cf       	rjmp	.-82     	; 0x1b7e <malloc+0x1e>
    1bd0:	21 15       	cp	r18, r1
    1bd2:	31 05       	cpc	r19, r1
    1bd4:	f9 f0       	breq	.+62     	; 0x1c14 <malloc+0xb4>
    1bd6:	28 1b       	sub	r18, r24
    1bd8:	39 0b       	sbc	r19, r25
    1bda:	24 30       	cpi	r18, 0x04	; 4
    1bdc:	31 05       	cpc	r19, r1
    1bde:	80 f4       	brcc	.+32     	; 0x1c00 <malloc+0xa0>
    1be0:	8a 81       	ldd	r24, Y+2	; 0x02
    1be2:	9b 81       	ldd	r25, Y+3	; 0x03
    1be4:	61 15       	cp	r22, r1
    1be6:	71 05       	cpc	r23, r1
    1be8:	21 f0       	breq	.+8      	; 0x1bf2 <malloc+0x92>
    1bea:	fb 01       	movw	r30, r22
    1bec:	93 83       	std	Z+3, r25	; 0x03
    1bee:	82 83       	std	Z+2, r24	; 0x02
    1bf0:	04 c0       	rjmp	.+8      	; 0x1bfa <malloc+0x9a>
    1bf2:	90 93 ea 03 	sts	0x03EA, r25
    1bf6:	80 93 e9 03 	sts	0x03E9, r24
    1bfa:	fe 01       	movw	r30, r28
    1bfc:	32 96       	adiw	r30, 0x02	; 2
    1bfe:	44 c0       	rjmp	.+136    	; 0x1c88 <malloc+0x128>
    1c00:	fe 01       	movw	r30, r28
    1c02:	e2 0f       	add	r30, r18
    1c04:	f3 1f       	adc	r31, r19
    1c06:	81 93       	st	Z+, r24
    1c08:	91 93       	st	Z+, r25
    1c0a:	22 50       	subi	r18, 0x02	; 2
    1c0c:	31 09       	sbc	r19, r1
    1c0e:	39 83       	std	Y+1, r19	; 0x01
    1c10:	28 83       	st	Y, r18
    1c12:	3a c0       	rjmp	.+116    	; 0x1c88 <malloc+0x128>
    1c14:	20 91 e7 03 	lds	r18, 0x03E7
    1c18:	30 91 e8 03 	lds	r19, 0x03E8
    1c1c:	23 2b       	or	r18, r19
    1c1e:	41 f4       	brne	.+16     	; 0x1c30 <malloc+0xd0>
    1c20:	20 91 02 01 	lds	r18, 0x0102
    1c24:	30 91 03 01 	lds	r19, 0x0103
    1c28:	30 93 e8 03 	sts	0x03E8, r19
    1c2c:	20 93 e7 03 	sts	0x03E7, r18
    1c30:	20 91 00 01 	lds	r18, 0x0100
    1c34:	30 91 01 01 	lds	r19, 0x0101
    1c38:	21 15       	cp	r18, r1
    1c3a:	31 05       	cpc	r19, r1
    1c3c:	41 f4       	brne	.+16     	; 0x1c4e <malloc+0xee>
    1c3e:	2d b7       	in	r18, 0x3d	; 61
    1c40:	3e b7       	in	r19, 0x3e	; 62
    1c42:	40 91 04 01 	lds	r20, 0x0104
    1c46:	50 91 05 01 	lds	r21, 0x0105
    1c4a:	24 1b       	sub	r18, r20
    1c4c:	35 0b       	sbc	r19, r21
    1c4e:	e0 91 e7 03 	lds	r30, 0x03E7
    1c52:	f0 91 e8 03 	lds	r31, 0x03E8
    1c56:	e2 17       	cp	r30, r18
    1c58:	f3 07       	cpc	r31, r19
    1c5a:	a0 f4       	brcc	.+40     	; 0x1c84 <malloc+0x124>
    1c5c:	2e 1b       	sub	r18, r30
    1c5e:	3f 0b       	sbc	r19, r31
    1c60:	28 17       	cp	r18, r24
    1c62:	39 07       	cpc	r19, r25
    1c64:	78 f0       	brcs	.+30     	; 0x1c84 <malloc+0x124>
    1c66:	ac 01       	movw	r20, r24
    1c68:	4e 5f       	subi	r20, 0xFE	; 254
    1c6a:	5f 4f       	sbci	r21, 0xFF	; 255
    1c6c:	24 17       	cp	r18, r20
    1c6e:	35 07       	cpc	r19, r21
    1c70:	48 f0       	brcs	.+18     	; 0x1c84 <malloc+0x124>
    1c72:	4e 0f       	add	r20, r30
    1c74:	5f 1f       	adc	r21, r31
    1c76:	50 93 e8 03 	sts	0x03E8, r21
    1c7a:	40 93 e7 03 	sts	0x03E7, r20
    1c7e:	81 93       	st	Z+, r24
    1c80:	91 93       	st	Z+, r25
    1c82:	02 c0       	rjmp	.+4      	; 0x1c88 <malloc+0x128>
    1c84:	e0 e0       	ldi	r30, 0x00	; 0
    1c86:	f0 e0       	ldi	r31, 0x00	; 0
    1c88:	cf 01       	movw	r24, r30
    1c8a:	df 91       	pop	r29
    1c8c:	cf 91       	pop	r28
    1c8e:	08 95       	ret

00001c90 <free>:
    1c90:	cf 93       	push	r28
    1c92:	df 93       	push	r29
    1c94:	00 97       	sbiw	r24, 0x00	; 0
    1c96:	09 f4       	brne	.+2      	; 0x1c9a <free+0xa>
    1c98:	87 c0       	rjmp	.+270    	; 0x1da8 <free+0x118>
    1c9a:	fc 01       	movw	r30, r24
    1c9c:	32 97       	sbiw	r30, 0x02	; 2
    1c9e:	13 82       	std	Z+3, r1	; 0x03
    1ca0:	12 82       	std	Z+2, r1	; 0x02
    1ca2:	c0 91 e9 03 	lds	r28, 0x03E9
    1ca6:	d0 91 ea 03 	lds	r29, 0x03EA
    1caa:	20 97       	sbiw	r28, 0x00	; 0
    1cac:	81 f4       	brne	.+32     	; 0x1cce <free+0x3e>
    1cae:	20 81       	ld	r18, Z
    1cb0:	31 81       	ldd	r19, Z+1	; 0x01
    1cb2:	28 0f       	add	r18, r24
    1cb4:	39 1f       	adc	r19, r25
    1cb6:	80 91 e7 03 	lds	r24, 0x03E7
    1cba:	90 91 e8 03 	lds	r25, 0x03E8
    1cbe:	82 17       	cp	r24, r18
    1cc0:	93 07       	cpc	r25, r19
    1cc2:	79 f5       	brne	.+94     	; 0x1d22 <free+0x92>
    1cc4:	f0 93 e8 03 	sts	0x03E8, r31
    1cc8:	e0 93 e7 03 	sts	0x03E7, r30
    1ccc:	6d c0       	rjmp	.+218    	; 0x1da8 <free+0x118>
    1cce:	de 01       	movw	r26, r28
    1cd0:	20 e0       	ldi	r18, 0x00	; 0
    1cd2:	30 e0       	ldi	r19, 0x00	; 0
    1cd4:	ae 17       	cp	r26, r30
    1cd6:	bf 07       	cpc	r27, r31
    1cd8:	50 f4       	brcc	.+20     	; 0x1cee <free+0x5e>
    1cda:	12 96       	adiw	r26, 0x02	; 2
    1cdc:	4d 91       	ld	r20, X+
    1cde:	5c 91       	ld	r21, X
    1ce0:	13 97       	sbiw	r26, 0x03	; 3
    1ce2:	9d 01       	movw	r18, r26
    1ce4:	41 15       	cp	r20, r1
    1ce6:	51 05       	cpc	r21, r1
    1ce8:	09 f1       	breq	.+66     	; 0x1d2c <free+0x9c>
    1cea:	da 01       	movw	r26, r20
    1cec:	f3 cf       	rjmp	.-26     	; 0x1cd4 <free+0x44>
    1cee:	b3 83       	std	Z+3, r27	; 0x03
    1cf0:	a2 83       	std	Z+2, r26	; 0x02
    1cf2:	40 81       	ld	r20, Z
    1cf4:	51 81       	ldd	r21, Z+1	; 0x01
    1cf6:	84 0f       	add	r24, r20
    1cf8:	95 1f       	adc	r25, r21
    1cfa:	8a 17       	cp	r24, r26
    1cfc:	9b 07       	cpc	r25, r27
    1cfe:	71 f4       	brne	.+28     	; 0x1d1c <free+0x8c>
    1d00:	8d 91       	ld	r24, X+
    1d02:	9c 91       	ld	r25, X
    1d04:	11 97       	sbiw	r26, 0x01	; 1
    1d06:	84 0f       	add	r24, r20
    1d08:	95 1f       	adc	r25, r21
    1d0a:	02 96       	adiw	r24, 0x02	; 2
    1d0c:	91 83       	std	Z+1, r25	; 0x01
    1d0e:	80 83       	st	Z, r24
    1d10:	12 96       	adiw	r26, 0x02	; 2
    1d12:	8d 91       	ld	r24, X+
    1d14:	9c 91       	ld	r25, X
    1d16:	13 97       	sbiw	r26, 0x03	; 3
    1d18:	93 83       	std	Z+3, r25	; 0x03
    1d1a:	82 83       	std	Z+2, r24	; 0x02
    1d1c:	21 15       	cp	r18, r1
    1d1e:	31 05       	cpc	r19, r1
    1d20:	29 f4       	brne	.+10     	; 0x1d2c <free+0x9c>
    1d22:	f0 93 ea 03 	sts	0x03EA, r31
    1d26:	e0 93 e9 03 	sts	0x03E9, r30
    1d2a:	3e c0       	rjmp	.+124    	; 0x1da8 <free+0x118>
    1d2c:	d9 01       	movw	r26, r18
    1d2e:	13 96       	adiw	r26, 0x03	; 3
    1d30:	fc 93       	st	X, r31
    1d32:	ee 93       	st	-X, r30
    1d34:	12 97       	sbiw	r26, 0x02	; 2
    1d36:	4d 91       	ld	r20, X+
    1d38:	5d 91       	ld	r21, X+
    1d3a:	a4 0f       	add	r26, r20
    1d3c:	b5 1f       	adc	r27, r21
    1d3e:	ea 17       	cp	r30, r26
    1d40:	fb 07       	cpc	r31, r27
    1d42:	79 f4       	brne	.+30     	; 0x1d62 <free+0xd2>
    1d44:	80 81       	ld	r24, Z
    1d46:	91 81       	ldd	r25, Z+1	; 0x01
    1d48:	84 0f       	add	r24, r20
    1d4a:	95 1f       	adc	r25, r21
    1d4c:	02 96       	adiw	r24, 0x02	; 2
    1d4e:	d9 01       	movw	r26, r18
    1d50:	11 96       	adiw	r26, 0x01	; 1
    1d52:	9c 93       	st	X, r25
    1d54:	8e 93       	st	-X, r24
    1d56:	82 81       	ldd	r24, Z+2	; 0x02
    1d58:	93 81       	ldd	r25, Z+3	; 0x03
    1d5a:	13 96       	adiw	r26, 0x03	; 3
    1d5c:	9c 93       	st	X, r25
    1d5e:	8e 93       	st	-X, r24
    1d60:	12 97       	sbiw	r26, 0x02	; 2
    1d62:	e0 e0       	ldi	r30, 0x00	; 0
    1d64:	f0 e0       	ldi	r31, 0x00	; 0
    1d66:	8a 81       	ldd	r24, Y+2	; 0x02
    1d68:	9b 81       	ldd	r25, Y+3	; 0x03
    1d6a:	00 97       	sbiw	r24, 0x00	; 0
    1d6c:	19 f0       	breq	.+6      	; 0x1d74 <free+0xe4>
    1d6e:	fe 01       	movw	r30, r28
    1d70:	ec 01       	movw	r28, r24
    1d72:	f9 cf       	rjmp	.-14     	; 0x1d66 <free+0xd6>
    1d74:	ce 01       	movw	r24, r28
    1d76:	02 96       	adiw	r24, 0x02	; 2
    1d78:	28 81       	ld	r18, Y
    1d7a:	39 81       	ldd	r19, Y+1	; 0x01
    1d7c:	82 0f       	add	r24, r18
    1d7e:	93 1f       	adc	r25, r19
    1d80:	20 91 e7 03 	lds	r18, 0x03E7
    1d84:	30 91 e8 03 	lds	r19, 0x03E8
    1d88:	28 17       	cp	r18, r24
    1d8a:	39 07       	cpc	r19, r25
    1d8c:	69 f4       	brne	.+26     	; 0x1da8 <free+0x118>
    1d8e:	30 97       	sbiw	r30, 0x00	; 0
    1d90:	29 f4       	brne	.+10     	; 0x1d9c <free+0x10c>
    1d92:	10 92 ea 03 	sts	0x03EA, r1
    1d96:	10 92 e9 03 	sts	0x03E9, r1
    1d9a:	02 c0       	rjmp	.+4      	; 0x1da0 <free+0x110>
    1d9c:	13 82       	std	Z+3, r1	; 0x03
    1d9e:	12 82       	std	Z+2, r1	; 0x02
    1da0:	d0 93 e8 03 	sts	0x03E8, r29
    1da4:	c0 93 e7 03 	sts	0x03E7, r28
    1da8:	df 91       	pop	r29
    1daa:	cf 91       	pop	r28
    1dac:	08 95       	ret

00001dae <fdevopen>:
    1dae:	0f 93       	push	r16
    1db0:	1f 93       	push	r17
    1db2:	cf 93       	push	r28
    1db4:	df 93       	push	r29
    1db6:	ec 01       	movw	r28, r24
    1db8:	8b 01       	movw	r16, r22
    1dba:	00 97       	sbiw	r24, 0x00	; 0
    1dbc:	31 f4       	brne	.+12     	; 0x1dca <fdevopen+0x1c>
    1dbe:	61 15       	cp	r22, r1
    1dc0:	71 05       	cpc	r23, r1
    1dc2:	19 f4       	brne	.+6      	; 0x1dca <fdevopen+0x1c>
    1dc4:	80 e0       	ldi	r24, 0x00	; 0
    1dc6:	90 e0       	ldi	r25, 0x00	; 0
    1dc8:	38 c0       	rjmp	.+112    	; 0x1e3a <fdevopen+0x8c>
    1dca:	6e e0       	ldi	r22, 0x0E	; 14
    1dcc:	70 e0       	ldi	r23, 0x00	; 0
    1dce:	81 e0       	ldi	r24, 0x01	; 1
    1dd0:	90 e0       	ldi	r25, 0x00	; 0
    1dd2:	0e 94 35 11 	call	0x226a	; 0x226a <calloc>
    1dd6:	fc 01       	movw	r30, r24
    1dd8:	00 97       	sbiw	r24, 0x00	; 0
    1dda:	a1 f3       	breq	.-24     	; 0x1dc4 <fdevopen+0x16>
    1ddc:	80 e8       	ldi	r24, 0x80	; 128
    1dde:	83 83       	std	Z+3, r24	; 0x03
    1de0:	01 15       	cp	r16, r1
    1de2:	11 05       	cpc	r17, r1
    1de4:	71 f0       	breq	.+28     	; 0x1e02 <fdevopen+0x54>
    1de6:	13 87       	std	Z+11, r17	; 0x0b
    1de8:	02 87       	std	Z+10, r16	; 0x0a
    1dea:	81 e8       	ldi	r24, 0x81	; 129
    1dec:	83 83       	std	Z+3, r24	; 0x03
    1dee:	80 91 eb 03 	lds	r24, 0x03EB
    1df2:	90 91 ec 03 	lds	r25, 0x03EC
    1df6:	89 2b       	or	r24, r25
    1df8:	21 f4       	brne	.+8      	; 0x1e02 <fdevopen+0x54>
    1dfa:	f0 93 ec 03 	sts	0x03EC, r31
    1dfe:	e0 93 eb 03 	sts	0x03EB, r30
    1e02:	20 97       	sbiw	r28, 0x00	; 0
    1e04:	c9 f0       	breq	.+50     	; 0x1e38 <fdevopen+0x8a>
    1e06:	d1 87       	std	Z+9, r29	; 0x09
    1e08:	c0 87       	std	Z+8, r28	; 0x08
    1e0a:	83 81       	ldd	r24, Z+3	; 0x03
    1e0c:	82 60       	ori	r24, 0x02	; 2
    1e0e:	83 83       	std	Z+3, r24	; 0x03
    1e10:	80 91 ed 03 	lds	r24, 0x03ED
    1e14:	90 91 ee 03 	lds	r25, 0x03EE
    1e18:	89 2b       	or	r24, r25
    1e1a:	71 f4       	brne	.+28     	; 0x1e38 <fdevopen+0x8a>
    1e1c:	f0 93 ee 03 	sts	0x03EE, r31
    1e20:	e0 93 ed 03 	sts	0x03ED, r30
    1e24:	80 91 ef 03 	lds	r24, 0x03EF
    1e28:	90 91 f0 03 	lds	r25, 0x03F0
    1e2c:	89 2b       	or	r24, r25
    1e2e:	21 f4       	brne	.+8      	; 0x1e38 <fdevopen+0x8a>
    1e30:	f0 93 f0 03 	sts	0x03F0, r31
    1e34:	e0 93 ef 03 	sts	0x03EF, r30
    1e38:	cf 01       	movw	r24, r30
    1e3a:	df 91       	pop	r29
    1e3c:	cf 91       	pop	r28
    1e3e:	1f 91       	pop	r17
    1e40:	0f 91       	pop	r16
    1e42:	08 95       	ret

00001e44 <printf>:
    1e44:	a0 e0       	ldi	r26, 0x00	; 0
    1e46:	b0 e0       	ldi	r27, 0x00	; 0
    1e48:	e8 e2       	ldi	r30, 0x28	; 40
    1e4a:	ff e0       	ldi	r31, 0x0F	; 15
    1e4c:	0c 94 0e 12 	jmp	0x241c	; 0x241c <__prologue_saves__+0x20>
    1e50:	fe 01       	movw	r30, r28
    1e52:	35 96       	adiw	r30, 0x05	; 5
    1e54:	61 91       	ld	r22, Z+
    1e56:	71 91       	ld	r23, Z+
    1e58:	af 01       	movw	r20, r30
    1e5a:	80 91 ed 03 	lds	r24, 0x03ED
    1e5e:	90 91 ee 03 	lds	r25, 0x03EE
    1e62:	0e 94 63 0f 	call	0x1ec6	; 0x1ec6 <vfprintf>
    1e66:	e2 e0       	ldi	r30, 0x02	; 2
    1e68:	0c 94 2a 12 	jmp	0x2454	; 0x2454 <__epilogue_restores__+0x20>

00001e6c <puts>:
    1e6c:	0f 93       	push	r16
    1e6e:	1f 93       	push	r17
    1e70:	cf 93       	push	r28
    1e72:	df 93       	push	r29
    1e74:	e0 91 ed 03 	lds	r30, 0x03ED
    1e78:	f0 91 ee 03 	lds	r31, 0x03EE
    1e7c:	23 81       	ldd	r18, Z+3	; 0x03
    1e7e:	21 ff       	sbrs	r18, 1
    1e80:	1b c0       	rjmp	.+54     	; 0x1eb8 <puts+0x4c>
    1e82:	ec 01       	movw	r28, r24
    1e84:	00 e0       	ldi	r16, 0x00	; 0
    1e86:	10 e0       	ldi	r17, 0x00	; 0
    1e88:	89 91       	ld	r24, Y+
    1e8a:	60 91 ed 03 	lds	r22, 0x03ED
    1e8e:	70 91 ee 03 	lds	r23, 0x03EE
    1e92:	db 01       	movw	r26, r22
    1e94:	18 96       	adiw	r26, 0x08	; 8
    1e96:	ed 91       	ld	r30, X+
    1e98:	fc 91       	ld	r31, X
    1e9a:	19 97       	sbiw	r26, 0x09	; 9
    1e9c:	88 23       	and	r24, r24
    1e9e:	31 f0       	breq	.+12     	; 0x1eac <puts+0x40>
    1ea0:	09 95       	icall
    1ea2:	89 2b       	or	r24, r25
    1ea4:	89 f3       	breq	.-30     	; 0x1e88 <puts+0x1c>
    1ea6:	0f ef       	ldi	r16, 0xFF	; 255
    1ea8:	1f ef       	ldi	r17, 0xFF	; 255
    1eaa:	ee cf       	rjmp	.-36     	; 0x1e88 <puts+0x1c>
    1eac:	8a e0       	ldi	r24, 0x0A	; 10
    1eae:	09 95       	icall
    1eb0:	89 2b       	or	r24, r25
    1eb2:	11 f4       	brne	.+4      	; 0x1eb8 <puts+0x4c>
    1eb4:	c8 01       	movw	r24, r16
    1eb6:	02 c0       	rjmp	.+4      	; 0x1ebc <puts+0x50>
    1eb8:	8f ef       	ldi	r24, 0xFF	; 255
    1eba:	9f ef       	ldi	r25, 0xFF	; 255
    1ebc:	df 91       	pop	r29
    1ebe:	cf 91       	pop	r28
    1ec0:	1f 91       	pop	r17
    1ec2:	0f 91       	pop	r16
    1ec4:	08 95       	ret

00001ec6 <vfprintf>:
    1ec6:	ac e0       	ldi	r26, 0x0C	; 12
    1ec8:	b0 e0       	ldi	r27, 0x00	; 0
    1eca:	e9 e6       	ldi	r30, 0x69	; 105
    1ecc:	ff e0       	ldi	r31, 0x0F	; 15
    1ece:	0c 94 fe 11 	jmp	0x23fc	; 0x23fc <__prologue_saves__>
    1ed2:	7c 01       	movw	r14, r24
    1ed4:	6b 01       	movw	r12, r22
    1ed6:	8a 01       	movw	r16, r20
    1ed8:	fc 01       	movw	r30, r24
    1eda:	17 82       	std	Z+7, r1	; 0x07
    1edc:	16 82       	std	Z+6, r1	; 0x06
    1ede:	83 81       	ldd	r24, Z+3	; 0x03
    1ee0:	81 ff       	sbrs	r24, 1
    1ee2:	bd c1       	rjmp	.+890    	; 0x225e <vfprintf+0x398>
    1ee4:	ce 01       	movw	r24, r28
    1ee6:	01 96       	adiw	r24, 0x01	; 1
    1ee8:	4c 01       	movw	r8, r24
    1eea:	f7 01       	movw	r30, r14
    1eec:	93 81       	ldd	r25, Z+3	; 0x03
    1eee:	f6 01       	movw	r30, r12
    1ef0:	93 fd       	sbrc	r25, 3
    1ef2:	85 91       	lpm	r24, Z+
    1ef4:	93 ff       	sbrs	r25, 3
    1ef6:	81 91       	ld	r24, Z+
    1ef8:	6f 01       	movw	r12, r30
    1efa:	88 23       	and	r24, r24
    1efc:	09 f4       	brne	.+2      	; 0x1f00 <vfprintf+0x3a>
    1efe:	ab c1       	rjmp	.+854    	; 0x2256 <vfprintf+0x390>
    1f00:	85 32       	cpi	r24, 0x25	; 37
    1f02:	39 f4       	brne	.+14     	; 0x1f12 <vfprintf+0x4c>
    1f04:	93 fd       	sbrc	r25, 3
    1f06:	85 91       	lpm	r24, Z+
    1f08:	93 ff       	sbrs	r25, 3
    1f0a:	81 91       	ld	r24, Z+
    1f0c:	6f 01       	movw	r12, r30
    1f0e:	85 32       	cpi	r24, 0x25	; 37
    1f10:	29 f4       	brne	.+10     	; 0x1f1c <vfprintf+0x56>
    1f12:	b7 01       	movw	r22, r14
    1f14:	90 e0       	ldi	r25, 0x00	; 0
    1f16:	0e 94 6e 11 	call	0x22dc	; 0x22dc <fputc>
    1f1a:	e7 cf       	rjmp	.-50     	; 0x1eea <vfprintf+0x24>
    1f1c:	51 2c       	mov	r5, r1
    1f1e:	31 2c       	mov	r3, r1
    1f20:	20 e0       	ldi	r18, 0x00	; 0
    1f22:	20 32       	cpi	r18, 0x20	; 32
    1f24:	a0 f4       	brcc	.+40     	; 0x1f4e <vfprintf+0x88>
    1f26:	8b 32       	cpi	r24, 0x2B	; 43
    1f28:	69 f0       	breq	.+26     	; 0x1f44 <vfprintf+0x7e>
    1f2a:	30 f4       	brcc	.+12     	; 0x1f38 <vfprintf+0x72>
    1f2c:	80 32       	cpi	r24, 0x20	; 32
    1f2e:	59 f0       	breq	.+22     	; 0x1f46 <vfprintf+0x80>
    1f30:	83 32       	cpi	r24, 0x23	; 35
    1f32:	69 f4       	brne	.+26     	; 0x1f4e <vfprintf+0x88>
    1f34:	20 61       	ori	r18, 0x10	; 16
    1f36:	2c c0       	rjmp	.+88     	; 0x1f90 <vfprintf+0xca>
    1f38:	8d 32       	cpi	r24, 0x2D	; 45
    1f3a:	39 f0       	breq	.+14     	; 0x1f4a <vfprintf+0x84>
    1f3c:	80 33       	cpi	r24, 0x30	; 48
    1f3e:	39 f4       	brne	.+14     	; 0x1f4e <vfprintf+0x88>
    1f40:	21 60       	ori	r18, 0x01	; 1
    1f42:	26 c0       	rjmp	.+76     	; 0x1f90 <vfprintf+0xca>
    1f44:	22 60       	ori	r18, 0x02	; 2
    1f46:	24 60       	ori	r18, 0x04	; 4
    1f48:	23 c0       	rjmp	.+70     	; 0x1f90 <vfprintf+0xca>
    1f4a:	28 60       	ori	r18, 0x08	; 8
    1f4c:	21 c0       	rjmp	.+66     	; 0x1f90 <vfprintf+0xca>
    1f4e:	27 fd       	sbrc	r18, 7
    1f50:	27 c0       	rjmp	.+78     	; 0x1fa0 <vfprintf+0xda>
    1f52:	30 ed       	ldi	r19, 0xD0	; 208
    1f54:	38 0f       	add	r19, r24
    1f56:	3a 30       	cpi	r19, 0x0A	; 10
    1f58:	78 f4       	brcc	.+30     	; 0x1f78 <vfprintf+0xb2>
    1f5a:	26 ff       	sbrs	r18, 6
    1f5c:	06 c0       	rjmp	.+12     	; 0x1f6a <vfprintf+0xa4>
    1f5e:	fa e0       	ldi	r31, 0x0A	; 10
    1f60:	5f 9e       	mul	r5, r31
    1f62:	30 0d       	add	r19, r0
    1f64:	11 24       	eor	r1, r1
    1f66:	53 2e       	mov	r5, r19
    1f68:	13 c0       	rjmp	.+38     	; 0x1f90 <vfprintf+0xca>
    1f6a:	8a e0       	ldi	r24, 0x0A	; 10
    1f6c:	38 9e       	mul	r3, r24
    1f6e:	30 0d       	add	r19, r0
    1f70:	11 24       	eor	r1, r1
    1f72:	33 2e       	mov	r3, r19
    1f74:	20 62       	ori	r18, 0x20	; 32
    1f76:	0c c0       	rjmp	.+24     	; 0x1f90 <vfprintf+0xca>
    1f78:	8e 32       	cpi	r24, 0x2E	; 46
    1f7a:	21 f4       	brne	.+8      	; 0x1f84 <vfprintf+0xbe>
    1f7c:	26 fd       	sbrc	r18, 6
    1f7e:	6b c1       	rjmp	.+726    	; 0x2256 <vfprintf+0x390>
    1f80:	20 64       	ori	r18, 0x40	; 64
    1f82:	06 c0       	rjmp	.+12     	; 0x1f90 <vfprintf+0xca>
    1f84:	8c 36       	cpi	r24, 0x6C	; 108
    1f86:	11 f4       	brne	.+4      	; 0x1f8c <vfprintf+0xc6>
    1f88:	20 68       	ori	r18, 0x80	; 128
    1f8a:	02 c0       	rjmp	.+4      	; 0x1f90 <vfprintf+0xca>
    1f8c:	88 36       	cpi	r24, 0x68	; 104
    1f8e:	41 f4       	brne	.+16     	; 0x1fa0 <vfprintf+0xda>
    1f90:	f6 01       	movw	r30, r12
    1f92:	93 fd       	sbrc	r25, 3
    1f94:	85 91       	lpm	r24, Z+
    1f96:	93 ff       	sbrs	r25, 3
    1f98:	81 91       	ld	r24, Z+
    1f9a:	6f 01       	movw	r12, r30
    1f9c:	81 11       	cpse	r24, r1
    1f9e:	c1 cf       	rjmp	.-126    	; 0x1f22 <vfprintf+0x5c>
    1fa0:	98 2f       	mov	r25, r24
    1fa2:	9f 7d       	andi	r25, 0xDF	; 223
    1fa4:	95 54       	subi	r25, 0x45	; 69
    1fa6:	93 30       	cpi	r25, 0x03	; 3
    1fa8:	28 f4       	brcc	.+10     	; 0x1fb4 <vfprintf+0xee>
    1faa:	0c 5f       	subi	r16, 0xFC	; 252
    1fac:	1f 4f       	sbci	r17, 0xFF	; 255
    1fae:	ff e3       	ldi	r31, 0x3F	; 63
    1fb0:	f9 83       	std	Y+1, r31	; 0x01
    1fb2:	0d c0       	rjmp	.+26     	; 0x1fce <vfprintf+0x108>
    1fb4:	83 36       	cpi	r24, 0x63	; 99
    1fb6:	31 f0       	breq	.+12     	; 0x1fc4 <vfprintf+0xfe>
    1fb8:	83 37       	cpi	r24, 0x73	; 115
    1fba:	71 f0       	breq	.+28     	; 0x1fd8 <vfprintf+0x112>
    1fbc:	83 35       	cpi	r24, 0x53	; 83
    1fbe:	09 f0       	breq	.+2      	; 0x1fc2 <vfprintf+0xfc>
    1fc0:	5b c0       	rjmp	.+182    	; 0x2078 <vfprintf+0x1b2>
    1fc2:	22 c0       	rjmp	.+68     	; 0x2008 <vfprintf+0x142>
    1fc4:	f8 01       	movw	r30, r16
    1fc6:	80 81       	ld	r24, Z
    1fc8:	89 83       	std	Y+1, r24	; 0x01
    1fca:	0e 5f       	subi	r16, 0xFE	; 254
    1fcc:	1f 4f       	sbci	r17, 0xFF	; 255
    1fce:	44 24       	eor	r4, r4
    1fd0:	43 94       	inc	r4
    1fd2:	51 2c       	mov	r5, r1
    1fd4:	54 01       	movw	r10, r8
    1fd6:	15 c0       	rjmp	.+42     	; 0x2002 <vfprintf+0x13c>
    1fd8:	38 01       	movw	r6, r16
    1fda:	f2 e0       	ldi	r31, 0x02	; 2
    1fdc:	6f 0e       	add	r6, r31
    1fde:	71 1c       	adc	r7, r1
    1fe0:	f8 01       	movw	r30, r16
    1fe2:	a0 80       	ld	r10, Z
    1fe4:	b1 80       	ldd	r11, Z+1	; 0x01
    1fe6:	26 ff       	sbrs	r18, 6
    1fe8:	03 c0       	rjmp	.+6      	; 0x1ff0 <vfprintf+0x12a>
    1fea:	65 2d       	mov	r22, r5
    1fec:	70 e0       	ldi	r23, 0x00	; 0
    1fee:	02 c0       	rjmp	.+4      	; 0x1ff4 <vfprintf+0x12e>
    1ff0:	6f ef       	ldi	r22, 0xFF	; 255
    1ff2:	7f ef       	ldi	r23, 0xFF	; 255
    1ff4:	c5 01       	movw	r24, r10
    1ff6:	2c 87       	std	Y+12, r18	; 0x0c
    1ff8:	0e 94 63 11 	call	0x22c6	; 0x22c6 <strnlen>
    1ffc:	2c 01       	movw	r4, r24
    1ffe:	83 01       	movw	r16, r6
    2000:	2c 85       	ldd	r18, Y+12	; 0x0c
    2002:	2f 77       	andi	r18, 0x7F	; 127
    2004:	22 2e       	mov	r2, r18
    2006:	17 c0       	rjmp	.+46     	; 0x2036 <vfprintf+0x170>
    2008:	38 01       	movw	r6, r16
    200a:	f2 e0       	ldi	r31, 0x02	; 2
    200c:	6f 0e       	add	r6, r31
    200e:	71 1c       	adc	r7, r1
    2010:	f8 01       	movw	r30, r16
    2012:	a0 80       	ld	r10, Z
    2014:	b1 80       	ldd	r11, Z+1	; 0x01
    2016:	26 ff       	sbrs	r18, 6
    2018:	03 c0       	rjmp	.+6      	; 0x2020 <vfprintf+0x15a>
    201a:	65 2d       	mov	r22, r5
    201c:	70 e0       	ldi	r23, 0x00	; 0
    201e:	02 c0       	rjmp	.+4      	; 0x2024 <vfprintf+0x15e>
    2020:	6f ef       	ldi	r22, 0xFF	; 255
    2022:	7f ef       	ldi	r23, 0xFF	; 255
    2024:	c5 01       	movw	r24, r10
    2026:	2c 87       	std	Y+12, r18	; 0x0c
    2028:	0e 94 51 11 	call	0x22a2	; 0x22a2 <strnlen_P>
    202c:	2c 01       	movw	r4, r24
    202e:	2c 85       	ldd	r18, Y+12	; 0x0c
    2030:	20 68       	ori	r18, 0x80	; 128
    2032:	22 2e       	mov	r2, r18
    2034:	83 01       	movw	r16, r6
    2036:	23 fc       	sbrc	r2, 3
    2038:	1b c0       	rjmp	.+54     	; 0x2070 <vfprintf+0x1aa>
    203a:	83 2d       	mov	r24, r3
    203c:	90 e0       	ldi	r25, 0x00	; 0
    203e:	48 16       	cp	r4, r24
    2040:	59 06       	cpc	r5, r25
    2042:	b0 f4       	brcc	.+44     	; 0x2070 <vfprintf+0x1aa>
    2044:	b7 01       	movw	r22, r14
    2046:	80 e2       	ldi	r24, 0x20	; 32
    2048:	90 e0       	ldi	r25, 0x00	; 0
    204a:	0e 94 6e 11 	call	0x22dc	; 0x22dc <fputc>
    204e:	3a 94       	dec	r3
    2050:	f4 cf       	rjmp	.-24     	; 0x203a <vfprintf+0x174>
    2052:	f5 01       	movw	r30, r10
    2054:	27 fc       	sbrc	r2, 7
    2056:	85 91       	lpm	r24, Z+
    2058:	27 fe       	sbrs	r2, 7
    205a:	81 91       	ld	r24, Z+
    205c:	5f 01       	movw	r10, r30
    205e:	b7 01       	movw	r22, r14
    2060:	90 e0       	ldi	r25, 0x00	; 0
    2062:	0e 94 6e 11 	call	0x22dc	; 0x22dc <fputc>
    2066:	31 10       	cpse	r3, r1
    2068:	3a 94       	dec	r3
    206a:	f1 e0       	ldi	r31, 0x01	; 1
    206c:	4f 1a       	sub	r4, r31
    206e:	51 08       	sbc	r5, r1
    2070:	41 14       	cp	r4, r1
    2072:	51 04       	cpc	r5, r1
    2074:	71 f7       	brne	.-36     	; 0x2052 <vfprintf+0x18c>
    2076:	e5 c0       	rjmp	.+458    	; 0x2242 <vfprintf+0x37c>
    2078:	84 36       	cpi	r24, 0x64	; 100
    207a:	11 f0       	breq	.+4      	; 0x2080 <vfprintf+0x1ba>
    207c:	89 36       	cpi	r24, 0x69	; 105
    207e:	39 f5       	brne	.+78     	; 0x20ce <vfprintf+0x208>
    2080:	f8 01       	movw	r30, r16
    2082:	27 ff       	sbrs	r18, 7
    2084:	07 c0       	rjmp	.+14     	; 0x2094 <vfprintf+0x1ce>
    2086:	60 81       	ld	r22, Z
    2088:	71 81       	ldd	r23, Z+1	; 0x01
    208a:	82 81       	ldd	r24, Z+2	; 0x02
    208c:	93 81       	ldd	r25, Z+3	; 0x03
    208e:	0c 5f       	subi	r16, 0xFC	; 252
    2090:	1f 4f       	sbci	r17, 0xFF	; 255
    2092:	08 c0       	rjmp	.+16     	; 0x20a4 <vfprintf+0x1de>
    2094:	60 81       	ld	r22, Z
    2096:	71 81       	ldd	r23, Z+1	; 0x01
    2098:	88 27       	eor	r24, r24
    209a:	77 fd       	sbrc	r23, 7
    209c:	80 95       	com	r24
    209e:	98 2f       	mov	r25, r24
    20a0:	0e 5f       	subi	r16, 0xFE	; 254
    20a2:	1f 4f       	sbci	r17, 0xFF	; 255
    20a4:	2f 76       	andi	r18, 0x6F	; 111
    20a6:	b2 2e       	mov	r11, r18
    20a8:	97 ff       	sbrs	r25, 7
    20aa:	09 c0       	rjmp	.+18     	; 0x20be <vfprintf+0x1f8>
    20ac:	90 95       	com	r25
    20ae:	80 95       	com	r24
    20b0:	70 95       	com	r23
    20b2:	61 95       	neg	r22
    20b4:	7f 4f       	sbci	r23, 0xFF	; 255
    20b6:	8f 4f       	sbci	r24, 0xFF	; 255
    20b8:	9f 4f       	sbci	r25, 0xFF	; 255
    20ba:	20 68       	ori	r18, 0x80	; 128
    20bc:	b2 2e       	mov	r11, r18
    20be:	2a e0       	ldi	r18, 0x0A	; 10
    20c0:	30 e0       	ldi	r19, 0x00	; 0
    20c2:	a4 01       	movw	r20, r8
    20c4:	0e 94 a0 11 	call	0x2340	; 0x2340 <__ultoa_invert>
    20c8:	a8 2e       	mov	r10, r24
    20ca:	a8 18       	sub	r10, r8
    20cc:	44 c0       	rjmp	.+136    	; 0x2156 <vfprintf+0x290>
    20ce:	85 37       	cpi	r24, 0x75	; 117
    20d0:	29 f4       	brne	.+10     	; 0x20dc <vfprintf+0x216>
    20d2:	2f 7e       	andi	r18, 0xEF	; 239
    20d4:	b2 2e       	mov	r11, r18
    20d6:	2a e0       	ldi	r18, 0x0A	; 10
    20d8:	30 e0       	ldi	r19, 0x00	; 0
    20da:	25 c0       	rjmp	.+74     	; 0x2126 <vfprintf+0x260>
    20dc:	f2 2f       	mov	r31, r18
    20de:	f9 7f       	andi	r31, 0xF9	; 249
    20e0:	bf 2e       	mov	r11, r31
    20e2:	8f 36       	cpi	r24, 0x6F	; 111
    20e4:	c1 f0       	breq	.+48     	; 0x2116 <vfprintf+0x250>
    20e6:	18 f4       	brcc	.+6      	; 0x20ee <vfprintf+0x228>
    20e8:	88 35       	cpi	r24, 0x58	; 88
    20ea:	79 f0       	breq	.+30     	; 0x210a <vfprintf+0x244>
    20ec:	b4 c0       	rjmp	.+360    	; 0x2256 <vfprintf+0x390>
    20ee:	80 37       	cpi	r24, 0x70	; 112
    20f0:	19 f0       	breq	.+6      	; 0x20f8 <vfprintf+0x232>
    20f2:	88 37       	cpi	r24, 0x78	; 120
    20f4:	21 f0       	breq	.+8      	; 0x20fe <vfprintf+0x238>
    20f6:	af c0       	rjmp	.+350    	; 0x2256 <vfprintf+0x390>
    20f8:	2f 2f       	mov	r18, r31
    20fa:	20 61       	ori	r18, 0x10	; 16
    20fc:	b2 2e       	mov	r11, r18
    20fe:	b4 fe       	sbrs	r11, 4
    2100:	0d c0       	rjmp	.+26     	; 0x211c <vfprintf+0x256>
    2102:	8b 2d       	mov	r24, r11
    2104:	84 60       	ori	r24, 0x04	; 4
    2106:	b8 2e       	mov	r11, r24
    2108:	09 c0       	rjmp	.+18     	; 0x211c <vfprintf+0x256>
    210a:	24 ff       	sbrs	r18, 4
    210c:	0a c0       	rjmp	.+20     	; 0x2122 <vfprintf+0x25c>
    210e:	9f 2f       	mov	r25, r31
    2110:	96 60       	ori	r25, 0x06	; 6
    2112:	b9 2e       	mov	r11, r25
    2114:	06 c0       	rjmp	.+12     	; 0x2122 <vfprintf+0x25c>
    2116:	28 e0       	ldi	r18, 0x08	; 8
    2118:	30 e0       	ldi	r19, 0x00	; 0
    211a:	05 c0       	rjmp	.+10     	; 0x2126 <vfprintf+0x260>
    211c:	20 e1       	ldi	r18, 0x10	; 16
    211e:	30 e0       	ldi	r19, 0x00	; 0
    2120:	02 c0       	rjmp	.+4      	; 0x2126 <vfprintf+0x260>
    2122:	20 e1       	ldi	r18, 0x10	; 16
    2124:	32 e0       	ldi	r19, 0x02	; 2
    2126:	f8 01       	movw	r30, r16
    2128:	b7 fe       	sbrs	r11, 7
    212a:	07 c0       	rjmp	.+14     	; 0x213a <vfprintf+0x274>
    212c:	60 81       	ld	r22, Z
    212e:	71 81       	ldd	r23, Z+1	; 0x01
    2130:	82 81       	ldd	r24, Z+2	; 0x02
    2132:	93 81       	ldd	r25, Z+3	; 0x03
    2134:	0c 5f       	subi	r16, 0xFC	; 252
    2136:	1f 4f       	sbci	r17, 0xFF	; 255
    2138:	06 c0       	rjmp	.+12     	; 0x2146 <vfprintf+0x280>
    213a:	60 81       	ld	r22, Z
    213c:	71 81       	ldd	r23, Z+1	; 0x01
    213e:	80 e0       	ldi	r24, 0x00	; 0
    2140:	90 e0       	ldi	r25, 0x00	; 0
    2142:	0e 5f       	subi	r16, 0xFE	; 254
    2144:	1f 4f       	sbci	r17, 0xFF	; 255
    2146:	a4 01       	movw	r20, r8
    2148:	0e 94 a0 11 	call	0x2340	; 0x2340 <__ultoa_invert>
    214c:	a8 2e       	mov	r10, r24
    214e:	a8 18       	sub	r10, r8
    2150:	fb 2d       	mov	r31, r11
    2152:	ff 77       	andi	r31, 0x7F	; 127
    2154:	bf 2e       	mov	r11, r31
    2156:	b6 fe       	sbrs	r11, 6
    2158:	0b c0       	rjmp	.+22     	; 0x2170 <vfprintf+0x2aa>
    215a:	2b 2d       	mov	r18, r11
    215c:	2e 7f       	andi	r18, 0xFE	; 254
    215e:	a5 14       	cp	r10, r5
    2160:	50 f4       	brcc	.+20     	; 0x2176 <vfprintf+0x2b0>
    2162:	b4 fe       	sbrs	r11, 4
    2164:	0a c0       	rjmp	.+20     	; 0x217a <vfprintf+0x2b4>
    2166:	b2 fc       	sbrc	r11, 2
    2168:	08 c0       	rjmp	.+16     	; 0x217a <vfprintf+0x2b4>
    216a:	2b 2d       	mov	r18, r11
    216c:	2e 7e       	andi	r18, 0xEE	; 238
    216e:	05 c0       	rjmp	.+10     	; 0x217a <vfprintf+0x2b4>
    2170:	7a 2c       	mov	r7, r10
    2172:	2b 2d       	mov	r18, r11
    2174:	03 c0       	rjmp	.+6      	; 0x217c <vfprintf+0x2b6>
    2176:	7a 2c       	mov	r7, r10
    2178:	01 c0       	rjmp	.+2      	; 0x217c <vfprintf+0x2b6>
    217a:	75 2c       	mov	r7, r5
    217c:	24 ff       	sbrs	r18, 4
    217e:	0d c0       	rjmp	.+26     	; 0x219a <vfprintf+0x2d4>
    2180:	fe 01       	movw	r30, r28
    2182:	ea 0d       	add	r30, r10
    2184:	f1 1d       	adc	r31, r1
    2186:	80 81       	ld	r24, Z
    2188:	80 33       	cpi	r24, 0x30	; 48
    218a:	11 f4       	brne	.+4      	; 0x2190 <vfprintf+0x2ca>
    218c:	29 7e       	andi	r18, 0xE9	; 233
    218e:	09 c0       	rjmp	.+18     	; 0x21a2 <vfprintf+0x2dc>
    2190:	22 ff       	sbrs	r18, 2
    2192:	06 c0       	rjmp	.+12     	; 0x21a0 <vfprintf+0x2da>
    2194:	73 94       	inc	r7
    2196:	73 94       	inc	r7
    2198:	04 c0       	rjmp	.+8      	; 0x21a2 <vfprintf+0x2dc>
    219a:	82 2f       	mov	r24, r18
    219c:	86 78       	andi	r24, 0x86	; 134
    219e:	09 f0       	breq	.+2      	; 0x21a2 <vfprintf+0x2dc>
    21a0:	73 94       	inc	r7
    21a2:	23 fd       	sbrc	r18, 3
    21a4:	13 c0       	rjmp	.+38     	; 0x21cc <vfprintf+0x306>
    21a6:	20 ff       	sbrs	r18, 0
    21a8:	06 c0       	rjmp	.+12     	; 0x21b6 <vfprintf+0x2f0>
    21aa:	5a 2c       	mov	r5, r10
    21ac:	73 14       	cp	r7, r3
    21ae:	18 f4       	brcc	.+6      	; 0x21b6 <vfprintf+0x2f0>
    21b0:	53 0c       	add	r5, r3
    21b2:	57 18       	sub	r5, r7
    21b4:	73 2c       	mov	r7, r3
    21b6:	73 14       	cp	r7, r3
    21b8:	68 f4       	brcc	.+26     	; 0x21d4 <vfprintf+0x30e>
    21ba:	b7 01       	movw	r22, r14
    21bc:	80 e2       	ldi	r24, 0x20	; 32
    21be:	90 e0       	ldi	r25, 0x00	; 0
    21c0:	2c 87       	std	Y+12, r18	; 0x0c
    21c2:	0e 94 6e 11 	call	0x22dc	; 0x22dc <fputc>
    21c6:	73 94       	inc	r7
    21c8:	2c 85       	ldd	r18, Y+12	; 0x0c
    21ca:	f5 cf       	rjmp	.-22     	; 0x21b6 <vfprintf+0x2f0>
    21cc:	73 14       	cp	r7, r3
    21ce:	10 f4       	brcc	.+4      	; 0x21d4 <vfprintf+0x30e>
    21d0:	37 18       	sub	r3, r7
    21d2:	01 c0       	rjmp	.+2      	; 0x21d6 <vfprintf+0x310>
    21d4:	31 2c       	mov	r3, r1
    21d6:	24 ff       	sbrs	r18, 4
    21d8:	12 c0       	rjmp	.+36     	; 0x21fe <vfprintf+0x338>
    21da:	b7 01       	movw	r22, r14
    21dc:	80 e3       	ldi	r24, 0x30	; 48
    21de:	90 e0       	ldi	r25, 0x00	; 0
    21e0:	2c 87       	std	Y+12, r18	; 0x0c
    21e2:	0e 94 6e 11 	call	0x22dc	; 0x22dc <fputc>
    21e6:	2c 85       	ldd	r18, Y+12	; 0x0c
    21e8:	22 ff       	sbrs	r18, 2
    21ea:	17 c0       	rjmp	.+46     	; 0x221a <vfprintf+0x354>
    21ec:	21 ff       	sbrs	r18, 1
    21ee:	03 c0       	rjmp	.+6      	; 0x21f6 <vfprintf+0x330>
    21f0:	88 e5       	ldi	r24, 0x58	; 88
    21f2:	90 e0       	ldi	r25, 0x00	; 0
    21f4:	02 c0       	rjmp	.+4      	; 0x21fa <vfprintf+0x334>
    21f6:	88 e7       	ldi	r24, 0x78	; 120
    21f8:	90 e0       	ldi	r25, 0x00	; 0
    21fa:	b7 01       	movw	r22, r14
    21fc:	0c c0       	rjmp	.+24     	; 0x2216 <vfprintf+0x350>
    21fe:	82 2f       	mov	r24, r18
    2200:	86 78       	andi	r24, 0x86	; 134
    2202:	59 f0       	breq	.+22     	; 0x221a <vfprintf+0x354>
    2204:	21 fd       	sbrc	r18, 1
    2206:	02 c0       	rjmp	.+4      	; 0x220c <vfprintf+0x346>
    2208:	80 e2       	ldi	r24, 0x20	; 32
    220a:	01 c0       	rjmp	.+2      	; 0x220e <vfprintf+0x348>
    220c:	8b e2       	ldi	r24, 0x2B	; 43
    220e:	27 fd       	sbrc	r18, 7
    2210:	8d e2       	ldi	r24, 0x2D	; 45
    2212:	b7 01       	movw	r22, r14
    2214:	90 e0       	ldi	r25, 0x00	; 0
    2216:	0e 94 6e 11 	call	0x22dc	; 0x22dc <fputc>
    221a:	a5 14       	cp	r10, r5
    221c:	38 f4       	brcc	.+14     	; 0x222c <vfprintf+0x366>
    221e:	b7 01       	movw	r22, r14
    2220:	80 e3       	ldi	r24, 0x30	; 48
    2222:	90 e0       	ldi	r25, 0x00	; 0
    2224:	0e 94 6e 11 	call	0x22dc	; 0x22dc <fputc>
    2228:	5a 94       	dec	r5
    222a:	f7 cf       	rjmp	.-18     	; 0x221a <vfprintf+0x354>
    222c:	aa 94       	dec	r10
    222e:	f4 01       	movw	r30, r8
    2230:	ea 0d       	add	r30, r10
    2232:	f1 1d       	adc	r31, r1
    2234:	80 81       	ld	r24, Z
    2236:	b7 01       	movw	r22, r14
    2238:	90 e0       	ldi	r25, 0x00	; 0
    223a:	0e 94 6e 11 	call	0x22dc	; 0x22dc <fputc>
    223e:	a1 10       	cpse	r10, r1
    2240:	f5 cf       	rjmp	.-22     	; 0x222c <vfprintf+0x366>
    2242:	33 20       	and	r3, r3
    2244:	09 f4       	brne	.+2      	; 0x2248 <vfprintf+0x382>
    2246:	51 ce       	rjmp	.-862    	; 0x1eea <vfprintf+0x24>
    2248:	b7 01       	movw	r22, r14
    224a:	80 e2       	ldi	r24, 0x20	; 32
    224c:	90 e0       	ldi	r25, 0x00	; 0
    224e:	0e 94 6e 11 	call	0x22dc	; 0x22dc <fputc>
    2252:	3a 94       	dec	r3
    2254:	f6 cf       	rjmp	.-20     	; 0x2242 <vfprintf+0x37c>
    2256:	f7 01       	movw	r30, r14
    2258:	86 81       	ldd	r24, Z+6	; 0x06
    225a:	97 81       	ldd	r25, Z+7	; 0x07
    225c:	02 c0       	rjmp	.+4      	; 0x2262 <vfprintf+0x39c>
    225e:	8f ef       	ldi	r24, 0xFF	; 255
    2260:	9f ef       	ldi	r25, 0xFF	; 255
    2262:	2c 96       	adiw	r28, 0x0c	; 12
    2264:	e2 e1       	ldi	r30, 0x12	; 18
    2266:	0c 94 1a 12 	jmp	0x2434	; 0x2434 <__epilogue_restores__>

0000226a <calloc>:
    226a:	0f 93       	push	r16
    226c:	1f 93       	push	r17
    226e:	cf 93       	push	r28
    2270:	df 93       	push	r29
    2272:	86 9f       	mul	r24, r22
    2274:	80 01       	movw	r16, r0
    2276:	87 9f       	mul	r24, r23
    2278:	10 0d       	add	r17, r0
    227a:	96 9f       	mul	r25, r22
    227c:	10 0d       	add	r17, r0
    227e:	11 24       	eor	r1, r1
    2280:	c8 01       	movw	r24, r16
    2282:	0e 94 b0 0d 	call	0x1b60	; 0x1b60 <malloc>
    2286:	ec 01       	movw	r28, r24
    2288:	00 97       	sbiw	r24, 0x00	; 0
    228a:	29 f0       	breq	.+10     	; 0x2296 <calloc+0x2c>
    228c:	a8 01       	movw	r20, r16
    228e:	60 e0       	ldi	r22, 0x00	; 0
    2290:	70 e0       	ldi	r23, 0x00	; 0
    2292:	0e 94 5c 11 	call	0x22b8	; 0x22b8 <memset>
    2296:	ce 01       	movw	r24, r28
    2298:	df 91       	pop	r29
    229a:	cf 91       	pop	r28
    229c:	1f 91       	pop	r17
    229e:	0f 91       	pop	r16
    22a0:	08 95       	ret

000022a2 <strnlen_P>:
    22a2:	fc 01       	movw	r30, r24
    22a4:	05 90       	lpm	r0, Z+
    22a6:	61 50       	subi	r22, 0x01	; 1
    22a8:	70 40       	sbci	r23, 0x00	; 0
    22aa:	01 10       	cpse	r0, r1
    22ac:	d8 f7       	brcc	.-10     	; 0x22a4 <strnlen_P+0x2>
    22ae:	80 95       	com	r24
    22b0:	90 95       	com	r25
    22b2:	8e 0f       	add	r24, r30
    22b4:	9f 1f       	adc	r25, r31
    22b6:	08 95       	ret

000022b8 <memset>:
    22b8:	dc 01       	movw	r26, r24
    22ba:	01 c0       	rjmp	.+2      	; 0x22be <memset+0x6>
    22bc:	6d 93       	st	X+, r22
    22be:	41 50       	subi	r20, 0x01	; 1
    22c0:	50 40       	sbci	r21, 0x00	; 0
    22c2:	e0 f7       	brcc	.-8      	; 0x22bc <memset+0x4>
    22c4:	08 95       	ret

000022c6 <strnlen>:
    22c6:	fc 01       	movw	r30, r24
    22c8:	61 50       	subi	r22, 0x01	; 1
    22ca:	70 40       	sbci	r23, 0x00	; 0
    22cc:	01 90       	ld	r0, Z+
    22ce:	01 10       	cpse	r0, r1
    22d0:	d8 f7       	brcc	.-10     	; 0x22c8 <strnlen+0x2>
    22d2:	80 95       	com	r24
    22d4:	90 95       	com	r25
    22d6:	8e 0f       	add	r24, r30
    22d8:	9f 1f       	adc	r25, r31
    22da:	08 95       	ret

000022dc <fputc>:
    22dc:	0f 93       	push	r16
    22de:	1f 93       	push	r17
    22e0:	cf 93       	push	r28
    22e2:	df 93       	push	r29
    22e4:	18 2f       	mov	r17, r24
    22e6:	09 2f       	mov	r16, r25
    22e8:	eb 01       	movw	r28, r22
    22ea:	8b 81       	ldd	r24, Y+3	; 0x03
    22ec:	81 fd       	sbrc	r24, 1
    22ee:	03 c0       	rjmp	.+6      	; 0x22f6 <fputc+0x1a>
    22f0:	8f ef       	ldi	r24, 0xFF	; 255
    22f2:	9f ef       	ldi	r25, 0xFF	; 255
    22f4:	20 c0       	rjmp	.+64     	; 0x2336 <fputc+0x5a>
    22f6:	82 ff       	sbrs	r24, 2
    22f8:	10 c0       	rjmp	.+32     	; 0x231a <fputc+0x3e>
    22fa:	4e 81       	ldd	r20, Y+6	; 0x06
    22fc:	5f 81       	ldd	r21, Y+7	; 0x07
    22fe:	2c 81       	ldd	r18, Y+4	; 0x04
    2300:	3d 81       	ldd	r19, Y+5	; 0x05
    2302:	42 17       	cp	r20, r18
    2304:	53 07       	cpc	r21, r19
    2306:	7c f4       	brge	.+30     	; 0x2326 <fputc+0x4a>
    2308:	e8 81       	ld	r30, Y
    230a:	f9 81       	ldd	r31, Y+1	; 0x01
    230c:	9f 01       	movw	r18, r30
    230e:	2f 5f       	subi	r18, 0xFF	; 255
    2310:	3f 4f       	sbci	r19, 0xFF	; 255
    2312:	39 83       	std	Y+1, r19	; 0x01
    2314:	28 83       	st	Y, r18
    2316:	10 83       	st	Z, r17
    2318:	06 c0       	rjmp	.+12     	; 0x2326 <fputc+0x4a>
    231a:	e8 85       	ldd	r30, Y+8	; 0x08
    231c:	f9 85       	ldd	r31, Y+9	; 0x09
    231e:	81 2f       	mov	r24, r17
    2320:	09 95       	icall
    2322:	89 2b       	or	r24, r25
    2324:	29 f7       	brne	.-54     	; 0x22f0 <fputc+0x14>
    2326:	2e 81       	ldd	r18, Y+6	; 0x06
    2328:	3f 81       	ldd	r19, Y+7	; 0x07
    232a:	2f 5f       	subi	r18, 0xFF	; 255
    232c:	3f 4f       	sbci	r19, 0xFF	; 255
    232e:	3f 83       	std	Y+7, r19	; 0x07
    2330:	2e 83       	std	Y+6, r18	; 0x06
    2332:	81 2f       	mov	r24, r17
    2334:	90 2f       	mov	r25, r16
    2336:	df 91       	pop	r29
    2338:	cf 91       	pop	r28
    233a:	1f 91       	pop	r17
    233c:	0f 91       	pop	r16
    233e:	08 95       	ret

00002340 <__ultoa_invert>:
    2340:	fa 01       	movw	r30, r20
    2342:	aa 27       	eor	r26, r26
    2344:	28 30       	cpi	r18, 0x08	; 8
    2346:	51 f1       	breq	.+84     	; 0x239c <__ultoa_invert+0x5c>
    2348:	20 31       	cpi	r18, 0x10	; 16
    234a:	81 f1       	breq	.+96     	; 0x23ac <__ultoa_invert+0x6c>
    234c:	e8 94       	clt
    234e:	6f 93       	push	r22
    2350:	6e 7f       	andi	r22, 0xFE	; 254
    2352:	6e 5f       	subi	r22, 0xFE	; 254
    2354:	7f 4f       	sbci	r23, 0xFF	; 255
    2356:	8f 4f       	sbci	r24, 0xFF	; 255
    2358:	9f 4f       	sbci	r25, 0xFF	; 255
    235a:	af 4f       	sbci	r26, 0xFF	; 255
    235c:	b1 e0       	ldi	r27, 0x01	; 1
    235e:	3e d0       	rcall	.+124    	; 0x23dc <__ultoa_invert+0x9c>
    2360:	b4 e0       	ldi	r27, 0x04	; 4
    2362:	3c d0       	rcall	.+120    	; 0x23dc <__ultoa_invert+0x9c>
    2364:	67 0f       	add	r22, r23
    2366:	78 1f       	adc	r23, r24
    2368:	89 1f       	adc	r24, r25
    236a:	9a 1f       	adc	r25, r26
    236c:	a1 1d       	adc	r26, r1
    236e:	68 0f       	add	r22, r24
    2370:	79 1f       	adc	r23, r25
    2372:	8a 1f       	adc	r24, r26
    2374:	91 1d       	adc	r25, r1
    2376:	a1 1d       	adc	r26, r1
    2378:	6a 0f       	add	r22, r26
    237a:	71 1d       	adc	r23, r1
    237c:	81 1d       	adc	r24, r1
    237e:	91 1d       	adc	r25, r1
    2380:	a1 1d       	adc	r26, r1
    2382:	20 d0       	rcall	.+64     	; 0x23c4 <__ultoa_invert+0x84>
    2384:	09 f4       	brne	.+2      	; 0x2388 <__ultoa_invert+0x48>
    2386:	68 94       	set
    2388:	3f 91       	pop	r19
    238a:	2a e0       	ldi	r18, 0x0A	; 10
    238c:	26 9f       	mul	r18, r22
    238e:	11 24       	eor	r1, r1
    2390:	30 19       	sub	r19, r0
    2392:	30 5d       	subi	r19, 0xD0	; 208
    2394:	31 93       	st	Z+, r19
    2396:	de f6       	brtc	.-74     	; 0x234e <__ultoa_invert+0xe>
    2398:	cf 01       	movw	r24, r30
    239a:	08 95       	ret
    239c:	46 2f       	mov	r20, r22
    239e:	47 70       	andi	r20, 0x07	; 7
    23a0:	40 5d       	subi	r20, 0xD0	; 208
    23a2:	41 93       	st	Z+, r20
    23a4:	b3 e0       	ldi	r27, 0x03	; 3
    23a6:	0f d0       	rcall	.+30     	; 0x23c6 <__ultoa_invert+0x86>
    23a8:	c9 f7       	brne	.-14     	; 0x239c <__ultoa_invert+0x5c>
    23aa:	f6 cf       	rjmp	.-20     	; 0x2398 <__ultoa_invert+0x58>
    23ac:	46 2f       	mov	r20, r22
    23ae:	4f 70       	andi	r20, 0x0F	; 15
    23b0:	40 5d       	subi	r20, 0xD0	; 208
    23b2:	4a 33       	cpi	r20, 0x3A	; 58
    23b4:	18 f0       	brcs	.+6      	; 0x23bc <__ultoa_invert+0x7c>
    23b6:	49 5d       	subi	r20, 0xD9	; 217
    23b8:	31 fd       	sbrc	r19, 1
    23ba:	40 52       	subi	r20, 0x20	; 32
    23bc:	41 93       	st	Z+, r20
    23be:	02 d0       	rcall	.+4      	; 0x23c4 <__ultoa_invert+0x84>
    23c0:	a9 f7       	brne	.-22     	; 0x23ac <__ultoa_invert+0x6c>
    23c2:	ea cf       	rjmp	.-44     	; 0x2398 <__ultoa_invert+0x58>
    23c4:	b4 e0       	ldi	r27, 0x04	; 4
    23c6:	a6 95       	lsr	r26
    23c8:	97 95       	ror	r25
    23ca:	87 95       	ror	r24
    23cc:	77 95       	ror	r23
    23ce:	67 95       	ror	r22
    23d0:	ba 95       	dec	r27
    23d2:	c9 f7       	brne	.-14     	; 0x23c6 <__ultoa_invert+0x86>
    23d4:	00 97       	sbiw	r24, 0x00	; 0
    23d6:	61 05       	cpc	r22, r1
    23d8:	71 05       	cpc	r23, r1
    23da:	08 95       	ret
    23dc:	9b 01       	movw	r18, r22
    23de:	ac 01       	movw	r20, r24
    23e0:	0a 2e       	mov	r0, r26
    23e2:	06 94       	lsr	r0
    23e4:	57 95       	ror	r21
    23e6:	47 95       	ror	r20
    23e8:	37 95       	ror	r19
    23ea:	27 95       	ror	r18
    23ec:	ba 95       	dec	r27
    23ee:	c9 f7       	brne	.-14     	; 0x23e2 <__ultoa_invert+0xa2>
    23f0:	62 0f       	add	r22, r18
    23f2:	73 1f       	adc	r23, r19
    23f4:	84 1f       	adc	r24, r20
    23f6:	95 1f       	adc	r25, r21
    23f8:	a0 1d       	adc	r26, r0
    23fa:	08 95       	ret

000023fc <__prologue_saves__>:
    23fc:	2f 92       	push	r2
    23fe:	3f 92       	push	r3
    2400:	4f 92       	push	r4
    2402:	5f 92       	push	r5
    2404:	6f 92       	push	r6
    2406:	7f 92       	push	r7
    2408:	8f 92       	push	r8
    240a:	9f 92       	push	r9
    240c:	af 92       	push	r10
    240e:	bf 92       	push	r11
    2410:	cf 92       	push	r12
    2412:	df 92       	push	r13
    2414:	ef 92       	push	r14
    2416:	ff 92       	push	r15
    2418:	0f 93       	push	r16
    241a:	1f 93       	push	r17
    241c:	cf 93       	push	r28
    241e:	df 93       	push	r29
    2420:	cd b7       	in	r28, 0x3d	; 61
    2422:	de b7       	in	r29, 0x3e	; 62
    2424:	ca 1b       	sub	r28, r26
    2426:	db 0b       	sbc	r29, r27
    2428:	0f b6       	in	r0, 0x3f	; 63
    242a:	f8 94       	cli
    242c:	de bf       	out	0x3e, r29	; 62
    242e:	0f be       	out	0x3f, r0	; 63
    2430:	cd bf       	out	0x3d, r28	; 61
    2432:	09 94       	ijmp

00002434 <__epilogue_restores__>:
    2434:	2a 88       	ldd	r2, Y+18	; 0x12
    2436:	39 88       	ldd	r3, Y+17	; 0x11
    2438:	48 88       	ldd	r4, Y+16	; 0x10
    243a:	5f 84       	ldd	r5, Y+15	; 0x0f
    243c:	6e 84       	ldd	r6, Y+14	; 0x0e
    243e:	7d 84       	ldd	r7, Y+13	; 0x0d
    2440:	8c 84       	ldd	r8, Y+12	; 0x0c
    2442:	9b 84       	ldd	r9, Y+11	; 0x0b
    2444:	aa 84       	ldd	r10, Y+10	; 0x0a
    2446:	b9 84       	ldd	r11, Y+9	; 0x09
    2448:	c8 84       	ldd	r12, Y+8	; 0x08
    244a:	df 80       	ldd	r13, Y+7	; 0x07
    244c:	ee 80       	ldd	r14, Y+6	; 0x06
    244e:	fd 80       	ldd	r15, Y+5	; 0x05
    2450:	0c 81       	ldd	r16, Y+4	; 0x04
    2452:	1b 81       	ldd	r17, Y+3	; 0x03
    2454:	aa 81       	ldd	r26, Y+2	; 0x02
    2456:	b9 81       	ldd	r27, Y+1	; 0x01
    2458:	ce 0f       	add	r28, r30
    245a:	d1 1d       	adc	r29, r1
    245c:	0f b6       	in	r0, 0x3f	; 63
    245e:	f8 94       	cli
    2460:	de bf       	out	0x3e, r29	; 62
    2462:	0f be       	out	0x3f, r0	; 63
    2464:	cd bf       	out	0x3d, r28	; 61
    2466:	ed 01       	movw	r28, r26
    2468:	08 95       	ret

0000246a <_exit>:
    246a:	f8 94       	cli

0000246c <__stop_program>:
    246c:	ff cf       	rjmp	.-2      	; 0x246c <__stop_program>
