
Byggern.elf:     file format elf32-avr

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .data         00000172  00800100  000019da  00001a6e  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  1 .text         000019da  00000000  00000000  00000094  2**1
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .bss          00000015  00800272  00800272  00001be0  2**0
                  ALLOC
  3 .comment      0000005c  00000000  00000000  00001be0  2**0
                  CONTENTS, READONLY
  4 .debug_aranges 000001c0  00000000  00000000  00001c3c  2**0
                  CONTENTS, READONLY, DEBUGGING
  5 .debug_info   000020d2  00000000  00000000  00001dfc  2**0
                  CONTENTS, READONLY, DEBUGGING
  6 .debug_abbrev 00000aed  00000000  00000000  00003ece  2**0
                  CONTENTS, READONLY, DEBUGGING
  7 .debug_line   00000af5  00000000  00000000  000049bb  2**0
                  CONTENTS, READONLY, DEBUGGING
  8 .debug_frame  00000524  00000000  00000000  000054b0  2**2
                  CONTENTS, READONLY, DEBUGGING
  9 .debug_str    0000075f  00000000  00000000  000059d4  2**0
                  CONTENTS, READONLY, DEBUGGING
 10 .debug_loc    00001504  00000000  00000000  00006133  2**0
                  CONTENTS, READONLY, DEBUGGING
 11 .debug_ranges 000001a0  00000000  00000000  00007637  2**0
                  CONTENTS, READONLY, DEBUGGING

Disassembly of section .text:

00000000 <__vectors>:
       0:	0c 94 b4 01 	jmp	0x368	; 0x368 <__ctors_end>
       4:	0c 94 d1 01 	jmp	0x3a2	; 0x3a2 <__bad_interrupt>
       8:	0c 94 d3 01 	jmp	0x3a6	; 0x3a6 <__vector_2>
       c:	0c 94 d1 01 	jmp	0x3a2	; 0x3a2 <__bad_interrupt>
      10:	0c 94 d1 01 	jmp	0x3a2	; 0x3a2 <__bad_interrupt>
      14:	0c 94 d1 01 	jmp	0x3a2	; 0x3a2 <__bad_interrupt>
      18:	0c 94 d1 01 	jmp	0x3a2	; 0x3a2 <__bad_interrupt>
      1c:	0c 94 d1 01 	jmp	0x3a2	; 0x3a2 <__bad_interrupt>
      20:	0c 94 d1 01 	jmp	0x3a2	; 0x3a2 <__bad_interrupt>
      24:	0c 94 d1 01 	jmp	0x3a2	; 0x3a2 <__bad_interrupt>
      28:	0c 94 d1 01 	jmp	0x3a2	; 0x3a2 <__bad_interrupt>
      2c:	0c 94 d1 01 	jmp	0x3a2	; 0x3a2 <__bad_interrupt>
      30:	0c 94 d1 01 	jmp	0x3a2	; 0x3a2 <__bad_interrupt>
      34:	0c 94 d1 01 	jmp	0x3a2	; 0x3a2 <__bad_interrupt>
      38:	0c 94 d1 01 	jmp	0x3a2	; 0x3a2 <__bad_interrupt>
      3c:	0c 94 d1 01 	jmp	0x3a2	; 0x3a2 <__bad_interrupt>
      40:	0c 94 d1 01 	jmp	0x3a2	; 0x3a2 <__bad_interrupt>
      44:	0c 94 d1 01 	jmp	0x3a2	; 0x3a2 <__bad_interrupt>
      48:	0c 94 d1 01 	jmp	0x3a2	; 0x3a2 <__bad_interrupt>
      4c:	0c 94 d1 01 	jmp	0x3a2	; 0x3a2 <__bad_interrupt>
      50:	0c 94 d1 01 	jmp	0x3a2	; 0x3a2 <__bad_interrupt>
      54:	0c 94 d1 01 	jmp	0x3a2	; 0x3a2 <__bad_interrupt>
      58:	0c 94 d1 01 	jmp	0x3a2	; 0x3a2 <__bad_interrupt>
      5c:	0c 94 d1 01 	jmp	0x3a2	; 0x3a2 <__bad_interrupt>
      60:	0c 94 d1 01 	jmp	0x3a2	; 0x3a2 <__bad_interrupt>
      64:	0c 94 d1 01 	jmp	0x3a2	; 0x3a2 <__bad_interrupt>
      68:	0c 94 d1 01 	jmp	0x3a2	; 0x3a2 <__bad_interrupt>
      6c:	0c 94 d1 01 	jmp	0x3a2	; 0x3a2 <__bad_interrupt>

00000070 <__trampolines_end>:
	...
      78:	00 06       	cpc	r0, r16
      7a:	5f 5f       	subi	r21, 0xFF	; 255
      7c:	06 00       	.word	0x0006	; ????
      7e:	00 00       	nop
      80:	00 07       	cpc	r16, r16
      82:	07 00       	.word	0x0007	; ????
      84:	07 07       	cpc	r16, r23
      86:	00 00       	nop
      88:	14 7f       	andi	r17, 0xF4	; 244
      8a:	7f 14       	cp	r7, r15
      8c:	7f 7f       	andi	r23, 0xFF	; 255
      8e:	14 00       	.word	0x0014	; ????
      90:	24 2e       	mov	r2, r20
      92:	6b 6b       	ori	r22, 0xBB	; 187
      94:	3a 12       	cpse	r3, r26
      96:	00 00       	nop
      98:	46 66       	ori	r20, 0x66	; 102
      9a:	30 18       	sub	r3, r0
      9c:	0c 66       	ori	r16, 0x6C	; 108
      9e:	62 00       	.word	0x0062	; ????
      a0:	30 7a       	andi	r19, 0xA0	; 160
      a2:	4f 5d       	subi	r20, 0xDF	; 223
      a4:	37 7a       	andi	r19, 0xA7	; 167
      a6:	48 00       	.word	0x0048	; ????
      a8:	04 07       	cpc	r16, r20
      aa:	03 00       	.word	0x0003	; ????
      ac:	00 00       	nop
      ae:	00 00       	nop
      b0:	00 1c       	adc	r0, r0
      b2:	3e 63       	ori	r19, 0x3E	; 62
      b4:	41 00       	.word	0x0041	; ????
      b6:	00 00       	nop
      b8:	00 41       	sbci	r16, 0x10	; 16
      ba:	63 3e       	cpi	r22, 0xE3	; 227
      bc:	1c 00       	.word	0x001c	; ????
      be:	00 00       	nop
      c0:	08 2a       	or	r0, r24
      c2:	3e 1c       	adc	r3, r14
      c4:	1c 3e       	cpi	r17, 0xEC	; 236
      c6:	2a 08       	sbc	r2, r10
      c8:	08 08       	sbc	r0, r8
      ca:	3e 3e       	cpi	r19, 0xEE	; 238
      cc:	08 08       	sbc	r0, r8
      ce:	00 00       	nop
      d0:	00 a0       	ldd	r0, Z+32	; 0x20
      d2:	e0 60       	ori	r30, 0x00	; 0
      d4:	00 00       	nop
      d6:	00 00       	nop
      d8:	08 08       	sbc	r0, r8
      da:	08 08       	sbc	r0, r8
      dc:	08 08       	sbc	r0, r8
      de:	00 00       	nop
      e0:	00 00       	nop
      e2:	60 60       	ori	r22, 0x00	; 0
      e4:	00 00       	nop
      e6:	00 00       	nop
      e8:	60 30       	cpi	r22, 0x00	; 0
      ea:	18 0c       	add	r1, r8
      ec:	06 03       	mulsu	r16, r22
      ee:	01 00       	.word	0x0001	; ????
      f0:	3e 7f       	andi	r19, 0xFE	; 254
      f2:	59 4d       	sbci	r21, 0xD9	; 217
      f4:	7f 3e       	cpi	r23, 0xEF	; 239
      f6:	00 00       	nop
      f8:	42 42       	sbci	r20, 0x22	; 34
      fa:	7f 7f       	andi	r23, 0xFF	; 255
      fc:	40 40       	sbci	r20, 0x00	; 0
      fe:	00 00       	nop
     100:	62 73       	andi	r22, 0x32	; 50
     102:	59 49       	sbci	r21, 0x99	; 153
     104:	6f 66       	ori	r22, 0x6F	; 111
     106:	00 00       	nop
     108:	22 63       	ori	r18, 0x32	; 50
     10a:	49 49       	sbci	r20, 0x99	; 153
     10c:	7f 36       	cpi	r23, 0x6F	; 111
     10e:	00 00       	nop
     110:	18 1c       	adc	r1, r8
     112:	16 13       	cpse	r17, r22
     114:	7f 7f       	andi	r23, 0xFF	; 255
     116:	10 00       	.word	0x0010	; ????
     118:	27 67       	ori	r18, 0x77	; 119
     11a:	45 45       	sbci	r20, 0x55	; 85
     11c:	7d 39       	cpi	r23, 0x9D	; 157
     11e:	00 00       	nop
     120:	3c 7e       	andi	r19, 0xEC	; 236
     122:	4b 49       	sbci	r20, 0x9B	; 155
     124:	79 30       	cpi	r23, 0x09	; 9
     126:	00 00       	nop
     128:	03 63       	ori	r16, 0x33	; 51
     12a:	71 19       	sub	r23, r1
     12c:	0f 07       	cpc	r16, r31
     12e:	00 00       	nop
     130:	36 7f       	andi	r19, 0xF6	; 246
     132:	49 49       	sbci	r20, 0x99	; 153
     134:	7f 36       	cpi	r23, 0x6F	; 111
     136:	00 00       	nop
     138:	06 4f       	sbci	r16, 0xF6	; 246
     13a:	49 69       	ori	r20, 0x99	; 153
     13c:	3f 1e       	adc	r3, r31
     13e:	00 00       	nop
     140:	00 00       	nop
     142:	6c 6c       	ori	r22, 0xCC	; 204
     144:	00 00       	nop
     146:	00 00       	nop
     148:	00 a0       	ldd	r0, Z+32	; 0x20
     14a:	ec 6c       	ori	r30, 0xCC	; 204
     14c:	00 00       	nop
     14e:	00 00       	nop
     150:	08 1c       	adc	r0, r8
     152:	36 63       	ori	r19, 0x36	; 54
     154:	41 00       	.word	0x0041	; ????
     156:	00 00       	nop
     158:	14 14       	cp	r1, r4
     15a:	14 14       	cp	r1, r4
     15c:	14 14       	cp	r1, r4
     15e:	00 00       	nop
     160:	00 41       	sbci	r16, 0x10	; 16
     162:	63 36       	cpi	r22, 0x63	; 99
     164:	1c 08       	sbc	r1, r12
     166:	00 00       	nop
     168:	02 03       	mulsu	r16, r18
     16a:	51 59       	subi	r21, 0x91	; 145
     16c:	0f 06       	cpc	r0, r31
     16e:	00 00       	nop
     170:	3e 7f       	andi	r19, 0xFE	; 254
     172:	41 5d       	subi	r20, 0xD1	; 209
     174:	5d 1f       	adc	r21, r29
     176:	1e 00       	.word	0x001e	; ????
     178:	7c 7e       	andi	r23, 0xEC	; 236
     17a:	13 13       	cpse	r17, r19
     17c:	7e 7c       	andi	r23, 0xCE	; 206
     17e:	00 00       	nop
     180:	41 7f       	andi	r20, 0xF1	; 241
     182:	7f 49       	sbci	r23, 0x9F	; 159
     184:	49 7f       	andi	r20, 0xF9	; 249
     186:	36 00       	.word	0x0036	; ????
     188:	1c 3e       	cpi	r17, 0xEC	; 236
     18a:	63 41       	sbci	r22, 0x13	; 19
     18c:	41 63       	ori	r20, 0x31	; 49
     18e:	22 00       	.word	0x0022	; ????
     190:	41 7f       	andi	r20, 0xF1	; 241
     192:	7f 41       	sbci	r23, 0x1F	; 31
     194:	63 7f       	andi	r22, 0xF3	; 243
     196:	1c 00       	.word	0x001c	; ????
     198:	41 7f       	andi	r20, 0xF1	; 241
     19a:	7f 49       	sbci	r23, 0x9F	; 159
     19c:	5d 41       	sbci	r21, 0x1D	; 29
     19e:	63 00       	.word	0x0063	; ????
     1a0:	41 7f       	andi	r20, 0xF1	; 241
     1a2:	7f 49       	sbci	r23, 0x9F	; 159
     1a4:	1d 01       	movw	r2, r26
     1a6:	03 00       	.word	0x0003	; ????
     1a8:	1c 3e       	cpi	r17, 0xEC	; 236
     1aa:	63 41       	sbci	r22, 0x13	; 19
     1ac:	51 73       	andi	r21, 0x31	; 49
     1ae:	72 00       	.word	0x0072	; ????
     1b0:	7f 7f       	andi	r23, 0xFF	; 255
     1b2:	08 08       	sbc	r0, r8
     1b4:	7f 7f       	andi	r23, 0xFF	; 255
     1b6:	00 00       	nop
     1b8:	00 41       	sbci	r16, 0x10	; 16
     1ba:	7f 7f       	andi	r23, 0xFF	; 255
     1bc:	41 00       	.word	0x0041	; ????
     1be:	00 00       	nop
     1c0:	30 70       	andi	r19, 0x00	; 0
     1c2:	40 41       	sbci	r20, 0x10	; 16
     1c4:	7f 3f       	cpi	r23, 0xFF	; 255
     1c6:	01 00       	.word	0x0001	; ????
     1c8:	41 7f       	andi	r20, 0xF1	; 241
     1ca:	7f 08       	sbc	r7, r15
     1cc:	1c 77       	andi	r17, 0x7C	; 124
     1ce:	63 00       	.word	0x0063	; ????
     1d0:	41 7f       	andi	r20, 0xF1	; 241
     1d2:	7f 41       	sbci	r23, 0x1F	; 31
     1d4:	40 60       	ori	r20, 0x00	; 0
     1d6:	70 00       	.word	0x0070	; ????
     1d8:	7f 7f       	andi	r23, 0xFF	; 255
     1da:	06 0c       	add	r0, r6
     1dc:	06 7f       	andi	r16, 0xF6	; 246
     1de:	7f 00       	.word	0x007f	; ????
     1e0:	7f 7f       	andi	r23, 0xFF	; 255
     1e2:	06 0c       	add	r0, r6
     1e4:	18 7f       	andi	r17, 0xF8	; 248
     1e6:	7f 00       	.word	0x007f	; ????
     1e8:	1c 3e       	cpi	r17, 0xEC	; 236
     1ea:	63 41       	sbci	r22, 0x13	; 19
     1ec:	63 3e       	cpi	r22, 0xE3	; 227
     1ee:	1c 00       	.word	0x001c	; ????
     1f0:	41 7f       	andi	r20, 0xF1	; 241
     1f2:	7f 49       	sbci	r23, 0x9F	; 159
     1f4:	09 0f       	add	r16, r25
     1f6:	06 00       	.word	0x0006	; ????
     1f8:	1e 3f       	cpi	r17, 0xFE	; 254
     1fa:	21 71       	andi	r18, 0x11	; 17
     1fc:	7f 5e       	subi	r23, 0xEF	; 239
     1fe:	00 00       	nop
     200:	41 7f       	andi	r20, 0xF1	; 241
     202:	7f 19       	sub	r23, r15
     204:	39 6f       	ori	r19, 0xF9	; 249
     206:	46 00       	.word	0x0046	; ????
     208:	26 67       	ori	r18, 0x76	; 118
     20a:	4d 59       	subi	r20, 0x9D	; 157
     20c:	7b 32       	cpi	r23, 0x2B	; 43
     20e:	00 00       	nop
     210:	03 41       	sbci	r16, 0x13	; 19
     212:	7f 7f       	andi	r23, 0xFF	; 255
     214:	41 03       	mulsu	r20, r17
     216:	00 00       	nop
     218:	7f 7f       	andi	r23, 0xFF	; 255
     21a:	40 40       	sbci	r20, 0x00	; 0
     21c:	7f 7f       	andi	r23, 0xFF	; 255
     21e:	00 00       	nop
     220:	1f 3f       	cpi	r17, 0xFF	; 255
     222:	60 60       	ori	r22, 0x00	; 0
     224:	3f 1f       	adc	r19, r31
     226:	00 00       	nop
     228:	7f 7f       	andi	r23, 0xFF	; 255
     22a:	30 18       	sub	r3, r0
     22c:	30 7f       	andi	r19, 0xF0	; 240
     22e:	7f 00       	.word	0x007f	; ????
     230:	63 77       	andi	r22, 0x73	; 115
     232:	1c 08       	sbc	r1, r12
     234:	1c 77       	andi	r17, 0x7C	; 124
     236:	63 00       	.word	0x0063	; ????
     238:	07 4f       	sbci	r16, 0xF7	; 247
     23a:	78 78       	andi	r23, 0x88	; 136
     23c:	4f 07       	cpc	r20, r31
     23e:	00 00       	nop
     240:	67 73       	andi	r22, 0x37	; 55
     242:	59 4d       	sbci	r21, 0xD9	; 217
     244:	47 63       	ori	r20, 0x37	; 55
     246:	71 00       	.word	0x0071	; ????
     248:	00 7f       	andi	r16, 0xF0	; 240
     24a:	7f 41       	sbci	r23, 0x1F	; 31
     24c:	41 00       	.word	0x0041	; ????
     24e:	00 00       	nop
     250:	01 03       	mulsu	r16, r17
     252:	06 0c       	add	r0, r6
     254:	18 30       	cpi	r17, 0x08	; 8
     256:	60 00       	.word	0x0060	; ????
     258:	00 41       	sbci	r16, 0x10	; 16
     25a:	41 7f       	andi	r20, 0xF1	; 241
     25c:	7f 00       	.word	0x007f	; ????
     25e:	00 00       	nop
     260:	08 0c       	add	r0, r8
     262:	06 03       	mulsu	r16, r22
     264:	06 0c       	add	r0, r6
     266:	08 00       	.word	0x0008	; ????
     268:	80 80       	ld	r8, Z
     26a:	80 80       	ld	r8, Z
     26c:	80 80       	ld	r8, Z
     26e:	80 80       	ld	r8, Z
     270:	00 00       	nop
     272:	03 07       	cpc	r16, r19
     274:	04 00       	.word	0x0004	; ????
     276:	00 00       	nop
     278:	20 74       	andi	r18, 0x40	; 64
     27a:	54 54       	subi	r21, 0x44	; 68
     27c:	3c 78       	andi	r19, 0x8C	; 140
     27e:	40 00       	.word	0x0040	; ????
     280:	41 3f       	cpi	r20, 0xF1	; 241
     282:	7f 44       	sbci	r23, 0x4F	; 79
     284:	44 7c       	andi	r20, 0xC4	; 196
     286:	38 00       	.word	0x0038	; ????
     288:	38 7c       	andi	r19, 0xC8	; 200
     28a:	44 44       	sbci	r20, 0x44	; 68
     28c:	6c 28       	or	r6, r12
     28e:	00 00       	nop
     290:	30 78       	andi	r19, 0x80	; 128
     292:	48 49       	sbci	r20, 0x98	; 152
     294:	3f 7f       	andi	r19, 0xFF	; 255
     296:	40 00       	.word	0x0040	; ????
     298:	38 7c       	andi	r19, 0xC8	; 200
     29a:	54 54       	subi	r21, 0x44	; 68
     29c:	5c 18       	sub	r5, r12
     29e:	00 00       	nop
     2a0:	48 7e       	andi	r20, 0xE8	; 232
     2a2:	7f 49       	sbci	r23, 0x9F	; 159
     2a4:	03 02       	muls	r16, r19
     2a6:	00 00       	nop
     2a8:	98 bc       	out	0x28, r9	; 40
     2aa:	a4 a4       	ldd	r10, Z+44	; 0x2c
     2ac:	f8 7c       	andi	r31, 0xC8	; 200
     2ae:	04 00       	.word	0x0004	; ????
     2b0:	41 7f       	andi	r20, 0xF1	; 241
     2b2:	7f 08       	sbc	r7, r15
     2b4:	04 7c       	andi	r16, 0xC4	; 196
     2b6:	78 00       	.word	0x0078	; ????
     2b8:	00 44       	sbci	r16, 0x40	; 64
     2ba:	7d 7d       	andi	r23, 0xDD	; 221
     2bc:	40 00       	.word	0x0040	; ????
     2be:	00 00       	nop
     2c0:	40 c4       	rjmp	.+2176   	; 0xb42 <oled_init+0x96>
     2c2:	84 fd       	sbrc	r24, 4
     2c4:	7d 00       	.word	0x007d	; ????
     2c6:	00 00       	nop
     2c8:	41 7f       	andi	r20, 0xF1	; 241
     2ca:	7f 10       	cpse	r7, r15
     2cc:	38 6c       	ori	r19, 0xC8	; 200
     2ce:	44 00       	.word	0x0044	; ????
     2d0:	00 41       	sbci	r16, 0x10	; 16
     2d2:	7f 7f       	andi	r23, 0xFF	; 255
     2d4:	40 00       	.word	0x0040	; ????
     2d6:	00 00       	nop
     2d8:	7c 7c       	andi	r23, 0xCC	; 204
     2da:	0c 18       	sub	r0, r12
     2dc:	0c 7c       	andi	r16, 0xCC	; 204
     2de:	78 00       	.word	0x0078	; ????
     2e0:	7c 7c       	andi	r23, 0xCC	; 204
     2e2:	04 04       	cpc	r0, r4
     2e4:	7c 78       	andi	r23, 0x8C	; 140
     2e6:	00 00       	nop
     2e8:	38 7c       	andi	r19, 0xC8	; 200
     2ea:	44 44       	sbci	r20, 0x44	; 68
     2ec:	7c 38       	cpi	r23, 0x8C	; 140
     2ee:	00 00       	nop
     2f0:	84 fc       	sbrc	r8, 4
     2f2:	f8 a4       	ldd	r15, Y+40	; 0x28
     2f4:	24 3c       	cpi	r18, 0xC4	; 196
     2f6:	18 00       	.word	0x0018	; ????
     2f8:	18 3c       	cpi	r17, 0xC8	; 200
     2fa:	24 a4       	ldd	r2, Z+44	; 0x2c
     2fc:	f8 fc       	.word	0xfcf8	; ????
     2fe:	84 00       	.word	0x0084	; ????
     300:	44 7c       	andi	r20, 0xC4	; 196
     302:	78 44       	sbci	r23, 0x48	; 72
     304:	1c 18       	sub	r1, r12
     306:	00 00       	nop
     308:	48 5c       	subi	r20, 0xC8	; 200
     30a:	54 54       	subi	r21, 0x44	; 68
     30c:	74 24       	eor	r7, r4
     30e:	00 00       	nop
     310:	00 04       	cpc	r0, r0
     312:	3e 7f       	andi	r19, 0xFE	; 254
     314:	44 24       	eor	r4, r4
     316:	00 00       	nop
     318:	3c 7c       	andi	r19, 0xCC	; 204
     31a:	40 40       	sbci	r20, 0x00	; 0
     31c:	3c 7c       	andi	r19, 0xCC	; 204
     31e:	40 00       	.word	0x0040	; ????
     320:	1c 3c       	cpi	r17, 0xCC	; 204
     322:	60 60       	ori	r22, 0x00	; 0
     324:	3c 1c       	adc	r3, r12
     326:	00 00       	nop
     328:	3c 7c       	andi	r19, 0xCC	; 204
     32a:	60 30       	cpi	r22, 0x00	; 0
     32c:	60 7c       	andi	r22, 0xC0	; 192
     32e:	3c 00       	.word	0x003c	; ????
     330:	44 6c       	ori	r20, 0xC4	; 196
     332:	38 10       	cpse	r3, r8
     334:	38 6c       	ori	r19, 0xC8	; 200
     336:	44 00       	.word	0x0044	; ????
     338:	9c bc       	out	0x2c, r9	; 44
     33a:	a0 a0       	ldd	r10, Z+32	; 0x20
     33c:	fc 7c       	andi	r31, 0xCC	; 204
     33e:	00 00       	nop
     340:	4c 64       	ori	r20, 0x4C	; 76
     342:	74 5c       	subi	r23, 0xC4	; 196
     344:	4c 64       	ori	r20, 0x4C	; 76
     346:	00 00       	nop
     348:	08 08       	sbc	r0, r8
     34a:	3e 77       	andi	r19, 0x7E	; 126
     34c:	41 41       	sbci	r20, 0x11	; 17
     34e:	00 00       	nop
     350:	00 00       	nop
     352:	00 77       	andi	r16, 0x70	; 112
     354:	77 00       	.word	0x0077	; ????
     356:	00 00       	nop
     358:	41 41       	sbci	r20, 0x11	; 17
     35a:	77 3e       	cpi	r23, 0xE7	; 231
     35c:	08 08       	sbc	r0, r8
     35e:	00 00       	nop
     360:	02 03       	mulsu	r16, r18
     362:	01 03       	mulsu	r16, r17
     364:	02 03       	mulsu	r16, r18
     366:	01 00       	.word	0x0001	; ????

00000368 <__ctors_end>:
     368:	11 24       	eor	r1, r1
     36a:	1f be       	out	0x3f, r1	; 63
     36c:	cf ef       	ldi	r28, 0xFF	; 255
     36e:	d4 e0       	ldi	r29, 0x04	; 4
     370:	de bf       	out	0x3e, r29	; 62
     372:	cd bf       	out	0x3d, r28	; 61

00000374 <__do_copy_data>:
     374:	12 e0       	ldi	r17, 0x02	; 2
     376:	a0 e0       	ldi	r26, 0x00	; 0
     378:	b1 e0       	ldi	r27, 0x01	; 1
     37a:	ea ed       	ldi	r30, 0xDA	; 218
     37c:	f9 e1       	ldi	r31, 0x19	; 25
     37e:	02 c0       	rjmp	.+4      	; 0x384 <__do_copy_data+0x10>
     380:	05 90       	lpm	r0, Z+
     382:	0d 92       	st	X+, r0
     384:	a2 37       	cpi	r26, 0x72	; 114
     386:	b1 07       	cpc	r27, r17
     388:	d9 f7       	brne	.-10     	; 0x380 <__do_copy_data+0xc>

0000038a <__do_clear_bss>:
     38a:	22 e0       	ldi	r18, 0x02	; 2
     38c:	a2 e7       	ldi	r26, 0x72	; 114
     38e:	b2 e0       	ldi	r27, 0x02	; 2
     390:	01 c0       	rjmp	.+2      	; 0x394 <.do_clear_bss_start>

00000392 <.do_clear_bss_loop>:
     392:	1d 92       	st	X+, r1

00000394 <.do_clear_bss_start>:
     394:	a7 38       	cpi	r26, 0x87	; 135
     396:	b2 07       	cpc	r27, r18
     398:	e1 f7       	brne	.-8      	; 0x392 <.do_clear_bss_loop>
     39a:	0e 94 c2 02 	call	0x584	; 0x584 <main>
     39e:	0c 94 eb 0c 	jmp	0x19d6	; 0x19d6 <_exit>

000003a2 <__bad_interrupt>:
     3a2:	0c 94 00 00 	jmp	0	; 0x0 <__vectors>

000003a6 <__vector_2>:
#endif

volatile char* ext_adc = ADC_ADDRESS;	//Create a pointer to the array of all addresses we will write to. ADC starting at 0x1400.
volatile char ADC_data;

ISR(INT1_vect){
     3a6:	1f 92       	push	r1
     3a8:	0f 92       	push	r0
     3aa:	0f b6       	in	r0, 0x3f	; 63
     3ac:	0f 92       	push	r0
     3ae:	11 24       	eor	r1, r1
     3b0:	8f 93       	push	r24
     3b2:	ef 93       	push	r30
     3b4:	ff 93       	push	r31
	
	ADC_data = ext_adc[0x00];
     3b6:	e0 91 0a 01 	lds	r30, 0x010A
     3ba:	f0 91 0b 01 	lds	r31, 0x010B
     3be:	80 81       	ld	r24, Z
     3c0:	80 93 72 02 	sts	0x0272, r24
}
     3c4:	ff 91       	pop	r31
     3c6:	ef 91       	pop	r30
     3c8:	8f 91       	pop	r24
     3ca:	0f 90       	pop	r0
     3cc:	0f be       	out	0x3f, r0	; 63
     3ce:	0f 90       	pop	r0
     3d0:	1f 90       	pop	r1
     3d2:	18 95       	reti

000003d4 <ADC_init>:
void ADC_init(void){
	
	//INITIALIZE INTERRUPT ON PIN PD3

	// Button input
	clear_bit(DDRD, PD3);
     3d4:	8b 98       	cbi	0x11, 3	; 17
	set_bit(PORTD, PD3);	//Set pull-up resistor
     3d6:	93 9a       	sbi	0x12, 3	; 18
	// Disable global interrupts
	cli();
     3d8:	f8 94       	cli
	// Interrupt on falling edge PD3
	set_bit(MCUCR, ISC11);
     3da:	85 b7       	in	r24, 0x35	; 53
     3dc:	88 60       	ori	r24, 0x08	; 8
     3de:	85 bf       	out	0x35, r24	; 53
	clear_bit(MCUCR, ISC10);
     3e0:	85 b7       	in	r24, 0x35	; 53
     3e2:	8b 7f       	andi	r24, 0xFB	; 251
     3e4:	85 bf       	out	0x35, r24	; 53
	// Enable interrupt on PD3
	set_bit(GICR,INT1);
     3e6:	8b b7       	in	r24, 0x3b	; 59
     3e8:	80 68       	ori	r24, 0x80	; 128
     3ea:	8b bf       	out	0x3b, r24	; 59
	// Enable global interrupts
	sei();
     3ec:	78 94       	sei
     3ee:	08 95       	ret

000003f0 <get_ADC_data>:
}

char get_ADC_data(void){
	return ext_adc[0x00]; //ADC_data;
     3f0:	e0 91 0a 01 	lds	r30, 0x010A
     3f4:	f0 91 0b 01 	lds	r31, 0x010B
     3f8:	80 81       	ld	r24, Z
}
     3fa:	08 95       	ret

000003fc <ADC_start_read>:

void ADC_start_read(ADC_channel channel){
	
	char data = 0x00;
	switch (channel) {
     3fc:	81 30       	cpi	r24, 0x01	; 1
     3fe:	a9 f0       	breq	.+42     	; 0x42a <ADC_start_read+0x2e>
     400:	90 f0       	brcs	.+36     	; 0x426 <ADC_start_read+0x2a>
     402:	82 30       	cpi	r24, 0x02	; 2
     404:	19 f0       	breq	.+6      	; 0x40c <ADC_start_read+0x10>
     406:	83 30       	cpi	r24, 0x03	; 3
     408:	19 f0       	breq	.+6      	; 0x410 <ADC_start_read+0x14>
     40a:	04 c0       	rjmp	.+8      	; 0x414 <ADC_start_read+0x18>
		break;
		case CHANNEL2 :
		data = 0x05;
		break;
		case CHANNEL3 :
		data = 0x06;
     40c:	86 e0       	ldi	r24, 0x06	; 6
		break;
     40e:	0e c0       	rjmp	.+28     	; 0x42c <ADC_start_read+0x30>
		case CHANNEL4 :
		data = 0x07;
     410:	87 e0       	ldi	r24, 0x07	; 7
		break;
     412:	0c c0       	rjmp	.+24     	; 0x42c <ADC_start_read+0x30>
		default:
		printf("Not valid channel");
     414:	82 e3       	ldi	r24, 0x32	; 50
     416:	91 e0       	ldi	r25, 0x01	; 1
     418:	9f 93       	push	r25
     41a:	8f 93       	push	r24
     41c:	0e 94 75 09 	call	0x12ea	; 0x12ea <printf>
		return EXIT_FAILURE;
     420:	0f 90       	pop	r0
     422:	0f 90       	pop	r0
     424:	08 95       	ret
void ADC_start_read(ADC_channel channel){
	
	char data = 0x00;
	switch (channel) {
		case CHANNEL1 :
		data = 0x04;
     426:	84 e0       	ldi	r24, 0x04	; 4
     428:	01 c0       	rjmp	.+2      	; 0x42c <ADC_start_read+0x30>
		break;
		case CHANNEL2 :
		data = 0x05;
     42a:	85 e0       	ldi	r24, 0x05	; 5
		default:
		printf("Not valid channel");
		return EXIT_FAILURE;
	}
	
	ext_adc[0] = data;
     42c:	e0 91 0a 01 	lds	r30, 0x010A
     430:	f0 91 0b 01 	lds	r31, 0x010B
     434:	80 83       	st	Z, r24
     436:	08 95       	ret

00000438 <My_serial_Transmit>:
}

void My_serial_Transmit( unsigned char data )
{
	/* Wait for empty transmit buffer */
	while ( !( UCSR0A & (1<<UDRE0)) )
     438:	5d 9b       	sbis	0x0b, 5	; 11
     43a:	fe cf       	rjmp	.-4      	; 0x438 <My_serial_Transmit>
	;
	/* Put data into buffer, sends the data */
	UDR0 = data;
     43c:	8c b9       	out	0x0c, r24	; 12
     43e:	08 95       	ret

00000440 <My_serial_Receive>:
}

unsigned char My_serial_Receive( void )
{
	/* Wait for data to be received */
	while ( !(UCSR0A & (1<<RXC0)) );
     440:	5f 9b       	sbis	0x0b, 7	; 11
     442:	fe cf       	rjmp	.-4      	; 0x440 <My_serial_Receive>
	/* Get and return received data from buffer */
	return UDR0;
     444:	8c b1       	in	r24, 0x0c	; 12
     446:	08 95       	ret

00000448 <My_serial_Init>:


void My_serial_Init( unsigned int ubrr )
{
	
	MCUCR |= (1 << SRE);
     448:	25 b7       	in	r18, 0x35	; 53
     44a:	20 68       	ori	r18, 0x80	; 128
     44c:	25 bf       	out	0x35, r18	; 53
	SFIOR |= (1 << XMM2);
     44e:	20 b7       	in	r18, 0x30	; 48
     450:	20 62       	ori	r18, 0x20	; 32
     452:	20 bf       	out	0x30, r18	; 48
	
	/* Set baud rate */
	UBRR0H = (unsigned char)(ubrr>>8);
     454:	90 bd       	out	0x20, r25	; 32
	UBRR0L = (unsigned char)ubrr;
     456:	89 b9       	out	0x09, r24	; 9
	/* Enable receiver and transmitter */
	UCSR0B = (1<<RXEN0)|(1<<TXEN0);
     458:	88 e1       	ldi	r24, 0x18	; 24
     45a:	8a b9       	out	0x0a, r24	; 10
	/* Set frame format: 8data, 2stop bit */
	UCSR0C = (1<<URSEL0)|(1<<USBS0)|(3<<UCSZ00);
     45c:	8e e8       	ldi	r24, 0x8E	; 142
     45e:	80 bd       	out	0x20, r24	; 32
	
	fdevopen(My_serial_Transmit, My_serial_Receive);
     460:	60 e2       	ldi	r22, 0x20	; 32
     462:	72 e0       	ldi	r23, 0x02	; 2
     464:	8c e1       	ldi	r24, 0x1C	; 28
     466:	92 e0       	ldi	r25, 0x02	; 2
     468:	0e 94 2a 09 	call	0x1254	; 0x1254 <fdevopen>
     46c:	08 95       	ret

0000046e <SRAM_test>:
 * Created: 05.09.2019 12:22:35
 *  Author: oledr
 */ 
#include <stdlib.h>
void SRAM_test(void)
{
     46e:	cf 92       	push	r12
     470:	df 92       	push	r13
     472:	ef 92       	push	r14
     474:	ff 92       	push	r15
     476:	0f 93       	push	r16
     478:	1f 93       	push	r17
     47a:	cf 93       	push	r28
     47c:	df 93       	push	r29
	MCUCR |= (1 << SRE);
     47e:	85 b7       	in	r24, 0x35	; 53
     480:	80 68       	ori	r24, 0x80	; 128
     482:	85 bf       	out	0x35, r24	; 53
	SFIOR |= (1 << XMM2);
     484:	80 b7       	in	r24, 0x30	; 48
     486:	80 62       	ori	r24, 0x20	; 32
     488:	80 bf       	out	0x30, r24	; 48

	volatile char *ext_ram = (char *) 0x1800; // Start address for the SRAM
	uint16_t ext_ram_size = 0x800;
	uint16_t write_errors = 0;
	uint16_t retrieval_errors = 0;
	printf("Starting SRAM test...\r\n");
     48a:	84 e4       	ldi	r24, 0x44	; 68
     48c:	91 e0       	ldi	r25, 0x01	; 1
     48e:	0e 94 89 09 	call	0x1312	; 0x1312 <puts>
	// rand() stores some internal state, so calling this function in a loop will
	// yield different seeds each time (unless srand() is called before this
	//function)
	uint16_t seed = rand();
     492:	0e 94 1a 09 	call	0x1234	; 0x1234 <rand>
     496:	6c 01       	movw	r12, r24
	// Write phase: Immediately check that the correct value was stored
	srand(seed);
     498:	0e 94 1f 09 	call	0x123e	; 0x123e <srand>
	for (uint16_t i = 0; i < ext_ram_size; i++) {
     49c:	c0 e0       	ldi	r28, 0x00	; 0
     49e:	d0 e0       	ldi	r29, 0x00	; 0
	MCUCR |= (1 << SRE);
	SFIOR |= (1 << XMM2);

	volatile char *ext_ram = (char *) 0x1800; // Start address for the SRAM
	uint16_t ext_ram_size = 0x800;
	uint16_t write_errors = 0;
     4a0:	00 e0       	ldi	r16, 0x00	; 0
     4a2:	10 e0       	ldi	r17, 0x00	; 0
	for (uint16_t i = 0; i < ext_ram_size; i++) {
		uint8_t some_value = rand();
		ext_ram[i] = some_value;
		uint8_t retreived_value = ext_ram[i];
		if (retreived_value != some_value) {
			printf("Write phase error: ext_ram[%4d] = %02X (should be %02X)\r\n", i, retreived_value, some_value);
     4a4:	0f 2e       	mov	r0, r31
     4a6:	fb e5       	ldi	r31, 0x5B	; 91
     4a8:	ef 2e       	mov	r14, r31
     4aa:	f1 e0       	ldi	r31, 0x01	; 1
     4ac:	ff 2e       	mov	r15, r31
     4ae:	f0 2d       	mov	r31, r0
	//function)
	uint16_t seed = rand();
	// Write phase: Immediately check that the correct value was stored
	srand(seed);
	for (uint16_t i = 0; i < ext_ram_size; i++) {
		uint8_t some_value = rand();
     4b0:	0e 94 1a 09 	call	0x1234	; 0x1234 <rand>
     4b4:	fe 01       	movw	r30, r28
     4b6:	f8 5e       	subi	r31, 0xE8	; 232
		ext_ram[i] = some_value;
     4b8:	80 83       	st	Z, r24
		uint8_t retreived_value = ext_ram[i];
     4ba:	20 81       	ld	r18, Z
		if (retreived_value != some_value) {
     4bc:	28 17       	cp	r18, r24
     4be:	a9 f0       	breq	.+42     	; 0x4ea <SRAM_test+0x7c>
			printf("Write phase error: ext_ram[%4d] = %02X (should be %02X)\r\n", i, retreived_value, some_value);
     4c0:	99 27       	eor	r25, r25
     4c2:	9f 93       	push	r25
     4c4:	8f 93       	push	r24
     4c6:	1f 92       	push	r1
     4c8:	2f 93       	push	r18
     4ca:	df 93       	push	r29
     4cc:	cf 93       	push	r28
     4ce:	ff 92       	push	r15
     4d0:	ef 92       	push	r14
     4d2:	0e 94 75 09 	call	0x12ea	; 0x12ea <printf>
			write_errors++;
     4d6:	0f 5f       	subi	r16, 0xFF	; 255
     4d8:	1f 4f       	sbci	r17, 0xFF	; 255
     4da:	8d b7       	in	r24, 0x3d	; 61
     4dc:	9e b7       	in	r25, 0x3e	; 62
     4de:	08 96       	adiw	r24, 0x08	; 8
     4e0:	0f b6       	in	r0, 0x3f	; 63
     4e2:	f8 94       	cli
     4e4:	9e bf       	out	0x3e, r25	; 62
     4e6:	0f be       	out	0x3f, r0	; 63
     4e8:	8d bf       	out	0x3d, r24	; 61
	// yield different seeds each time (unless srand() is called before this
	//function)
	uint16_t seed = rand();
	// Write phase: Immediately check that the correct value was stored
	srand(seed);
	for (uint16_t i = 0; i < ext_ram_size; i++) {
     4ea:	21 96       	adiw	r28, 0x01	; 1
     4ec:	c1 15       	cp	r28, r1
     4ee:	98 e0       	ldi	r25, 0x08	; 8
     4f0:	d9 07       	cpc	r29, r25
     4f2:	f1 f6       	brne	.-68     	; 0x4b0 <SRAM_test+0x42>
			write_errors++;
		}
	}
	// Retrieval phase: Check that no values were changed during or after the write
	//phase
	srand(seed); // reset the PRNG to the state it had before the write phase
     4f4:	c6 01       	movw	r24, r12
     4f6:	0e 94 1f 09 	call	0x123e	; 0x123e <srand>
	for (uint16_t i = 0; i < ext_ram_size; i++) {
     4fa:	c0 e0       	ldi	r28, 0x00	; 0
     4fc:	d0 e0       	ldi	r29, 0x00	; 0
	SFIOR |= (1 << XMM2);

	volatile char *ext_ram = (char *) 0x1800; // Start address for the SRAM
	uint16_t ext_ram_size = 0x800;
	uint16_t write_errors = 0;
	uint16_t retrieval_errors = 0;
     4fe:	e1 2c       	mov	r14, r1
     500:	f1 2c       	mov	r15, r1
	srand(seed); // reset the PRNG to the state it had before the write phase
	for (uint16_t i = 0; i < ext_ram_size; i++) {
		uint8_t some_value = rand();
		uint8_t retreived_value = ext_ram[i];
		if (retreived_value != some_value) {
			printf("Retrieval phase error: ext_ram[%4d] = %02X (should be %02X)\r\n", i, retreived_value, some_value);
     502:	0f 2e       	mov	r0, r31
     504:	f5 e9       	ldi	r31, 0x95	; 149
     506:	cf 2e       	mov	r12, r31
     508:	f1 e0       	ldi	r31, 0x01	; 1
     50a:	df 2e       	mov	r13, r31
     50c:	f0 2d       	mov	r31, r0
	}
	// Retrieval phase: Check that no values were changed during or after the write
	//phase
	srand(seed); // reset the PRNG to the state it had before the write phase
	for (uint16_t i = 0; i < ext_ram_size; i++) {
		uint8_t some_value = rand();
     50e:	0e 94 1a 09 	call	0x1234	; 0x1234 <rand>
     512:	fe 01       	movw	r30, r28
     514:	f8 5e       	subi	r31, 0xE8	; 232
		uint8_t retreived_value = ext_ram[i];
     516:	20 81       	ld	r18, Z
		if (retreived_value != some_value) {
     518:	28 17       	cp	r18, r24
     51a:	b1 f0       	breq	.+44     	; 0x548 <__stack+0x49>
			printf("Retrieval phase error: ext_ram[%4d] = %02X (should be %02X)\r\n", i, retreived_value, some_value);
     51c:	99 27       	eor	r25, r25
     51e:	9f 93       	push	r25
     520:	8f 93       	push	r24
     522:	1f 92       	push	r1
     524:	2f 93       	push	r18
     526:	df 93       	push	r29
     528:	cf 93       	push	r28
     52a:	df 92       	push	r13
     52c:	cf 92       	push	r12
     52e:	0e 94 75 09 	call	0x12ea	; 0x12ea <printf>
			retrieval_errors++;
     532:	8f ef       	ldi	r24, 0xFF	; 255
     534:	e8 1a       	sub	r14, r24
     536:	f8 0a       	sbc	r15, r24
     538:	8d b7       	in	r24, 0x3d	; 61
     53a:	9e b7       	in	r25, 0x3e	; 62
     53c:	08 96       	adiw	r24, 0x08	; 8
     53e:	0f b6       	in	r0, 0x3f	; 63
     540:	f8 94       	cli
     542:	9e bf       	out	0x3e, r25	; 62
     544:	0f be       	out	0x3f, r0	; 63
     546:	8d bf       	out	0x3d, r24	; 61
		}
	}
	// Retrieval phase: Check that no values were changed during or after the write
	//phase
	srand(seed); // reset the PRNG to the state it had before the write phase
	for (uint16_t i = 0; i < ext_ram_size; i++) {
     548:	21 96       	adiw	r28, 0x01	; 1
     54a:	c1 15       	cp	r28, r1
     54c:	98 e0       	ldi	r25, 0x08	; 8
     54e:	d9 07       	cpc	r29, r25
     550:	f1 f6       	brne	.-68     	; 0x50e <__stack+0xf>
		if (retreived_value != some_value) {
			printf("Retrieval phase error: ext_ram[%4d] = %02X (should be %02X)\r\n", i, retreived_value, some_value);
			retrieval_errors++;
		}
	}
	printf("SRAM test completed with \n%4d errors in write phase and \n%4d errors in retrieval phase\r\n\n", write_errors, retrieval_errors);
     552:	ff 92       	push	r15
     554:	ef 92       	push	r14
     556:	1f 93       	push	r17
     558:	0f 93       	push	r16
     55a:	83 ed       	ldi	r24, 0xD3	; 211
     55c:	91 e0       	ldi	r25, 0x01	; 1
     55e:	9f 93       	push	r25
     560:	8f 93       	push	r24
     562:	0e 94 75 09 	call	0x12ea	; 0x12ea <printf>
     566:	0f 90       	pop	r0
     568:	0f 90       	pop	r0
     56a:	0f 90       	pop	r0
     56c:	0f 90       	pop	r0
     56e:	0f 90       	pop	r0
     570:	0f 90       	pop	r0
     572:	df 91       	pop	r29
     574:	cf 91       	pop	r28
     576:	1f 91       	pop	r17
     578:	0f 91       	pop	r16
     57a:	ff 90       	pop	r15
     57c:	ef 90       	pop	r14
     57e:	df 90       	pop	r13
     580:	cf 90       	pop	r12
     582:	08 95       	ret

00000584 <main>:
#include "slider.h"
#include "oled_driver.h"
#include "oled_menu.h"
int main( )
{
	My_serial_Init ( MYUBRR );
     584:	8f e1       	ldi	r24, 0x1F	; 31
     586:	90 e0       	ldi	r25, 0x00	; 0
     588:	0e 94 24 02 	call	0x448	; 0x448 <My_serial_Init>
	#else
		//round up by default
		__ticks_dc = (uint32_t)(ceil(fabs(__tmp)));
	#endif

	__builtin_avr_delay_cycles(__ticks_dc);
     58c:	2f ef       	ldi	r18, 0xFF	; 255
     58e:	8f ef       	ldi	r24, 0xFF	; 255
     590:	9e e0       	ldi	r25, 0x0E	; 14
     592:	21 50       	subi	r18, 0x01	; 1
     594:	80 40       	sbci	r24, 0x00	; 0
     596:	90 40       	sbci	r25, 0x00	; 0
     598:	e1 f7       	brne	.-8      	; 0x592 <main+0xe>
     59a:	00 c0       	rjmp	.+0      	; 0x59c <main+0x18>
     59c:	00 00       	nop
	_delay_ms(1000);
	
	ADC_init();
     59e:	0e 94 ea 01 	call	0x3d4	; 0x3d4 <ADC_init>
	SRAM_test();
     5a2:	0e 94 37 02 	call	0x46e	; 0x46e <SRAM_test>
	Joystick_calibrate();
     5a6:	0e 94 f7 02 	call	0x5ee	; 0x5ee <Joystick_calibrate>
	Joystick position;
	SLI_pos_t sliderposition;
	oled_init();
     5aa:	0e 94 56 05 	call	0xaac	; 0xaac <oled_init>
	menu* mymenu = oled_menu_init();
     5ae:	0e 94 52 06 	call	0xca4	; 0xca4 <oled_menu_init>
		//oled_pos(2,0);
		//oled_printf("TESTING2");
		//oled_pos(3,0);
		//oled_printf("TESTING3");
		//
		DDRB = 0xFF;
     5b2:	0f ef       	ldi	r16, 0xFF	; 255
		
		uint16_t test = PORTB;
		switch_font(FONT_4X6);
		JoystickDir dir = oled_menu_select();
		//oled_menu_print(mymenu);
		printf("%d  \r \n",test);
     5b4:	cd e2       	ldi	r28, 0x2D	; 45
     5b6:	d2 e0       	ldi	r29, 0x02	; 2
		//oled_pos(2,0);
		//oled_printf("TESTING2");
		//oled_pos(3,0);
		//oled_printf("TESTING3");
		//
		DDRB = 0xFF;
     5b8:	07 bb       	out	0x17, r16	; 23
		//oled_init();
		//oled_inv_printf("TESTING");
		//_delay_ms(3000);
		
		uint16_t test = PORTB;
     5ba:	18 b3       	in	r17, 0x18	; 24
		switch_font(FONT_4X6);
     5bc:	80 e0       	ldi	r24, 0x00	; 0
     5be:	0e 94 7c 04 	call	0x8f8	; 0x8f8 <switch_font>
		JoystickDir dir = oled_menu_select();
     5c2:	0e 94 ca 06 	call	0xd94	; 0xd94 <oled_menu_select>
		//oled_menu_print(mymenu);
		printf("%d  \r \n",test);
     5c6:	1f 92       	push	r1
     5c8:	1f 93       	push	r17
     5ca:	df 93       	push	r29
     5cc:	cf 93       	push	r28
     5ce:	0e 94 75 09 	call	0x12ea	; 0x12ea <printf>
     5d2:	9f ef       	ldi	r25, 0xFF	; 255
     5d4:	2f e7       	ldi	r18, 0x7F	; 127
     5d6:	81 e0       	ldi	r24, 0x01	; 1
     5d8:	91 50       	subi	r25, 0x01	; 1
     5da:	20 40       	sbci	r18, 0x00	; 0
     5dc:	80 40       	sbci	r24, 0x00	; 0
     5de:	e1 f7       	brne	.-8      	; 0x5d8 <main+0x54>
     5e0:	00 c0       	rjmp	.+0      	; 0x5e2 <main+0x5e>
     5e2:	00 c0       	rjmp	.+0      	; 0x5e4 <main+0x60>
     5e4:	0f 90       	pop	r0
     5e6:	0f 90       	pop	r0
     5e8:	0f 90       	pop	r0
     5ea:	0f 90       	pop	r0
     5ec:	e5 cf       	rjmp	.-54     	; 0x5b8 <main+0x34>

000005ee <Joystick_calibrate>:

uint8_t center_x , center_y;

void Joystick_calibrate(void){
	
	ADC_start_read(CHANNEL1);
     5ee:	80 e0       	ldi	r24, 0x00	; 0
     5f0:	0e 94 fe 01 	call	0x3fc	; 0x3fc <ADC_start_read>
	#else
		//round up by default
		__ticks_dc = (uint32_t)(ceil(fabs(__tmp)));
	#endif

	__builtin_avr_delay_cycles(__ticks_dc);
     5f4:	82 e4       	ldi	r24, 0x42	; 66
     5f6:	8a 95       	dec	r24
     5f8:	f1 f7       	brne	.-4      	; 0x5f6 <Joystick_calibrate+0x8>
     5fa:	00 c0       	rjmp	.+0      	; 0x5fc <Joystick_calibrate+0xe>
	_delay_us(200);
	center_x = get_ADC_data();
     5fc:	0e 94 f8 01 	call	0x3f0	; 0x3f0 <get_ADC_data>
     600:	80 93 73 02 	sts	0x0273, r24
	ADC_start_read(CHANNEL2);
     604:	81 e0       	ldi	r24, 0x01	; 1
     606:	0e 94 fe 01 	call	0x3fc	; 0x3fc <ADC_start_read>
     60a:	82 e4       	ldi	r24, 0x42	; 66
     60c:	8a 95       	dec	r24
     60e:	f1 f7       	brne	.-4      	; 0x60c <Joystick_calibrate+0x1e>
     610:	00 c0       	rjmp	.+0      	; 0x612 <Joystick_calibrate+0x24>
	_delay_us(200);
	center_y = get_ADC_data();
     612:	0e 94 f8 01 	call	0x3f0	; 0x3f0 <get_ADC_data>
     616:	80 93 74 02 	sts	0x0274, r24
     61a:	08 95       	ret

0000061c <joystickPos>:
	 
}

Joystick joystickPos(void){
     61c:	0f 93       	push	r16
     61e:	1f 93       	push	r17
     620:	cf 93       	push	r28
     622:	df 93       	push	r29
     624:	00 d0       	rcall	.+0      	; 0x626 <joystickPos+0xa>
     626:	00 d0       	rcall	.+0      	; 0x628 <joystickPos+0xc>
     628:	1f 92       	push	r1
     62a:	cd b7       	in	r28, 0x3d	; 61
     62c:	de b7       	in	r29, 0x3e	; 62
	uint8_t x, y; 
	Joystick position;
	position.xPos = 0;
	position.yPos = 0;
	
	ADC_start_read(CHANNEL1);
     62e:	80 e0       	ldi	r24, 0x00	; 0
     630:	0e 94 fe 01 	call	0x3fc	; 0x3fc <ADC_start_read>
     634:	82 e4       	ldi	r24, 0x42	; 66
     636:	8a 95       	dec	r24
     638:	f1 f7       	brne	.-4      	; 0x636 <joystickPos+0x1a>
     63a:	00 c0       	rjmp	.+0      	; 0x63c <joystickPos+0x20>
	_delay_us(200);
	x = get_ADC_data();
     63c:	0e 94 f8 01 	call	0x3f0	; 0x3f0 <get_ADC_data>
	
	if(x > center_x){
     640:	20 91 73 02 	lds	r18, 0x0273
     644:	28 17       	cp	r18, r24
     646:	a0 f4       	brcc	.+40     	; 0x670 <joystickPos+0x54>
		position.xPos = 100 * (x - center_x) / (0xFF - center_x);
     648:	30 e0       	ldi	r19, 0x00	; 0
     64a:	99 27       	eor	r25, r25
     64c:	ac 01       	movw	r20, r24
     64e:	42 1b       	sub	r20, r18
     650:	53 0b       	sbc	r21, r19
     652:	64 e6       	ldi	r22, 0x64	; 100
     654:	64 9f       	mul	r22, r20
     656:	c0 01       	movw	r24, r0
     658:	65 9f       	mul	r22, r21
     65a:	90 0d       	add	r25, r0
     65c:	11 24       	eor	r1, r1
     65e:	6f ef       	ldi	r22, 0xFF	; 255
     660:	70 e0       	ldi	r23, 0x00	; 0
     662:	62 1b       	sub	r22, r18
     664:	73 0b       	sbc	r23, r19
     666:	0e 94 7d 07 	call	0xefa	; 0xefa <__divmodhi4>
     66a:	16 2f       	mov	r17, r22
     66c:	07 2f       	mov	r16, r23
     66e:	15 c0       	rjmp	.+42     	; 0x69a <joystickPos+0x7e>
	} else if (x < center_x){
     670:	82 17       	cp	r24, r18
     672:	88 f4       	brcc	.+34     	; 0x696 <joystickPos+0x7a>
		position.xPos = 100 * (x - center_x) / (center_x - 0);
     674:	62 2f       	mov	r22, r18
     676:	70 e0       	ldi	r23, 0x00	; 0
     678:	99 27       	eor	r25, r25
     67a:	9c 01       	movw	r18, r24
     67c:	26 1b       	sub	r18, r22
     67e:	37 0b       	sbc	r19, r23
     680:	44 e6       	ldi	r20, 0x64	; 100
     682:	42 9f       	mul	r20, r18
     684:	c0 01       	movw	r24, r0
     686:	43 9f       	mul	r20, r19
     688:	90 0d       	add	r25, r0
     68a:	11 24       	eor	r1, r1
     68c:	0e 94 7d 07 	call	0xefa	; 0xefa <__divmodhi4>
     690:	16 2f       	mov	r17, r22
     692:	07 2f       	mov	r16, r23
     694:	02 c0       	rjmp	.+4      	; 0x69a <joystickPos+0x7e>
	} else {
		position.xPos = 0;
     696:	10 e0       	ldi	r17, 0x00	; 0
     698:	00 e0       	ldi	r16, 0x00	; 0
	}
	ADC_start_read(CHANNEL2);
     69a:	81 e0       	ldi	r24, 0x01	; 1
     69c:	0e 94 fe 01 	call	0x3fc	; 0x3fc <ADC_start_read>
     6a0:	82 e4       	ldi	r24, 0x42	; 66
     6a2:	8a 95       	dec	r24
     6a4:	f1 f7       	brne	.-4      	; 0x6a2 <joystickPos+0x86>
     6a6:	00 c0       	rjmp	.+0      	; 0x6a8 <joystickPos+0x8c>
	_delay_us(200);
	y = get_ADC_data();
     6a8:	0e 94 f8 01 	call	0x3f0	; 0x3f0 <get_ADC_data>
	if(y > center_y){
     6ac:	40 91 74 02 	lds	r20, 0x0274
     6b0:	48 17       	cp	r20, r24
     6b2:	98 f4       	brcc	.+38     	; 0x6da <joystickPos+0xbe>
		position.yPos = 100 * (y - center_y) / (0xFF - center_y);
     6b4:	50 e0       	ldi	r21, 0x00	; 0
     6b6:	99 27       	eor	r25, r25
     6b8:	fc 01       	movw	r30, r24
     6ba:	e4 1b       	sub	r30, r20
     6bc:	f5 0b       	sbc	r31, r21
     6be:	24 e6       	ldi	r18, 0x64	; 100
     6c0:	2e 9f       	mul	r18, r30
     6c2:	c0 01       	movw	r24, r0
     6c4:	2f 9f       	mul	r18, r31
     6c6:	90 0d       	add	r25, r0
     6c8:	11 24       	eor	r1, r1
     6ca:	ef ef       	ldi	r30, 0xFF	; 255
     6cc:	f0 e0       	ldi	r31, 0x00	; 0
     6ce:	bf 01       	movw	r22, r30
     6d0:	64 1b       	sub	r22, r20
     6d2:	75 0b       	sbc	r23, r21
     6d4:	0e 94 7d 07 	call	0xefa	; 0xefa <__divmodhi4>
     6d8:	13 c0       	rjmp	.+38     	; 0x700 <joystickPos+0xe4>
		} else if (y < center_y){
     6da:	84 17       	cp	r24, r20
     6dc:	78 f4       	brcc	.+30     	; 0x6fc <joystickPos+0xe0>
		position.yPos = 100 * (y - center_y) / (center_y - 0);
     6de:	50 e0       	ldi	r21, 0x00	; 0
     6e0:	99 27       	eor	r25, r25
     6e2:	9c 01       	movw	r18, r24
     6e4:	24 1b       	sub	r18, r20
     6e6:	35 0b       	sbc	r19, r21
     6e8:	64 e6       	ldi	r22, 0x64	; 100
     6ea:	62 9f       	mul	r22, r18
     6ec:	c0 01       	movw	r24, r0
     6ee:	63 9f       	mul	r22, r19
     6f0:	90 0d       	add	r25, r0
     6f2:	11 24       	eor	r1, r1
     6f4:	ba 01       	movw	r22, r20
     6f6:	0e 94 7d 07 	call	0xefa	; 0xefa <__divmodhi4>
     6fa:	02 c0       	rjmp	.+4      	; 0x700 <joystickPos+0xe4>
		} else {
		position.yPos = 0;
     6fc:	60 e0       	ldi	r22, 0x00	; 0
     6fe:	70 e0       	ldi	r23, 0x00	; 0
	}
	
	return position; 
     700:	21 2f       	mov	r18, r17
     702:	30 2f       	mov	r19, r16
     704:	46 2f       	mov	r20, r22
     706:	57 2f       	mov	r21, r23
     708:	6d 81       	ldd	r22, Y+5	; 0x05
	
	
}
     70a:	70 e0       	ldi	r23, 0x00	; 0
     70c:	80 e0       	ldi	r24, 0x00	; 0
     70e:	90 e0       	ldi	r25, 0x00	; 0
     710:	0f 90       	pop	r0
     712:	0f 90       	pop	r0
     714:	0f 90       	pop	r0
     716:	0f 90       	pop	r0
     718:	0f 90       	pop	r0
     71a:	df 91       	pop	r29
     71c:	cf 91       	pop	r28
     71e:	1f 91       	pop	r17
     720:	0f 91       	pop	r16
     722:	08 95       	ret

00000724 <JoystickDirection>:

Joystick JoystickDirection(void){
     724:	cf 93       	push	r28
     726:	df 93       	push	r29
     728:	cd b7       	in	r28, 0x3d	; 61
     72a:	de b7       	in	r29, 0x3e	; 62
     72c:	2a 97       	sbiw	r28, 0x0a	; 10
     72e:	0f b6       	in	r0, 0x3f	; 63
     730:	f8 94       	cli
     732:	de bf       	out	0x3e, r29	; 62
     734:	0f be       	out	0x3f, r0	; 63
     736:	cd bf       	out	0x3d, r28	; 61
	Joystick position;
	position.Dir = NEUTRAL;
	
	position = joystickPos(); 
     738:	0e 94 0e 03 	call	0x61c	; 0x61c <joystickPos>
     73c:	2e 83       	std	Y+6, r18	; 0x06
     73e:	3f 83       	std	Y+7, r19	; 0x07
     740:	48 87       	std	Y+8, r20	; 0x08
     742:	59 87       	std	Y+9, r21	; 0x09
     744:	2e 81       	ldd	r18, Y+6	; 0x06
     746:	3f 81       	ldd	r19, Y+7	; 0x07
     748:	48 85       	ldd	r20, Y+8	; 0x08
     74a:	59 85       	ldd	r21, Y+9	; 0x09
	
	if(position.xPos < -50){
     74c:	2e 3c       	cpi	r18, 0xCE	; 206
     74e:	8f ef       	ldi	r24, 0xFF	; 255
     750:	38 07       	cpc	r19, r24
     752:	24 f0       	brlt	.+8      	; 0x75c <JoystickDirection+0x38>
		position.Dir = LEFT; 
	} else if (position.xPos > 50){
     754:	23 33       	cpi	r18, 0x33	; 51
     756:	31 05       	cpc	r19, r1
     758:	1c f4       	brge	.+6      	; 0x760 <JoystickDirection+0x3c>
     75a:	03 c0       	rjmp	.+6      	; 0x762 <JoystickDirection+0x3e>
	position.Dir = NEUTRAL;
	
	position = joystickPos(); 
	
	if(position.xPos < -50){
		position.Dir = LEFT; 
     75c:	60 e0       	ldi	r22, 0x00	; 0
     75e:	01 c0       	rjmp	.+2      	; 0x762 <JoystickDirection+0x3e>
	} else if (position.xPos > 50){
		position.Dir = RIGHT;
     760:	61 e0       	ldi	r22, 0x01	; 1
	}
	
	if(position.yPos < -50){
     762:	4e 3c       	cpi	r20, 0xCE	; 206
     764:	8f ef       	ldi	r24, 0xFF	; 255
     766:	58 07       	cpc	r21, r24
     768:	24 f0       	brlt	.+8      	; 0x772 <JoystickDirection+0x4e>
		position.Dir = DOWN; 
	} else if (position.yPos > 50){
     76a:	43 33       	cpi	r20, 0x33	; 51
     76c:	51 05       	cpc	r21, r1
     76e:	1c f4       	brge	.+6      	; 0x776 <JoystickDirection+0x52>
     770:	03 c0       	rjmp	.+6      	; 0x778 <JoystickDirection+0x54>
	} else if (position.xPos > 50){
		position.Dir = RIGHT;
	}
	
	if(position.yPos < -50){
		position.Dir = DOWN; 
     772:	63 e0       	ldi	r22, 0x03	; 3
     774:	01 c0       	rjmp	.+2      	; 0x778 <JoystickDirection+0x54>
	} else if (position.yPos > 50){
		position.Dir = UP; 
     776:	62 e0       	ldi	r22, 0x02	; 2
	
	//if(position.xPos == 0 && position.yPos == 0){
		//position.Dir = NEUTRAL; 
	//}
	
	return position;
     778:	3a 83       	std	Y+2, r19	; 0x02
     77a:	29 83       	std	Y+1, r18	; 0x01
     77c:	5c 83       	std	Y+4, r21	; 0x04
     77e:	4b 83       	std	Y+3, r20	; 0x03
     780:	3a 81       	ldd	r19, Y+2	; 0x02
     782:	5c 81       	ldd	r21, Y+4	; 0x04
}
     784:	70 e0       	ldi	r23, 0x00	; 0
     786:	80 e0       	ldi	r24, 0x00	; 0
     788:	90 e0       	ldi	r25, 0x00	; 0
     78a:	2a 96       	adiw	r28, 0x0a	; 10
     78c:	0f b6       	in	r0, 0x3f	; 63
     78e:	f8 94       	cli
     790:	de bf       	out	0x3e, r29	; 62
     792:	0f be       	out	0x3f, r0	; 63
     794:	cd bf       	out	0x3d, r28	; 61
     796:	df 91       	pop	r29
     798:	cf 91       	pop	r28
     79a:	08 95       	ret

0000079c <oled_is_out_of_bounds>:
volatile int fontSize = 8;
const char* const font[] PROGMEM = {font_4x6, font_5x7, font_8x8};
int current_font = FONT_8X8;

void oled_is_out_of_bounds() {
	if (position.col > 127) {
     79c:	80 91 77 02 	lds	r24, 0x0277
     7a0:	90 91 78 02 	lds	r25, 0x0278
     7a4:	80 38       	cpi	r24, 0x80	; 128
     7a6:	91 05       	cpc	r25, r1
     7a8:	bc f0       	brlt	.+46     	; 0x7d8 <oled_is_out_of_bounds+0x3c>
		position.col -= 128;
     7aa:	e7 e7       	ldi	r30, 0x77	; 119
     7ac:	f2 e0       	ldi	r31, 0x02	; 2
     7ae:	80 81       	ld	r24, Z
     7b0:	91 81       	ldd	r25, Z+1	; 0x01
     7b2:	80 58       	subi	r24, 0x80	; 128
     7b4:	91 09       	sbc	r25, r1
     7b6:	91 83       	std	Z+1, r25	; 0x01
     7b8:	80 83       	st	Z, r24
		position.row += 1;
     7ba:	e5 e7       	ldi	r30, 0x75	; 117
     7bc:	f2 e0       	ldi	r31, 0x02	; 2
     7be:	80 81       	ld	r24, Z
     7c0:	91 81       	ldd	r25, Z+1	; 0x01
     7c2:	01 96       	adiw	r24, 0x01	; 1
     7c4:	91 83       	std	Z+1, r25	; 0x01
     7c6:	80 83       	st	Z, r24
		if (position.row > 7) {
     7c8:	80 81       	ld	r24, Z
     7ca:	91 81       	ldd	r25, Z+1	; 0x01
     7cc:	08 97       	sbiw	r24, 0x08	; 8
     7ce:	24 f0       	brlt	.+8      	; 0x7d8 <oled_is_out_of_bounds+0x3c>
			position.row = 0;
     7d0:	10 92 76 02 	sts	0x0276, r1
     7d4:	10 92 75 02 	sts	0x0275, r1
     7d8:	08 95       	ret

000007da <oled_put_char>:

void write_data(uint8_t data){
	ext_oled_data[0] = data;
}

int oled_put_char(unsigned char c){
     7da:	ef 92       	push	r14
     7dc:	ff 92       	push	r15
     7de:	0f 93       	push	r16
     7e0:	1f 93       	push	r17
     7e2:	cf 93       	push	r28
     7e4:	df 93       	push	r29
	uint8_t printChar = c-32;
     7e6:	80 52       	subi	r24, 0x20	; 32
	
	for (int i=0; i < fontSize; i++) {
     7e8:	20 91 0e 01 	lds	r18, 0x010E
     7ec:	30 91 0f 01 	lds	r19, 0x010F
     7f0:	12 16       	cp	r1, r18
     7f2:	13 06       	cpc	r1, r19
     7f4:	84 f5       	brge	.+96     	; 0x856 <oled_put_char+0x7c>
     7f6:	e8 2e       	mov	r14, r24
     7f8:	f1 2c       	mov	r15, r1
     7fa:	c7 01       	movw	r24, r14
     7fc:	88 0f       	add	r24, r24
     7fe:	99 1f       	adc	r25, r25
     800:	88 0f       	add	r24, r24
     802:	99 1f       	adc	r25, r25
     804:	88 0f       	add	r24, r24
     806:	99 1f       	adc	r25, r25
     808:	c0 e0       	ldi	r28, 0x00	; 0
     80a:	d0 e0       	ldi	r29, 0x00	; 0
     80c:	9c 01       	movw	r18, r24
     80e:	20 59       	subi	r18, 0x90	; 144
     810:	3f 4f       	sbci	r19, 0xFF	; 255
     812:	79 01       	movw	r14, r18
		write_data(pgm_read_word(&font_8x8[printChar][i]));
		position.col += fontSize;
     814:	07 e7       	ldi	r16, 0x77	; 119
     816:	12 e0       	ldi	r17, 0x02	; 2
     818:	f7 01       	movw	r30, r14
     81a:	ec 0f       	add	r30, r28
     81c:	fd 1f       	adc	r31, r29

int oled_put_char(unsigned char c){
	uint8_t printChar = c-32;
	
	for (int i=0; i < fontSize; i++) {
		write_data(pgm_read_word(&font_8x8[printChar][i]));
     81e:	85 91       	lpm	r24, Z+
     820:	94 91       	lpm	r25, Z
void write_command(uint8_t command){
	ext_oled_cmd[0] = command;
}

void write_data(uint8_t data){
	ext_oled_data[0] = data;
     822:	e0 91 10 01 	lds	r30, 0x0110
     826:	f0 91 11 01 	lds	r31, 0x0111
     82a:	80 83       	st	Z, r24
int oled_put_char(unsigned char c){
	uint8_t printChar = c-32;
	
	for (int i=0; i < fontSize; i++) {
		write_data(pgm_read_word(&font_8x8[printChar][i]));
		position.col += fontSize;
     82c:	f8 01       	movw	r30, r16
     82e:	20 81       	ld	r18, Z
     830:	31 81       	ldd	r19, Z+1	; 0x01
     832:	80 91 0e 01 	lds	r24, 0x010E
     836:	90 91 0f 01 	lds	r25, 0x010F
     83a:	82 0f       	add	r24, r18
     83c:	93 1f       	adc	r25, r19
     83e:	91 83       	std	Z+1, r25	; 0x01
     840:	80 83       	st	Z, r24
		oled_is_out_of_bounds();
     842:	0e 94 ce 03 	call	0x79c	; 0x79c <oled_is_out_of_bounds>
}

int oled_put_char(unsigned char c){
	uint8_t printChar = c-32;
	
	for (int i=0; i < fontSize; i++) {
     846:	21 96       	adiw	r28, 0x01	; 1
     848:	80 91 0e 01 	lds	r24, 0x010E
     84c:	90 91 0f 01 	lds	r25, 0x010F
     850:	c8 17       	cp	r28, r24
     852:	d9 07       	cpc	r29, r25
     854:	0c f3       	brlt	.-62     	; 0x818 <oled_put_char+0x3e>
		position.col += fontSize;
		oled_is_out_of_bounds();
	}
	
	return 0;
}
     856:	80 e0       	ldi	r24, 0x00	; 0
     858:	90 e0       	ldi	r25, 0x00	; 0
     85a:	df 91       	pop	r29
     85c:	cf 91       	pop	r28
     85e:	1f 91       	pop	r17
     860:	0f 91       	pop	r16
     862:	ff 90       	pop	r15
     864:	ef 90       	pop	r14
     866:	08 95       	ret

00000868 <oled_inv_put_char>:

int oled_inv_put_char(unsigned char c){
     868:	ef 92       	push	r14
     86a:	ff 92       	push	r15
     86c:	0f 93       	push	r16
     86e:	1f 93       	push	r17
     870:	cf 93       	push	r28
     872:	df 93       	push	r29
	uint8_t printChar = c-32;
     874:	80 52       	subi	r24, 0x20	; 32
	
	for (int i=0; i < fontSize; i++) {
     876:	20 91 0e 01 	lds	r18, 0x010E
     87a:	30 91 0f 01 	lds	r19, 0x010F
     87e:	12 16       	cp	r1, r18
     880:	13 06       	cpc	r1, r19
     882:	8c f5       	brge	.+98     	; 0x8e6 <oled_inv_put_char+0x7e>
     884:	e8 2e       	mov	r14, r24
     886:	f1 2c       	mov	r15, r1
     888:	c7 01       	movw	r24, r14
     88a:	88 0f       	add	r24, r24
     88c:	99 1f       	adc	r25, r25
     88e:	88 0f       	add	r24, r24
     890:	99 1f       	adc	r25, r25
     892:	88 0f       	add	r24, r24
     894:	99 1f       	adc	r25, r25
     896:	c0 e0       	ldi	r28, 0x00	; 0
     898:	d0 e0       	ldi	r29, 0x00	; 0
     89a:	9c 01       	movw	r18, r24
     89c:	20 59       	subi	r18, 0x90	; 144
     89e:	3f 4f       	sbci	r19, 0xFF	; 255
     8a0:	79 01       	movw	r14, r18
		write_data(~pgm_read_word(&font_8x8[printChar][i]));
		position.col += fontSize;
     8a2:	07 e7       	ldi	r16, 0x77	; 119
     8a4:	12 e0       	ldi	r17, 0x02	; 2
     8a6:	f7 01       	movw	r30, r14
     8a8:	ec 0f       	add	r30, r28
     8aa:	fd 1f       	adc	r31, r29

int oled_inv_put_char(unsigned char c){
	uint8_t printChar = c-32;
	
	for (int i=0; i < fontSize; i++) {
		write_data(~pgm_read_word(&font_8x8[printChar][i]));
     8ac:	85 91       	lpm	r24, Z+
     8ae:	94 91       	lpm	r25, Z
     8b0:	80 95       	com	r24
void write_command(uint8_t command){
	ext_oled_cmd[0] = command;
}

void write_data(uint8_t data){
	ext_oled_data[0] = data;
     8b2:	e0 91 10 01 	lds	r30, 0x0110
     8b6:	f0 91 11 01 	lds	r31, 0x0111
     8ba:	80 83       	st	Z, r24
int oled_inv_put_char(unsigned char c){
	uint8_t printChar = c-32;
	
	for (int i=0; i < fontSize; i++) {
		write_data(~pgm_read_word(&font_8x8[printChar][i]));
		position.col += fontSize;
     8bc:	f8 01       	movw	r30, r16
     8be:	20 81       	ld	r18, Z
     8c0:	31 81       	ldd	r19, Z+1	; 0x01
     8c2:	80 91 0e 01 	lds	r24, 0x010E
     8c6:	90 91 0f 01 	lds	r25, 0x010F
     8ca:	82 0f       	add	r24, r18
     8cc:	93 1f       	adc	r25, r19
     8ce:	91 83       	std	Z+1, r25	; 0x01
     8d0:	80 83       	st	Z, r24
		oled_is_out_of_bounds();
     8d2:	0e 94 ce 03 	call	0x79c	; 0x79c <oled_is_out_of_bounds>
}

int oled_inv_put_char(unsigned char c){
	uint8_t printChar = c-32;
	
	for (int i=0; i < fontSize; i++) {
     8d6:	21 96       	adiw	r28, 0x01	; 1
     8d8:	80 91 0e 01 	lds	r24, 0x010E
     8dc:	90 91 0f 01 	lds	r25, 0x010F
     8e0:	c8 17       	cp	r28, r24
     8e2:	d9 07       	cpc	r29, r25
     8e4:	04 f3       	brlt	.-64     	; 0x8a6 <oled_inv_put_char+0x3e>
		position.col += fontSize;
		oled_is_out_of_bounds();
	}
	
	return 0;
}
     8e6:	80 e0       	ldi	r24, 0x00	; 0
     8e8:	90 e0       	ldi	r25, 0x00	; 0
     8ea:	df 91       	pop	r29
     8ec:	cf 91       	pop	r28
     8ee:	1f 91       	pop	r17
     8f0:	0f 91       	pop	r16
     8f2:	ff 90       	pop	r15
     8f4:	ef 90       	pop	r14
     8f6:	08 95       	ret

000008f8 <switch_font>:
		}
	}
}

void switch_font(fontName name) {
	current_font = name;
     8f8:	28 2f       	mov	r18, r24
     8fa:	30 e0       	ldi	r19, 0x00	; 0
     8fc:	30 93 0d 01 	sts	0x010D, r19
     900:	20 93 0c 01 	sts	0x010C, r18
	switch(name){
     904:	81 30       	cpi	r24, 0x01	; 1
     906:	61 f0       	breq	.+24     	; 0x920 <switch_font+0x28>
     908:	28 f0       	brcs	.+10     	; 0x914 <switch_font+0x1c>
     90a:	82 30       	cpi	r24, 0x02	; 2
     90c:	79 f0       	breq	.+30     	; 0x92c <switch_font+0x34>
     90e:	83 30       	cpi	r24, 0x03	; 3
     910:	99 f0       	breq	.+38     	; 0x938 <switch_font+0x40>
     912:	08 95       	ret
		case(FONT_4X6):
		fontSize = 4;
     914:	84 e0       	ldi	r24, 0x04	; 4
     916:	90 e0       	ldi	r25, 0x00	; 0
     918:	90 93 0f 01 	sts	0x010F, r25
     91c:	80 93 0e 01 	sts	0x010E, r24
		case(FONT_5X7):
		fontSize = 5;
     920:	85 e0       	ldi	r24, 0x05	; 5
     922:	90 e0       	ldi	r25, 0x00	; 0
     924:	90 93 0f 01 	sts	0x010F, r25
     928:	80 93 0e 01 	sts	0x010E, r24
		case(FONT_5X7W):
		fontSize = 5;
     92c:	85 e0       	ldi	r24, 0x05	; 5
     92e:	90 e0       	ldi	r25, 0x00	; 0
     930:	90 93 0f 01 	sts	0x010F, r25
     934:	80 93 0e 01 	sts	0x010E, r24
		case(FONT_8X8):
		fontSize = 8;
     938:	88 e0       	ldi	r24, 0x08	; 8
     93a:	90 e0       	ldi	r25, 0x00	; 0
     93c:	90 93 0f 01 	sts	0x010F, r25
     940:	80 93 0e 01 	sts	0x010E, r24
     944:	08 95       	ret

00000946 <oled_set_adressing_mode>:
	}
}

void write_command(uint8_t command){
	ext_oled_cmd[0] = command;
     946:	e0 91 12 01 	lds	r30, 0x0112
     94a:	f0 91 13 01 	lds	r31, 0x0113
     94e:	90 e2       	ldi	r25, 0x20	; 32
     950:	90 83       	st	Z, r25
     952:	e0 91 12 01 	lds	r30, 0x0112
     956:	f0 91 13 01 	lds	r31, 0x0113
     95a:	80 83       	st	Z, r24
     95c:	08 95       	ret

0000095e <oled_printf>:
	write_command(mode);
}

// ------------------ functions declared in header below this line---------------------

void oled_printf(char* data, ...){
     95e:	cf 93       	push	r28
     960:	df 93       	push	r29
     962:	cd b7       	in	r28, 0x3d	; 61
     964:	de b7       	in	r29, 0x3e	; 62
     966:	fe 01       	movw	r30, r28
     968:	35 96       	adiw	r30, 0x05	; 5
     96a:	61 91       	ld	r22, Z+
     96c:	71 91       	ld	r23, Z+
	va_list args;
	va_start(args, data);
	vfprintf(&mystdout, data, args);
     96e:	af 01       	movw	r20, r30
     970:	82 e2       	ldi	r24, 0x22	; 34
     972:	91 e0       	ldi	r25, 0x01	; 1
     974:	0e 94 b6 09 	call	0x136c	; 0x136c <vfprintf>
	va_end(args);
	
}
     978:	df 91       	pop	r29
     97a:	cf 91       	pop	r28
     97c:	08 95       	ret

0000097e <oled_inv_printf>:

void oled_inv_printf(char* data, ...){
     97e:	cf 93       	push	r28
     980:	df 93       	push	r29
     982:	cd b7       	in	r28, 0x3d	; 61
     984:	de b7       	in	r29, 0x3e	; 62
     986:	fe 01       	movw	r30, r28
     988:	35 96       	adiw	r30, 0x05	; 5
     98a:	61 91       	ld	r22, Z+
     98c:	71 91       	ld	r23, Z+
	va_list args;
	va_start(args, data);
	vfprintf(&myinvstdout, data, args);
     98e:	af 01       	movw	r20, r30
     990:	84 e1       	ldi	r24, 0x14	; 20
     992:	91 e0       	ldi	r25, 0x01	; 1
     994:	0e 94 b6 09 	call	0x136c	; 0x136c <vfprintf>
	va_end(args);
	
}
     998:	df 91       	pop	r29
     99a:	cf 91       	pop	r28
     99c:	08 95       	ret

0000099e <oled_goto_line>:

void oled_home(){
	oled_pos(0,0);
}

void oled_goto_line(int line){
     99e:	cf 93       	push	r28
     9a0:	df 93       	push	r29
     9a2:	ec 01       	movw	r28, r24
	if (line > 7 || line < 0) {
     9a4:	88 30       	cpi	r24, 0x08	; 8
     9a6:	91 05       	cpc	r25, r1
     9a8:	80 f4       	brcc	.+32     	; 0x9ca <oled_goto_line+0x2c>
		return 0;
	}
	else {
		position.row = line;
     9aa:	90 93 76 02 	sts	0x0276, r25
     9ae:	80 93 75 02 	sts	0x0275, r24
		oled_set_adressing_mode(PAGE_MODE);
     9b2:	82 e0       	ldi	r24, 0x02	; 2
     9b4:	0e 94 a3 04 	call	0x946	; 0x946 <oled_set_adressing_mode>
		write_command(0xB0 + line);
     9b8:	c0 55       	subi	r28, 0x50	; 80
		fontSize = 8;
	}
}

void write_command(uint8_t command){
	ext_oled_cmd[0] = command;
     9ba:	e0 91 12 01 	lds	r30, 0x0112
     9be:	f0 91 13 01 	lds	r31, 0x0113
     9c2:	c0 83       	st	Z, r28
	}
	else {
		position.row = line;
		oled_set_adressing_mode(PAGE_MODE);
		write_command(0xB0 + line);
		oled_set_adressing_mode(HORIZONTAL_MODE);
     9c4:	80 e0       	ldi	r24, 0x00	; 0
     9c6:	0e 94 a3 04 	call	0x946	; 0x946 <oled_set_adressing_mode>
	}
}
     9ca:	df 91       	pop	r29
     9cc:	cf 91       	pop	r28
     9ce:	08 95       	ret

000009d0 <oled_goto_column>:

void oled_goto_column(int column){
     9d0:	cf 93       	push	r28
     9d2:	df 93       	push	r29
     9d4:	ec 01       	movw	r28, r24
	if (column > 127 || column < 0) {
     9d6:	80 38       	cpi	r24, 0x80	; 128
     9d8:	91 05       	cpc	r25, r1
     9da:	50 f5       	brcc	.+84     	; 0xa30 <oled_goto_column+0x60>
		return 0;
	}
	else {
		position.col = column;
     9dc:	90 93 78 02 	sts	0x0278, r25
     9e0:	80 93 77 02 	sts	0x0277, r24
		oled_set_adressing_mode(PAGE_MODE);
     9e4:	82 e0       	ldi	r24, 0x02	; 2
     9e6:	0e 94 a3 04 	call	0x946	; 0x946 <oled_set_adressing_mode>
		
		int numLow = column % 16;
     9ea:	ce 01       	movw	r24, r28
     9ec:	8f 70       	andi	r24, 0x0F	; 15
     9ee:	90 78       	andi	r25, 0x80	; 128
     9f0:	99 23       	and	r25, r25
     9f2:	24 f4       	brge	.+8      	; 0x9fc <oled_goto_column+0x2c>
     9f4:	01 97       	sbiw	r24, 0x01	; 1
     9f6:	80 6f       	ori	r24, 0xF0	; 240
     9f8:	9f 6f       	ori	r25, 0xFF	; 255
     9fa:	01 96       	adiw	r24, 0x01	; 1
		fontSize = 8;
	}
}

void write_command(uint8_t command){
	ext_oled_cmd[0] = command;
     9fc:	e0 91 12 01 	lds	r30, 0x0112
     a00:	f0 91 13 01 	lds	r31, 0x0113
     a04:	80 83       	st	Z, r24
	else {
		position.col = column;
		oled_set_adressing_mode(PAGE_MODE);
		
		int numLow = column % 16;
		int numHigh = column / 16;
     a06:	ce 01       	movw	r24, r28
     a08:	dd 23       	and	r29, r29
     a0a:	0c f4       	brge	.+2      	; 0xa0e <oled_goto_column+0x3e>
     a0c:	0f 96       	adiw	r24, 0x0f	; 15
     a0e:	95 95       	asr	r25
     a10:	87 95       	ror	r24
     a12:	95 95       	asr	r25
     a14:	87 95       	ror	r24
     a16:	95 95       	asr	r25
     a18:	87 95       	ror	r24
     a1a:	95 95       	asr	r25
     a1c:	87 95       	ror	r24
		
		write_command(numLow);
		write_command(16 + numHigh);
     a1e:	80 5f       	subi	r24, 0xF0	; 240
		fontSize = 8;
	}
}

void write_command(uint8_t command){
	ext_oled_cmd[0] = command;
     a20:	e0 91 12 01 	lds	r30, 0x0112
     a24:	f0 91 13 01 	lds	r31, 0x0113
     a28:	80 83       	st	Z, r24
		int numLow = column % 16;
		int numHigh = column / 16;
		
		write_command(numLow);
		write_command(16 + numHigh);
		oled_set_adressing_mode(HORIZONTAL_MODE);
     a2a:	80 e0       	ldi	r24, 0x00	; 0
     a2c:	0e 94 a3 04 	call	0x946	; 0x946 <oled_set_adressing_mode>
	}
	
}
     a30:	df 91       	pop	r29
     a32:	cf 91       	pop	r28
     a34:	08 95       	ret

00000a36 <oled_pos>:
		write_data(~0b00000000);
	}
	oled_goto_line(line);
}

void oled_pos(int row, int column){
     a36:	cf 93       	push	r28
     a38:	df 93       	push	r29
     a3a:	eb 01       	movw	r28, r22
	oled_goto_line(row);
     a3c:	0e 94 cf 04 	call	0x99e	; 0x99e <oled_goto_line>
	oled_goto_column(column);
     a40:	ce 01       	movw	r24, r28
     a42:	0e 94 e8 04 	call	0x9d0	; 0x9d0 <oled_goto_column>
}
     a46:	df 91       	pop	r29
     a48:	cf 91       	pop	r28
     a4a:	08 95       	ret

00000a4c <oled_home>:
	}
	oled_home();
}

void oled_home(){
	oled_pos(0,0);
     a4c:	60 e0       	ldi	r22, 0x00	; 0
     a4e:	70 e0       	ldi	r23, 0x00	; 0
     a50:	80 e0       	ldi	r24, 0x00	; 0
     a52:	90 e0       	ldi	r25, 0x00	; 0
     a54:	0e 94 1b 05 	call	0xa36	; 0xa36 <oled_pos>
     a58:	08 95       	ret

00000a5a <oled_clear_line>:
	else {
		oled_goto_column(letterPlace*fontSize-1);
	}
}

void oled_clear_line(int line){
     a5a:	cf 93       	push	r28
     a5c:	df 93       	push	r29
     a5e:	ec 01       	movw	r28, r24
	oled_pos(line, 0);
     a60:	60 e0       	ldi	r22, 0x00	; 0
     a62:	70 e0       	ldi	r23, 0x00	; 0
     a64:	0e 94 1b 05 	call	0xa36	; 0xa36 <oled_pos>
     a68:	20 e8       	ldi	r18, 0x80	; 128
     a6a:	30 e0       	ldi	r19, 0x00	; 0
void write_command(uint8_t command){
	ext_oled_cmd[0] = command;
}

void write_data(uint8_t data){
	ext_oled_data[0] = data;
     a6c:	e0 91 10 01 	lds	r30, 0x0110
     a70:	f0 91 11 01 	lds	r31, 0x0111
     a74:	10 82       	st	Z, r1
     a76:	21 50       	subi	r18, 0x01	; 1
     a78:	31 09       	sbc	r19, r1
}

void oled_clear_line(int line){
	oled_pos(line, 0);
	
	for (int col = 0; col < 128; col++) {
     a7a:	21 15       	cp	r18, r1
     a7c:	31 05       	cpc	r19, r1
     a7e:	b1 f7       	brne	.-20     	; 0xa6c <oled_clear_line+0x12>
		write_data(0b00000000);
	}
	oled_goto_line(line);
     a80:	ce 01       	movw	r24, r28
     a82:	0e 94 cf 04 	call	0x99e	; 0x99e <oled_goto_line>
}
     a86:	df 91       	pop	r29
     a88:	cf 91       	pop	r28
     a8a:	08 95       	ret

00000a8c <oled_reset>:
	write_command(0xaf); // display on
	oled_reset();
	
}

void oled_reset(){
     a8c:	cf 93       	push	r28
     a8e:	df 93       	push	r29
	
	for (int line = 0; line < 8; line++) {
     a90:	c0 e0       	ldi	r28, 0x00	; 0
     a92:	d0 e0       	ldi	r29, 0x00	; 0
		oled_clear_line(line);
     a94:	ce 01       	movw	r24, r28
     a96:	0e 94 2d 05 	call	0xa5a	; 0xa5a <oled_clear_line>
	
}

void oled_reset(){
	
	for (int line = 0; line < 8; line++) {
     a9a:	21 96       	adiw	r28, 0x01	; 1
     a9c:	c8 30       	cpi	r28, 0x08	; 8
     a9e:	d1 05       	cpc	r29, r1
     aa0:	c9 f7       	brne	.-14     	; 0xa94 <oled_reset+0x8>
		oled_clear_line(line);
	}
	oled_home();
     aa2:	0e 94 26 05 	call	0xa4c	; 0xa4c <oled_home>
}
     aa6:	df 91       	pop	r29
     aa8:	cf 91       	pop	r28
     aaa:	08 95       	ret

00000aac <oled_init>:
		fontSize = 8;
	}
}

void write_command(uint8_t command){
	ext_oled_cmd[0] = command;
     aac:	e0 91 12 01 	lds	r30, 0x0112
     ab0:	f0 91 13 01 	lds	r31, 0x0113
     ab4:	8e ea       	ldi	r24, 0xAE	; 174
     ab6:	80 83       	st	Z, r24
     ab8:	e0 91 12 01 	lds	r30, 0x0112
     abc:	f0 91 13 01 	lds	r31, 0x0113
     ac0:	81 ea       	ldi	r24, 0xA1	; 161
     ac2:	80 83       	st	Z, r24
     ac4:	e0 91 12 01 	lds	r30, 0x0112
     ac8:	f0 91 13 01 	lds	r31, 0x0113
     acc:	8a ed       	ldi	r24, 0xDA	; 218
     ace:	80 83       	st	Z, r24
     ad0:	e0 91 12 01 	lds	r30, 0x0112
     ad4:	f0 91 13 01 	lds	r31, 0x0113
     ad8:	82 e1       	ldi	r24, 0x12	; 18
     ada:	80 83       	st	Z, r24
     adc:	e0 91 12 01 	lds	r30, 0x0112
     ae0:	f0 91 13 01 	lds	r31, 0x0113
     ae4:	88 ec       	ldi	r24, 0xC8	; 200
     ae6:	80 83       	st	Z, r24
     ae8:	e0 91 12 01 	lds	r30, 0x0112
     aec:	f0 91 13 01 	lds	r31, 0x0113
     af0:	88 ea       	ldi	r24, 0xA8	; 168
     af2:	80 83       	st	Z, r24
     af4:	e0 91 12 01 	lds	r30, 0x0112
     af8:	f0 91 13 01 	lds	r31, 0x0113
     afc:	8f e3       	ldi	r24, 0x3F	; 63
     afe:	80 83       	st	Z, r24
     b00:	e0 91 12 01 	lds	r30, 0x0112
     b04:	f0 91 13 01 	lds	r31, 0x0113
     b08:	85 ed       	ldi	r24, 0xD5	; 213
     b0a:	80 83       	st	Z, r24
     b0c:	e0 91 12 01 	lds	r30, 0x0112
     b10:	f0 91 13 01 	lds	r31, 0x0113
     b14:	80 e8       	ldi	r24, 0x80	; 128
     b16:	80 83       	st	Z, r24
     b18:	e0 91 12 01 	lds	r30, 0x0112
     b1c:	f0 91 13 01 	lds	r31, 0x0113
     b20:	81 e8       	ldi	r24, 0x81	; 129
     b22:	80 83       	st	Z, r24
     b24:	e0 91 12 01 	lds	r30, 0x0112
     b28:	f0 91 13 01 	lds	r31, 0x0113
     b2c:	80 e5       	ldi	r24, 0x50	; 80
     b2e:	80 83       	st	Z, r24
     b30:	e0 91 12 01 	lds	r30, 0x0112
     b34:	f0 91 13 01 	lds	r31, 0x0113
     b38:	89 ed       	ldi	r24, 0xD9	; 217
     b3a:	80 83       	st	Z, r24
     b3c:	e0 91 12 01 	lds	r30, 0x0112
     b40:	f0 91 13 01 	lds	r31, 0x0113
     b44:	81 e2       	ldi	r24, 0x21	; 33
     b46:	80 83       	st	Z, r24
	write_command(0x81); //contrast control
	write_command(0x50);
	write_command(0xd9); //set pre-charge period
	write_command(0x21);
	
	oled_set_adressing_mode(HORIZONTAL_MODE);
     b48:	80 e0       	ldi	r24, 0x00	; 0
     b4a:	0e 94 a3 04 	call	0x946	; 0x946 <oled_set_adressing_mode>
		fontSize = 8;
	}
}

void write_command(uint8_t command){
	ext_oled_cmd[0] = command;
     b4e:	e0 91 12 01 	lds	r30, 0x0112
     b52:	f0 91 13 01 	lds	r31, 0x0113
     b56:	8b ed       	ldi	r24, 0xDB	; 219
     b58:	80 83       	st	Z, r24
     b5a:	e0 91 12 01 	lds	r30, 0x0112
     b5e:	f0 91 13 01 	lds	r31, 0x0113
     b62:	80 e3       	ldi	r24, 0x30	; 48
     b64:	80 83       	st	Z, r24
     b66:	e0 91 12 01 	lds	r30, 0x0112
     b6a:	f0 91 13 01 	lds	r31, 0x0113
     b6e:	8d ea       	ldi	r24, 0xAD	; 173
     b70:	80 83       	st	Z, r24
     b72:	e0 91 12 01 	lds	r30, 0x0112
     b76:	f0 91 13 01 	lds	r31, 0x0113
     b7a:	10 82       	st	Z, r1
     b7c:	e0 91 12 01 	lds	r30, 0x0112
     b80:	f0 91 13 01 	lds	r31, 0x0113
     b84:	84 ea       	ldi	r24, 0xA4	; 164
     b86:	80 83       	st	Z, r24
     b88:	e0 91 12 01 	lds	r30, 0x0112
     b8c:	f0 91 13 01 	lds	r31, 0x0113
     b90:	86 ea       	ldi	r24, 0xA6	; 166
     b92:	80 83       	st	Z, r24
     b94:	e0 91 12 01 	lds	r30, 0x0112
     b98:	f0 91 13 01 	lds	r31, 0x0113
     b9c:	8f ea       	ldi	r24, 0xAF	; 175
     b9e:	80 83       	st	Z, r24
	write_command(0xad); //master configuration
	write_command(0x00);
	write_command(0xa4); //out follows RAM content
	write_command(0xa6); //set normal display
	write_command(0xaf); // display on
	oled_reset();
     ba0:	0e 94 46 05 	call	0xa8c	; 0xa8c <oled_reset>
     ba4:	08 95       	ret

00000ba6 <new_menu>:
void set_first_child(menu* mymenu, menu* first_child) {
	mymenu->first_child = first_child;
}


menu* new_menu(char* name, menu* parent) {
     ba6:	0f 93       	push	r16
     ba8:	1f 93       	push	r17
     baa:	cf 93       	push	r28
     bac:	df 93       	push	r29
     bae:	8c 01       	movw	r16, r24
     bb0:	eb 01       	movw	r28, r22
	menu* nextmenu = malloc(sizeof(menu));
     bb2:	89 e0       	ldi	r24, 0x09	; 9
     bb4:	90 e0       	ldi	r25, 0x00	; 0
     bb6:	0e 94 a5 07 	call	0xf4a	; 0xf4a <malloc>
     bba:	fc 01       	movw	r30, r24
 	nextmenu->title = name;
     bbc:	11 83       	std	Z+1, r17	; 0x01
     bbe:	00 83       	st	Z, r16
	nextmenu->parent = parent;
     bc0:	d4 83       	std	Z+4, r29	; 0x04
     bc2:	c3 83       	std	Z+3, r28	; 0x03
 	nextmenu->right_sibling = NULL;
     bc4:	10 86       	std	Z+8, r1	; 0x08
     bc6:	17 82       	std	Z+7, r1	; 0x07
	nextmenu->first_child = NULL;
     bc8:	16 82       	std	Z+6, r1	; 0x06
     bca:	15 82       	std	Z+5, r1	; 0x05
	return nextmenu;
}
     bcc:	df 91       	pop	r29
     bce:	cf 91       	pop	r28
     bd0:	1f 91       	pop	r17
     bd2:	0f 91       	pop	r16
     bd4:	08 95       	ret

00000bd6 <size_of_menu>:

int size_of_menu(menu* mymenu) {
	
	int menu_size = 0;
	
	mymenu = mymenu->first_child;
     bd6:	dc 01       	movw	r26, r24
     bd8:	15 96       	adiw	r26, 0x05	; 5
     bda:	ed 91       	ld	r30, X+
     bdc:	fc 91       	ld	r31, X
     bde:	16 97       	sbiw	r26, 0x06	; 6
	if (mymenu == NULL) {
     be0:	30 97       	sbiw	r30, 0x00	; 0
     be2:	79 f0       	breq	.+30     	; 0xc02 <size_of_menu+0x2c>
		return menu_size;
	}
	menu_size ++;
	while (mymenu->right_sibling != NULL) {
     be4:	07 80       	ldd	r0, Z+7	; 0x07
     be6:	f0 85       	ldd	r31, Z+8	; 0x08
     be8:	e0 2d       	mov	r30, r0
     bea:	30 97       	sbiw	r30, 0x00	; 0
     bec:	69 f0       	breq	.+26     	; 0xc08 <size_of_menu+0x32>
     bee:	21 e0       	ldi	r18, 0x01	; 1
     bf0:	30 e0       	ldi	r19, 0x00	; 0
		mymenu = mymenu->right_sibling;
		menu_size++;
     bf2:	2f 5f       	subi	r18, 0xFF	; 255
     bf4:	3f 4f       	sbci	r19, 0xFF	; 255
	mymenu = mymenu->first_child;
	if (mymenu == NULL) {
		return menu_size;
	}
	menu_size ++;
	while (mymenu->right_sibling != NULL) {
     bf6:	07 80       	ldd	r0, Z+7	; 0x07
     bf8:	f0 85       	ldd	r31, Z+8	; 0x08
     bfa:	e0 2d       	mov	r30, r0
     bfc:	30 97       	sbiw	r30, 0x00	; 0
     bfe:	c9 f7       	brne	.-14     	; 0xbf2 <size_of_menu+0x1c>
     c00:	06 c0       	rjmp	.+12     	; 0xc0e <size_of_menu+0x38>
	
	int menu_size = 0;
	
	mymenu = mymenu->first_child;
	if (mymenu == NULL) {
		return menu_size;
     c02:	80 e0       	ldi	r24, 0x00	; 0
     c04:	90 e0       	ldi	r25, 0x00	; 0
     c06:	08 95       	ret
	}
	menu_size ++;
	while (mymenu->right_sibling != NULL) {
     c08:	81 e0       	ldi	r24, 0x01	; 1
     c0a:	90 e0       	ldi	r25, 0x00	; 0
     c0c:	08 95       	ret
		mymenu = mymenu->right_sibling;
		menu_size++;
     c0e:	82 2f       	mov	r24, r18
     c10:	93 2f       	mov	r25, r19
	}
	return menu_size;
}
     c12:	08 95       	ret

00000c14 <oled_menu_print>:
	current_menu_size = size_of_menu(current_menu);
	oled_menu_print(current_menu);
	return direction;
}

void oled_menu_print(menu* mymenu){
     c14:	0f 93       	push	r16
     c16:	1f 93       	push	r17
     c18:	cf 93       	push	r28
     c1a:	df 93       	push	r29
     c1c:	ec 01       	movw	r28, r24
	
	oled_reset(); 
     c1e:	0e 94 46 05 	call	0xa8c	; 0xa8c <oled_reset>
	
	current_menu_size = size_of_menu(mymenu);
     c22:	ce 01       	movw	r24, r28
     c24:	0e 94 eb 05 	call	0xbd6	; 0xbd6 <size_of_menu>
     c28:	90 93 7c 02 	sts	0x027C, r25
     c2c:	80 93 7b 02 	sts	0x027B, r24
	mymenu = mymenu->first_child;
     c30:	0d 81       	ldd	r16, Y+5	; 0x05
     c32:	1e 81       	ldd	r17, Y+6	; 0x06
	for(int i = 0; i < current_menu_size; i++){
     c34:	80 91 7b 02 	lds	r24, 0x027B
     c38:	90 91 7c 02 	lds	r25, 0x027C
     c3c:	18 16       	cp	r1, r24
     c3e:	19 06       	cpc	r1, r25
     c40:	64 f5       	brge	.+88     	; 0xc9a <oled_menu_print+0x86>
     c42:	c0 e0       	ldi	r28, 0x00	; 0
     c44:	d0 e0       	ldi	r29, 0x00	; 0
		oled_pos(i,0);
     c46:	60 e0       	ldi	r22, 0x00	; 0
     c48:	70 e0       	ldi	r23, 0x00	; 0
     c4a:	ce 01       	movw	r24, r28
     c4c:	0e 94 1b 05 	call	0xa36	; 0xa36 <oled_pos>
		if(current_line == i){
     c50:	80 91 30 01 	lds	r24, 0x0130
     c54:	90 91 31 01 	lds	r25, 0x0131
     c58:	8c 17       	cp	r24, r28
     c5a:	9d 07       	cpc	r25, r29
     c5c:	51 f4       	brne	.+20     	; 0xc72 <oled_menu_print+0x5e>
			oled_inv_printf(mymenu->title);
     c5e:	f8 01       	movw	r30, r16
     c60:	81 81       	ldd	r24, Z+1	; 0x01
     c62:	8f 93       	push	r24
     c64:	80 81       	ld	r24, Z
     c66:	8f 93       	push	r24
     c68:	0e 94 bf 04 	call	0x97e	; 0x97e <oled_inv_printf>
     c6c:	0f 90       	pop	r0
     c6e:	0f 90       	pop	r0
     c70:	09 c0       	rjmp	.+18     	; 0xc84 <oled_menu_print+0x70>
		}
		else{
			oled_printf(mymenu->title);
     c72:	f8 01       	movw	r30, r16
     c74:	81 81       	ldd	r24, Z+1	; 0x01
     c76:	8f 93       	push	r24
     c78:	80 81       	ld	r24, Z
     c7a:	8f 93       	push	r24
     c7c:	0e 94 af 04 	call	0x95e	; 0x95e <oled_printf>
     c80:	0f 90       	pop	r0
     c82:	0f 90       	pop	r0
		}
		mymenu = mymenu->right_sibling;
     c84:	f8 01       	movw	r30, r16
     c86:	07 81       	ldd	r16, Z+7	; 0x07
     c88:	10 85       	ldd	r17, Z+8	; 0x08
	
	oled_reset(); 
	
	current_menu_size = size_of_menu(mymenu);
	mymenu = mymenu->first_child;
	for(int i = 0; i < current_menu_size; i++){
     c8a:	21 96       	adiw	r28, 0x01	; 1
     c8c:	80 91 7b 02 	lds	r24, 0x027B
     c90:	90 91 7c 02 	lds	r25, 0x027C
     c94:	c8 17       	cp	r28, r24
     c96:	d9 07       	cpc	r29, r25
     c98:	b4 f2       	brlt	.-84     	; 0xc46 <oled_menu_print+0x32>
		}
		mymenu = mymenu->right_sibling;
	}
	mymenu = mymenu->parent;
	
     c9a:	df 91       	pop	r29
     c9c:	cf 91       	pop	r28
     c9e:	1f 91       	pop	r17
     ca0:	0f 91       	pop	r16
     ca2:	08 95       	ret

00000ca4 <oled_menu_init>:
		menu_size++;
	}
	return menu_size;
}

menu* oled_menu_init(void) {
     ca4:	4f 92       	push	r4
     ca6:	5f 92       	push	r5
     ca8:	6f 92       	push	r6
     caa:	7f 92       	push	r7
     cac:	8f 92       	push	r8
     cae:	9f 92       	push	r9
     cb0:	af 92       	push	r10
     cb2:	bf 92       	push	r11
     cb4:	cf 92       	push	r12
     cb6:	df 92       	push	r13
     cb8:	ef 92       	push	r14
     cba:	ff 92       	push	r15
     cbc:	0f 93       	push	r16
     cbe:	1f 93       	push	r17
     cc0:	cf 93       	push	r28
     cc2:	df 93       	push	r29
	menu* main_menu = new_menu("Main Menu", NULL);
     cc4:	60 e0       	ldi	r22, 0x00	; 0
     cc6:	70 e0       	ldi	r23, 0x00	; 0
     cc8:	85 e3       	ldi	r24, 0x35	; 53
     cca:	92 e0       	ldi	r25, 0x02	; 2
     ccc:	0e 94 d3 05 	call	0xba6	; 0xba6 <new_menu>
     cd0:	ec 01       	movw	r28, r24
	menu* play_game = new_menu("Play Game", main_menu);
     cd2:	bc 01       	movw	r22, r24
     cd4:	8f e3       	ldi	r24, 0x3F	; 63
     cd6:	92 e0       	ldi	r25, 0x02	; 2
     cd8:	0e 94 d3 05 	call	0xba6	; 0xba6 <new_menu>
     cdc:	7c 01       	movw	r14, r24
	menu* highscores = new_menu("Highscores", main_menu);
     cde:	be 01       	movw	r22, r28
     ce0:	89 e4       	ldi	r24, 0x49	; 73
     ce2:	92 e0       	ldi	r25, 0x02	; 2
     ce4:	0e 94 d3 05 	call	0xba6	; 0xba6 <new_menu>
     ce8:	8c 01       	movw	r16, r24
	menu* Test = new_menu("Test", main_menu);
     cea:	be 01       	movw	r22, r28
     cec:	84 e5       	ldi	r24, 0x54	; 84
     cee:	92 e0       	ldi	r25, 0x02	; 2
     cf0:	0e 94 d3 05 	call	0xba6	; 0xba6 <new_menu>
     cf4:	4c 01       	movw	r8, r24
	menu* Test1 = new_menu("Test1", Test);
     cf6:	bc 01       	movw	r22, r24
     cf8:	89 e5       	ldi	r24, 0x59	; 89
     cfa:	92 e0       	ldi	r25, 0x02	; 2
     cfc:	0e 94 d3 05 	call	0xba6	; 0xba6 <new_menu>
     d00:	6c 01       	movw	r12, r24
	menu* Test2 = new_menu("Test2", Test1);
     d02:	bc 01       	movw	r22, r24
     d04:	8f e5       	ldi	r24, 0x5F	; 95
     d06:	92 e0       	ldi	r25, 0x02	; 2
     d08:	0e 94 d3 05 	call	0xba6	; 0xba6 <new_menu>
     d0c:	2c 01       	movw	r4, r24
	menu* TestP = new_menu("TestP", play_game);
     d0e:	b7 01       	movw	r22, r14
     d10:	85 e6       	ldi	r24, 0x65	; 101
     d12:	92 e0       	ldi	r25, 0x02	; 2
     d14:	0e 94 d3 05 	call	0xba6	; 0xba6 <new_menu>
     d18:	5c 01       	movw	r10, r24
	menu* TestH = new_menu("TestH", highscores);
     d1a:	b8 01       	movw	r22, r16
     d1c:	8b e6       	ldi	r24, 0x6B	; 107
     d1e:	92 e0       	ldi	r25, 0x02	; 2
     d20:	0e 94 d3 05 	call	0xba6	; 0xba6 <new_menu>
     d24:	3c 01       	movw	r6, r24
	
	
	current_menu = main_menu;
     d26:	d0 93 7a 02 	sts	0x027A, r29
     d2a:	c0 93 79 02 	sts	0x0279, r28
	current_menu_size = size_of_menu(current_menu);
     d2e:	ce 01       	movw	r24, r28
     d30:	0e 94 eb 05 	call	0xbd6	; 0xbd6 <size_of_menu>
     d34:	90 93 7c 02 	sts	0x027C, r25
     d38:	80 93 7b 02 	sts	0x027B, r24
	oled_menu_print(current_menu);
     d3c:	ce 01       	movw	r24, r28
     d3e:	0e 94 0a 06 	call	0xc14	; 0xc14 <oled_menu_print>
	mymenu->right_sibling = right_sibling;
}


void set_first_child(menu* mymenu, menu* first_child) {
	mymenu->first_child = first_child;
     d42:	fe 82       	std	Y+6, r15	; 0x06
     d44:	ed 82       	std	Y+5, r14	; 0x05
volatile menu* current_menu;
volatile int current_line = 2;
volatile int current_menu_size;

void set_right_sibling(menu* mymenu, menu* right_sibling) {
	mymenu->right_sibling = right_sibling;
     d46:	f7 01       	movw	r30, r14
     d48:	10 87       	std	Z+8, r17	; 0x08
     d4a:	07 83       	std	Z+7, r16	; 0x07
     d4c:	f8 01       	movw	r30, r16
     d4e:	90 86       	std	Z+8, r9	; 0x08
     d50:	87 82       	std	Z+7, r8	; 0x07
}


void set_first_child(menu* mymenu, menu* first_child) {
	mymenu->first_child = first_child;
     d52:	f4 01       	movw	r30, r8
     d54:	d6 82       	std	Z+6, r13	; 0x06
     d56:	c5 82       	std	Z+5, r12	; 0x05
     d58:	f7 01       	movw	r30, r14
     d5a:	b6 82       	std	Z+6, r11	; 0x06
     d5c:	a5 82       	std	Z+5, r10	; 0x05
     d5e:	f8 01       	movw	r30, r16
     d60:	76 82       	std	Z+6, r7	; 0x06
     d62:	65 82       	std	Z+5, r6	; 0x05
     d64:	f6 01       	movw	r30, r12
     d66:	56 82       	std	Z+6, r5	; 0x06
     d68:	45 82       	std	Z+5, r4	; 0x05
	set_first_child(play_game, TestP);
	set_first_child(highscores, TestH);
	//set_right_sibling(Test1,Test2);
	set_first_child(Test1, Test2);
	return current_menu;
}
     d6a:	80 91 79 02 	lds	r24, 0x0279
     d6e:	90 91 7a 02 	lds	r25, 0x027A
     d72:	df 91       	pop	r29
     d74:	cf 91       	pop	r28
     d76:	1f 91       	pop	r17
     d78:	0f 91       	pop	r16
     d7a:	ff 90       	pop	r15
     d7c:	ef 90       	pop	r14
     d7e:	df 90       	pop	r13
     d80:	cf 90       	pop	r12
     d82:	bf 90       	pop	r11
     d84:	af 90       	pop	r10
     d86:	9f 90       	pop	r9
     d88:	8f 90       	pop	r8
     d8a:	7f 90       	pop	r7
     d8c:	6f 90       	pop	r6
     d8e:	5f 90       	pop	r5
     d90:	4f 90       	pop	r4
     d92:	08 95       	ret

00000d94 <oled_menu_select>:


JoystickDir oled_menu_select(void){
     d94:	ef 92       	push	r14
     d96:	ff 92       	push	r15
     d98:	0f 93       	push	r16
     d9a:	1f 93       	push	r17
     d9c:	cf 93       	push	r28
     d9e:	df 93       	push	r29
     da0:	00 d0       	rcall	.+0      	; 0xda2 <oled_menu_select+0xe>
     da2:	00 d0       	rcall	.+0      	; 0xda4 <oled_menu_select+0x10>
     da4:	1f 92       	push	r1
     da6:	cd b7       	in	r28, 0x3d	; 61
     da8:	de b7       	in	r29, 0x3e	; 62
	JoystickDir direction = JoystickDirection().Dir;
     daa:	0e 94 92 03 	call	0x724	; 0x724 <JoystickDirection>
     dae:	f6 2e       	mov	r15, r22
     db0:	29 83       	std	Y+1, r18	; 0x01
     db2:	3a 83       	std	Y+2, r19	; 0x02
     db4:	4b 83       	std	Y+3, r20	; 0x03
     db6:	5c 83       	std	Y+4, r21	; 0x04
     db8:	6d 83       	std	Y+5, r22	; 0x05
     dba:	e6 2e       	mov	r14, r22
	current_menu_size = size_of_menu(current_menu);
     dbc:	00 91 79 02 	lds	r16, 0x0279
     dc0:	10 91 7a 02 	lds	r17, 0x027A
     dc4:	c8 01       	movw	r24, r16
     dc6:	0e 94 eb 05 	call	0xbd6	; 0xbd6 <size_of_menu>
     dca:	90 93 7c 02 	sts	0x027C, r25
     dce:	80 93 7b 02 	sts	0x027B, r24
	if(direction == UP){
     dd2:	82 e0       	ldi	r24, 0x02	; 2
     dd4:	f8 12       	cpse	r15, r24
     dd6:	0a c0       	rjmp	.+20     	; 0xdec <oled_menu_select+0x58>
		current_line--;
     dd8:	80 91 30 01 	lds	r24, 0x0130
     ddc:	90 91 31 01 	lds	r25, 0x0131
     de0:	01 97       	sbiw	r24, 0x01	; 1
     de2:	90 93 31 01 	sts	0x0131, r25
     de6:	80 93 30 01 	sts	0x0130, r24
     dea:	0c c0       	rjmp	.+24     	; 0xe04 <oled_menu_select+0x70>
	}
	if(direction == DOWN){
     dec:	e3 e0       	ldi	r30, 0x03	; 3
     dee:	fe 12       	cpse	r15, r30
     df0:	09 c0       	rjmp	.+18     	; 0xe04 <oled_menu_select+0x70>
		current_line++;
     df2:	80 91 30 01 	lds	r24, 0x0130
     df6:	90 91 31 01 	lds	r25, 0x0131
     dfa:	01 96       	adiw	r24, 0x01	; 1
     dfc:	90 93 31 01 	sts	0x0131, r25
     e00:	80 93 30 01 	sts	0x0130, r24
	}
	if(current_line > current_menu_size-1){
     e04:	20 91 7b 02 	lds	r18, 0x027B
     e08:	30 91 7c 02 	lds	r19, 0x027C
     e0c:	80 91 30 01 	lds	r24, 0x0130
     e10:	90 91 31 01 	lds	r25, 0x0131
     e14:	21 50       	subi	r18, 0x01	; 1
     e16:	31 09       	sbc	r19, r1
     e18:	28 17       	cp	r18, r24
     e1a:	39 07       	cpc	r19, r25
     e1c:	4c f4       	brge	.+18     	; 0xe30 <oled_menu_select+0x9c>
		current_line = current_menu_size-1;
     e1e:	80 91 7b 02 	lds	r24, 0x027B
     e22:	90 91 7c 02 	lds	r25, 0x027C
     e26:	01 97       	sbiw	r24, 0x01	; 1
     e28:	90 93 31 01 	sts	0x0131, r25
     e2c:	80 93 30 01 	sts	0x0130, r24
	}
	if(current_line < 0){
     e30:	80 91 30 01 	lds	r24, 0x0130
     e34:	90 91 31 01 	lds	r25, 0x0131
     e38:	99 23       	and	r25, r25
     e3a:	24 f4       	brge	.+8      	; 0xe44 <oled_menu_select+0xb0>
		current_line = 0;
     e3c:	10 92 31 01 	sts	0x0131, r1
     e40:	10 92 30 01 	sts	0x0130, r1
	}
	if(direction == RIGHT){
     e44:	f1 e0       	ldi	r31, 0x01	; 1
     e46:	ef 12       	cpse	r14, r31
     e48:	2d c0       	rjmp	.+90     	; 0xea4 <oled_menu_select+0x110>
		if(current_menu->first_child != NULL){
     e4a:	f8 01       	movw	r30, r16
     e4c:	85 81       	ldd	r24, Z+5	; 0x05
     e4e:	96 81       	ldd	r25, Z+6	; 0x06
     e50:	89 2b       	or	r24, r25
     e52:	31 f0       	breq	.+12     	; 0xe60 <oled_menu_select+0xcc>
			current_menu = current_menu->first_child;
     e54:	85 81       	ldd	r24, Z+5	; 0x05
     e56:	96 81       	ldd	r25, Z+6	; 0x06
     e58:	90 93 7a 02 	sts	0x027A, r25
     e5c:	80 93 79 02 	sts	0x0279, r24
		}
		for(int i =0; i < current_line;i++){
     e60:	80 91 30 01 	lds	r24, 0x0130
     e64:	90 91 31 01 	lds	r25, 0x0131
     e68:	18 16       	cp	r1, r24
     e6a:	19 06       	cpc	r1, r25
     e6c:	b4 f4       	brge	.+44     	; 0xe9a <oled_menu_select+0x106>
     e6e:	e0 91 79 02 	lds	r30, 0x0279
     e72:	f0 91 7a 02 	lds	r31, 0x027A
     e76:	20 e0       	ldi	r18, 0x00	; 0
     e78:	30 e0       	ldi	r19, 0x00	; 0
			current_menu = current_menu->right_sibling;
     e7a:	07 80       	ldd	r0, Z+7	; 0x07
     e7c:	f0 85       	ldd	r31, Z+8	; 0x08
     e7e:	e0 2d       	mov	r30, r0
	}
	if(direction == RIGHT){
		if(current_menu->first_child != NULL){
			current_menu = current_menu->first_child;
		}
		for(int i =0; i < current_line;i++){
     e80:	2f 5f       	subi	r18, 0xFF	; 255
     e82:	3f 4f       	sbci	r19, 0xFF	; 255
     e84:	40 91 30 01 	lds	r20, 0x0130
     e88:	50 91 31 01 	lds	r21, 0x0131
     e8c:	24 17       	cp	r18, r20
     e8e:	35 07       	cpc	r19, r21
     e90:	a4 f3       	brlt	.-24     	; 0xe7a <oled_menu_select+0xe6>
     e92:	f0 93 7a 02 	sts	0x027A, r31
     e96:	e0 93 79 02 	sts	0x0279, r30
			current_menu = current_menu->right_sibling;
		}
		current_line = 0;
     e9a:	10 92 31 01 	sts	0x0131, r1
     e9e:	10 92 30 01 	sts	0x0130, r1
     ea2:	10 c0       	rjmp	.+32     	; 0xec4 <oled_menu_select+0x130>
	}
	if(direction == LEFT){
     ea4:	e1 10       	cpse	r14, r1
     ea6:	0e c0       	rjmp	.+28     	; 0xec4 <oled_menu_select+0x130>
		if(current_menu->parent != NULL){
     ea8:	e0 91 79 02 	lds	r30, 0x0279
     eac:	f0 91 7a 02 	lds	r31, 0x027A
     eb0:	83 81       	ldd	r24, Z+3	; 0x03
     eb2:	94 81       	ldd	r25, Z+4	; 0x04
     eb4:	89 2b       	or	r24, r25
     eb6:	31 f0       	breq	.+12     	; 0xec4 <oled_menu_select+0x130>
		current_menu = current_menu->parent;
     eb8:	83 81       	ldd	r24, Z+3	; 0x03
     eba:	94 81       	ldd	r25, Z+4	; 0x04
     ebc:	90 93 7a 02 	sts	0x027A, r25
     ec0:	80 93 79 02 	sts	0x0279, r24
		}
	}
	current_menu_size = size_of_menu(current_menu);
     ec4:	00 91 79 02 	lds	r16, 0x0279
     ec8:	10 91 7a 02 	lds	r17, 0x027A
     ecc:	c8 01       	movw	r24, r16
     ece:	0e 94 eb 05 	call	0xbd6	; 0xbd6 <size_of_menu>
     ed2:	90 93 7c 02 	sts	0x027C, r25
     ed6:	80 93 7b 02 	sts	0x027B, r24
	oled_menu_print(current_menu);
     eda:	c8 01       	movw	r24, r16
     edc:	0e 94 0a 06 	call	0xc14	; 0xc14 <oled_menu_print>
	return direction;
}
     ee0:	8f 2d       	mov	r24, r15
     ee2:	0f 90       	pop	r0
     ee4:	0f 90       	pop	r0
     ee6:	0f 90       	pop	r0
     ee8:	0f 90       	pop	r0
     eea:	0f 90       	pop	r0
     eec:	df 91       	pop	r29
     eee:	cf 91       	pop	r28
     ef0:	1f 91       	pop	r17
     ef2:	0f 91       	pop	r16
     ef4:	ff 90       	pop	r15
     ef6:	ef 90       	pop	r14
     ef8:	08 95       	ret

00000efa <__divmodhi4>:
     efa:	97 fb       	bst	r25, 7
     efc:	07 2e       	mov	r0, r23
     efe:	16 f4       	brtc	.+4      	; 0xf04 <__divmodhi4+0xa>
     f00:	00 94       	com	r0
     f02:	07 d0       	rcall	.+14     	; 0xf12 <__divmodhi4_neg1>
     f04:	77 fd       	sbrc	r23, 7
     f06:	09 d0       	rcall	.+18     	; 0xf1a <__divmodhi4_neg2>
     f08:	0e 94 91 07 	call	0xf22	; 0xf22 <__udivmodhi4>
     f0c:	07 fc       	sbrc	r0, 7
     f0e:	05 d0       	rcall	.+10     	; 0xf1a <__divmodhi4_neg2>
     f10:	3e f4       	brtc	.+14     	; 0xf20 <__divmodhi4_exit>

00000f12 <__divmodhi4_neg1>:
     f12:	90 95       	com	r25
     f14:	81 95       	neg	r24
     f16:	9f 4f       	sbci	r25, 0xFF	; 255
     f18:	08 95       	ret

00000f1a <__divmodhi4_neg2>:
     f1a:	70 95       	com	r23
     f1c:	61 95       	neg	r22
     f1e:	7f 4f       	sbci	r23, 0xFF	; 255

00000f20 <__divmodhi4_exit>:
     f20:	08 95       	ret

00000f22 <__udivmodhi4>:
     f22:	aa 1b       	sub	r26, r26
     f24:	bb 1b       	sub	r27, r27
     f26:	51 e1       	ldi	r21, 0x11	; 17
     f28:	07 c0       	rjmp	.+14     	; 0xf38 <__udivmodhi4_ep>

00000f2a <__udivmodhi4_loop>:
     f2a:	aa 1f       	adc	r26, r26
     f2c:	bb 1f       	adc	r27, r27
     f2e:	a6 17       	cp	r26, r22
     f30:	b7 07       	cpc	r27, r23
     f32:	10 f0       	brcs	.+4      	; 0xf38 <__udivmodhi4_ep>
     f34:	a6 1b       	sub	r26, r22
     f36:	b7 0b       	sbc	r27, r23

00000f38 <__udivmodhi4_ep>:
     f38:	88 1f       	adc	r24, r24
     f3a:	99 1f       	adc	r25, r25
     f3c:	5a 95       	dec	r21
     f3e:	a9 f7       	brne	.-22     	; 0xf2a <__udivmodhi4_loop>
     f40:	80 95       	com	r24
     f42:	90 95       	com	r25
     f44:	bc 01       	movw	r22, r24
     f46:	cd 01       	movw	r24, r26
     f48:	08 95       	ret

00000f4a <malloc>:
     f4a:	cf 93       	push	r28
     f4c:	df 93       	push	r29
     f4e:	82 30       	cpi	r24, 0x02	; 2
     f50:	91 05       	cpc	r25, r1
     f52:	10 f4       	brcc	.+4      	; 0xf58 <malloc+0xe>
     f54:	82 e0       	ldi	r24, 0x02	; 2
     f56:	90 e0       	ldi	r25, 0x00	; 0
     f58:	e0 91 7f 02 	lds	r30, 0x027F
     f5c:	f0 91 80 02 	lds	r31, 0x0280
     f60:	20 e0       	ldi	r18, 0x00	; 0
     f62:	30 e0       	ldi	r19, 0x00	; 0
     f64:	a0 e0       	ldi	r26, 0x00	; 0
     f66:	b0 e0       	ldi	r27, 0x00	; 0
     f68:	30 97       	sbiw	r30, 0x00	; 0
     f6a:	39 f1       	breq	.+78     	; 0xfba <malloc+0x70>
     f6c:	40 81       	ld	r20, Z
     f6e:	51 81       	ldd	r21, Z+1	; 0x01
     f70:	48 17       	cp	r20, r24
     f72:	59 07       	cpc	r21, r25
     f74:	b8 f0       	brcs	.+46     	; 0xfa4 <malloc+0x5a>
     f76:	48 17       	cp	r20, r24
     f78:	59 07       	cpc	r21, r25
     f7a:	71 f4       	brne	.+28     	; 0xf98 <malloc+0x4e>
     f7c:	82 81       	ldd	r24, Z+2	; 0x02
     f7e:	93 81       	ldd	r25, Z+3	; 0x03
     f80:	10 97       	sbiw	r26, 0x00	; 0
     f82:	29 f0       	breq	.+10     	; 0xf8e <malloc+0x44>
     f84:	13 96       	adiw	r26, 0x03	; 3
     f86:	9c 93       	st	X, r25
     f88:	8e 93       	st	-X, r24
     f8a:	12 97       	sbiw	r26, 0x02	; 2
     f8c:	2c c0       	rjmp	.+88     	; 0xfe6 <malloc+0x9c>
     f8e:	90 93 80 02 	sts	0x0280, r25
     f92:	80 93 7f 02 	sts	0x027F, r24
     f96:	27 c0       	rjmp	.+78     	; 0xfe6 <malloc+0x9c>
     f98:	21 15       	cp	r18, r1
     f9a:	31 05       	cpc	r19, r1
     f9c:	31 f0       	breq	.+12     	; 0xfaa <malloc+0x60>
     f9e:	42 17       	cp	r20, r18
     fa0:	53 07       	cpc	r21, r19
     fa2:	18 f0       	brcs	.+6      	; 0xfaa <malloc+0x60>
     fa4:	a9 01       	movw	r20, r18
     fa6:	db 01       	movw	r26, r22
     fa8:	01 c0       	rjmp	.+2      	; 0xfac <malloc+0x62>
     faa:	ef 01       	movw	r28, r30
     fac:	9a 01       	movw	r18, r20
     fae:	bd 01       	movw	r22, r26
     fb0:	df 01       	movw	r26, r30
     fb2:	02 80       	ldd	r0, Z+2	; 0x02
     fb4:	f3 81       	ldd	r31, Z+3	; 0x03
     fb6:	e0 2d       	mov	r30, r0
     fb8:	d7 cf       	rjmp	.-82     	; 0xf68 <malloc+0x1e>
     fba:	21 15       	cp	r18, r1
     fbc:	31 05       	cpc	r19, r1
     fbe:	f9 f0       	breq	.+62     	; 0xffe <malloc+0xb4>
     fc0:	28 1b       	sub	r18, r24
     fc2:	39 0b       	sbc	r19, r25
     fc4:	24 30       	cpi	r18, 0x04	; 4
     fc6:	31 05       	cpc	r19, r1
     fc8:	80 f4       	brcc	.+32     	; 0xfea <malloc+0xa0>
     fca:	8a 81       	ldd	r24, Y+2	; 0x02
     fcc:	9b 81       	ldd	r25, Y+3	; 0x03
     fce:	61 15       	cp	r22, r1
     fd0:	71 05       	cpc	r23, r1
     fd2:	21 f0       	breq	.+8      	; 0xfdc <malloc+0x92>
     fd4:	fb 01       	movw	r30, r22
     fd6:	93 83       	std	Z+3, r25	; 0x03
     fd8:	82 83       	std	Z+2, r24	; 0x02
     fda:	04 c0       	rjmp	.+8      	; 0xfe4 <malloc+0x9a>
     fdc:	90 93 80 02 	sts	0x0280, r25
     fe0:	80 93 7f 02 	sts	0x027F, r24
     fe4:	fe 01       	movw	r30, r28
     fe6:	32 96       	adiw	r30, 0x02	; 2
     fe8:	44 c0       	rjmp	.+136    	; 0x1072 <malloc+0x128>
     fea:	fe 01       	movw	r30, r28
     fec:	e2 0f       	add	r30, r18
     fee:	f3 1f       	adc	r31, r19
     ff0:	81 93       	st	Z+, r24
     ff2:	91 93       	st	Z+, r25
     ff4:	22 50       	subi	r18, 0x02	; 2
     ff6:	31 09       	sbc	r19, r1
     ff8:	39 83       	std	Y+1, r19	; 0x01
     ffa:	28 83       	st	Y, r18
     ffc:	3a c0       	rjmp	.+116    	; 0x1072 <malloc+0x128>
     ffe:	20 91 7d 02 	lds	r18, 0x027D
    1002:	30 91 7e 02 	lds	r19, 0x027E
    1006:	23 2b       	or	r18, r19
    1008:	41 f4       	brne	.+16     	; 0x101a <malloc+0xd0>
    100a:	20 91 02 01 	lds	r18, 0x0102
    100e:	30 91 03 01 	lds	r19, 0x0103
    1012:	30 93 7e 02 	sts	0x027E, r19
    1016:	20 93 7d 02 	sts	0x027D, r18
    101a:	20 91 00 01 	lds	r18, 0x0100
    101e:	30 91 01 01 	lds	r19, 0x0101
    1022:	21 15       	cp	r18, r1
    1024:	31 05       	cpc	r19, r1
    1026:	41 f4       	brne	.+16     	; 0x1038 <malloc+0xee>
    1028:	2d b7       	in	r18, 0x3d	; 61
    102a:	3e b7       	in	r19, 0x3e	; 62
    102c:	40 91 04 01 	lds	r20, 0x0104
    1030:	50 91 05 01 	lds	r21, 0x0105
    1034:	24 1b       	sub	r18, r20
    1036:	35 0b       	sbc	r19, r21
    1038:	e0 91 7d 02 	lds	r30, 0x027D
    103c:	f0 91 7e 02 	lds	r31, 0x027E
    1040:	e2 17       	cp	r30, r18
    1042:	f3 07       	cpc	r31, r19
    1044:	a0 f4       	brcc	.+40     	; 0x106e <malloc+0x124>
    1046:	2e 1b       	sub	r18, r30
    1048:	3f 0b       	sbc	r19, r31
    104a:	28 17       	cp	r18, r24
    104c:	39 07       	cpc	r19, r25
    104e:	78 f0       	brcs	.+30     	; 0x106e <malloc+0x124>
    1050:	ac 01       	movw	r20, r24
    1052:	4e 5f       	subi	r20, 0xFE	; 254
    1054:	5f 4f       	sbci	r21, 0xFF	; 255
    1056:	24 17       	cp	r18, r20
    1058:	35 07       	cpc	r19, r21
    105a:	48 f0       	brcs	.+18     	; 0x106e <malloc+0x124>
    105c:	4e 0f       	add	r20, r30
    105e:	5f 1f       	adc	r21, r31
    1060:	50 93 7e 02 	sts	0x027E, r21
    1064:	40 93 7d 02 	sts	0x027D, r20
    1068:	81 93       	st	Z+, r24
    106a:	91 93       	st	Z+, r25
    106c:	02 c0       	rjmp	.+4      	; 0x1072 <malloc+0x128>
    106e:	e0 e0       	ldi	r30, 0x00	; 0
    1070:	f0 e0       	ldi	r31, 0x00	; 0
    1072:	cf 01       	movw	r24, r30
    1074:	df 91       	pop	r29
    1076:	cf 91       	pop	r28
    1078:	08 95       	ret

0000107a <free>:
    107a:	cf 93       	push	r28
    107c:	df 93       	push	r29
    107e:	00 97       	sbiw	r24, 0x00	; 0
    1080:	09 f4       	brne	.+2      	; 0x1084 <free+0xa>
    1082:	87 c0       	rjmp	.+270    	; 0x1192 <free+0x118>
    1084:	fc 01       	movw	r30, r24
    1086:	32 97       	sbiw	r30, 0x02	; 2
    1088:	13 82       	std	Z+3, r1	; 0x03
    108a:	12 82       	std	Z+2, r1	; 0x02
    108c:	c0 91 7f 02 	lds	r28, 0x027F
    1090:	d0 91 80 02 	lds	r29, 0x0280
    1094:	20 97       	sbiw	r28, 0x00	; 0
    1096:	81 f4       	brne	.+32     	; 0x10b8 <free+0x3e>
    1098:	20 81       	ld	r18, Z
    109a:	31 81       	ldd	r19, Z+1	; 0x01
    109c:	28 0f       	add	r18, r24
    109e:	39 1f       	adc	r19, r25
    10a0:	80 91 7d 02 	lds	r24, 0x027D
    10a4:	90 91 7e 02 	lds	r25, 0x027E
    10a8:	82 17       	cp	r24, r18
    10aa:	93 07       	cpc	r25, r19
    10ac:	79 f5       	brne	.+94     	; 0x110c <free+0x92>
    10ae:	f0 93 7e 02 	sts	0x027E, r31
    10b2:	e0 93 7d 02 	sts	0x027D, r30
    10b6:	6d c0       	rjmp	.+218    	; 0x1192 <free+0x118>
    10b8:	de 01       	movw	r26, r28
    10ba:	20 e0       	ldi	r18, 0x00	; 0
    10bc:	30 e0       	ldi	r19, 0x00	; 0
    10be:	ae 17       	cp	r26, r30
    10c0:	bf 07       	cpc	r27, r31
    10c2:	50 f4       	brcc	.+20     	; 0x10d8 <free+0x5e>
    10c4:	12 96       	adiw	r26, 0x02	; 2
    10c6:	4d 91       	ld	r20, X+
    10c8:	5c 91       	ld	r21, X
    10ca:	13 97       	sbiw	r26, 0x03	; 3
    10cc:	9d 01       	movw	r18, r26
    10ce:	41 15       	cp	r20, r1
    10d0:	51 05       	cpc	r21, r1
    10d2:	09 f1       	breq	.+66     	; 0x1116 <free+0x9c>
    10d4:	da 01       	movw	r26, r20
    10d6:	f3 cf       	rjmp	.-26     	; 0x10be <free+0x44>
    10d8:	b3 83       	std	Z+3, r27	; 0x03
    10da:	a2 83       	std	Z+2, r26	; 0x02
    10dc:	40 81       	ld	r20, Z
    10de:	51 81       	ldd	r21, Z+1	; 0x01
    10e0:	84 0f       	add	r24, r20
    10e2:	95 1f       	adc	r25, r21
    10e4:	8a 17       	cp	r24, r26
    10e6:	9b 07       	cpc	r25, r27
    10e8:	71 f4       	brne	.+28     	; 0x1106 <free+0x8c>
    10ea:	8d 91       	ld	r24, X+
    10ec:	9c 91       	ld	r25, X
    10ee:	11 97       	sbiw	r26, 0x01	; 1
    10f0:	84 0f       	add	r24, r20
    10f2:	95 1f       	adc	r25, r21
    10f4:	02 96       	adiw	r24, 0x02	; 2
    10f6:	91 83       	std	Z+1, r25	; 0x01
    10f8:	80 83       	st	Z, r24
    10fa:	12 96       	adiw	r26, 0x02	; 2
    10fc:	8d 91       	ld	r24, X+
    10fe:	9c 91       	ld	r25, X
    1100:	13 97       	sbiw	r26, 0x03	; 3
    1102:	93 83       	std	Z+3, r25	; 0x03
    1104:	82 83       	std	Z+2, r24	; 0x02
    1106:	21 15       	cp	r18, r1
    1108:	31 05       	cpc	r19, r1
    110a:	29 f4       	brne	.+10     	; 0x1116 <free+0x9c>
    110c:	f0 93 80 02 	sts	0x0280, r31
    1110:	e0 93 7f 02 	sts	0x027F, r30
    1114:	3e c0       	rjmp	.+124    	; 0x1192 <free+0x118>
    1116:	d9 01       	movw	r26, r18
    1118:	13 96       	adiw	r26, 0x03	; 3
    111a:	fc 93       	st	X, r31
    111c:	ee 93       	st	-X, r30
    111e:	12 97       	sbiw	r26, 0x02	; 2
    1120:	4d 91       	ld	r20, X+
    1122:	5d 91       	ld	r21, X+
    1124:	a4 0f       	add	r26, r20
    1126:	b5 1f       	adc	r27, r21
    1128:	ea 17       	cp	r30, r26
    112a:	fb 07       	cpc	r31, r27
    112c:	79 f4       	brne	.+30     	; 0x114c <free+0xd2>
    112e:	80 81       	ld	r24, Z
    1130:	91 81       	ldd	r25, Z+1	; 0x01
    1132:	84 0f       	add	r24, r20
    1134:	95 1f       	adc	r25, r21
    1136:	02 96       	adiw	r24, 0x02	; 2
    1138:	d9 01       	movw	r26, r18
    113a:	11 96       	adiw	r26, 0x01	; 1
    113c:	9c 93       	st	X, r25
    113e:	8e 93       	st	-X, r24
    1140:	82 81       	ldd	r24, Z+2	; 0x02
    1142:	93 81       	ldd	r25, Z+3	; 0x03
    1144:	13 96       	adiw	r26, 0x03	; 3
    1146:	9c 93       	st	X, r25
    1148:	8e 93       	st	-X, r24
    114a:	12 97       	sbiw	r26, 0x02	; 2
    114c:	e0 e0       	ldi	r30, 0x00	; 0
    114e:	f0 e0       	ldi	r31, 0x00	; 0
    1150:	8a 81       	ldd	r24, Y+2	; 0x02
    1152:	9b 81       	ldd	r25, Y+3	; 0x03
    1154:	00 97       	sbiw	r24, 0x00	; 0
    1156:	19 f0       	breq	.+6      	; 0x115e <free+0xe4>
    1158:	fe 01       	movw	r30, r28
    115a:	ec 01       	movw	r28, r24
    115c:	f9 cf       	rjmp	.-14     	; 0x1150 <free+0xd6>
    115e:	ce 01       	movw	r24, r28
    1160:	02 96       	adiw	r24, 0x02	; 2
    1162:	28 81       	ld	r18, Y
    1164:	39 81       	ldd	r19, Y+1	; 0x01
    1166:	82 0f       	add	r24, r18
    1168:	93 1f       	adc	r25, r19
    116a:	20 91 7d 02 	lds	r18, 0x027D
    116e:	30 91 7e 02 	lds	r19, 0x027E
    1172:	28 17       	cp	r18, r24
    1174:	39 07       	cpc	r19, r25
    1176:	69 f4       	brne	.+26     	; 0x1192 <free+0x118>
    1178:	30 97       	sbiw	r30, 0x00	; 0
    117a:	29 f4       	brne	.+10     	; 0x1186 <free+0x10c>
    117c:	10 92 80 02 	sts	0x0280, r1
    1180:	10 92 7f 02 	sts	0x027F, r1
    1184:	02 c0       	rjmp	.+4      	; 0x118a <free+0x110>
    1186:	13 82       	std	Z+3, r1	; 0x03
    1188:	12 82       	std	Z+2, r1	; 0x02
    118a:	d0 93 7e 02 	sts	0x027E, r29
    118e:	c0 93 7d 02 	sts	0x027D, r28
    1192:	df 91       	pop	r29
    1194:	cf 91       	pop	r28
    1196:	08 95       	ret

00001198 <do_rand>:
    1198:	8f 92       	push	r8
    119a:	9f 92       	push	r9
    119c:	af 92       	push	r10
    119e:	bf 92       	push	r11
    11a0:	cf 92       	push	r12
    11a2:	df 92       	push	r13
    11a4:	ef 92       	push	r14
    11a6:	ff 92       	push	r15
    11a8:	cf 93       	push	r28
    11aa:	df 93       	push	r29
    11ac:	ec 01       	movw	r28, r24
    11ae:	68 81       	ld	r22, Y
    11b0:	79 81       	ldd	r23, Y+1	; 0x01
    11b2:	8a 81       	ldd	r24, Y+2	; 0x02
    11b4:	9b 81       	ldd	r25, Y+3	; 0x03
    11b6:	61 15       	cp	r22, r1
    11b8:	71 05       	cpc	r23, r1
    11ba:	81 05       	cpc	r24, r1
    11bc:	91 05       	cpc	r25, r1
    11be:	21 f4       	brne	.+8      	; 0x11c8 <do_rand+0x30>
    11c0:	64 e2       	ldi	r22, 0x24	; 36
    11c2:	79 ed       	ldi	r23, 0xD9	; 217
    11c4:	8b e5       	ldi	r24, 0x5B	; 91
    11c6:	97 e0       	ldi	r25, 0x07	; 7
    11c8:	2d e1       	ldi	r18, 0x1D	; 29
    11ca:	33 ef       	ldi	r19, 0xF3	; 243
    11cc:	41 e0       	ldi	r20, 0x01	; 1
    11ce:	50 e0       	ldi	r21, 0x00	; 0
    11d0:	0e 94 51 0c 	call	0x18a2	; 0x18a2 <__divmodsi4>
    11d4:	49 01       	movw	r8, r18
    11d6:	5a 01       	movw	r10, r20
    11d8:	9b 01       	movw	r18, r22
    11da:	ac 01       	movw	r20, r24
    11dc:	a7 ea       	ldi	r26, 0xA7	; 167
    11de:	b1 e4       	ldi	r27, 0x41	; 65
    11e0:	0e 94 70 0c 	call	0x18e0	; 0x18e0 <__muluhisi3>
    11e4:	6b 01       	movw	r12, r22
    11e6:	7c 01       	movw	r14, r24
    11e8:	ac ee       	ldi	r26, 0xEC	; 236
    11ea:	b4 ef       	ldi	r27, 0xF4	; 244
    11ec:	a5 01       	movw	r20, r10
    11ee:	94 01       	movw	r18, r8
    11f0:	0e 94 7e 0c 	call	0x18fc	; 0x18fc <__mulohisi3>
    11f4:	c6 0e       	add	r12, r22
    11f6:	d7 1e       	adc	r13, r23
    11f8:	e8 1e       	adc	r14, r24
    11fa:	f9 1e       	adc	r15, r25
    11fc:	f7 fe       	sbrs	r15, 7
    11fe:	06 c0       	rjmp	.+12     	; 0x120c <do_rand+0x74>
    1200:	81 e0       	ldi	r24, 0x01	; 1
    1202:	c8 1a       	sub	r12, r24
    1204:	d1 08       	sbc	r13, r1
    1206:	e1 08       	sbc	r14, r1
    1208:	80 e8       	ldi	r24, 0x80	; 128
    120a:	f8 0a       	sbc	r15, r24
    120c:	c8 82       	st	Y, r12
    120e:	d9 82       	std	Y+1, r13	; 0x01
    1210:	ea 82       	std	Y+2, r14	; 0x02
    1212:	fb 82       	std	Y+3, r15	; 0x03
    1214:	c6 01       	movw	r24, r12
    1216:	9f 77       	andi	r25, 0x7F	; 127
    1218:	df 91       	pop	r29
    121a:	cf 91       	pop	r28
    121c:	ff 90       	pop	r15
    121e:	ef 90       	pop	r14
    1220:	df 90       	pop	r13
    1222:	cf 90       	pop	r12
    1224:	bf 90       	pop	r11
    1226:	af 90       	pop	r10
    1228:	9f 90       	pop	r9
    122a:	8f 90       	pop	r8
    122c:	08 95       	ret

0000122e <rand_r>:
    122e:	0e 94 cc 08 	call	0x1198	; 0x1198 <do_rand>
    1232:	08 95       	ret

00001234 <rand>:
    1234:	86 e0       	ldi	r24, 0x06	; 6
    1236:	91 e0       	ldi	r25, 0x01	; 1
    1238:	0e 94 cc 08 	call	0x1198	; 0x1198 <do_rand>
    123c:	08 95       	ret

0000123e <srand>:
    123e:	a0 e0       	ldi	r26, 0x00	; 0
    1240:	b0 e0       	ldi	r27, 0x00	; 0
    1242:	80 93 06 01 	sts	0x0106, r24
    1246:	90 93 07 01 	sts	0x0107, r25
    124a:	a0 93 08 01 	sts	0x0108, r26
    124e:	b0 93 09 01 	sts	0x0109, r27
    1252:	08 95       	ret

00001254 <fdevopen>:
    1254:	0f 93       	push	r16
    1256:	1f 93       	push	r17
    1258:	cf 93       	push	r28
    125a:	df 93       	push	r29
    125c:	ec 01       	movw	r28, r24
    125e:	8b 01       	movw	r16, r22
    1260:	00 97       	sbiw	r24, 0x00	; 0
    1262:	31 f4       	brne	.+12     	; 0x1270 <fdevopen+0x1c>
    1264:	61 15       	cp	r22, r1
    1266:	71 05       	cpc	r23, r1
    1268:	19 f4       	brne	.+6      	; 0x1270 <fdevopen+0x1c>
    126a:	80 e0       	ldi	r24, 0x00	; 0
    126c:	90 e0       	ldi	r25, 0x00	; 0
    126e:	38 c0       	rjmp	.+112    	; 0x12e0 <fdevopen+0x8c>
    1270:	6e e0       	ldi	r22, 0x0E	; 14
    1272:	70 e0       	ldi	r23, 0x00	; 0
    1274:	81 e0       	ldi	r24, 0x01	; 1
    1276:	90 e0       	ldi	r25, 0x00	; 0
    1278:	0e 94 88 0b 	call	0x1710	; 0x1710 <calloc>
    127c:	fc 01       	movw	r30, r24
    127e:	00 97       	sbiw	r24, 0x00	; 0
    1280:	a1 f3       	breq	.-24     	; 0x126a <fdevopen+0x16>
    1282:	80 e8       	ldi	r24, 0x80	; 128
    1284:	83 83       	std	Z+3, r24	; 0x03
    1286:	01 15       	cp	r16, r1
    1288:	11 05       	cpc	r17, r1
    128a:	71 f0       	breq	.+28     	; 0x12a8 <fdevopen+0x54>
    128c:	13 87       	std	Z+11, r17	; 0x0b
    128e:	02 87       	std	Z+10, r16	; 0x0a
    1290:	81 e8       	ldi	r24, 0x81	; 129
    1292:	83 83       	std	Z+3, r24	; 0x03
    1294:	80 91 81 02 	lds	r24, 0x0281
    1298:	90 91 82 02 	lds	r25, 0x0282
    129c:	89 2b       	or	r24, r25
    129e:	21 f4       	brne	.+8      	; 0x12a8 <fdevopen+0x54>
    12a0:	f0 93 82 02 	sts	0x0282, r31
    12a4:	e0 93 81 02 	sts	0x0281, r30
    12a8:	20 97       	sbiw	r28, 0x00	; 0
    12aa:	c9 f0       	breq	.+50     	; 0x12de <fdevopen+0x8a>
    12ac:	d1 87       	std	Z+9, r29	; 0x09
    12ae:	c0 87       	std	Z+8, r28	; 0x08
    12b0:	83 81       	ldd	r24, Z+3	; 0x03
    12b2:	82 60       	ori	r24, 0x02	; 2
    12b4:	83 83       	std	Z+3, r24	; 0x03
    12b6:	80 91 83 02 	lds	r24, 0x0283
    12ba:	90 91 84 02 	lds	r25, 0x0284
    12be:	89 2b       	or	r24, r25
    12c0:	71 f4       	brne	.+28     	; 0x12de <fdevopen+0x8a>
    12c2:	f0 93 84 02 	sts	0x0284, r31
    12c6:	e0 93 83 02 	sts	0x0283, r30
    12ca:	80 91 85 02 	lds	r24, 0x0285
    12ce:	90 91 86 02 	lds	r25, 0x0286
    12d2:	89 2b       	or	r24, r25
    12d4:	21 f4       	brne	.+8      	; 0x12de <fdevopen+0x8a>
    12d6:	f0 93 86 02 	sts	0x0286, r31
    12da:	e0 93 85 02 	sts	0x0285, r30
    12de:	cf 01       	movw	r24, r30
    12e0:	df 91       	pop	r29
    12e2:	cf 91       	pop	r28
    12e4:	1f 91       	pop	r17
    12e6:	0f 91       	pop	r16
    12e8:	08 95       	ret

000012ea <printf>:
    12ea:	a0 e0       	ldi	r26, 0x00	; 0
    12ec:	b0 e0       	ldi	r27, 0x00	; 0
    12ee:	eb e7       	ldi	r30, 0x7B	; 123
    12f0:	f9 e0       	ldi	r31, 0x09	; 9
    12f2:	0c 94 93 0c 	jmp	0x1926	; 0x1926 <__prologue_saves__+0x20>
    12f6:	fe 01       	movw	r30, r28
    12f8:	35 96       	adiw	r30, 0x05	; 5
    12fa:	61 91       	ld	r22, Z+
    12fc:	71 91       	ld	r23, Z+
    12fe:	af 01       	movw	r20, r30
    1300:	80 91 83 02 	lds	r24, 0x0283
    1304:	90 91 84 02 	lds	r25, 0x0284
    1308:	0e 94 b6 09 	call	0x136c	; 0x136c <vfprintf>
    130c:	e2 e0       	ldi	r30, 0x02	; 2
    130e:	0c 94 af 0c 	jmp	0x195e	; 0x195e <__epilogue_restores__+0x20>

00001312 <puts>:
    1312:	0f 93       	push	r16
    1314:	1f 93       	push	r17
    1316:	cf 93       	push	r28
    1318:	df 93       	push	r29
    131a:	e0 91 83 02 	lds	r30, 0x0283
    131e:	f0 91 84 02 	lds	r31, 0x0284
    1322:	23 81       	ldd	r18, Z+3	; 0x03
    1324:	21 ff       	sbrs	r18, 1
    1326:	1b c0       	rjmp	.+54     	; 0x135e <puts+0x4c>
    1328:	ec 01       	movw	r28, r24
    132a:	00 e0       	ldi	r16, 0x00	; 0
    132c:	10 e0       	ldi	r17, 0x00	; 0
    132e:	89 91       	ld	r24, Y+
    1330:	60 91 83 02 	lds	r22, 0x0283
    1334:	70 91 84 02 	lds	r23, 0x0284
    1338:	db 01       	movw	r26, r22
    133a:	18 96       	adiw	r26, 0x08	; 8
    133c:	ed 91       	ld	r30, X+
    133e:	fc 91       	ld	r31, X
    1340:	19 97       	sbiw	r26, 0x09	; 9
    1342:	88 23       	and	r24, r24
    1344:	31 f0       	breq	.+12     	; 0x1352 <puts+0x40>
    1346:	09 95       	icall
    1348:	89 2b       	or	r24, r25
    134a:	89 f3       	breq	.-30     	; 0x132e <puts+0x1c>
    134c:	0f ef       	ldi	r16, 0xFF	; 255
    134e:	1f ef       	ldi	r17, 0xFF	; 255
    1350:	ee cf       	rjmp	.-36     	; 0x132e <puts+0x1c>
    1352:	8a e0       	ldi	r24, 0x0A	; 10
    1354:	09 95       	icall
    1356:	89 2b       	or	r24, r25
    1358:	11 f4       	brne	.+4      	; 0x135e <puts+0x4c>
    135a:	c8 01       	movw	r24, r16
    135c:	02 c0       	rjmp	.+4      	; 0x1362 <puts+0x50>
    135e:	8f ef       	ldi	r24, 0xFF	; 255
    1360:	9f ef       	ldi	r25, 0xFF	; 255
    1362:	df 91       	pop	r29
    1364:	cf 91       	pop	r28
    1366:	1f 91       	pop	r17
    1368:	0f 91       	pop	r16
    136a:	08 95       	ret

0000136c <vfprintf>:
    136c:	ac e0       	ldi	r26, 0x0C	; 12
    136e:	b0 e0       	ldi	r27, 0x00	; 0
    1370:	ec eb       	ldi	r30, 0xBC	; 188
    1372:	f9 e0       	ldi	r31, 0x09	; 9
    1374:	0c 94 83 0c 	jmp	0x1906	; 0x1906 <__prologue_saves__>
    1378:	7c 01       	movw	r14, r24
    137a:	6b 01       	movw	r12, r22
    137c:	8a 01       	movw	r16, r20
    137e:	fc 01       	movw	r30, r24
    1380:	17 82       	std	Z+7, r1	; 0x07
    1382:	16 82       	std	Z+6, r1	; 0x06
    1384:	83 81       	ldd	r24, Z+3	; 0x03
    1386:	81 ff       	sbrs	r24, 1
    1388:	bd c1       	rjmp	.+890    	; 0x1704 <vfprintf+0x398>
    138a:	ce 01       	movw	r24, r28
    138c:	01 96       	adiw	r24, 0x01	; 1
    138e:	4c 01       	movw	r8, r24
    1390:	f7 01       	movw	r30, r14
    1392:	93 81       	ldd	r25, Z+3	; 0x03
    1394:	f6 01       	movw	r30, r12
    1396:	93 fd       	sbrc	r25, 3
    1398:	85 91       	lpm	r24, Z+
    139a:	93 ff       	sbrs	r25, 3
    139c:	81 91       	ld	r24, Z+
    139e:	6f 01       	movw	r12, r30
    13a0:	88 23       	and	r24, r24
    13a2:	09 f4       	brne	.+2      	; 0x13a6 <vfprintf+0x3a>
    13a4:	ab c1       	rjmp	.+854    	; 0x16fc <vfprintf+0x390>
    13a6:	85 32       	cpi	r24, 0x25	; 37
    13a8:	39 f4       	brne	.+14     	; 0x13b8 <vfprintf+0x4c>
    13aa:	93 fd       	sbrc	r25, 3
    13ac:	85 91       	lpm	r24, Z+
    13ae:	93 ff       	sbrs	r25, 3
    13b0:	81 91       	ld	r24, Z+
    13b2:	6f 01       	movw	r12, r30
    13b4:	85 32       	cpi	r24, 0x25	; 37
    13b6:	29 f4       	brne	.+10     	; 0x13c2 <vfprintf+0x56>
    13b8:	b7 01       	movw	r22, r14
    13ba:	90 e0       	ldi	r25, 0x00	; 0
    13bc:	0e 94 c1 0b 	call	0x1782	; 0x1782 <fputc>
    13c0:	e7 cf       	rjmp	.-50     	; 0x1390 <vfprintf+0x24>
    13c2:	51 2c       	mov	r5, r1
    13c4:	31 2c       	mov	r3, r1
    13c6:	20 e0       	ldi	r18, 0x00	; 0
    13c8:	20 32       	cpi	r18, 0x20	; 32
    13ca:	a0 f4       	brcc	.+40     	; 0x13f4 <vfprintf+0x88>
    13cc:	8b 32       	cpi	r24, 0x2B	; 43
    13ce:	69 f0       	breq	.+26     	; 0x13ea <vfprintf+0x7e>
    13d0:	30 f4       	brcc	.+12     	; 0x13de <vfprintf+0x72>
    13d2:	80 32       	cpi	r24, 0x20	; 32
    13d4:	59 f0       	breq	.+22     	; 0x13ec <vfprintf+0x80>
    13d6:	83 32       	cpi	r24, 0x23	; 35
    13d8:	69 f4       	brne	.+26     	; 0x13f4 <vfprintf+0x88>
    13da:	20 61       	ori	r18, 0x10	; 16
    13dc:	2c c0       	rjmp	.+88     	; 0x1436 <vfprintf+0xca>
    13de:	8d 32       	cpi	r24, 0x2D	; 45
    13e0:	39 f0       	breq	.+14     	; 0x13f0 <vfprintf+0x84>
    13e2:	80 33       	cpi	r24, 0x30	; 48
    13e4:	39 f4       	brne	.+14     	; 0x13f4 <vfprintf+0x88>
    13e6:	21 60       	ori	r18, 0x01	; 1
    13e8:	26 c0       	rjmp	.+76     	; 0x1436 <vfprintf+0xca>
    13ea:	22 60       	ori	r18, 0x02	; 2
    13ec:	24 60       	ori	r18, 0x04	; 4
    13ee:	23 c0       	rjmp	.+70     	; 0x1436 <vfprintf+0xca>
    13f0:	28 60       	ori	r18, 0x08	; 8
    13f2:	21 c0       	rjmp	.+66     	; 0x1436 <vfprintf+0xca>
    13f4:	27 fd       	sbrc	r18, 7
    13f6:	27 c0       	rjmp	.+78     	; 0x1446 <vfprintf+0xda>
    13f8:	30 ed       	ldi	r19, 0xD0	; 208
    13fa:	38 0f       	add	r19, r24
    13fc:	3a 30       	cpi	r19, 0x0A	; 10
    13fe:	78 f4       	brcc	.+30     	; 0x141e <vfprintf+0xb2>
    1400:	26 ff       	sbrs	r18, 6
    1402:	06 c0       	rjmp	.+12     	; 0x1410 <vfprintf+0xa4>
    1404:	fa e0       	ldi	r31, 0x0A	; 10
    1406:	5f 9e       	mul	r5, r31
    1408:	30 0d       	add	r19, r0
    140a:	11 24       	eor	r1, r1
    140c:	53 2e       	mov	r5, r19
    140e:	13 c0       	rjmp	.+38     	; 0x1436 <vfprintf+0xca>
    1410:	8a e0       	ldi	r24, 0x0A	; 10
    1412:	38 9e       	mul	r3, r24
    1414:	30 0d       	add	r19, r0
    1416:	11 24       	eor	r1, r1
    1418:	33 2e       	mov	r3, r19
    141a:	20 62       	ori	r18, 0x20	; 32
    141c:	0c c0       	rjmp	.+24     	; 0x1436 <vfprintf+0xca>
    141e:	8e 32       	cpi	r24, 0x2E	; 46
    1420:	21 f4       	brne	.+8      	; 0x142a <vfprintf+0xbe>
    1422:	26 fd       	sbrc	r18, 6
    1424:	6b c1       	rjmp	.+726    	; 0x16fc <vfprintf+0x390>
    1426:	20 64       	ori	r18, 0x40	; 64
    1428:	06 c0       	rjmp	.+12     	; 0x1436 <vfprintf+0xca>
    142a:	8c 36       	cpi	r24, 0x6C	; 108
    142c:	11 f4       	brne	.+4      	; 0x1432 <vfprintf+0xc6>
    142e:	20 68       	ori	r18, 0x80	; 128
    1430:	02 c0       	rjmp	.+4      	; 0x1436 <vfprintf+0xca>
    1432:	88 36       	cpi	r24, 0x68	; 104
    1434:	41 f4       	brne	.+16     	; 0x1446 <vfprintf+0xda>
    1436:	f6 01       	movw	r30, r12
    1438:	93 fd       	sbrc	r25, 3
    143a:	85 91       	lpm	r24, Z+
    143c:	93 ff       	sbrs	r25, 3
    143e:	81 91       	ld	r24, Z+
    1440:	6f 01       	movw	r12, r30
    1442:	81 11       	cpse	r24, r1
    1444:	c1 cf       	rjmp	.-126    	; 0x13c8 <vfprintf+0x5c>
    1446:	98 2f       	mov	r25, r24
    1448:	9f 7d       	andi	r25, 0xDF	; 223
    144a:	95 54       	subi	r25, 0x45	; 69
    144c:	93 30       	cpi	r25, 0x03	; 3
    144e:	28 f4       	brcc	.+10     	; 0x145a <vfprintf+0xee>
    1450:	0c 5f       	subi	r16, 0xFC	; 252
    1452:	1f 4f       	sbci	r17, 0xFF	; 255
    1454:	ff e3       	ldi	r31, 0x3F	; 63
    1456:	f9 83       	std	Y+1, r31	; 0x01
    1458:	0d c0       	rjmp	.+26     	; 0x1474 <vfprintf+0x108>
    145a:	83 36       	cpi	r24, 0x63	; 99
    145c:	31 f0       	breq	.+12     	; 0x146a <vfprintf+0xfe>
    145e:	83 37       	cpi	r24, 0x73	; 115
    1460:	71 f0       	breq	.+28     	; 0x147e <vfprintf+0x112>
    1462:	83 35       	cpi	r24, 0x53	; 83
    1464:	09 f0       	breq	.+2      	; 0x1468 <vfprintf+0xfc>
    1466:	5b c0       	rjmp	.+182    	; 0x151e <vfprintf+0x1b2>
    1468:	22 c0       	rjmp	.+68     	; 0x14ae <vfprintf+0x142>
    146a:	f8 01       	movw	r30, r16
    146c:	80 81       	ld	r24, Z
    146e:	89 83       	std	Y+1, r24	; 0x01
    1470:	0e 5f       	subi	r16, 0xFE	; 254
    1472:	1f 4f       	sbci	r17, 0xFF	; 255
    1474:	44 24       	eor	r4, r4
    1476:	43 94       	inc	r4
    1478:	51 2c       	mov	r5, r1
    147a:	54 01       	movw	r10, r8
    147c:	15 c0       	rjmp	.+42     	; 0x14a8 <vfprintf+0x13c>
    147e:	38 01       	movw	r6, r16
    1480:	f2 e0       	ldi	r31, 0x02	; 2
    1482:	6f 0e       	add	r6, r31
    1484:	71 1c       	adc	r7, r1
    1486:	f8 01       	movw	r30, r16
    1488:	a0 80       	ld	r10, Z
    148a:	b1 80       	ldd	r11, Z+1	; 0x01
    148c:	26 ff       	sbrs	r18, 6
    148e:	03 c0       	rjmp	.+6      	; 0x1496 <vfprintf+0x12a>
    1490:	65 2d       	mov	r22, r5
    1492:	70 e0       	ldi	r23, 0x00	; 0
    1494:	02 c0       	rjmp	.+4      	; 0x149a <vfprintf+0x12e>
    1496:	6f ef       	ldi	r22, 0xFF	; 255
    1498:	7f ef       	ldi	r23, 0xFF	; 255
    149a:	c5 01       	movw	r24, r10
    149c:	2c 87       	std	Y+12, r18	; 0x0c
    149e:	0e 94 b6 0b 	call	0x176c	; 0x176c <strnlen>
    14a2:	2c 01       	movw	r4, r24
    14a4:	83 01       	movw	r16, r6
    14a6:	2c 85       	ldd	r18, Y+12	; 0x0c
    14a8:	2f 77       	andi	r18, 0x7F	; 127
    14aa:	22 2e       	mov	r2, r18
    14ac:	17 c0       	rjmp	.+46     	; 0x14dc <vfprintf+0x170>
    14ae:	38 01       	movw	r6, r16
    14b0:	f2 e0       	ldi	r31, 0x02	; 2
    14b2:	6f 0e       	add	r6, r31
    14b4:	71 1c       	adc	r7, r1
    14b6:	f8 01       	movw	r30, r16
    14b8:	a0 80       	ld	r10, Z
    14ba:	b1 80       	ldd	r11, Z+1	; 0x01
    14bc:	26 ff       	sbrs	r18, 6
    14be:	03 c0       	rjmp	.+6      	; 0x14c6 <vfprintf+0x15a>
    14c0:	65 2d       	mov	r22, r5
    14c2:	70 e0       	ldi	r23, 0x00	; 0
    14c4:	02 c0       	rjmp	.+4      	; 0x14ca <vfprintf+0x15e>
    14c6:	6f ef       	ldi	r22, 0xFF	; 255
    14c8:	7f ef       	ldi	r23, 0xFF	; 255
    14ca:	c5 01       	movw	r24, r10
    14cc:	2c 87       	std	Y+12, r18	; 0x0c
    14ce:	0e 94 a4 0b 	call	0x1748	; 0x1748 <strnlen_P>
    14d2:	2c 01       	movw	r4, r24
    14d4:	2c 85       	ldd	r18, Y+12	; 0x0c
    14d6:	20 68       	ori	r18, 0x80	; 128
    14d8:	22 2e       	mov	r2, r18
    14da:	83 01       	movw	r16, r6
    14dc:	23 fc       	sbrc	r2, 3
    14de:	1b c0       	rjmp	.+54     	; 0x1516 <vfprintf+0x1aa>
    14e0:	83 2d       	mov	r24, r3
    14e2:	90 e0       	ldi	r25, 0x00	; 0
    14e4:	48 16       	cp	r4, r24
    14e6:	59 06       	cpc	r5, r25
    14e8:	b0 f4       	brcc	.+44     	; 0x1516 <vfprintf+0x1aa>
    14ea:	b7 01       	movw	r22, r14
    14ec:	80 e2       	ldi	r24, 0x20	; 32
    14ee:	90 e0       	ldi	r25, 0x00	; 0
    14f0:	0e 94 c1 0b 	call	0x1782	; 0x1782 <fputc>
    14f4:	3a 94       	dec	r3
    14f6:	f4 cf       	rjmp	.-24     	; 0x14e0 <vfprintf+0x174>
    14f8:	f5 01       	movw	r30, r10
    14fa:	27 fc       	sbrc	r2, 7
    14fc:	85 91       	lpm	r24, Z+
    14fe:	27 fe       	sbrs	r2, 7
    1500:	81 91       	ld	r24, Z+
    1502:	5f 01       	movw	r10, r30
    1504:	b7 01       	movw	r22, r14
    1506:	90 e0       	ldi	r25, 0x00	; 0
    1508:	0e 94 c1 0b 	call	0x1782	; 0x1782 <fputc>
    150c:	31 10       	cpse	r3, r1
    150e:	3a 94       	dec	r3
    1510:	f1 e0       	ldi	r31, 0x01	; 1
    1512:	4f 1a       	sub	r4, r31
    1514:	51 08       	sbc	r5, r1
    1516:	41 14       	cp	r4, r1
    1518:	51 04       	cpc	r5, r1
    151a:	71 f7       	brne	.-36     	; 0x14f8 <vfprintf+0x18c>
    151c:	e5 c0       	rjmp	.+458    	; 0x16e8 <vfprintf+0x37c>
    151e:	84 36       	cpi	r24, 0x64	; 100
    1520:	11 f0       	breq	.+4      	; 0x1526 <vfprintf+0x1ba>
    1522:	89 36       	cpi	r24, 0x69	; 105
    1524:	39 f5       	brne	.+78     	; 0x1574 <vfprintf+0x208>
    1526:	f8 01       	movw	r30, r16
    1528:	27 ff       	sbrs	r18, 7
    152a:	07 c0       	rjmp	.+14     	; 0x153a <vfprintf+0x1ce>
    152c:	60 81       	ld	r22, Z
    152e:	71 81       	ldd	r23, Z+1	; 0x01
    1530:	82 81       	ldd	r24, Z+2	; 0x02
    1532:	93 81       	ldd	r25, Z+3	; 0x03
    1534:	0c 5f       	subi	r16, 0xFC	; 252
    1536:	1f 4f       	sbci	r17, 0xFF	; 255
    1538:	08 c0       	rjmp	.+16     	; 0x154a <vfprintf+0x1de>
    153a:	60 81       	ld	r22, Z
    153c:	71 81       	ldd	r23, Z+1	; 0x01
    153e:	88 27       	eor	r24, r24
    1540:	77 fd       	sbrc	r23, 7
    1542:	80 95       	com	r24
    1544:	98 2f       	mov	r25, r24
    1546:	0e 5f       	subi	r16, 0xFE	; 254
    1548:	1f 4f       	sbci	r17, 0xFF	; 255
    154a:	2f 76       	andi	r18, 0x6F	; 111
    154c:	b2 2e       	mov	r11, r18
    154e:	97 ff       	sbrs	r25, 7
    1550:	09 c0       	rjmp	.+18     	; 0x1564 <vfprintf+0x1f8>
    1552:	90 95       	com	r25
    1554:	80 95       	com	r24
    1556:	70 95       	com	r23
    1558:	61 95       	neg	r22
    155a:	7f 4f       	sbci	r23, 0xFF	; 255
    155c:	8f 4f       	sbci	r24, 0xFF	; 255
    155e:	9f 4f       	sbci	r25, 0xFF	; 255
    1560:	20 68       	ori	r18, 0x80	; 128
    1562:	b2 2e       	mov	r11, r18
    1564:	2a e0       	ldi	r18, 0x0A	; 10
    1566:	30 e0       	ldi	r19, 0x00	; 0
    1568:	a4 01       	movw	r20, r8
    156a:	0e 94 f3 0b 	call	0x17e6	; 0x17e6 <__ultoa_invert>
    156e:	a8 2e       	mov	r10, r24
    1570:	a8 18       	sub	r10, r8
    1572:	44 c0       	rjmp	.+136    	; 0x15fc <vfprintf+0x290>
    1574:	85 37       	cpi	r24, 0x75	; 117
    1576:	29 f4       	brne	.+10     	; 0x1582 <vfprintf+0x216>
    1578:	2f 7e       	andi	r18, 0xEF	; 239
    157a:	b2 2e       	mov	r11, r18
    157c:	2a e0       	ldi	r18, 0x0A	; 10
    157e:	30 e0       	ldi	r19, 0x00	; 0
    1580:	25 c0       	rjmp	.+74     	; 0x15cc <vfprintf+0x260>
    1582:	f2 2f       	mov	r31, r18
    1584:	f9 7f       	andi	r31, 0xF9	; 249
    1586:	bf 2e       	mov	r11, r31
    1588:	8f 36       	cpi	r24, 0x6F	; 111
    158a:	c1 f0       	breq	.+48     	; 0x15bc <vfprintf+0x250>
    158c:	18 f4       	brcc	.+6      	; 0x1594 <vfprintf+0x228>
    158e:	88 35       	cpi	r24, 0x58	; 88
    1590:	79 f0       	breq	.+30     	; 0x15b0 <vfprintf+0x244>
    1592:	b4 c0       	rjmp	.+360    	; 0x16fc <vfprintf+0x390>
    1594:	80 37       	cpi	r24, 0x70	; 112
    1596:	19 f0       	breq	.+6      	; 0x159e <vfprintf+0x232>
    1598:	88 37       	cpi	r24, 0x78	; 120
    159a:	21 f0       	breq	.+8      	; 0x15a4 <vfprintf+0x238>
    159c:	af c0       	rjmp	.+350    	; 0x16fc <vfprintf+0x390>
    159e:	2f 2f       	mov	r18, r31
    15a0:	20 61       	ori	r18, 0x10	; 16
    15a2:	b2 2e       	mov	r11, r18
    15a4:	b4 fe       	sbrs	r11, 4
    15a6:	0d c0       	rjmp	.+26     	; 0x15c2 <vfprintf+0x256>
    15a8:	8b 2d       	mov	r24, r11
    15aa:	84 60       	ori	r24, 0x04	; 4
    15ac:	b8 2e       	mov	r11, r24
    15ae:	09 c0       	rjmp	.+18     	; 0x15c2 <vfprintf+0x256>
    15b0:	24 ff       	sbrs	r18, 4
    15b2:	0a c0       	rjmp	.+20     	; 0x15c8 <vfprintf+0x25c>
    15b4:	9f 2f       	mov	r25, r31
    15b6:	96 60       	ori	r25, 0x06	; 6
    15b8:	b9 2e       	mov	r11, r25
    15ba:	06 c0       	rjmp	.+12     	; 0x15c8 <vfprintf+0x25c>
    15bc:	28 e0       	ldi	r18, 0x08	; 8
    15be:	30 e0       	ldi	r19, 0x00	; 0
    15c0:	05 c0       	rjmp	.+10     	; 0x15cc <vfprintf+0x260>
    15c2:	20 e1       	ldi	r18, 0x10	; 16
    15c4:	30 e0       	ldi	r19, 0x00	; 0
    15c6:	02 c0       	rjmp	.+4      	; 0x15cc <vfprintf+0x260>
    15c8:	20 e1       	ldi	r18, 0x10	; 16
    15ca:	32 e0       	ldi	r19, 0x02	; 2
    15cc:	f8 01       	movw	r30, r16
    15ce:	b7 fe       	sbrs	r11, 7
    15d0:	07 c0       	rjmp	.+14     	; 0x15e0 <vfprintf+0x274>
    15d2:	60 81       	ld	r22, Z
    15d4:	71 81       	ldd	r23, Z+1	; 0x01
    15d6:	82 81       	ldd	r24, Z+2	; 0x02
    15d8:	93 81       	ldd	r25, Z+3	; 0x03
    15da:	0c 5f       	subi	r16, 0xFC	; 252
    15dc:	1f 4f       	sbci	r17, 0xFF	; 255
    15de:	06 c0       	rjmp	.+12     	; 0x15ec <vfprintf+0x280>
    15e0:	60 81       	ld	r22, Z
    15e2:	71 81       	ldd	r23, Z+1	; 0x01
    15e4:	80 e0       	ldi	r24, 0x00	; 0
    15e6:	90 e0       	ldi	r25, 0x00	; 0
    15e8:	0e 5f       	subi	r16, 0xFE	; 254
    15ea:	1f 4f       	sbci	r17, 0xFF	; 255
    15ec:	a4 01       	movw	r20, r8
    15ee:	0e 94 f3 0b 	call	0x17e6	; 0x17e6 <__ultoa_invert>
    15f2:	a8 2e       	mov	r10, r24
    15f4:	a8 18       	sub	r10, r8
    15f6:	fb 2d       	mov	r31, r11
    15f8:	ff 77       	andi	r31, 0x7F	; 127
    15fa:	bf 2e       	mov	r11, r31
    15fc:	b6 fe       	sbrs	r11, 6
    15fe:	0b c0       	rjmp	.+22     	; 0x1616 <vfprintf+0x2aa>
    1600:	2b 2d       	mov	r18, r11
    1602:	2e 7f       	andi	r18, 0xFE	; 254
    1604:	a5 14       	cp	r10, r5
    1606:	50 f4       	brcc	.+20     	; 0x161c <vfprintf+0x2b0>
    1608:	b4 fe       	sbrs	r11, 4
    160a:	0a c0       	rjmp	.+20     	; 0x1620 <vfprintf+0x2b4>
    160c:	b2 fc       	sbrc	r11, 2
    160e:	08 c0       	rjmp	.+16     	; 0x1620 <vfprintf+0x2b4>
    1610:	2b 2d       	mov	r18, r11
    1612:	2e 7e       	andi	r18, 0xEE	; 238
    1614:	05 c0       	rjmp	.+10     	; 0x1620 <vfprintf+0x2b4>
    1616:	7a 2c       	mov	r7, r10
    1618:	2b 2d       	mov	r18, r11
    161a:	03 c0       	rjmp	.+6      	; 0x1622 <vfprintf+0x2b6>
    161c:	7a 2c       	mov	r7, r10
    161e:	01 c0       	rjmp	.+2      	; 0x1622 <vfprintf+0x2b6>
    1620:	75 2c       	mov	r7, r5
    1622:	24 ff       	sbrs	r18, 4
    1624:	0d c0       	rjmp	.+26     	; 0x1640 <vfprintf+0x2d4>
    1626:	fe 01       	movw	r30, r28
    1628:	ea 0d       	add	r30, r10
    162a:	f1 1d       	adc	r31, r1
    162c:	80 81       	ld	r24, Z
    162e:	80 33       	cpi	r24, 0x30	; 48
    1630:	11 f4       	brne	.+4      	; 0x1636 <vfprintf+0x2ca>
    1632:	29 7e       	andi	r18, 0xE9	; 233
    1634:	09 c0       	rjmp	.+18     	; 0x1648 <vfprintf+0x2dc>
    1636:	22 ff       	sbrs	r18, 2
    1638:	06 c0       	rjmp	.+12     	; 0x1646 <vfprintf+0x2da>
    163a:	73 94       	inc	r7
    163c:	73 94       	inc	r7
    163e:	04 c0       	rjmp	.+8      	; 0x1648 <vfprintf+0x2dc>
    1640:	82 2f       	mov	r24, r18
    1642:	86 78       	andi	r24, 0x86	; 134
    1644:	09 f0       	breq	.+2      	; 0x1648 <vfprintf+0x2dc>
    1646:	73 94       	inc	r7
    1648:	23 fd       	sbrc	r18, 3
    164a:	13 c0       	rjmp	.+38     	; 0x1672 <vfprintf+0x306>
    164c:	20 ff       	sbrs	r18, 0
    164e:	06 c0       	rjmp	.+12     	; 0x165c <vfprintf+0x2f0>
    1650:	5a 2c       	mov	r5, r10
    1652:	73 14       	cp	r7, r3
    1654:	18 f4       	brcc	.+6      	; 0x165c <vfprintf+0x2f0>
    1656:	53 0c       	add	r5, r3
    1658:	57 18       	sub	r5, r7
    165a:	73 2c       	mov	r7, r3
    165c:	73 14       	cp	r7, r3
    165e:	68 f4       	brcc	.+26     	; 0x167a <vfprintf+0x30e>
    1660:	b7 01       	movw	r22, r14
    1662:	80 e2       	ldi	r24, 0x20	; 32
    1664:	90 e0       	ldi	r25, 0x00	; 0
    1666:	2c 87       	std	Y+12, r18	; 0x0c
    1668:	0e 94 c1 0b 	call	0x1782	; 0x1782 <fputc>
    166c:	73 94       	inc	r7
    166e:	2c 85       	ldd	r18, Y+12	; 0x0c
    1670:	f5 cf       	rjmp	.-22     	; 0x165c <vfprintf+0x2f0>
    1672:	73 14       	cp	r7, r3
    1674:	10 f4       	brcc	.+4      	; 0x167a <vfprintf+0x30e>
    1676:	37 18       	sub	r3, r7
    1678:	01 c0       	rjmp	.+2      	; 0x167c <vfprintf+0x310>
    167a:	31 2c       	mov	r3, r1
    167c:	24 ff       	sbrs	r18, 4
    167e:	12 c0       	rjmp	.+36     	; 0x16a4 <vfprintf+0x338>
    1680:	b7 01       	movw	r22, r14
    1682:	80 e3       	ldi	r24, 0x30	; 48
    1684:	90 e0       	ldi	r25, 0x00	; 0
    1686:	2c 87       	std	Y+12, r18	; 0x0c
    1688:	0e 94 c1 0b 	call	0x1782	; 0x1782 <fputc>
    168c:	2c 85       	ldd	r18, Y+12	; 0x0c
    168e:	22 ff       	sbrs	r18, 2
    1690:	17 c0       	rjmp	.+46     	; 0x16c0 <vfprintf+0x354>
    1692:	21 ff       	sbrs	r18, 1
    1694:	03 c0       	rjmp	.+6      	; 0x169c <vfprintf+0x330>
    1696:	88 e5       	ldi	r24, 0x58	; 88
    1698:	90 e0       	ldi	r25, 0x00	; 0
    169a:	02 c0       	rjmp	.+4      	; 0x16a0 <vfprintf+0x334>
    169c:	88 e7       	ldi	r24, 0x78	; 120
    169e:	90 e0       	ldi	r25, 0x00	; 0
    16a0:	b7 01       	movw	r22, r14
    16a2:	0c c0       	rjmp	.+24     	; 0x16bc <vfprintf+0x350>
    16a4:	82 2f       	mov	r24, r18
    16a6:	86 78       	andi	r24, 0x86	; 134
    16a8:	59 f0       	breq	.+22     	; 0x16c0 <vfprintf+0x354>
    16aa:	21 fd       	sbrc	r18, 1
    16ac:	02 c0       	rjmp	.+4      	; 0x16b2 <vfprintf+0x346>
    16ae:	80 e2       	ldi	r24, 0x20	; 32
    16b0:	01 c0       	rjmp	.+2      	; 0x16b4 <vfprintf+0x348>
    16b2:	8b e2       	ldi	r24, 0x2B	; 43
    16b4:	27 fd       	sbrc	r18, 7
    16b6:	8d e2       	ldi	r24, 0x2D	; 45
    16b8:	b7 01       	movw	r22, r14
    16ba:	90 e0       	ldi	r25, 0x00	; 0
    16bc:	0e 94 c1 0b 	call	0x1782	; 0x1782 <fputc>
    16c0:	a5 14       	cp	r10, r5
    16c2:	38 f4       	brcc	.+14     	; 0x16d2 <vfprintf+0x366>
    16c4:	b7 01       	movw	r22, r14
    16c6:	80 e3       	ldi	r24, 0x30	; 48
    16c8:	90 e0       	ldi	r25, 0x00	; 0
    16ca:	0e 94 c1 0b 	call	0x1782	; 0x1782 <fputc>
    16ce:	5a 94       	dec	r5
    16d0:	f7 cf       	rjmp	.-18     	; 0x16c0 <vfprintf+0x354>
    16d2:	aa 94       	dec	r10
    16d4:	f4 01       	movw	r30, r8
    16d6:	ea 0d       	add	r30, r10
    16d8:	f1 1d       	adc	r31, r1
    16da:	80 81       	ld	r24, Z
    16dc:	b7 01       	movw	r22, r14
    16de:	90 e0       	ldi	r25, 0x00	; 0
    16e0:	0e 94 c1 0b 	call	0x1782	; 0x1782 <fputc>
    16e4:	a1 10       	cpse	r10, r1
    16e6:	f5 cf       	rjmp	.-22     	; 0x16d2 <vfprintf+0x366>
    16e8:	33 20       	and	r3, r3
    16ea:	09 f4       	brne	.+2      	; 0x16ee <vfprintf+0x382>
    16ec:	51 ce       	rjmp	.-862    	; 0x1390 <vfprintf+0x24>
    16ee:	b7 01       	movw	r22, r14
    16f0:	80 e2       	ldi	r24, 0x20	; 32
    16f2:	90 e0       	ldi	r25, 0x00	; 0
    16f4:	0e 94 c1 0b 	call	0x1782	; 0x1782 <fputc>
    16f8:	3a 94       	dec	r3
    16fa:	f6 cf       	rjmp	.-20     	; 0x16e8 <vfprintf+0x37c>
    16fc:	f7 01       	movw	r30, r14
    16fe:	86 81       	ldd	r24, Z+6	; 0x06
    1700:	97 81       	ldd	r25, Z+7	; 0x07
    1702:	02 c0       	rjmp	.+4      	; 0x1708 <vfprintf+0x39c>
    1704:	8f ef       	ldi	r24, 0xFF	; 255
    1706:	9f ef       	ldi	r25, 0xFF	; 255
    1708:	2c 96       	adiw	r28, 0x0c	; 12
    170a:	e2 e1       	ldi	r30, 0x12	; 18
    170c:	0c 94 9f 0c 	jmp	0x193e	; 0x193e <__epilogue_restores__>

00001710 <calloc>:
    1710:	0f 93       	push	r16
    1712:	1f 93       	push	r17
    1714:	cf 93       	push	r28
    1716:	df 93       	push	r29
    1718:	86 9f       	mul	r24, r22
    171a:	80 01       	movw	r16, r0
    171c:	87 9f       	mul	r24, r23
    171e:	10 0d       	add	r17, r0
    1720:	96 9f       	mul	r25, r22
    1722:	10 0d       	add	r17, r0
    1724:	11 24       	eor	r1, r1
    1726:	c8 01       	movw	r24, r16
    1728:	0e 94 a5 07 	call	0xf4a	; 0xf4a <malloc>
    172c:	ec 01       	movw	r28, r24
    172e:	00 97       	sbiw	r24, 0x00	; 0
    1730:	29 f0       	breq	.+10     	; 0x173c <calloc+0x2c>
    1732:	a8 01       	movw	r20, r16
    1734:	60 e0       	ldi	r22, 0x00	; 0
    1736:	70 e0       	ldi	r23, 0x00	; 0
    1738:	0e 94 af 0b 	call	0x175e	; 0x175e <memset>
    173c:	ce 01       	movw	r24, r28
    173e:	df 91       	pop	r29
    1740:	cf 91       	pop	r28
    1742:	1f 91       	pop	r17
    1744:	0f 91       	pop	r16
    1746:	08 95       	ret

00001748 <strnlen_P>:
    1748:	fc 01       	movw	r30, r24
    174a:	05 90       	lpm	r0, Z+
    174c:	61 50       	subi	r22, 0x01	; 1
    174e:	70 40       	sbci	r23, 0x00	; 0
    1750:	01 10       	cpse	r0, r1
    1752:	d8 f7       	brcc	.-10     	; 0x174a <strnlen_P+0x2>
    1754:	80 95       	com	r24
    1756:	90 95       	com	r25
    1758:	8e 0f       	add	r24, r30
    175a:	9f 1f       	adc	r25, r31
    175c:	08 95       	ret

0000175e <memset>:
    175e:	dc 01       	movw	r26, r24
    1760:	01 c0       	rjmp	.+2      	; 0x1764 <memset+0x6>
    1762:	6d 93       	st	X+, r22
    1764:	41 50       	subi	r20, 0x01	; 1
    1766:	50 40       	sbci	r21, 0x00	; 0
    1768:	e0 f7       	brcc	.-8      	; 0x1762 <memset+0x4>
    176a:	08 95       	ret

0000176c <strnlen>:
    176c:	fc 01       	movw	r30, r24
    176e:	61 50       	subi	r22, 0x01	; 1
    1770:	70 40       	sbci	r23, 0x00	; 0
    1772:	01 90       	ld	r0, Z+
    1774:	01 10       	cpse	r0, r1
    1776:	d8 f7       	brcc	.-10     	; 0x176e <strnlen+0x2>
    1778:	80 95       	com	r24
    177a:	90 95       	com	r25
    177c:	8e 0f       	add	r24, r30
    177e:	9f 1f       	adc	r25, r31
    1780:	08 95       	ret

00001782 <fputc>:
    1782:	0f 93       	push	r16
    1784:	1f 93       	push	r17
    1786:	cf 93       	push	r28
    1788:	df 93       	push	r29
    178a:	18 2f       	mov	r17, r24
    178c:	09 2f       	mov	r16, r25
    178e:	eb 01       	movw	r28, r22
    1790:	8b 81       	ldd	r24, Y+3	; 0x03
    1792:	81 fd       	sbrc	r24, 1
    1794:	03 c0       	rjmp	.+6      	; 0x179c <fputc+0x1a>
    1796:	8f ef       	ldi	r24, 0xFF	; 255
    1798:	9f ef       	ldi	r25, 0xFF	; 255
    179a:	20 c0       	rjmp	.+64     	; 0x17dc <fputc+0x5a>
    179c:	82 ff       	sbrs	r24, 2
    179e:	10 c0       	rjmp	.+32     	; 0x17c0 <fputc+0x3e>
    17a0:	4e 81       	ldd	r20, Y+6	; 0x06
    17a2:	5f 81       	ldd	r21, Y+7	; 0x07
    17a4:	2c 81       	ldd	r18, Y+4	; 0x04
    17a6:	3d 81       	ldd	r19, Y+5	; 0x05
    17a8:	42 17       	cp	r20, r18
    17aa:	53 07       	cpc	r21, r19
    17ac:	7c f4       	brge	.+30     	; 0x17cc <fputc+0x4a>
    17ae:	e8 81       	ld	r30, Y
    17b0:	f9 81       	ldd	r31, Y+1	; 0x01
    17b2:	9f 01       	movw	r18, r30
    17b4:	2f 5f       	subi	r18, 0xFF	; 255
    17b6:	3f 4f       	sbci	r19, 0xFF	; 255
    17b8:	39 83       	std	Y+1, r19	; 0x01
    17ba:	28 83       	st	Y, r18
    17bc:	10 83       	st	Z, r17
    17be:	06 c0       	rjmp	.+12     	; 0x17cc <fputc+0x4a>
    17c0:	e8 85       	ldd	r30, Y+8	; 0x08
    17c2:	f9 85       	ldd	r31, Y+9	; 0x09
    17c4:	81 2f       	mov	r24, r17
    17c6:	09 95       	icall
    17c8:	89 2b       	or	r24, r25
    17ca:	29 f7       	brne	.-54     	; 0x1796 <fputc+0x14>
    17cc:	2e 81       	ldd	r18, Y+6	; 0x06
    17ce:	3f 81       	ldd	r19, Y+7	; 0x07
    17d0:	2f 5f       	subi	r18, 0xFF	; 255
    17d2:	3f 4f       	sbci	r19, 0xFF	; 255
    17d4:	3f 83       	std	Y+7, r19	; 0x07
    17d6:	2e 83       	std	Y+6, r18	; 0x06
    17d8:	81 2f       	mov	r24, r17
    17da:	90 2f       	mov	r25, r16
    17dc:	df 91       	pop	r29
    17de:	cf 91       	pop	r28
    17e0:	1f 91       	pop	r17
    17e2:	0f 91       	pop	r16
    17e4:	08 95       	ret

000017e6 <__ultoa_invert>:
    17e6:	fa 01       	movw	r30, r20
    17e8:	aa 27       	eor	r26, r26
    17ea:	28 30       	cpi	r18, 0x08	; 8
    17ec:	51 f1       	breq	.+84     	; 0x1842 <__ultoa_invert+0x5c>
    17ee:	20 31       	cpi	r18, 0x10	; 16
    17f0:	81 f1       	breq	.+96     	; 0x1852 <__ultoa_invert+0x6c>
    17f2:	e8 94       	clt
    17f4:	6f 93       	push	r22
    17f6:	6e 7f       	andi	r22, 0xFE	; 254
    17f8:	6e 5f       	subi	r22, 0xFE	; 254
    17fa:	7f 4f       	sbci	r23, 0xFF	; 255
    17fc:	8f 4f       	sbci	r24, 0xFF	; 255
    17fe:	9f 4f       	sbci	r25, 0xFF	; 255
    1800:	af 4f       	sbci	r26, 0xFF	; 255
    1802:	b1 e0       	ldi	r27, 0x01	; 1
    1804:	3e d0       	rcall	.+124    	; 0x1882 <__ultoa_invert+0x9c>
    1806:	b4 e0       	ldi	r27, 0x04	; 4
    1808:	3c d0       	rcall	.+120    	; 0x1882 <__ultoa_invert+0x9c>
    180a:	67 0f       	add	r22, r23
    180c:	78 1f       	adc	r23, r24
    180e:	89 1f       	adc	r24, r25
    1810:	9a 1f       	adc	r25, r26
    1812:	a1 1d       	adc	r26, r1
    1814:	68 0f       	add	r22, r24
    1816:	79 1f       	adc	r23, r25
    1818:	8a 1f       	adc	r24, r26
    181a:	91 1d       	adc	r25, r1
    181c:	a1 1d       	adc	r26, r1
    181e:	6a 0f       	add	r22, r26
    1820:	71 1d       	adc	r23, r1
    1822:	81 1d       	adc	r24, r1
    1824:	91 1d       	adc	r25, r1
    1826:	a1 1d       	adc	r26, r1
    1828:	20 d0       	rcall	.+64     	; 0x186a <__ultoa_invert+0x84>
    182a:	09 f4       	brne	.+2      	; 0x182e <__ultoa_invert+0x48>
    182c:	68 94       	set
    182e:	3f 91       	pop	r19
    1830:	2a e0       	ldi	r18, 0x0A	; 10
    1832:	26 9f       	mul	r18, r22
    1834:	11 24       	eor	r1, r1
    1836:	30 19       	sub	r19, r0
    1838:	30 5d       	subi	r19, 0xD0	; 208
    183a:	31 93       	st	Z+, r19
    183c:	de f6       	brtc	.-74     	; 0x17f4 <__ultoa_invert+0xe>
    183e:	cf 01       	movw	r24, r30
    1840:	08 95       	ret
    1842:	46 2f       	mov	r20, r22
    1844:	47 70       	andi	r20, 0x07	; 7
    1846:	40 5d       	subi	r20, 0xD0	; 208
    1848:	41 93       	st	Z+, r20
    184a:	b3 e0       	ldi	r27, 0x03	; 3
    184c:	0f d0       	rcall	.+30     	; 0x186c <__ultoa_invert+0x86>
    184e:	c9 f7       	brne	.-14     	; 0x1842 <__ultoa_invert+0x5c>
    1850:	f6 cf       	rjmp	.-20     	; 0x183e <__ultoa_invert+0x58>
    1852:	46 2f       	mov	r20, r22
    1854:	4f 70       	andi	r20, 0x0F	; 15
    1856:	40 5d       	subi	r20, 0xD0	; 208
    1858:	4a 33       	cpi	r20, 0x3A	; 58
    185a:	18 f0       	brcs	.+6      	; 0x1862 <__ultoa_invert+0x7c>
    185c:	49 5d       	subi	r20, 0xD9	; 217
    185e:	31 fd       	sbrc	r19, 1
    1860:	40 52       	subi	r20, 0x20	; 32
    1862:	41 93       	st	Z+, r20
    1864:	02 d0       	rcall	.+4      	; 0x186a <__ultoa_invert+0x84>
    1866:	a9 f7       	brne	.-22     	; 0x1852 <__ultoa_invert+0x6c>
    1868:	ea cf       	rjmp	.-44     	; 0x183e <__ultoa_invert+0x58>
    186a:	b4 e0       	ldi	r27, 0x04	; 4
    186c:	a6 95       	lsr	r26
    186e:	97 95       	ror	r25
    1870:	87 95       	ror	r24
    1872:	77 95       	ror	r23
    1874:	67 95       	ror	r22
    1876:	ba 95       	dec	r27
    1878:	c9 f7       	brne	.-14     	; 0x186c <__ultoa_invert+0x86>
    187a:	00 97       	sbiw	r24, 0x00	; 0
    187c:	61 05       	cpc	r22, r1
    187e:	71 05       	cpc	r23, r1
    1880:	08 95       	ret
    1882:	9b 01       	movw	r18, r22
    1884:	ac 01       	movw	r20, r24
    1886:	0a 2e       	mov	r0, r26
    1888:	06 94       	lsr	r0
    188a:	57 95       	ror	r21
    188c:	47 95       	ror	r20
    188e:	37 95       	ror	r19
    1890:	27 95       	ror	r18
    1892:	ba 95       	dec	r27
    1894:	c9 f7       	brne	.-14     	; 0x1888 <__ultoa_invert+0xa2>
    1896:	62 0f       	add	r22, r18
    1898:	73 1f       	adc	r23, r19
    189a:	84 1f       	adc	r24, r20
    189c:	95 1f       	adc	r25, r21
    189e:	a0 1d       	adc	r26, r0
    18a0:	08 95       	ret

000018a2 <__divmodsi4>:
    18a2:	05 2e       	mov	r0, r21
    18a4:	97 fb       	bst	r25, 7
    18a6:	1e f4       	brtc	.+6      	; 0x18ae <__divmodsi4+0xc>
    18a8:	00 94       	com	r0
    18aa:	0e 94 68 0c 	call	0x18d0	; 0x18d0 <__negsi2>
    18ae:	57 fd       	sbrc	r21, 7
    18b0:	07 d0       	rcall	.+14     	; 0x18c0 <__divmodsi4_neg2>
    18b2:	0e 94 ba 0c 	call	0x1974	; 0x1974 <__udivmodsi4>
    18b6:	07 fc       	sbrc	r0, 7
    18b8:	03 d0       	rcall	.+6      	; 0x18c0 <__divmodsi4_neg2>
    18ba:	4e f4       	brtc	.+18     	; 0x18ce <__divmodsi4_exit>
    18bc:	0c 94 68 0c 	jmp	0x18d0	; 0x18d0 <__negsi2>

000018c0 <__divmodsi4_neg2>:
    18c0:	50 95       	com	r21
    18c2:	40 95       	com	r20
    18c4:	30 95       	com	r19
    18c6:	21 95       	neg	r18
    18c8:	3f 4f       	sbci	r19, 0xFF	; 255
    18ca:	4f 4f       	sbci	r20, 0xFF	; 255
    18cc:	5f 4f       	sbci	r21, 0xFF	; 255

000018ce <__divmodsi4_exit>:
    18ce:	08 95       	ret

000018d0 <__negsi2>:
    18d0:	90 95       	com	r25
    18d2:	80 95       	com	r24
    18d4:	70 95       	com	r23
    18d6:	61 95       	neg	r22
    18d8:	7f 4f       	sbci	r23, 0xFF	; 255
    18da:	8f 4f       	sbci	r24, 0xFF	; 255
    18dc:	9f 4f       	sbci	r25, 0xFF	; 255
    18de:	08 95       	ret

000018e0 <__muluhisi3>:
    18e0:	0e 94 dc 0c 	call	0x19b8	; 0x19b8 <__umulhisi3>
    18e4:	a5 9f       	mul	r26, r21
    18e6:	90 0d       	add	r25, r0
    18e8:	b4 9f       	mul	r27, r20
    18ea:	90 0d       	add	r25, r0
    18ec:	a4 9f       	mul	r26, r20
    18ee:	80 0d       	add	r24, r0
    18f0:	91 1d       	adc	r25, r1
    18f2:	11 24       	eor	r1, r1
    18f4:	08 95       	ret

000018f6 <__mulshisi3>:
    18f6:	b7 ff       	sbrs	r27, 7
    18f8:	0c 94 70 0c 	jmp	0x18e0	; 0x18e0 <__muluhisi3>

000018fc <__mulohisi3>:
    18fc:	0e 94 70 0c 	call	0x18e0	; 0x18e0 <__muluhisi3>
    1900:	82 1b       	sub	r24, r18
    1902:	93 0b       	sbc	r25, r19
    1904:	08 95       	ret

00001906 <__prologue_saves__>:
    1906:	2f 92       	push	r2
    1908:	3f 92       	push	r3
    190a:	4f 92       	push	r4
    190c:	5f 92       	push	r5
    190e:	6f 92       	push	r6
    1910:	7f 92       	push	r7
    1912:	8f 92       	push	r8
    1914:	9f 92       	push	r9
    1916:	af 92       	push	r10
    1918:	bf 92       	push	r11
    191a:	cf 92       	push	r12
    191c:	df 92       	push	r13
    191e:	ef 92       	push	r14
    1920:	ff 92       	push	r15
    1922:	0f 93       	push	r16
    1924:	1f 93       	push	r17
    1926:	cf 93       	push	r28
    1928:	df 93       	push	r29
    192a:	cd b7       	in	r28, 0x3d	; 61
    192c:	de b7       	in	r29, 0x3e	; 62
    192e:	ca 1b       	sub	r28, r26
    1930:	db 0b       	sbc	r29, r27
    1932:	0f b6       	in	r0, 0x3f	; 63
    1934:	f8 94       	cli
    1936:	de bf       	out	0x3e, r29	; 62
    1938:	0f be       	out	0x3f, r0	; 63
    193a:	cd bf       	out	0x3d, r28	; 61
    193c:	09 94       	ijmp

0000193e <__epilogue_restores__>:
    193e:	2a 88       	ldd	r2, Y+18	; 0x12
    1940:	39 88       	ldd	r3, Y+17	; 0x11
    1942:	48 88       	ldd	r4, Y+16	; 0x10
    1944:	5f 84       	ldd	r5, Y+15	; 0x0f
    1946:	6e 84       	ldd	r6, Y+14	; 0x0e
    1948:	7d 84       	ldd	r7, Y+13	; 0x0d
    194a:	8c 84       	ldd	r8, Y+12	; 0x0c
    194c:	9b 84       	ldd	r9, Y+11	; 0x0b
    194e:	aa 84       	ldd	r10, Y+10	; 0x0a
    1950:	b9 84       	ldd	r11, Y+9	; 0x09
    1952:	c8 84       	ldd	r12, Y+8	; 0x08
    1954:	df 80       	ldd	r13, Y+7	; 0x07
    1956:	ee 80       	ldd	r14, Y+6	; 0x06
    1958:	fd 80       	ldd	r15, Y+5	; 0x05
    195a:	0c 81       	ldd	r16, Y+4	; 0x04
    195c:	1b 81       	ldd	r17, Y+3	; 0x03
    195e:	aa 81       	ldd	r26, Y+2	; 0x02
    1960:	b9 81       	ldd	r27, Y+1	; 0x01
    1962:	ce 0f       	add	r28, r30
    1964:	d1 1d       	adc	r29, r1
    1966:	0f b6       	in	r0, 0x3f	; 63
    1968:	f8 94       	cli
    196a:	de bf       	out	0x3e, r29	; 62
    196c:	0f be       	out	0x3f, r0	; 63
    196e:	cd bf       	out	0x3d, r28	; 61
    1970:	ed 01       	movw	r28, r26
    1972:	08 95       	ret

00001974 <__udivmodsi4>:
    1974:	a1 e2       	ldi	r26, 0x21	; 33
    1976:	1a 2e       	mov	r1, r26
    1978:	aa 1b       	sub	r26, r26
    197a:	bb 1b       	sub	r27, r27
    197c:	fd 01       	movw	r30, r26
    197e:	0d c0       	rjmp	.+26     	; 0x199a <__udivmodsi4_ep>

00001980 <__udivmodsi4_loop>:
    1980:	aa 1f       	adc	r26, r26
    1982:	bb 1f       	adc	r27, r27
    1984:	ee 1f       	adc	r30, r30
    1986:	ff 1f       	adc	r31, r31
    1988:	a2 17       	cp	r26, r18
    198a:	b3 07       	cpc	r27, r19
    198c:	e4 07       	cpc	r30, r20
    198e:	f5 07       	cpc	r31, r21
    1990:	20 f0       	brcs	.+8      	; 0x199a <__udivmodsi4_ep>
    1992:	a2 1b       	sub	r26, r18
    1994:	b3 0b       	sbc	r27, r19
    1996:	e4 0b       	sbc	r30, r20
    1998:	f5 0b       	sbc	r31, r21

0000199a <__udivmodsi4_ep>:
    199a:	66 1f       	adc	r22, r22
    199c:	77 1f       	adc	r23, r23
    199e:	88 1f       	adc	r24, r24
    19a0:	99 1f       	adc	r25, r25
    19a2:	1a 94       	dec	r1
    19a4:	69 f7       	brne	.-38     	; 0x1980 <__udivmodsi4_loop>
    19a6:	60 95       	com	r22
    19a8:	70 95       	com	r23
    19aa:	80 95       	com	r24
    19ac:	90 95       	com	r25
    19ae:	9b 01       	movw	r18, r22
    19b0:	ac 01       	movw	r20, r24
    19b2:	bd 01       	movw	r22, r26
    19b4:	cf 01       	movw	r24, r30
    19b6:	08 95       	ret

000019b8 <__umulhisi3>:
    19b8:	a2 9f       	mul	r26, r18
    19ba:	b0 01       	movw	r22, r0
    19bc:	b3 9f       	mul	r27, r19
    19be:	c0 01       	movw	r24, r0
    19c0:	a3 9f       	mul	r26, r19
    19c2:	70 0d       	add	r23, r0
    19c4:	81 1d       	adc	r24, r1
    19c6:	11 24       	eor	r1, r1
    19c8:	91 1d       	adc	r25, r1
    19ca:	b2 9f       	mul	r27, r18
    19cc:	70 0d       	add	r23, r0
    19ce:	81 1d       	adc	r24, r1
    19d0:	11 24       	eor	r1, r1
    19d2:	91 1d       	adc	r25, r1
    19d4:	08 95       	ret

000019d6 <_exit>:
    19d6:	f8 94       	cli

000019d8 <__stop_program>:
    19d8:	ff cf       	rjmp	.-2      	; 0x19d8 <__stop_program>
