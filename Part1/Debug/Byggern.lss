
Byggern.elf:     file format elf32-avr

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .data         00000214  00800100  00001bba  00001c4e  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  1 .text         00001bba  00000000  00000000  00000094  2**1
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .bss          00000019  00800314  00800314  00001e62  2**0
                  ALLOC
  3 .comment      0000005c  00000000  00000000  00001e62  2**0
                  CONTENTS, READONLY
  4 .debug_aranges 000002b8  00000000  00000000  00001ebe  2**0
                  CONTENTS, READONLY, DEBUGGING
  5 .debug_info   00002eec  00000000  00000000  00002176  2**0
                  CONTENTS, READONLY, DEBUGGING
  6 .debug_abbrev 00001010  00000000  00000000  00005062  2**0
                  CONTENTS, READONLY, DEBUGGING
  7 .debug_line   00000fbb  00000000  00000000  00006072  2**0
                  CONTENTS, READONLY, DEBUGGING
  8 .debug_frame  00000794  00000000  00000000  00007030  2**2
                  CONTENTS, READONLY, DEBUGGING
  9 .debug_str    000009f0  00000000  00000000  000077c4  2**0
                  CONTENTS, READONLY, DEBUGGING
 10 .debug_loc    00001e0b  00000000  00000000  000081b4  2**0
                  CONTENTS, READONLY, DEBUGGING
 11 .debug_ranges 00000280  00000000  00000000  00009fbf  2**0
                  CONTENTS, READONLY, DEBUGGING

Disassembly of section .text:

00000000 <__vectors>:
       0:	0c 94 b4 01 	jmp	0x368	; 0x368 <__ctors_end>
       4:	0c 94 8a 03 	jmp	0x714	; 0x714 <__vector_1>
       8:	0c 94 d3 01 	jmp	0x3a6	; 0x3a6 <__vector_2>
       c:	0c 94 d1 01 	jmp	0x3a2	; 0x3a2 <__bad_interrupt>
      10:	0c 94 d1 01 	jmp	0x3a2	; 0x3a2 <__bad_interrupt>
      14:	0c 94 d1 01 	jmp	0x3a2	; 0x3a2 <__bad_interrupt>
      18:	0c 94 d1 01 	jmp	0x3a2	; 0x3a2 <__bad_interrupt>
      1c:	0c 94 d1 01 	jmp	0x3a2	; 0x3a2 <__bad_interrupt>
      20:	0c 94 d1 01 	jmp	0x3a2	; 0x3a2 <__bad_interrupt>
      24:	0c 94 d1 01 	jmp	0x3a2	; 0x3a2 <__bad_interrupt>
      28:	0c 94 d1 01 	jmp	0x3a2	; 0x3a2 <__bad_interrupt>
      2c:	0c 94 d1 01 	jmp	0x3a2	; 0x3a2 <__bad_interrupt>
      30:	0c 94 d1 01 	jmp	0x3a2	; 0x3a2 <__bad_interrupt>
      34:	0c 94 d1 01 	jmp	0x3a2	; 0x3a2 <__bad_interrupt>
      38:	0c 94 d1 01 	jmp	0x3a2	; 0x3a2 <__bad_interrupt>
      3c:	0c 94 d1 01 	jmp	0x3a2	; 0x3a2 <__bad_interrupt>
      40:	0c 94 d1 01 	jmp	0x3a2	; 0x3a2 <__bad_interrupt>
      44:	0c 94 d1 01 	jmp	0x3a2	; 0x3a2 <__bad_interrupt>
      48:	0c 94 d1 01 	jmp	0x3a2	; 0x3a2 <__bad_interrupt>
      4c:	0c 94 d1 01 	jmp	0x3a2	; 0x3a2 <__bad_interrupt>
      50:	0c 94 d1 01 	jmp	0x3a2	; 0x3a2 <__bad_interrupt>
      54:	0c 94 d1 01 	jmp	0x3a2	; 0x3a2 <__bad_interrupt>
      58:	0c 94 d1 01 	jmp	0x3a2	; 0x3a2 <__bad_interrupt>
      5c:	0c 94 d1 01 	jmp	0x3a2	; 0x3a2 <__bad_interrupt>
      60:	0c 94 d1 01 	jmp	0x3a2	; 0x3a2 <__bad_interrupt>
      64:	0c 94 d1 01 	jmp	0x3a2	; 0x3a2 <__bad_interrupt>
      68:	0c 94 d1 01 	jmp	0x3a2	; 0x3a2 <__bad_interrupt>
      6c:	0c 94 d1 01 	jmp	0x3a2	; 0x3a2 <__bad_interrupt>

00000070 <__trampolines_end>:
	...
      78:	00 06       	cpc	r0, r16
      7a:	5f 5f       	subi	r21, 0xFF	; 255
      7c:	06 00       	.word	0x0006	; ????
      7e:	00 00       	nop
      80:	00 07       	cpc	r16, r16
      82:	07 00       	.word	0x0007	; ????
      84:	07 07       	cpc	r16, r23
      86:	00 00       	nop
      88:	14 7f       	andi	r17, 0xF4	; 244
      8a:	7f 14       	cp	r7, r15
      8c:	7f 7f       	andi	r23, 0xFF	; 255
      8e:	14 00       	.word	0x0014	; ????
      90:	24 2e       	mov	r2, r20
      92:	6b 6b       	ori	r22, 0xBB	; 187
      94:	3a 12       	cpse	r3, r26
      96:	00 00       	nop
      98:	46 66       	ori	r20, 0x66	; 102
      9a:	30 18       	sub	r3, r0
      9c:	0c 66       	ori	r16, 0x6C	; 108
      9e:	62 00       	.word	0x0062	; ????
      a0:	30 7a       	andi	r19, 0xA0	; 160
      a2:	4f 5d       	subi	r20, 0xDF	; 223
      a4:	37 7a       	andi	r19, 0xA7	; 167
      a6:	48 00       	.word	0x0048	; ????
      a8:	04 07       	cpc	r16, r20
      aa:	03 00       	.word	0x0003	; ????
      ac:	00 00       	nop
      ae:	00 00       	nop
      b0:	00 1c       	adc	r0, r0
      b2:	3e 63       	ori	r19, 0x3E	; 62
      b4:	41 00       	.word	0x0041	; ????
      b6:	00 00       	nop
      b8:	00 41       	sbci	r16, 0x10	; 16
      ba:	63 3e       	cpi	r22, 0xE3	; 227
      bc:	1c 00       	.word	0x001c	; ????
      be:	00 00       	nop
      c0:	08 2a       	or	r0, r24
      c2:	3e 1c       	adc	r3, r14
      c4:	1c 3e       	cpi	r17, 0xEC	; 236
      c6:	2a 08       	sbc	r2, r10
      c8:	08 08       	sbc	r0, r8
      ca:	3e 3e       	cpi	r19, 0xEE	; 238
      cc:	08 08       	sbc	r0, r8
      ce:	00 00       	nop
      d0:	00 a0       	ldd	r0, Z+32	; 0x20
      d2:	e0 60       	ori	r30, 0x00	; 0
      d4:	00 00       	nop
      d6:	00 00       	nop
      d8:	08 08       	sbc	r0, r8
      da:	08 08       	sbc	r0, r8
      dc:	08 08       	sbc	r0, r8
      de:	00 00       	nop
      e0:	00 00       	nop
      e2:	60 60       	ori	r22, 0x00	; 0
      e4:	00 00       	nop
      e6:	00 00       	nop
      e8:	60 30       	cpi	r22, 0x00	; 0
      ea:	18 0c       	add	r1, r8
      ec:	06 03       	mulsu	r16, r22
      ee:	01 00       	.word	0x0001	; ????
      f0:	3e 7f       	andi	r19, 0xFE	; 254
      f2:	59 4d       	sbci	r21, 0xD9	; 217
      f4:	7f 3e       	cpi	r23, 0xEF	; 239
      f6:	00 00       	nop
      f8:	42 42       	sbci	r20, 0x22	; 34
      fa:	7f 7f       	andi	r23, 0xFF	; 255
      fc:	40 40       	sbci	r20, 0x00	; 0
      fe:	00 00       	nop
     100:	62 73       	andi	r22, 0x32	; 50
     102:	59 49       	sbci	r21, 0x99	; 153
     104:	6f 66       	ori	r22, 0x6F	; 111
     106:	00 00       	nop
     108:	22 63       	ori	r18, 0x32	; 50
     10a:	49 49       	sbci	r20, 0x99	; 153
     10c:	7f 36       	cpi	r23, 0x6F	; 111
     10e:	00 00       	nop
     110:	18 1c       	adc	r1, r8
     112:	16 13       	cpse	r17, r22
     114:	7f 7f       	andi	r23, 0xFF	; 255
     116:	10 00       	.word	0x0010	; ????
     118:	27 67       	ori	r18, 0x77	; 119
     11a:	45 45       	sbci	r20, 0x55	; 85
     11c:	7d 39       	cpi	r23, 0x9D	; 157
     11e:	00 00       	nop
     120:	3c 7e       	andi	r19, 0xEC	; 236
     122:	4b 49       	sbci	r20, 0x9B	; 155
     124:	79 30       	cpi	r23, 0x09	; 9
     126:	00 00       	nop
     128:	03 63       	ori	r16, 0x33	; 51
     12a:	71 19       	sub	r23, r1
     12c:	0f 07       	cpc	r16, r31
     12e:	00 00       	nop
     130:	36 7f       	andi	r19, 0xF6	; 246
     132:	49 49       	sbci	r20, 0x99	; 153
     134:	7f 36       	cpi	r23, 0x6F	; 111
     136:	00 00       	nop
     138:	06 4f       	sbci	r16, 0xF6	; 246
     13a:	49 69       	ori	r20, 0x99	; 153
     13c:	3f 1e       	adc	r3, r31
     13e:	00 00       	nop
     140:	00 00       	nop
     142:	6c 6c       	ori	r22, 0xCC	; 204
     144:	00 00       	nop
     146:	00 00       	nop
     148:	00 a0       	ldd	r0, Z+32	; 0x20
     14a:	ec 6c       	ori	r30, 0xCC	; 204
     14c:	00 00       	nop
     14e:	00 00       	nop
     150:	08 1c       	adc	r0, r8
     152:	36 63       	ori	r19, 0x36	; 54
     154:	41 00       	.word	0x0041	; ????
     156:	00 00       	nop
     158:	14 14       	cp	r1, r4
     15a:	14 14       	cp	r1, r4
     15c:	14 14       	cp	r1, r4
     15e:	00 00       	nop
     160:	00 41       	sbci	r16, 0x10	; 16
     162:	63 36       	cpi	r22, 0x63	; 99
     164:	1c 08       	sbc	r1, r12
     166:	00 00       	nop
     168:	02 03       	mulsu	r16, r18
     16a:	51 59       	subi	r21, 0x91	; 145
     16c:	0f 06       	cpc	r0, r31
     16e:	00 00       	nop
     170:	3e 7f       	andi	r19, 0xFE	; 254
     172:	41 5d       	subi	r20, 0xD1	; 209
     174:	5d 1f       	adc	r21, r29
     176:	1e 00       	.word	0x001e	; ????
     178:	7c 7e       	andi	r23, 0xEC	; 236
     17a:	13 13       	cpse	r17, r19
     17c:	7e 7c       	andi	r23, 0xCE	; 206
     17e:	00 00       	nop
     180:	41 7f       	andi	r20, 0xF1	; 241
     182:	7f 49       	sbci	r23, 0x9F	; 159
     184:	49 7f       	andi	r20, 0xF9	; 249
     186:	36 00       	.word	0x0036	; ????
     188:	1c 3e       	cpi	r17, 0xEC	; 236
     18a:	63 41       	sbci	r22, 0x13	; 19
     18c:	41 63       	ori	r20, 0x31	; 49
     18e:	22 00       	.word	0x0022	; ????
     190:	41 7f       	andi	r20, 0xF1	; 241
     192:	7f 41       	sbci	r23, 0x1F	; 31
     194:	63 7f       	andi	r22, 0xF3	; 243
     196:	1c 00       	.word	0x001c	; ????
     198:	41 7f       	andi	r20, 0xF1	; 241
     19a:	7f 49       	sbci	r23, 0x9F	; 159
     19c:	5d 41       	sbci	r21, 0x1D	; 29
     19e:	63 00       	.word	0x0063	; ????
     1a0:	41 7f       	andi	r20, 0xF1	; 241
     1a2:	7f 49       	sbci	r23, 0x9F	; 159
     1a4:	1d 01       	movw	r2, r26
     1a6:	03 00       	.word	0x0003	; ????
     1a8:	1c 3e       	cpi	r17, 0xEC	; 236
     1aa:	63 41       	sbci	r22, 0x13	; 19
     1ac:	51 73       	andi	r21, 0x31	; 49
     1ae:	72 00       	.word	0x0072	; ????
     1b0:	7f 7f       	andi	r23, 0xFF	; 255
     1b2:	08 08       	sbc	r0, r8
     1b4:	7f 7f       	andi	r23, 0xFF	; 255
     1b6:	00 00       	nop
     1b8:	00 41       	sbci	r16, 0x10	; 16
     1ba:	7f 7f       	andi	r23, 0xFF	; 255
     1bc:	41 00       	.word	0x0041	; ????
     1be:	00 00       	nop
     1c0:	30 70       	andi	r19, 0x00	; 0
     1c2:	40 41       	sbci	r20, 0x10	; 16
     1c4:	7f 3f       	cpi	r23, 0xFF	; 255
     1c6:	01 00       	.word	0x0001	; ????
     1c8:	41 7f       	andi	r20, 0xF1	; 241
     1ca:	7f 08       	sbc	r7, r15
     1cc:	1c 77       	andi	r17, 0x7C	; 124
     1ce:	63 00       	.word	0x0063	; ????
     1d0:	41 7f       	andi	r20, 0xF1	; 241
     1d2:	7f 41       	sbci	r23, 0x1F	; 31
     1d4:	40 60       	ori	r20, 0x00	; 0
     1d6:	70 00       	.word	0x0070	; ????
     1d8:	7f 7f       	andi	r23, 0xFF	; 255
     1da:	06 0c       	add	r0, r6
     1dc:	06 7f       	andi	r16, 0xF6	; 246
     1de:	7f 00       	.word	0x007f	; ????
     1e0:	7f 7f       	andi	r23, 0xFF	; 255
     1e2:	06 0c       	add	r0, r6
     1e4:	18 7f       	andi	r17, 0xF8	; 248
     1e6:	7f 00       	.word	0x007f	; ????
     1e8:	1c 3e       	cpi	r17, 0xEC	; 236
     1ea:	63 41       	sbci	r22, 0x13	; 19
     1ec:	63 3e       	cpi	r22, 0xE3	; 227
     1ee:	1c 00       	.word	0x001c	; ????
     1f0:	41 7f       	andi	r20, 0xF1	; 241
     1f2:	7f 49       	sbci	r23, 0x9F	; 159
     1f4:	09 0f       	add	r16, r25
     1f6:	06 00       	.word	0x0006	; ????
     1f8:	1e 3f       	cpi	r17, 0xFE	; 254
     1fa:	21 71       	andi	r18, 0x11	; 17
     1fc:	7f 5e       	subi	r23, 0xEF	; 239
     1fe:	00 00       	nop
     200:	41 7f       	andi	r20, 0xF1	; 241
     202:	7f 19       	sub	r23, r15
     204:	39 6f       	ori	r19, 0xF9	; 249
     206:	46 00       	.word	0x0046	; ????
     208:	26 67       	ori	r18, 0x76	; 118
     20a:	4d 59       	subi	r20, 0x9D	; 157
     20c:	7b 32       	cpi	r23, 0x2B	; 43
     20e:	00 00       	nop
     210:	03 41       	sbci	r16, 0x13	; 19
     212:	7f 7f       	andi	r23, 0xFF	; 255
     214:	41 03       	mulsu	r20, r17
     216:	00 00       	nop
     218:	7f 7f       	andi	r23, 0xFF	; 255
     21a:	40 40       	sbci	r20, 0x00	; 0
     21c:	7f 7f       	andi	r23, 0xFF	; 255
     21e:	00 00       	nop
     220:	1f 3f       	cpi	r17, 0xFF	; 255
     222:	60 60       	ori	r22, 0x00	; 0
     224:	3f 1f       	adc	r19, r31
     226:	00 00       	nop
     228:	7f 7f       	andi	r23, 0xFF	; 255
     22a:	30 18       	sub	r3, r0
     22c:	30 7f       	andi	r19, 0xF0	; 240
     22e:	7f 00       	.word	0x007f	; ????
     230:	63 77       	andi	r22, 0x73	; 115
     232:	1c 08       	sbc	r1, r12
     234:	1c 77       	andi	r17, 0x7C	; 124
     236:	63 00       	.word	0x0063	; ????
     238:	07 4f       	sbci	r16, 0xF7	; 247
     23a:	78 78       	andi	r23, 0x88	; 136
     23c:	4f 07       	cpc	r20, r31
     23e:	00 00       	nop
     240:	67 73       	andi	r22, 0x37	; 55
     242:	59 4d       	sbci	r21, 0xD9	; 217
     244:	47 63       	ori	r20, 0x37	; 55
     246:	71 00       	.word	0x0071	; ????
     248:	00 7f       	andi	r16, 0xF0	; 240
     24a:	7f 41       	sbci	r23, 0x1F	; 31
     24c:	41 00       	.word	0x0041	; ????
     24e:	00 00       	nop
     250:	01 03       	mulsu	r16, r17
     252:	06 0c       	add	r0, r6
     254:	18 30       	cpi	r17, 0x08	; 8
     256:	60 00       	.word	0x0060	; ????
     258:	00 41       	sbci	r16, 0x10	; 16
     25a:	41 7f       	andi	r20, 0xF1	; 241
     25c:	7f 00       	.word	0x007f	; ????
     25e:	00 00       	nop
     260:	08 0c       	add	r0, r8
     262:	06 03       	mulsu	r16, r22
     264:	06 0c       	add	r0, r6
     266:	08 00       	.word	0x0008	; ????
     268:	80 80       	ld	r8, Z
     26a:	80 80       	ld	r8, Z
     26c:	80 80       	ld	r8, Z
     26e:	80 80       	ld	r8, Z
     270:	00 00       	nop
     272:	03 07       	cpc	r16, r19
     274:	04 00       	.word	0x0004	; ????
     276:	00 00       	nop
     278:	20 74       	andi	r18, 0x40	; 64
     27a:	54 54       	subi	r21, 0x44	; 68
     27c:	3c 78       	andi	r19, 0x8C	; 140
     27e:	40 00       	.word	0x0040	; ????
     280:	41 3f       	cpi	r20, 0xF1	; 241
     282:	7f 44       	sbci	r23, 0x4F	; 79
     284:	44 7c       	andi	r20, 0xC4	; 196
     286:	38 00       	.word	0x0038	; ????
     288:	38 7c       	andi	r19, 0xC8	; 200
     28a:	44 44       	sbci	r20, 0x44	; 68
     28c:	6c 28       	or	r6, r12
     28e:	00 00       	nop
     290:	30 78       	andi	r19, 0x80	; 128
     292:	48 49       	sbci	r20, 0x98	; 152
     294:	3f 7f       	andi	r19, 0xFF	; 255
     296:	40 00       	.word	0x0040	; ????
     298:	38 7c       	andi	r19, 0xC8	; 200
     29a:	54 54       	subi	r21, 0x44	; 68
     29c:	5c 18       	sub	r5, r12
     29e:	00 00       	nop
     2a0:	48 7e       	andi	r20, 0xE8	; 232
     2a2:	7f 49       	sbci	r23, 0x9F	; 159
     2a4:	03 02       	muls	r16, r19
     2a6:	00 00       	nop
     2a8:	98 bc       	out	0x28, r9	; 40
     2aa:	a4 a4       	ldd	r10, Z+44	; 0x2c
     2ac:	f8 7c       	andi	r31, 0xC8	; 200
     2ae:	04 00       	.word	0x0004	; ????
     2b0:	41 7f       	andi	r20, 0xF1	; 241
     2b2:	7f 08       	sbc	r7, r15
     2b4:	04 7c       	andi	r16, 0xC4	; 196
     2b6:	78 00       	.word	0x0078	; ????
     2b8:	00 44       	sbci	r16, 0x40	; 64
     2ba:	7d 7d       	andi	r23, 0xDD	; 221
     2bc:	40 00       	.word	0x0040	; ????
     2be:	00 00       	nop
     2c0:	40 c4       	rjmp	.+2176   	; 0xb42 <Joystick_calibrate+0xe>
     2c2:	84 fd       	sbrc	r24, 4
     2c4:	7d 00       	.word	0x007d	; ????
     2c6:	00 00       	nop
     2c8:	41 7f       	andi	r20, 0xF1	; 241
     2ca:	7f 10       	cpse	r7, r15
     2cc:	38 6c       	ori	r19, 0xC8	; 200
     2ce:	44 00       	.word	0x0044	; ????
     2d0:	00 41       	sbci	r16, 0x10	; 16
     2d2:	7f 7f       	andi	r23, 0xFF	; 255
     2d4:	40 00       	.word	0x0040	; ????
     2d6:	00 00       	nop
     2d8:	7c 7c       	andi	r23, 0xCC	; 204
     2da:	0c 18       	sub	r0, r12
     2dc:	0c 7c       	andi	r16, 0xCC	; 204
     2de:	78 00       	.word	0x0078	; ????
     2e0:	7c 7c       	andi	r23, 0xCC	; 204
     2e2:	04 04       	cpc	r0, r4
     2e4:	7c 78       	andi	r23, 0x8C	; 140
     2e6:	00 00       	nop
     2e8:	38 7c       	andi	r19, 0xC8	; 200
     2ea:	44 44       	sbci	r20, 0x44	; 68
     2ec:	7c 38       	cpi	r23, 0x8C	; 140
     2ee:	00 00       	nop
     2f0:	84 fc       	sbrc	r8, 4
     2f2:	f8 a4       	ldd	r15, Y+40	; 0x28
     2f4:	24 3c       	cpi	r18, 0xC4	; 196
     2f6:	18 00       	.word	0x0018	; ????
     2f8:	18 3c       	cpi	r17, 0xC8	; 200
     2fa:	24 a4       	ldd	r2, Z+44	; 0x2c
     2fc:	f8 fc       	.word	0xfcf8	; ????
     2fe:	84 00       	.word	0x0084	; ????
     300:	44 7c       	andi	r20, 0xC4	; 196
     302:	78 44       	sbci	r23, 0x48	; 72
     304:	1c 18       	sub	r1, r12
     306:	00 00       	nop
     308:	48 5c       	subi	r20, 0xC8	; 200
     30a:	54 54       	subi	r21, 0x44	; 68
     30c:	74 24       	eor	r7, r4
     30e:	00 00       	nop
     310:	00 04       	cpc	r0, r0
     312:	3e 7f       	andi	r19, 0xFE	; 254
     314:	44 24       	eor	r4, r4
     316:	00 00       	nop
     318:	3c 7c       	andi	r19, 0xCC	; 204
     31a:	40 40       	sbci	r20, 0x00	; 0
     31c:	3c 7c       	andi	r19, 0xCC	; 204
     31e:	40 00       	.word	0x0040	; ????
     320:	1c 3c       	cpi	r17, 0xCC	; 204
     322:	60 60       	ori	r22, 0x00	; 0
     324:	3c 1c       	adc	r3, r12
     326:	00 00       	nop
     328:	3c 7c       	andi	r19, 0xCC	; 204
     32a:	60 30       	cpi	r22, 0x00	; 0
     32c:	60 7c       	andi	r22, 0xC0	; 192
     32e:	3c 00       	.word	0x003c	; ????
     330:	44 6c       	ori	r20, 0xC4	; 196
     332:	38 10       	cpse	r3, r8
     334:	38 6c       	ori	r19, 0xC8	; 200
     336:	44 00       	.word	0x0044	; ????
     338:	9c bc       	out	0x2c, r9	; 44
     33a:	a0 a0       	ldd	r10, Z+32	; 0x20
     33c:	fc 7c       	andi	r31, 0xCC	; 204
     33e:	00 00       	nop
     340:	4c 64       	ori	r20, 0x4C	; 76
     342:	74 5c       	subi	r23, 0xC4	; 196
     344:	4c 64       	ori	r20, 0x4C	; 76
     346:	00 00       	nop
     348:	08 08       	sbc	r0, r8
     34a:	3e 77       	andi	r19, 0x7E	; 126
     34c:	41 41       	sbci	r20, 0x11	; 17
     34e:	00 00       	nop
     350:	00 00       	nop
     352:	00 77       	andi	r16, 0x70	; 112
     354:	77 00       	.word	0x0077	; ????
     356:	00 00       	nop
     358:	41 41       	sbci	r20, 0x11	; 17
     35a:	77 3e       	cpi	r23, 0xE7	; 231
     35c:	08 08       	sbc	r0, r8
     35e:	00 00       	nop
     360:	02 03       	mulsu	r16, r18
     362:	01 03       	mulsu	r16, r17
     364:	02 03       	mulsu	r16, r18
     366:	01 00       	.word	0x0001	; ????

00000368 <__ctors_end>:
     368:	11 24       	eor	r1, r1
     36a:	1f be       	out	0x3f, r1	; 63
     36c:	cf ef       	ldi	r28, 0xFF	; 255
     36e:	d4 e0       	ldi	r29, 0x04	; 4
     370:	de bf       	out	0x3e, r29	; 62
     372:	cd bf       	out	0x3d, r28	; 61

00000374 <__do_copy_data>:
     374:	13 e0       	ldi	r17, 0x03	; 3
     376:	a0 e0       	ldi	r26, 0x00	; 0
     378:	b1 e0       	ldi	r27, 0x01	; 1
     37a:	ea eb       	ldi	r30, 0xBA	; 186
     37c:	fb e1       	ldi	r31, 0x1B	; 27
     37e:	02 c0       	rjmp	.+4      	; 0x384 <__do_copy_data+0x10>
     380:	05 90       	lpm	r0, Z+
     382:	0d 92       	st	X+, r0
     384:	a4 31       	cpi	r26, 0x14	; 20
     386:	b1 07       	cpc	r27, r17
     388:	d9 f7       	brne	.-10     	; 0x380 <__do_copy_data+0xc>

0000038a <__do_clear_bss>:
     38a:	23 e0       	ldi	r18, 0x03	; 3
     38c:	a4 e1       	ldi	r26, 0x14	; 20
     38e:	b3 e0       	ldi	r27, 0x03	; 3
     390:	01 c0       	rjmp	.+2      	; 0x394 <.do_clear_bss_start>

00000392 <.do_clear_bss_loop>:
     392:	1d 92       	st	X+, r1

00000394 <.do_clear_bss_start>:
     394:	ad 32       	cpi	r26, 0x2D	; 45
     396:	b2 07       	cpc	r27, r18
     398:	e1 f7       	brne	.-8      	; 0x392 <.do_clear_bss_loop>
     39a:	0e 94 c2 02 	call	0x584	; 0x584 <main>
     39e:	0c 94 db 0d 	jmp	0x1bb6	; 0x1bb6 <_exit>

000003a2 <__bad_interrupt>:
     3a2:	0c 94 00 00 	jmp	0	; 0x0 <__vectors>

000003a6 <__vector_2>:
#endif

volatile char* ext_adc = ADC_ADDRESS;	//Create a pointer to the array of all addresses we will write to. ADC starting at 0x1400.
volatile char ADC_data;

ISR(INT1_vect){
     3a6:	1f 92       	push	r1
     3a8:	0f 92       	push	r0
     3aa:	0f b6       	in	r0, 0x3f	; 63
     3ac:	0f 92       	push	r0
     3ae:	11 24       	eor	r1, r1
     3b0:	8f 93       	push	r24
     3b2:	ef 93       	push	r30
     3b4:	ff 93       	push	r31
	
	ADC_data = ext_adc[0x00];
     3b6:	e0 91 0a 01 	lds	r30, 0x010A
     3ba:	f0 91 0b 01 	lds	r31, 0x010B
     3be:	80 81       	ld	r24, Z
     3c0:	80 93 18 03 	sts	0x0318, r24
}
     3c4:	ff 91       	pop	r31
     3c6:	ef 91       	pop	r30
     3c8:	8f 91       	pop	r24
     3ca:	0f 90       	pop	r0
     3cc:	0f be       	out	0x3f, r0	; 63
     3ce:	0f 90       	pop	r0
     3d0:	1f 90       	pop	r1
     3d2:	18 95       	reti

000003d4 <ADC_init>:
void ADC_init(void){
	
	//INITIALIZE INTERRUPT ON PIN PD3

	// Button input
	clear_bit(DDRD, PD3);
     3d4:	8b 98       	cbi	0x11, 3	; 17
	set_bit(PORTD, PD3);	//Set pull-up resistor
     3d6:	93 9a       	sbi	0x12, 3	; 18
	// Disable global interrupts
	cli();
     3d8:	f8 94       	cli
	// Interrupt on falling edge PD3
	set_bit(MCUCR, ISC11);
     3da:	85 b7       	in	r24, 0x35	; 53
     3dc:	88 60       	ori	r24, 0x08	; 8
     3de:	85 bf       	out	0x35, r24	; 53
	clear_bit(MCUCR, ISC10);
     3e0:	85 b7       	in	r24, 0x35	; 53
     3e2:	8b 7f       	andi	r24, 0xFB	; 251
     3e4:	85 bf       	out	0x35, r24	; 53
	// Enable interrupt on PD3
	set_bit(GICR,INT1);
     3e6:	8b b7       	in	r24, 0x3b	; 59
     3e8:	80 68       	ori	r24, 0x80	; 128
     3ea:	8b bf       	out	0x3b, r24	; 59
	// Enable global interrupts
	sei();
     3ec:	78 94       	sei
     3ee:	08 95       	ret

000003f0 <get_ADC_data>:
}

char get_ADC_data(void){
	return ext_adc[0x00]; //ADC_data;
     3f0:	e0 91 0a 01 	lds	r30, 0x010A
     3f4:	f0 91 0b 01 	lds	r31, 0x010B
     3f8:	80 81       	ld	r24, Z
}
     3fa:	08 95       	ret

000003fc <ADC_start_read>:

void ADC_start_read(ADC_channel channel){
	
	char data = 0x00;
	switch (channel) {
     3fc:	81 30       	cpi	r24, 0x01	; 1
     3fe:	a9 f0       	breq	.+42     	; 0x42a <ADC_start_read+0x2e>
     400:	90 f0       	brcs	.+36     	; 0x426 <ADC_start_read+0x2a>
     402:	82 30       	cpi	r24, 0x02	; 2
     404:	19 f0       	breq	.+6      	; 0x40c <ADC_start_read+0x10>
     406:	83 30       	cpi	r24, 0x03	; 3
     408:	19 f0       	breq	.+6      	; 0x410 <ADC_start_read+0x14>
     40a:	04 c0       	rjmp	.+8      	; 0x414 <ADC_start_read+0x18>
		break;
		case CHANNEL2 :
		data = 0x05;
		break;
		case CHANNEL3 :
		data = 0x06;
     40c:	86 e0       	ldi	r24, 0x06	; 6
		break;
     40e:	0e c0       	rjmp	.+28     	; 0x42c <ADC_start_read+0x30>
		case CHANNEL4 :
		data = 0x07;
     410:	87 e0       	ldi	r24, 0x07	; 7
		break;
     412:	0c c0       	rjmp	.+24     	; 0x42c <ADC_start_read+0x30>
		default:
		printf("Not valid channel");
     414:	80 e3       	ldi	r24, 0x30	; 48
     416:	91 e0       	ldi	r25, 0x01	; 1
     418:	9f 93       	push	r25
     41a:	8f 93       	push	r24
     41c:	0e 94 65 0a 	call	0x14ca	; 0x14ca <printf>
		return EXIT_FAILURE;
     420:	0f 90       	pop	r0
     422:	0f 90       	pop	r0
     424:	08 95       	ret
void ADC_start_read(ADC_channel channel){
	
	char data = 0x00;
	switch (channel) {
		case CHANNEL1 :
		data = 0x04;
     426:	84 e0       	ldi	r24, 0x04	; 4
     428:	01 c0       	rjmp	.+2      	; 0x42c <ADC_start_read+0x30>
		break;
		case CHANNEL2 :
		data = 0x05;
     42a:	85 e0       	ldi	r24, 0x05	; 5
		default:
		printf("Not valid channel");
		return EXIT_FAILURE;
	}
	
	ext_adc[0] = data;
     42c:	e0 91 0a 01 	lds	r30, 0x010A
     430:	f0 91 0b 01 	lds	r31, 0x010B
     434:	80 83       	st	Z, r24
     436:	08 95       	ret

00000438 <My_serial_Transmit>:
}

void My_serial_Transmit( unsigned char data )
{
	/* Wait for empty transmit buffer */
	while ( !( UCSR0A & (1<<UDRE0)) )
     438:	5d 9b       	sbis	0x0b, 5	; 11
     43a:	fe cf       	rjmp	.-4      	; 0x438 <My_serial_Transmit>
	;
	/* Put data into buffer, sends the data */
	UDR0 = data;
     43c:	8c b9       	out	0x0c, r24	; 12
     43e:	08 95       	ret

00000440 <My_serial_Receive>:
}

unsigned char My_serial_Receive( void )
{
	/* Wait for data to be received */
	while ( !(UCSR0A & (1<<RXC0)) );
     440:	5f 9b       	sbis	0x0b, 7	; 11
     442:	fe cf       	rjmp	.-4      	; 0x440 <My_serial_Receive>
	/* Get and return received data from buffer */
	return UDR0;
     444:	8c b1       	in	r24, 0x0c	; 12
     446:	08 95       	ret

00000448 <My_serial_Init>:


void My_serial_Init( unsigned int ubrr )
{
	
	MCUCR |= (1 << SRE);
     448:	25 b7       	in	r18, 0x35	; 53
     44a:	20 68       	ori	r18, 0x80	; 128
     44c:	25 bf       	out	0x35, r18	; 53
	SFIOR |= (1 << XMM2);
     44e:	20 b7       	in	r18, 0x30	; 48
     450:	20 62       	ori	r18, 0x20	; 32
     452:	20 bf       	out	0x30, r18	; 48
	
	/* Set baud rate */
	UBRR0H = (unsigned char)(ubrr>>8);
     454:	90 bd       	out	0x20, r25	; 32
	UBRR0L = (unsigned char)ubrr;
     456:	89 b9       	out	0x09, r24	; 9
	/* Enable receiver and transmitter */
	UCSR0B = (1<<RXEN0)|(1<<TXEN0);
     458:	88 e1       	ldi	r24, 0x18	; 24
     45a:	8a b9       	out	0x0a, r24	; 10
	/* Set frame format: 8data, 2stop bit */
	UCSR0C = (1<<URSEL0)|(1<<USBS0)|(3<<UCSZ00);
     45c:	8e e8       	ldi	r24, 0x8E	; 142
     45e:	80 bd       	out	0x20, r24	; 32
	
	fdevopen(My_serial_Transmit, My_serial_Receive);
     460:	60 e2       	ldi	r22, 0x20	; 32
     462:	72 e0       	ldi	r23, 0x02	; 2
     464:	8c e1       	ldi	r24, 0x1C	; 28
     466:	92 e0       	ldi	r25, 0x02	; 2
     468:	0e 94 1a 0a 	call	0x1434	; 0x1434 <fdevopen>
     46c:	08 95       	ret

0000046e <SRAM_test>:
 * Created: 05.09.2019 12:22:35
 *  Author: oledr
 */ 
#include <stdlib.h>
void SRAM_test(void)
{
     46e:	cf 92       	push	r12
     470:	df 92       	push	r13
     472:	ef 92       	push	r14
     474:	ff 92       	push	r15
     476:	0f 93       	push	r16
     478:	1f 93       	push	r17
     47a:	cf 93       	push	r28
     47c:	df 93       	push	r29
	MCUCR |= (1 << SRE);
     47e:	85 b7       	in	r24, 0x35	; 53
     480:	80 68       	ori	r24, 0x80	; 128
     482:	85 bf       	out	0x35, r24	; 53
	SFIOR |= (1 << XMM2);
     484:	80 b7       	in	r24, 0x30	; 48
     486:	80 62       	ori	r24, 0x20	; 32
     488:	80 bf       	out	0x30, r24	; 48

	volatile char *ext_ram = (char *) 0x1800; // Start address for the SRAM
	uint16_t ext_ram_size = 0x800;
	uint16_t write_errors = 0;
	uint16_t retrieval_errors = 0;
	printf("Starting SRAM test...\r\n");
     48a:	82 e4       	ldi	r24, 0x42	; 66
     48c:	91 e0       	ldi	r25, 0x01	; 1
     48e:	0e 94 79 0a 	call	0x14f2	; 0x14f2 <puts>
	// rand() stores some internal state, so calling this function in a loop will
	// yield different seeds each time (unless srand() is called before this
	//function)
	uint16_t seed = rand();
     492:	0e 94 0a 0a 	call	0x1414	; 0x1414 <rand>
     496:	6c 01       	movw	r12, r24
	// Write phase: Immediately check that the correct value was stored
	srand(seed);
     498:	0e 94 0f 0a 	call	0x141e	; 0x141e <srand>
	for (uint16_t i = 0; i < ext_ram_size; i++) {
     49c:	c0 e0       	ldi	r28, 0x00	; 0
     49e:	d0 e0       	ldi	r29, 0x00	; 0
	MCUCR |= (1 << SRE);
	SFIOR |= (1 << XMM2);

	volatile char *ext_ram = (char *) 0x1800; // Start address for the SRAM
	uint16_t ext_ram_size = 0x800;
	uint16_t write_errors = 0;
     4a0:	00 e0       	ldi	r16, 0x00	; 0
     4a2:	10 e0       	ldi	r17, 0x00	; 0
	for (uint16_t i = 0; i < ext_ram_size; i++) {
		uint8_t some_value = rand();
		ext_ram[i] = some_value;
		uint8_t retreived_value = ext_ram[i];
		if (retreived_value != some_value) {
			printf("Write phase error: ext_ram[%4d] = %02X (should be %02X)\r\n", i, retreived_value, some_value);
     4a4:	0f 2e       	mov	r0, r31
     4a6:	f9 e5       	ldi	r31, 0x59	; 89
     4a8:	ef 2e       	mov	r14, r31
     4aa:	f1 e0       	ldi	r31, 0x01	; 1
     4ac:	ff 2e       	mov	r15, r31
     4ae:	f0 2d       	mov	r31, r0
	//function)
	uint16_t seed = rand();
	// Write phase: Immediately check that the correct value was stored
	srand(seed);
	for (uint16_t i = 0; i < ext_ram_size; i++) {
		uint8_t some_value = rand();
     4b0:	0e 94 0a 0a 	call	0x1414	; 0x1414 <rand>
     4b4:	fe 01       	movw	r30, r28
     4b6:	f8 5e       	subi	r31, 0xE8	; 232
		ext_ram[i] = some_value;
     4b8:	80 83       	st	Z, r24
		uint8_t retreived_value = ext_ram[i];
     4ba:	20 81       	ld	r18, Z
		if (retreived_value != some_value) {
     4bc:	28 17       	cp	r18, r24
     4be:	a9 f0       	breq	.+42     	; 0x4ea <SRAM_test+0x7c>
			printf("Write phase error: ext_ram[%4d] = %02X (should be %02X)\r\n", i, retreived_value, some_value);
     4c0:	99 27       	eor	r25, r25
     4c2:	9f 93       	push	r25
     4c4:	8f 93       	push	r24
     4c6:	1f 92       	push	r1
     4c8:	2f 93       	push	r18
     4ca:	df 93       	push	r29
     4cc:	cf 93       	push	r28
     4ce:	ff 92       	push	r15
     4d0:	ef 92       	push	r14
     4d2:	0e 94 65 0a 	call	0x14ca	; 0x14ca <printf>
			write_errors++;
     4d6:	0f 5f       	subi	r16, 0xFF	; 255
     4d8:	1f 4f       	sbci	r17, 0xFF	; 255
     4da:	8d b7       	in	r24, 0x3d	; 61
     4dc:	9e b7       	in	r25, 0x3e	; 62
     4de:	08 96       	adiw	r24, 0x08	; 8
     4e0:	0f b6       	in	r0, 0x3f	; 63
     4e2:	f8 94       	cli
     4e4:	9e bf       	out	0x3e, r25	; 62
     4e6:	0f be       	out	0x3f, r0	; 63
     4e8:	8d bf       	out	0x3d, r24	; 61
	// yield different seeds each time (unless srand() is called before this
	//function)
	uint16_t seed = rand();
	// Write phase: Immediately check that the correct value was stored
	srand(seed);
	for (uint16_t i = 0; i < ext_ram_size; i++) {
     4ea:	21 96       	adiw	r28, 0x01	; 1
     4ec:	c1 15       	cp	r28, r1
     4ee:	98 e0       	ldi	r25, 0x08	; 8
     4f0:	d9 07       	cpc	r29, r25
     4f2:	f1 f6       	brne	.-68     	; 0x4b0 <SRAM_test+0x42>
			write_errors++;
		}
	}
	// Retrieval phase: Check that no values were changed during or after the write
	//phase
	srand(seed); // reset the PRNG to the state it had before the write phase
     4f4:	c6 01       	movw	r24, r12
     4f6:	0e 94 0f 0a 	call	0x141e	; 0x141e <srand>
	for (uint16_t i = 0; i < ext_ram_size; i++) {
     4fa:	c0 e0       	ldi	r28, 0x00	; 0
     4fc:	d0 e0       	ldi	r29, 0x00	; 0
	SFIOR |= (1 << XMM2);

	volatile char *ext_ram = (char *) 0x1800; // Start address for the SRAM
	uint16_t ext_ram_size = 0x800;
	uint16_t write_errors = 0;
	uint16_t retrieval_errors = 0;
     4fe:	e1 2c       	mov	r14, r1
     500:	f1 2c       	mov	r15, r1
	srand(seed); // reset the PRNG to the state it had before the write phase
	for (uint16_t i = 0; i < ext_ram_size; i++) {
		uint8_t some_value = rand();
		uint8_t retreived_value = ext_ram[i];
		if (retreived_value != some_value) {
			printf("Retrieval phase error: ext_ram[%4d] = %02X (should be %02X)\r\n", i, retreived_value, some_value);
     502:	0f 2e       	mov	r0, r31
     504:	f3 e9       	ldi	r31, 0x93	; 147
     506:	cf 2e       	mov	r12, r31
     508:	f1 e0       	ldi	r31, 0x01	; 1
     50a:	df 2e       	mov	r13, r31
     50c:	f0 2d       	mov	r31, r0
	}
	// Retrieval phase: Check that no values were changed during or after the write
	//phase
	srand(seed); // reset the PRNG to the state it had before the write phase
	for (uint16_t i = 0; i < ext_ram_size; i++) {
		uint8_t some_value = rand();
     50e:	0e 94 0a 0a 	call	0x1414	; 0x1414 <rand>
     512:	fe 01       	movw	r30, r28
     514:	f8 5e       	subi	r31, 0xE8	; 232
		uint8_t retreived_value = ext_ram[i];
     516:	20 81       	ld	r18, Z
		if (retreived_value != some_value) {
     518:	28 17       	cp	r18, r24
     51a:	b1 f0       	breq	.+44     	; 0x548 <__stack+0x49>
			printf("Retrieval phase error: ext_ram[%4d] = %02X (should be %02X)\r\n", i, retreived_value, some_value);
     51c:	99 27       	eor	r25, r25
     51e:	9f 93       	push	r25
     520:	8f 93       	push	r24
     522:	1f 92       	push	r1
     524:	2f 93       	push	r18
     526:	df 93       	push	r29
     528:	cf 93       	push	r28
     52a:	df 92       	push	r13
     52c:	cf 92       	push	r12
     52e:	0e 94 65 0a 	call	0x14ca	; 0x14ca <printf>
			retrieval_errors++;
     532:	8f ef       	ldi	r24, 0xFF	; 255
     534:	e8 1a       	sub	r14, r24
     536:	f8 0a       	sbc	r15, r24
     538:	8d b7       	in	r24, 0x3d	; 61
     53a:	9e b7       	in	r25, 0x3e	; 62
     53c:	08 96       	adiw	r24, 0x08	; 8
     53e:	0f b6       	in	r0, 0x3f	; 63
     540:	f8 94       	cli
     542:	9e bf       	out	0x3e, r25	; 62
     544:	0f be       	out	0x3f, r0	; 63
     546:	8d bf       	out	0x3d, r24	; 61
		}
	}
	// Retrieval phase: Check that no values were changed during or after the write
	//phase
	srand(seed); // reset the PRNG to the state it had before the write phase
	for (uint16_t i = 0; i < ext_ram_size; i++) {
     548:	21 96       	adiw	r28, 0x01	; 1
     54a:	c1 15       	cp	r28, r1
     54c:	98 e0       	ldi	r25, 0x08	; 8
     54e:	d9 07       	cpc	r29, r25
     550:	f1 f6       	brne	.-68     	; 0x50e <__stack+0xf>
		if (retreived_value != some_value) {
			printf("Retrieval phase error: ext_ram[%4d] = %02X (should be %02X)\r\n", i, retreived_value, some_value);
			retrieval_errors++;
		}
	}
	printf("SRAM test completed with \n%4d errors in write phase and \n%4d errors in retrieval phase\r\n\n", write_errors, retrieval_errors);
     552:	ff 92       	push	r15
     554:	ef 92       	push	r14
     556:	1f 93       	push	r17
     558:	0f 93       	push	r16
     55a:	81 ed       	ldi	r24, 0xD1	; 209
     55c:	91 e0       	ldi	r25, 0x01	; 1
     55e:	9f 93       	push	r25
     560:	8f 93       	push	r24
     562:	0e 94 65 0a 	call	0x14ca	; 0x14ca <printf>
     566:	0f 90       	pop	r0
     568:	0f 90       	pop	r0
     56a:	0f 90       	pop	r0
     56c:	0f 90       	pop	r0
     56e:	0f 90       	pop	r0
     570:	0f 90       	pop	r0
     572:	df 91       	pop	r29
     574:	cf 91       	pop	r28
     576:	1f 91       	pop	r17
     578:	0f 91       	pop	r16
     57a:	ff 90       	pop	r15
     57c:	ef 90       	pop	r14
     57e:	df 90       	pop	r13
     580:	cf 90       	pop	r12
     582:	08 95       	ret

00000584 <main>:
#include "oled_driver.h"
#include "oled_menu.h"
#include "CAN_controller_driver.h"
#include "CAN.h"
int main( )
{
     584:	cf 93       	push	r28
     586:	df 93       	push	r29
     588:	cd b7       	in	r28, 0x3d	; 61
     58a:	de b7       	in	r29, 0x3e	; 62
     58c:	e7 97       	sbiw	r28, 0x37	; 55
     58e:	0f b6       	in	r0, 0x3f	; 63
     590:	f8 94       	cli
     592:	de bf       	out	0x3e, r29	; 62
     594:	0f be       	out	0x3f, r0	; 63
     596:	cd bf       	out	0x3d, r28	; 61
	My_serial_Init ( MYUBRR );
     598:	8f e1       	ldi	r24, 0x1F	; 31
     59a:	90 e0       	ldi	r25, 0x00	; 0
     59c:	0e 94 24 02 	call	0x448	; 0x448 <My_serial_Init>
	#else
		//round up by default
		__ticks_dc = (uint32_t)(ceil(fabs(__tmp)));
	#endif

	__builtin_avr_delay_cycles(__ticks_dc);
     5a0:	2f ef       	ldi	r18, 0xFF	; 255
     5a2:	8f ef       	ldi	r24, 0xFF	; 255
     5a4:	9e e0       	ldi	r25, 0x0E	; 14
     5a6:	21 50       	subi	r18, 0x01	; 1
     5a8:	80 40       	sbci	r24, 0x00	; 0
     5aa:	90 40       	sbci	r25, 0x00	; 0
     5ac:	e1 f7       	brne	.-8      	; 0x5a6 <main+0x22>
     5ae:	00 c0       	rjmp	.+0      	; 0x5b0 <main+0x2c>
     5b0:	00 00       	nop
	_delay_ms(1000);
	
	ADC_init();
     5b2:	0e 94 ea 01 	call	0x3d4	; 0x3d4 <ADC_init>
	SRAM_test();
     5b6:	0e 94 37 02 	call	0x46e	; 0x46e <SRAM_test>
	Joystick_calibrate();
     5ba:	0e 94 9a 05 	call	0xb34	; 0xb34 <Joystick_calibrate>
	Joystick position;
	SLI_pos_t sliderposition;
	oled_init();
     5be:	0e 94 12 07 	call	0xe24	; 0xe24 <oled_init>
	menu* mymenu = oled_menu_init();
     5c2:	0e 94 0e 08 	call	0x101c	; 0x101c <oled_menu_init>
	
	can_init(MODE_NORMAL);
     5c6:	80 e0       	ldi	r24, 0x00	; 0
     5c8:	0e 94 9e 03 	call	0x73c	; 0x73c <can_init>
	
	
	uint8_t v[2] = {0};
	printf("Rx0 %d  Rx1  %d \n\r",v[0],v[1]);
     5cc:	1f 92       	push	r1
     5ce:	1f 92       	push	r1
     5d0:	1f 92       	push	r1
     5d2:	1f 92       	push	r1
     5d4:	8b e2       	ldi	r24, 0x2B	; 43
     5d6:	92 e0       	ldi	r25, 0x02	; 2
     5d8:	9f 93       	push	r25
     5da:	8f 93       	push	r24
     5dc:	0e 94 65 0a 	call	0x14ca	; 0x14ca <printf>
     5e0:	0f 90       	pop	r0
     5e2:	0f 90       	pop	r0
     5e4:	0f 90       	pop	r0
     5e6:	0f 90       	pop	r0
     5e8:	0f 90       	pop	r0
     5ea:	0f 90       	pop	r0
			can_message dummy1;
			
			can_message hei;

			can_message test;
			test.id		= 1337;
     5ec:	0f 2e       	mov	r0, r31
     5ee:	f9 e3       	ldi	r31, 0x39	; 57
     5f0:	8f 2e       	mov	r8, r31
     5f2:	f5 e0       	ldi	r31, 0x05	; 5
     5f4:	9f 2e       	mov	r9, r31
     5f6:	f0 2d       	mov	r31, r0
			test.data[0]	= 'H';
     5f8:	0f 2e       	mov	r0, r31
     5fa:	f8 e4       	ldi	r31, 0x48	; 72
     5fc:	6f 2e       	mov	r6, r31
     5fe:	f0 2d       	mov	r31, r0
			test.data[1]	= 'e';
     600:	0f 2e       	mov	r0, r31
     602:	f5 e6       	ldi	r31, 0x65	; 101
     604:	7f 2e       	mov	r7, r31
     606:	f0 2d       	mov	r31, r0
			test.data[3]	= 'l';
			test.data[4]	= 'o';
			test.length	= 5;

			can_message test2;
			test2.id		= 1338;
     608:	0f 2e       	mov	r0, r31
     60a:	fa e3       	ldi	r31, 0x3A	; 58
     60c:	af 2e       	mov	r10, r31
     60e:	f5 e0       	ldi	r31, 0x05	; 5
     610:	bf 2e       	mov	r11, r31
     612:	f0 2d       	mov	r31, r0
			can_message_send(&dummy1);
			if ( can_interrupt()){
				hei = can_handle_messages();
				
				for(int i = 0; i < hei.length ; i++){
					printf(" %c ",hei.data[i]);
     614:	0f 2e       	mov	r0, r31
     616:	fe e3       	ldi	r31, 0x3E	; 62
     618:	ef 2e       	mov	r14, r31
     61a:	f2 e0       	ldi	r31, 0x02	; 2
     61c:	ff 2e       	mov	r15, r31
     61e:	f0 2d       	mov	r31, r0
			can_message dummy1;
			
			can_message hei;

			can_message test;
			test.id		= 1337;
     620:	9d 86       	std	Y+13, r9	; 0x0d
     622:	8c 86       	std	Y+12, r8	; 0x0c
			test.data[0]	= 'H';
     624:	6f 86       	std	Y+15, r6	; 0x0f
			test.data[1]	= 'e';
     626:	78 8a       	std	Y+16, r7	; 0x10
			test.data[2]	= 'l';
     628:	8c e6       	ldi	r24, 0x6C	; 108
     62a:	89 8b       	std	Y+17, r24	; 0x11
			test.data[3]	= 'l';
     62c:	8a 8b       	std	Y+18, r24	; 0x12
			test.data[4]	= 'o';
     62e:	2f e6       	ldi	r18, 0x6F	; 111
     630:	2b 8b       	std	Y+19, r18	; 0x13
			test.length	= 5;
     632:	95 e0       	ldi	r25, 0x05	; 5
     634:	9e 87       	std	Y+14, r25	; 0x0e

			can_message test2;
			test2.id		= 1338;
     636:	ba 82       	std	Y+2, r11	; 0x02
     638:	a9 82       	std	Y+1, r10	; 0x01
			test2.data[0]	= 'W';
     63a:	37 e5       	ldi	r19, 0x57	; 87
     63c:	3c 83       	std	Y+4, r19	; 0x04
			test2.data[1]	= 'o';
     63e:	2d 83       	std	Y+5, r18	; 0x05
			test2.data[2]	= 'r';
     640:	22 e7       	ldi	r18, 0x72	; 114
     642:	2e 83       	std	Y+6, r18	; 0x06
			test2.data[3]	= 'l';
     644:	8f 83       	std	Y+7, r24	; 0x07
			test2.data[4]	= 'd';
     646:	84 e6       	ldi	r24, 0x64	; 100
     648:	88 87       	std	Y+8, r24	; 0x08
			test2.length	= 5;
     64a:	9b 83       	std	Y+3, r25	; 0x03


			can_message_send(&test);
     64c:	ce 01       	movw	r24, r28
     64e:	0c 96       	adiw	r24, 0x0c	; 12
     650:	0e 94 d8 03 	call	0x7b0	; 0x7b0 <can_message_send>

			
			can_message_send(&dummy1);
     654:	ce 01       	movw	r24, r28
     656:	82 96       	adiw	r24, 0x22	; 34
     658:	0e 94 d8 03 	call	0x7b0	; 0x7b0 <can_message_send>
			if ( can_interrupt()){
     65c:	0e 94 b0 03 	call	0x760	; 0x760 <can_interrupt>
     660:	88 23       	and	r24, r24
     662:	09 f1       	breq	.+66     	; 0x6a6 <main+0x122>
				hei = can_handle_messages();
     664:	ce 01       	movw	r24, r28
     666:	47 96       	adiw	r24, 0x17	; 23
     668:	0e 94 8b 04 	call	0x916	; 0x916 <can_handle_messages>
     66c:	89 8d       	ldd	r24, Y+25	; 0x19
				
				for(int i = 0; i < hei.length ; i++){
     66e:	88 23       	and	r24, r24
     670:	b1 f0       	breq	.+44     	; 0x69e <main+0x11a>
     672:	8e 01       	movw	r16, r28
     674:	06 5e       	subi	r16, 0xE6	; 230
     676:	1f 4f       	sbci	r17, 0xFF	; 255
     678:	68 01       	movw	r12, r16
     67a:	c8 0e       	add	r12, r24
     67c:	d1 1c       	adc	r13, r1
					printf(" %c ",hei.data[i]);
     67e:	f8 01       	movw	r30, r16
     680:	81 91       	ld	r24, Z+
     682:	8f 01       	movw	r16, r30
     684:	1f 92       	push	r1
     686:	8f 93       	push	r24
     688:	ff 92       	push	r15
     68a:	ef 92       	push	r14
     68c:	0e 94 65 0a 	call	0x14ca	; 0x14ca <printf>
			
			can_message_send(&dummy1);
			if ( can_interrupt()){
				hei = can_handle_messages();
				
				for(int i = 0; i < hei.length ; i++){
     690:	0f 90       	pop	r0
     692:	0f 90       	pop	r0
     694:	0f 90       	pop	r0
     696:	0f 90       	pop	r0
     698:	0c 15       	cp	r16, r12
     69a:	1d 05       	cpc	r17, r13
     69c:	81 f7       	brne	.-32     	; 0x67e <main+0xfa>
					printf(" %c ",hei.data[i]);
				}
				printf("\r \n");
     69e:	83 e4       	ldi	r24, 0x43	; 67
     6a0:	92 e0       	ldi	r25, 0x02	; 2
     6a2:	0e 94 79 0a 	call	0x14f2	; 0x14f2 <puts>
			}
			can_message_send(&test2);
     6a6:	ce 01       	movw	r24, r28
     6a8:	01 96       	adiw	r24, 0x01	; 1
     6aa:	0e 94 d8 03 	call	0x7b0	; 0x7b0 <can_message_send>
			can_message_send(&dummy1);
     6ae:	ce 01       	movw	r24, r28
     6b0:	82 96       	adiw	r24, 0x22	; 34
     6b2:	0e 94 d8 03 	call	0x7b0	; 0x7b0 <can_message_send>
			if ( can_interrupt()){
     6b6:	0e 94 b0 03 	call	0x760	; 0x760 <can_interrupt>
     6ba:	88 23       	and	r24, r24
     6bc:	09 f1       	breq	.+66     	; 0x700 <main+0x17c>
				dummy = can_handle_messages();
     6be:	ce 01       	movw	r24, r28
     6c0:	8d 96       	adiw	r24, 0x2d	; 45
     6c2:	0e 94 8b 04 	call	0x916	; 0x916 <can_handle_messages>
     6c6:	8f a5       	ldd	r24, Y+47	; 0x2f
				
				for(int i = 0; i < dummy.length ; i++){
     6c8:	88 23       	and	r24, r24
     6ca:	b1 f0       	breq	.+44     	; 0x6f8 <main+0x174>
     6cc:	8e 01       	movw	r16, r28
     6ce:	00 5d       	subi	r16, 0xD0	; 208
     6d0:	1f 4f       	sbci	r17, 0xFF	; 255
     6d2:	68 01       	movw	r12, r16
     6d4:	c8 0e       	add	r12, r24
     6d6:	d1 1c       	adc	r13, r1
					printf(" %c ",dummy.data[i]);
     6d8:	f8 01       	movw	r30, r16
     6da:	81 91       	ld	r24, Z+
     6dc:	8f 01       	movw	r16, r30
     6de:	1f 92       	push	r1
     6e0:	8f 93       	push	r24
     6e2:	ff 92       	push	r15
     6e4:	ef 92       	push	r14
     6e6:	0e 94 65 0a 	call	0x14ca	; 0x14ca <printf>
			can_message_send(&test2);
			can_message_send(&dummy1);
			if ( can_interrupt()){
				dummy = can_handle_messages();
				
				for(int i = 0; i < dummy.length ; i++){
     6ea:	0f 90       	pop	r0
     6ec:	0f 90       	pop	r0
     6ee:	0f 90       	pop	r0
     6f0:	0f 90       	pop	r0
     6f2:	0c 15       	cp	r16, r12
     6f4:	1d 05       	cpc	r17, r13
     6f6:	81 f7       	brne	.-32     	; 0x6d8 <main+0x154>
					printf(" %c ",dummy.data[i]);
				}
				printf("\r \n");
     6f8:	83 e4       	ldi	r24, 0x43	; 67
     6fa:	92 e0       	ldi	r25, 0x02	; 2
     6fc:	0e 94 79 0a 	call	0x14f2	; 0x14f2 <puts>
     700:	ff ef       	ldi	r31, 0xFF	; 255
     702:	2f ef       	ldi	r18, 0xFF	; 255
     704:	8e e0       	ldi	r24, 0x0E	; 14
     706:	f1 50       	subi	r31, 0x01	; 1
     708:	20 40       	sbci	r18, 0x00	; 0
     70a:	80 40       	sbci	r24, 0x00	; 0
     70c:	e1 f7       	brne	.-8      	; 0x706 <main+0x182>
     70e:	00 c0       	rjmp	.+0      	; 0x710 <main+0x18c>
     710:	00 00       	nop
		
		//volatile char *ext_adc = (char *) 0x1400;
		//ext_adc[0] = 0b00000010;
		

	}
     712:	86 cf       	rjmp	.-244    	; 0x620 <main+0x9c>

00000714 <__vector_1>:
#include <avr/delay.h>

volatile int flag = 0;


ISR(INT0_vect){
     714:	1f 92       	push	r1
     716:	0f 92       	push	r0
     718:	0f b6       	in	r0, 0x3f	; 63
     71a:	0f 92       	push	r0
     71c:	11 24       	eor	r1, r1
     71e:	8f 93       	push	r24
     720:	9f 93       	push	r25
	flag = 1;
     722:	81 e0       	ldi	r24, 0x01	; 1
     724:	90 e0       	ldi	r25, 0x00	; 0
     726:	90 93 17 03 	sts	0x0317, r25
     72a:	80 93 16 03 	sts	0x0316, r24
}
     72e:	9f 91       	pop	r25
     730:	8f 91       	pop	r24
     732:	0f 90       	pop	r0
     734:	0f be       	out	0x3f, r0	; 63
     736:	0f 90       	pop	r0
     738:	1f 90       	pop	r1
     73a:	18 95       	reti

0000073c <can_init>:

void can_init(uint8_t mode){

	mcp_2515_init(mode);
     73c:	0e 94 3d 05 	call	0xa7a	; 0xa7a <mcp_2515_init>
	
	
	mcp_2515_write(MCP_CANINTE, MCP_RX_INT);
     740:	63 e0       	ldi	r22, 0x03	; 3
     742:	8b e2       	ldi	r24, 0x2B	; 43
     744:	0e 94 24 05 	call	0xa48	; 0xa48 <mcp_2515_write>
	
	// Disable global interrupts
	cli();
     748:	f8 94       	cli
	// Interrupt on falling edge PD2
	set_bit(MCUCR, ISC01);
     74a:	85 b7       	in	r24, 0x35	; 53
     74c:	82 60       	ori	r24, 0x02	; 2
     74e:	85 bf       	out	0x35, r24	; 53
	clear_bit(MCUCR, ISC00);
     750:	85 b7       	in	r24, 0x35	; 53
     752:	8e 7f       	andi	r24, 0xFE	; 254
     754:	85 bf       	out	0x35, r24	; 53
	// Enable interrupt on PD2
	set_bit(GICR,INT0);
     756:	8b b7       	in	r24, 0x3b	; 59
     758:	80 64       	ori	r24, 0x40	; 64
     75a:	8b bf       	out	0x3b, r24	; 59
	// Enable global interrupts
	sei();
     75c:	78 94       	sei
     75e:	08 95       	ret

00000760 <can_interrupt>:
	 
	
}

uint8_t can_interrupt(){
	if (flag){	
     760:	80 91 16 03 	lds	r24, 0x0316
     764:	90 91 17 03 	lds	r25, 0x0317
     768:	89 2b       	or	r24, r25
     76a:	31 f0       	breq	.+12     	; 0x778 <can_interrupt+0x18>
		flag = 0;
     76c:	10 92 17 03 	sts	0x0317, r1
     770:	10 92 16 03 	sts	0x0316, r1
		return 1;
     774:	81 e0       	ldi	r24, 0x01	; 1
     776:	08 95       	ret
	}
	return 0;
     778:	80 e0       	ldi	r24, 0x00	; 0
}
     77a:	08 95       	ret

0000077c <can_transmit_complete>:
	mcp_2515_request_to_send(MCP_RTS_TX0 + buffer_number);
	//printf("buffer nr. %d\n\r",buffer_number);
	
}

int can_transmit_complete(int buffer_number){
     77c:	cf 93       	push	r28
     77e:	df 93       	push	r29
     780:	ec 01       	movw	r28, r24
	uint8_t transmit_flag = mcp_2515_read(MCP_CANINTF);
     782:	8c e2       	ldi	r24, 0x2C	; 44
     784:	0e 94 12 05 	call	0xa24	; 0xa24 <mcp_2515_read>
	uint8_t interrupt_bits = (transmit_flag & (MCP_TX0IF + buffer_number*2));
     788:	9e 01       	movw	r18, r28
     78a:	2e 5f       	subi	r18, 0xFE	; 254
     78c:	3f 4f       	sbci	r19, 0xFF	; 255
     78e:	42 2f       	mov	r20, r18
     790:	44 0f       	add	r20, r20
     792:	84 23       	and	r24, r20

	if(interrupt_bits == (MCP_TX0IF + buffer_number*2)){
     794:	48 2f       	mov	r20, r24
     796:	50 e0       	ldi	r21, 0x00	; 0
     798:	22 0f       	add	r18, r18
     79a:	33 1f       	adc	r19, r19
     79c:	81 e0       	ldi	r24, 0x01	; 1
     79e:	90 e0       	ldi	r25, 0x00	; 0
     7a0:	42 17       	cp	r20, r18
     7a2:	53 07       	cpc	r21, r19
     7a4:	11 f4       	brne	.+4      	; 0x7aa <can_transmit_complete+0x2e>
     7a6:	80 e0       	ldi	r24, 0x00	; 0
     7a8:	90 e0       	ldi	r25, 0x00	; 0
			return 0;
	}
	return 1;
}
     7aa:	df 91       	pop	r29
     7ac:	cf 91       	pop	r28
     7ae:	08 95       	ret

000007b0 <can_message_send>:
	}
	
	return message1;
}

void can_message_send(can_message* message){
     7b0:	ef 92       	push	r14
     7b2:	ff 92       	push	r15
     7b4:	0f 93       	push	r16
     7b6:	1f 93       	push	r17
     7b8:	cf 93       	push	r28
     7ba:	df 93       	push	r29
     7bc:	ec 01       	movw	r28, r24
	
	static int buffer_number = 0;
	
	while (!can_transmit_complete(buffer_number)){
     7be:	11 c0       	rjmp	.+34     	; 0x7e2 <can_message_send+0x32>
		buffer_number +=1;
     7c0:	20 91 14 03 	lds	r18, 0x0314
     7c4:	30 91 15 03 	lds	r19, 0x0315
     7c8:	2f 5f       	subi	r18, 0xFF	; 255
     7ca:	3f 4f       	sbci	r19, 0xFF	; 255
     7cc:	30 93 15 03 	sts	0x0315, r19
     7d0:	20 93 14 03 	sts	0x0314, r18
		if (buffer_number > 2) {
     7d4:	23 30       	cpi	r18, 0x03	; 3
     7d6:	31 05       	cpc	r19, r1
     7d8:	24 f0       	brlt	.+8      	; 0x7e2 <can_message_send+0x32>
			buffer_number = 0;
     7da:	10 92 15 03 	sts	0x0315, r1
     7de:	10 92 14 03 	sts	0x0314, r1

void can_message_send(can_message* message){
	
	static int buffer_number = 0;
	
	while (!can_transmit_complete(buffer_number)){
     7e2:	80 91 14 03 	lds	r24, 0x0314
     7e6:	90 91 15 03 	lds	r25, 0x0315
     7ea:	0e 94 be 03 	call	0x77c	; 0x77c <can_transmit_complete>
     7ee:	89 2b       	or	r24, r25
     7f0:	39 f3       	breq	.-50     	; 0x7c0 <can_message_send+0x10>
			buffer_number = 0;
		}
	}
	
	// Arbitration field identifier ID = 1337;    id high = 167  id low = 0
	unsigned int ID = message->id;
     7f2:	88 81       	ld	r24, Y
     7f4:	99 81       	ldd	r25, Y+1	; 0x01
	char id_high = ID / 8;
	char id_low = ID % 8;
     7f6:	28 2f       	mov	r18, r24
     7f8:	27 70       	andi	r18, 0x07	; 7
     7fa:	f2 2e       	mov	r15, r18
		}
	}
	
	// Arbitration field identifier ID = 1337;    id high = 167  id low = 0
	unsigned int ID = message->id;
	char id_high = ID / 8;
     7fc:	bc 01       	movw	r22, r24
     7fe:	76 95       	lsr	r23
     800:	67 95       	ror	r22
     802:	76 95       	lsr	r23
     804:	67 95       	ror	r22
     806:	76 95       	lsr	r23
     808:	67 95       	ror	r22
	char id_low = ID % 8;
	id_low = id_low*0b100000;
	mcp_2515_write(MCP_TXB0SIDH + 16 * buffer_number, id_high);
     80a:	04 e1       	ldi	r16, 0x14	; 20
     80c:	13 e0       	ldi	r17, 0x03	; 3
     80e:	f8 01       	movw	r30, r16
     810:	80 81       	ld	r24, Z
     812:	82 95       	swap	r24
     814:	80 7f       	andi	r24, 0xF0	; 240
     816:	8f 5c       	subi	r24, 0xCF	; 207
     818:	0e 94 24 05 	call	0xa48	; 0xa48 <mcp_2515_write>
	
	// Arbitration field identifier ID = 1337;    id high = 167  id low = 0
	unsigned int ID = message->id;
	char id_high = ID / 8;
	char id_low = ID % 8;
	id_low = id_low*0b100000;
     81c:	6f 2d       	mov	r22, r15
     81e:	62 95       	swap	r22
     820:	66 0f       	add	r22, r22
     822:	60 7e       	andi	r22, 0xE0	; 224
	mcp_2515_write(MCP_TXB0SIDH + 16 * buffer_number, id_high);
	mcp_2515_write(MCP_TXB0SIDL + 16 * buffer_number, id_low);
     824:	f8 01       	movw	r30, r16
     826:	80 81       	ld	r24, Z
     828:	82 95       	swap	r24
     82a:	80 7f       	andi	r24, 0xF0	; 240
     82c:	8e 5c       	subi	r24, 0xCE	; 206
     82e:	0e 94 24 05 	call	0xa48	; 0xa48 <mcp_2515_write>
	
	// Define data length of message
	uint8_t data_length = message->length;
     832:	ea 80       	ldd	r14, Y+2	; 0x02
	mcp_2515_write(MCP_TXB0DLC + 16 * buffer_number, data_length);
     834:	f8 01       	movw	r30, r16
     836:	80 81       	ld	r24, Z
     838:	82 95       	swap	r24
     83a:	80 7f       	andi	r24, 0xF0	; 240
     83c:	6e 2d       	mov	r22, r14
     83e:	8b 5c       	subi	r24, 0xCB	; 203
     840:	0e 94 24 05 	call	0xa48	; 0xa48 <mcp_2515_write>
	
	// Write data bytes to transmit buffer
	char* data_bytes = message->data;
     844:	23 96       	adiw	r28, 0x03	; 3
	for (uint8_t byte = 0; byte < data_length; byte++) {
     846:	ee 20       	and	r14, r14
     848:	81 f0       	breq	.+32     	; 0x86a <can_message_send+0xba>
     84a:	f1 2c       	mov	r15, r1
		mcp_2515_write(MCP_TXB0Dm + byte + 16 * buffer_number, data_bytes[byte]);
     84c:	69 91       	ld	r22, Y+
     84e:	f8 01       	movw	r30, r16
     850:	80 81       	ld	r24, Z
     852:	2f 2d       	mov	r18, r15
     854:	f0 e1       	ldi	r31, 0x10	; 16
     856:	8f 9f       	mul	r24, r31
     858:	20 0d       	add	r18, r0
     85a:	11 24       	eor	r1, r1
     85c:	82 2f       	mov	r24, r18
     85e:	8a 5c       	subi	r24, 0xCA	; 202
     860:	0e 94 24 05 	call	0xa48	; 0xa48 <mcp_2515_write>
	uint8_t data_length = message->length;
	mcp_2515_write(MCP_TXB0DLC + 16 * buffer_number, data_length);
	
	// Write data bytes to transmit buffer
	char* data_bytes = message->data;
	for (uint8_t byte = 0; byte < data_length; byte++) {
     864:	f3 94       	inc	r15
     866:	fe 10       	cpse	r15, r14
     868:	f1 cf       	rjmp	.-30     	; 0x84c <can_message_send+0x9c>
		mcp_2515_write(MCP_TXB0Dm + byte + 16 * buffer_number, data_bytes[byte]);
	}
	
	// Request to send message, send if successful
	mcp_2515_request_to_send(MCP_RTS_TX0 + buffer_number);
     86a:	80 91 14 03 	lds	r24, 0x0314
     86e:	8f 57       	subi	r24, 0x7F	; 127
     870:	0e 94 75 05 	call	0xaea	; 0xaea <mcp_2515_request_to_send>
	//printf("buffer nr. %d\n\r",buffer_number);
	
}
     874:	df 91       	pop	r29
     876:	cf 91       	pop	r28
     878:	1f 91       	pop	r17
     87a:	0f 91       	pop	r16
     87c:	ff 90       	pop	r15
     87e:	ef 90       	pop	r14
     880:	08 95       	ret

00000882 <can_message_receive>:
			return 0;
	}
	return 1;
}

void can_message_receive(int rec_buff_num, can_message* received_message){
     882:	0f 93       	push	r16
     884:	1f 93       	push	r17
     886:	cf 93       	push	r28
     888:	df 93       	push	r29
     88a:	eb 01       	movw	r28, r22
	uint8_t id_high = mcp_2515_read(MCP_RXB0SIDH + 16 * rec_buff_num);
     88c:	18 2f       	mov	r17, r24
     88e:	12 95       	swap	r17
     890:	10 7f       	andi	r17, 0xF0	; 240
     892:	81 e6       	ldi	r24, 0x61	; 97
     894:	81 0f       	add	r24, r17
     896:	0e 94 12 05 	call	0xa24	; 0xa24 <mcp_2515_read>
     89a:	08 2f       	mov	r16, r24
	uint8_t id_low = mcp_2515_read(MCP_RXB0SIDL + 16 * rec_buff_num);
     89c:	82 e6       	ldi	r24, 0x62	; 98
     89e:	81 0f       	add	r24, r17
     8a0:	0e 94 12 05 	call	0xa24	; 0xa24 <mcp_2515_read>
	uint8_t mask = 0b11100000;
	id_low = (id_low & mask);
	received_message->id = 0b1000*id_high + id_low/0b100000;
     8a4:	20 2f       	mov	r18, r16
     8a6:	30 e0       	ldi	r19, 0x00	; 0
     8a8:	22 0f       	add	r18, r18
     8aa:	33 1f       	adc	r19, r19
     8ac:	22 0f       	add	r18, r18
     8ae:	33 1f       	adc	r19, r19
     8b0:	22 0f       	add	r18, r18
     8b2:	33 1f       	adc	r19, r19
     8b4:	82 95       	swap	r24
     8b6:	86 95       	lsr	r24
     8b8:	87 70       	andi	r24, 0x07	; 7
     8ba:	28 0f       	add	r18, r24
     8bc:	31 1d       	adc	r19, r1
     8be:	39 83       	std	Y+1, r19	; 0x01
     8c0:	28 83       	st	Y, r18
	
	uint8_t data_length = mcp_2515_read(MCP_RXB0DLC + 16 * rec_buff_num);
     8c2:	85 e6       	ldi	r24, 0x65	; 101
     8c4:	81 0f       	add	r24, r17
     8c6:	0e 94 12 05 	call	0xa24	; 0xa24 <mcp_2515_read>
	mask = 0b1111;
	received_message->length = (data_length & mask);
     8ca:	98 2f       	mov	r25, r24
     8cc:	9f 70       	andi	r25, 0x0F	; 15
     8ce:	9a 83       	std	Y+2, r25	; 0x02
	
	for (uint8_t byte = 0; byte < data_length; byte++) {
     8d0:	88 23       	and	r24, r24
     8d2:	59 f0       	breq	.+22     	; 0x8ea <can_message_receive+0x68>
     8d4:	1a 59       	subi	r17, 0x9A	; 154
     8d6:	23 96       	adiw	r28, 0x03	; 3
     8d8:	08 2f       	mov	r16, r24
     8da:	01 0f       	add	r16, r17
		received_message->data[byte] = mcp_2515_read(MCP_RXB0DM + byte + 16 * rec_buff_num);
     8dc:	81 2f       	mov	r24, r17
     8de:	0e 94 12 05 	call	0xa24	; 0xa24 <mcp_2515_read>
     8e2:	89 93       	st	Y+, r24
     8e4:	1f 5f       	subi	r17, 0xFF	; 255
	
	uint8_t data_length = mcp_2515_read(MCP_RXB0DLC + 16 * rec_buff_num);
	mask = 0b1111;
	received_message->length = (data_length & mask);
	
	for (uint8_t byte = 0; byte < data_length; byte++) {
     8e6:	10 13       	cpse	r17, r16
     8e8:	f9 cf       	rjmp	.-14     	; 0x8dc <can_message_receive+0x5a>
		received_message->data[byte] = mcp_2515_read(MCP_RXB0DM + byte + 16 * rec_buff_num);
	}
	
}
     8ea:	df 91       	pop	r29
     8ec:	cf 91       	pop	r28
     8ee:	1f 91       	pop	r17
     8f0:	0f 91       	pop	r16
     8f2:	08 95       	ret

000008f4 <can_int_vect>:

void can_int_vect(int* v) { 
     8f4:	cf 93       	push	r28
     8f6:	df 93       	push	r29
     8f8:	ec 01       	movw	r28, r24
	uint8_t int_flag = mcp_2515_read(MCP_CANINTF);
     8fa:	8c e2       	ldi	r24, 0x2C	; 44
     8fc:	0e 94 12 05 	call	0xa24	; 0xa24 <mcp_2515_read>
	v[0] = (int_flag & MCP_RX0IF);
     900:	98 2f       	mov	r25, r24
     902:	91 70       	andi	r25, 0x01	; 1
     904:	98 83       	st	Y, r25
     906:	19 82       	std	Y+1, r1	; 0x01
	v[1] = (int_flag & MCP_RX1IF);
     908:	82 70       	andi	r24, 0x02	; 2
     90a:	90 e0       	ldi	r25, 0x00	; 0
     90c:	9b 83       	std	Y+3, r25	; 0x03
     90e:	8a 83       	std	Y+2, r24	; 0x02
}
     910:	df 91       	pop	r29
     912:	cf 91       	pop	r28
     914:	08 95       	ret

00000916 <can_handle_messages>:
		return 1;
	}
	return 0;
}

can_message can_handle_messages(){
     916:	0f 93       	push	r16
     918:	1f 93       	push	r17
     91a:	cf 93       	push	r28
     91c:	df 93       	push	r29
     91e:	cd b7       	in	r28, 0x3d	; 61
     920:	de b7       	in	r29, 0x3e	; 62
     922:	68 97       	sbiw	r28, 0x18	; 24
     924:	0f b6       	in	r0, 0x3f	; 63
     926:	f8 94       	cli
     928:	de bf       	out	0x3e, r29	; 62
     92a:	0f be       	out	0x3f, r0	; 63
     92c:	cd bf       	out	0x3d, r28	; 61
     92e:	8c 01       	movw	r16, r24
	uint8_t v[2] = {0};
     930:	1a 82       	std	Y+2, r1	; 0x02
     932:	19 82       	std	Y+1, r1	; 0x01

	can_int_vect(v);
     934:	ce 01       	movw	r24, r28
     936:	01 96       	adiw	r24, 0x01	; 1
     938:	0e 94 7a 04 	call	0x8f4	; 0x8f4 <can_int_vect>

	can_message message1;
	if (v[0]){
     93c:	89 81       	ldd	r24, Y+1	; 0x01
     93e:	88 23       	and	r24, r24
     940:	21 f1       	breq	.+72     	; 0x98a <can_handle_messages+0x74>
		can_message_receive(0, &message1);
     942:	be 01       	movw	r22, r28
     944:	6d 5f       	subi	r22, 0xFD	; 253
     946:	7f 4f       	sbci	r23, 0xFF	; 255
     948:	80 e0       	ldi	r24, 0x00	; 0
     94a:	90 e0       	ldi	r25, 0x00	; 0
     94c:	0e 94 41 04 	call	0x882	; 0x882 <can_message_receive>
		mcp_2515_write(MCP_CANINTF,0);
     950:	60 e0       	ldi	r22, 0x00	; 0
     952:	8c e2       	ldi	r24, 0x2C	; 44
     954:	0e 94 24 05 	call	0xa48	; 0xa48 <mcp_2515_write>
		mcp_2515_bit_modify(MCP_CANINTF, 1, 0);
     958:	40 e0       	ldi	r20, 0x00	; 0
     95a:	61 e0       	ldi	r22, 0x01	; 1
     95c:	8c e2       	ldi	r24, 0x2C	; 44
     95e:	0e 94 80 05 	call	0xb00	; 0xb00 <mcp_2515_bit_modify>
		can_int_vect(v);
     962:	ce 01       	movw	r24, r28
     964:	01 96       	adiw	r24, 0x01	; 1
     966:	0e 94 7a 04 	call	0x8f4	; 0x8f4 <can_int_vect>
		if (!v[1]){
     96a:	8a 81       	ldd	r24, Y+2	; 0x02
     96c:	81 11       	cpse	r24, r1
     96e:	04 c0       	rjmp	.+8      	; 0x978 <can_handle_messages+0x62>
			flag = 0;
     970:	10 92 17 03 	sts	0x0317, r1
     974:	10 92 16 03 	sts	0x0316, r1
		}
		return message1;
     978:	8b e0       	ldi	r24, 0x0B	; 11
     97a:	fe 01       	movw	r30, r28
     97c:	33 96       	adiw	r30, 0x03	; 3
     97e:	d8 01       	movw	r26, r16
     980:	01 90       	ld	r0, Z+
     982:	0d 92       	st	X+, r0
     984:	8a 95       	dec	r24
     986:	e1 f7       	brne	.-8      	; 0x980 <can_handle_messages+0x6a>
     988:	2f c0       	rjmp	.+94     	; 0x9e8 <can_handle_messages+0xd2>
	}
	
	can_message message2;
	
	if (v[1]){
     98a:	8a 81       	ldd	r24, Y+2	; 0x02
     98c:	88 23       	and	r24, r24
     98e:	21 f1       	breq	.+72     	; 0x9d8 <can_handle_messages+0xc2>
		can_message_receive(1, &message2);
     990:	be 01       	movw	r22, r28
     992:	62 5f       	subi	r22, 0xF2	; 242
     994:	7f 4f       	sbci	r23, 0xFF	; 255
     996:	81 e0       	ldi	r24, 0x01	; 1
     998:	90 e0       	ldi	r25, 0x00	; 0
     99a:	0e 94 41 04 	call	0x882	; 0x882 <can_message_receive>
		mcp_2515_write(MCP_CANINTF,0);
     99e:	60 e0       	ldi	r22, 0x00	; 0
     9a0:	8c e2       	ldi	r24, 0x2C	; 44
     9a2:	0e 94 24 05 	call	0xa48	; 0xa48 <mcp_2515_write>
		mcp_2515_bit_modify(MCP_CANINTF, 2, 0);
     9a6:	40 e0       	ldi	r20, 0x00	; 0
     9a8:	62 e0       	ldi	r22, 0x02	; 2
     9aa:	8c e2       	ldi	r24, 0x2C	; 44
     9ac:	0e 94 80 05 	call	0xb00	; 0xb00 <mcp_2515_bit_modify>
		can_int_vect(v);
     9b0:	ce 01       	movw	r24, r28
     9b2:	01 96       	adiw	r24, 0x01	; 1
     9b4:	0e 94 7a 04 	call	0x8f4	; 0x8f4 <can_int_vect>
		if (!v[0]){
     9b8:	89 81       	ldd	r24, Y+1	; 0x01
     9ba:	81 11       	cpse	r24, r1
     9bc:	04 c0       	rjmp	.+8      	; 0x9c6 <can_handle_messages+0xb0>
			flag = 0;
     9be:	10 92 17 03 	sts	0x0317, r1
     9c2:	10 92 16 03 	sts	0x0316, r1
		}
		return message2;
     9c6:	8b e0       	ldi	r24, 0x0B	; 11
     9c8:	fe 01       	movw	r30, r28
     9ca:	3e 96       	adiw	r30, 0x0e	; 14
     9cc:	d8 01       	movw	r26, r16
     9ce:	01 90       	ld	r0, Z+
     9d0:	0d 92       	st	X+, r0
     9d2:	8a 95       	dec	r24
     9d4:	e1 f7       	brne	.-8      	; 0x9ce <can_handle_messages+0xb8>
     9d6:	08 c0       	rjmp	.+16     	; 0x9e8 <can_handle_messages+0xd2>
	}
	
	return message1;
     9d8:	8b e0       	ldi	r24, 0x0B	; 11
     9da:	fe 01       	movw	r30, r28
     9dc:	33 96       	adiw	r30, 0x03	; 3
     9de:	d8 01       	movw	r26, r16
     9e0:	01 90       	ld	r0, Z+
     9e2:	0d 92       	st	X+, r0
     9e4:	8a 95       	dec	r24
     9e6:	e1 f7       	brne	.-8      	; 0x9e0 <can_handle_messages+0xca>
}
     9e8:	c8 01       	movw	r24, r16
     9ea:	68 96       	adiw	r28, 0x18	; 24
     9ec:	0f b6       	in	r0, 0x3f	; 63
     9ee:	f8 94       	cli
     9f0:	de bf       	out	0x3e, r29	; 62
     9f2:	0f be       	out	0x3f, r0	; 63
     9f4:	cd bf       	out	0x3d, r28	; 61
     9f6:	df 91       	pop	r29
     9f8:	cf 91       	pop	r28
     9fa:	1f 91       	pop	r17
     9fc:	0f 91       	pop	r16
     9fe:	08 95       	ret

00000a00 <mcp_activate_slave>:
#include <avr/io.h>
#include <avr/delay.h>

void mcp_activate_slave(){
	/* Activate Slave Select */
	clear_bit(PORTB, PB4);
     a00:	c4 98       	cbi	0x18, 4	; 24
     a02:	08 95       	ret

00000a04 <mcp_deactivate_slave>:
}

void mcp_deactivate_slave(){
	/* Deactivate Slave Select */
	set_bit(PORTB, PB4);
     a04:	c4 9a       	sbi	0x18, 4	; 24
     a06:	08 95       	ret

00000a08 <mcp_2515_reset>:
	
	return 0;
}

void mcp_2515_reset(){
	mcp_activate_slave();
     a08:	0e 94 00 05 	call	0xa00	; 0xa00 <mcp_activate_slave>
	SPI_write(MCP_RESET);
     a0c:	80 ec       	ldi	r24, 0xC0	; 192
     a0e:	0e 94 8c 08 	call	0x1118	; 0x1118 <SPI_write>
	mcp_deactivate_slave();
     a12:	0e 94 02 05 	call	0xa04	; 0xa04 <mcp_deactivate_slave>
     a16:	83 ec       	ldi	r24, 0xC3	; 195
     a18:	99 e0       	ldi	r25, 0x09	; 9
     a1a:	01 97       	sbiw	r24, 0x01	; 1
     a1c:	f1 f7       	brne	.-4      	; 0xa1a <mcp_2515_reset+0x12>
     a1e:	00 c0       	rjmp	.+0      	; 0xa20 <mcp_2515_reset+0x18>
     a20:	00 00       	nop
     a22:	08 95       	ret

00000a24 <mcp_2515_read>:
	_delay_ms(10);	//a small delay after mcp reset
}

uint8_t mcp_2515_read(uint8_t address){
     a24:	cf 93       	push	r28
     a26:	c8 2f       	mov	r28, r24
	mcp_activate_slave();
     a28:	0e 94 00 05 	call	0xa00	; 0xa00 <mcp_activate_slave>
	
	uint8_t data;
	
	SPI_write(MCP_READ);
     a2c:	83 e0       	ldi	r24, 0x03	; 3
     a2e:	0e 94 8c 08 	call	0x1118	; 0x1118 <SPI_write>
	SPI_write(address);
     a32:	8c 2f       	mov	r24, r28
     a34:	0e 94 8c 08 	call	0x1118	; 0x1118 <SPI_write>
	data = SPI_read();
     a38:	0e 94 90 08 	call	0x1120	; 0x1120 <SPI_read>
     a3c:	c8 2f       	mov	r28, r24
	
	mcp_deactivate_slave();
     a3e:	0e 94 02 05 	call	0xa04	; 0xa04 <mcp_deactivate_slave>
	
	return data;
}
     a42:	8c 2f       	mov	r24, r28
     a44:	cf 91       	pop	r28
     a46:	08 95       	ret

00000a48 <mcp_2515_write>:


void mcp_2515_write(uint8_t address, uint8_t data) {
     a48:	cf 93       	push	r28
     a4a:	df 93       	push	r29
     a4c:	d8 2f       	mov	r29, r24
     a4e:	c6 2f       	mov	r28, r22
	mcp_activate_slave();
     a50:	0e 94 00 05 	call	0xa00	; 0xa00 <mcp_activate_slave>
	
	SPI_write(MCP_WRITE);
     a54:	82 e0       	ldi	r24, 0x02	; 2
     a56:	0e 94 8c 08 	call	0x1118	; 0x1118 <SPI_write>
	SPI_write(address);
     a5a:	8d 2f       	mov	r24, r29
     a5c:	0e 94 8c 08 	call	0x1118	; 0x1118 <SPI_write>
	SPI_write(data);
     a60:	8c 2f       	mov	r24, r28
     a62:	0e 94 8c 08 	call	0x1118	; 0x1118 <SPI_write>
	
	mcp_deactivate_slave();
     a66:	0e 94 02 05 	call	0xa04	; 0xa04 <mcp_deactivate_slave>
}
     a6a:	df 91       	pop	r29
     a6c:	cf 91       	pop	r28
     a6e:	08 95       	ret

00000a70 <mcp_2515_set_mode>:
	/* Deactivate Slave Select */
	set_bit(PORTB, PB4);
}

void mcp_2515_set_mode(uint8_t mode){
	mcp_2515_write(MCP_CANCTRL, mode);
     a70:	68 2f       	mov	r22, r24
     a72:	8f e0       	ldi	r24, 0x0F	; 15
     a74:	0e 94 24 05 	call	0xa48	; 0xa48 <mcp_2515_write>
     a78:	08 95       	ret

00000a7a <mcp_2515_init>:
}

uint8_t mcp_2515_init(uint8_t mode){
     a7a:	cf 93       	push	r28
     a7c:	c8 2f       	mov	r28, r24
	
	uint8_t val;
	SPI_init();
     a7e:	0e 94 86 08 	call	0x110c	; 0x110c <SPI_init>
	
	mcp_2515_reset();
     a82:	0e 94 04 05 	call	0xa08	; 0xa08 <mcp_2515_reset>
	
	val = mcp_2515_read(MCP_CANSTAT);
     a86:	8e e0       	ldi	r24, 0x0E	; 14
     a88:	0e 94 12 05 	call	0xa24	; 0xa24 <mcp_2515_read>
	//printf("val : %d ",val);
	uint8_t mode_bits = (val & MODE_MASK);
     a8c:	80 7e       	andi	r24, 0xE0	; 224
	if(mode_bits != MODE_CONFIG){
     a8e:	80 38       	cpi	r24, 0x80	; 128
     a90:	71 f0       	breq	.+28     	; 0xaae <mcp_2515_init+0x34>
		printf("MCP2515 is NOT in Configuration mode after reset! Its config bits are %x\n", mode_bits);
     a92:	1f 92       	push	r1
     a94:	8f 93       	push	r24
     a96:	86 e4       	ldi	r24, 0x46	; 70
     a98:	92 e0       	ldi	r25, 0x02	; 2
     a9a:	9f 93       	push	r25
     a9c:	8f 93       	push	r24
     a9e:	0e 94 65 0a 	call	0x14ca	; 0x14ca <printf>
		return 1;
     aa2:	0f 90       	pop	r0
     aa4:	0f 90       	pop	r0
     aa6:	0f 90       	pop	r0
     aa8:	0f 90       	pop	r0
     aaa:	81 e0       	ldi	r24, 0x01	; 1
     aac:	1c c0       	rjmp	.+56     	; 0xae6 <mcp_2515_init+0x6c>
	}
	
	mcp_2515_set_mode(mode);
     aae:	8c 2f       	mov	r24, r28
     ab0:	0e 94 38 05 	call	0xa70	; 0xa70 <mcp_2515_set_mode>
	
	val = mcp_2515_read(MCP_CANSTAT);
     ab4:	8e e0       	ldi	r24, 0x0E	; 14
     ab6:	0e 94 12 05 	call	0xa24	; 0xa24 <mcp_2515_read>
	//printf("val : %d  and  MCP %d   AND MASK %d",val, MCP_CANSTAT, MODE_MASK);
	mode_bits = (val & MODE_MASK);
     aba:	80 7e       	andi	r24, 0xE0	; 224
	
	if(mode_bits != mode){
     abc:	8c 17       	cp	r24, r28
     abe:	91 f0       	breq	.+36     	; 0xae4 <mcp_2515_init+0x6a>
		
		printf("MCP2515 is NOT in correct mode after reset! Its config bits are %x\n", mode_bits);
     ac0:	1f 92       	push	r1
     ac2:	8f 93       	push	r24
     ac4:	80 e9       	ldi	r24, 0x90	; 144
     ac6:	92 e0       	ldi	r25, 0x02	; 2
     ac8:	9f 93       	push	r25
     aca:	8f 93       	push	r24
     acc:	0e 94 65 0a 	call	0x14ca	; 0x14ca <printf>
		printf("\n!\n");
     ad0:	84 ed       	ldi	r24, 0xD4	; 212
     ad2:	92 e0       	ldi	r25, 0x02	; 2
     ad4:	0e 94 79 0a 	call	0x14f2	; 0x14f2 <puts>
		return 1;
     ad8:	0f 90       	pop	r0
     ada:	0f 90       	pop	r0
     adc:	0f 90       	pop	r0
     ade:	0f 90       	pop	r0
     ae0:	81 e0       	ldi	r24, 0x01	; 1
     ae2:	01 c0       	rjmp	.+2      	; 0xae6 <mcp_2515_init+0x6c>
	}
	
	
	return 0;
     ae4:	80 e0       	ldi	r24, 0x00	; 0
}
     ae6:	cf 91       	pop	r28
     ae8:	08 95       	ret

00000aea <mcp_2515_request_to_send>:
	SPI_write(data);
	
	mcp_deactivate_slave();
}

void mcp_2515_request_to_send(char buffer) {
     aea:	cf 93       	push	r28
     aec:	c8 2f       	mov	r28, r24
	mcp_activate_slave();
     aee:	0e 94 00 05 	call	0xa00	; 0xa00 <mcp_activate_slave>
	
	SPI_write(buffer);
     af2:	8c 2f       	mov	r24, r28
     af4:	0e 94 8c 08 	call	0x1118	; 0x1118 <SPI_write>
	
	mcp_deactivate_slave();
     af8:	0e 94 02 05 	call	0xa04	; 0xa04 <mcp_deactivate_slave>
}
     afc:	cf 91       	pop	r28
     afe:	08 95       	ret

00000b00 <mcp_2515_bit_modify>:

void mcp_2515_bit_modify(uint8_t adress, uint8_t mask, uint8_t data) {
     b00:	1f 93       	push	r17
     b02:	cf 93       	push	r28
     b04:	df 93       	push	r29
     b06:	18 2f       	mov	r17, r24
     b08:	d6 2f       	mov	r29, r22
     b0a:	c4 2f       	mov	r28, r20
	mcp_activate_slave();
     b0c:	0e 94 00 05 	call	0xa00	; 0xa00 <mcp_activate_slave>
	
	SPI_write(MCP_BITMOD);
     b10:	85 e0       	ldi	r24, 0x05	; 5
     b12:	0e 94 8c 08 	call	0x1118	; 0x1118 <SPI_write>
	SPI_write(adress);
     b16:	81 2f       	mov	r24, r17
     b18:	0e 94 8c 08 	call	0x1118	; 0x1118 <SPI_write>
	SPI_write(mask);
     b1c:	8d 2f       	mov	r24, r29
     b1e:	0e 94 8c 08 	call	0x1118	; 0x1118 <SPI_write>
	SPI_write(data);
     b22:	8c 2f       	mov	r24, r28
     b24:	0e 94 8c 08 	call	0x1118	; 0x1118 <SPI_write>
	
	mcp_deactivate_slave();
     b28:	0e 94 02 05 	call	0xa04	; 0xa04 <mcp_deactivate_slave>
}
     b2c:	df 91       	pop	r29
     b2e:	cf 91       	pop	r28
     b30:	1f 91       	pop	r17
     b32:	08 95       	ret

00000b34 <Joystick_calibrate>:
     b34:	80 e0       	ldi	r24, 0x00	; 0
     b36:	0e 94 fe 01 	call	0x3fc	; 0x3fc <ADC_start_read>
	#else
		//round up by default
		__ticks_dc = (uint32_t)(ceil(fabs(__tmp)));
	#endif

	__builtin_avr_delay_cycles(__ticks_dc);
     b3a:	82 e4       	ldi	r24, 0x42	; 66
     b3c:	8a 95       	dec	r24
     b3e:	f1 f7       	brne	.-4      	; 0xb3c <Joystick_calibrate+0x8>
     b40:	00 c0       	rjmp	.+0      	; 0xb42 <Joystick_calibrate+0xe>
     b42:	0e 94 f8 01 	call	0x3f0	; 0x3f0 <get_ADC_data>
     b46:	80 93 19 03 	sts	0x0319, r24
     b4a:	81 e0       	ldi	r24, 0x01	; 1
     b4c:	0e 94 fe 01 	call	0x3fc	; 0x3fc <ADC_start_read>
     b50:	82 e4       	ldi	r24, 0x42	; 66
     b52:	8a 95       	dec	r24
     b54:	f1 f7       	brne	.-4      	; 0xb52 <Joystick_calibrate+0x1e>
     b56:	00 c0       	rjmp	.+0      	; 0xb58 <Joystick_calibrate+0x24>
     b58:	0e 94 f8 01 	call	0x3f0	; 0x3f0 <get_ADC_data>
     b5c:	80 93 1a 03 	sts	0x031A, r24
     b60:	08 95       	ret

00000b62 <oled_is_out_of_bounds>:
     b62:	80 91 1d 03 	lds	r24, 0x031D
     b66:	90 91 1e 03 	lds	r25, 0x031E
     b6a:	80 38       	cpi	r24, 0x80	; 128
     b6c:	91 05       	cpc	r25, r1
     b6e:	bc f0       	brlt	.+46     	; 0xb9e <oled_is_out_of_bounds+0x3c>
     b70:	ed e1       	ldi	r30, 0x1D	; 29
     b72:	f3 e0       	ldi	r31, 0x03	; 3
     b74:	80 81       	ld	r24, Z
     b76:	91 81       	ldd	r25, Z+1	; 0x01
     b78:	80 58       	subi	r24, 0x80	; 128
     b7a:	91 09       	sbc	r25, r1
     b7c:	91 83       	std	Z+1, r25	; 0x01
     b7e:	80 83       	st	Z, r24
     b80:	eb e1       	ldi	r30, 0x1B	; 27
     b82:	f3 e0       	ldi	r31, 0x03	; 3
     b84:	80 81       	ld	r24, Z
     b86:	91 81       	ldd	r25, Z+1	; 0x01
     b88:	01 96       	adiw	r24, 0x01	; 1
     b8a:	91 83       	std	Z+1, r25	; 0x01
     b8c:	80 83       	st	Z, r24
     b8e:	80 81       	ld	r24, Z
     b90:	91 81       	ldd	r25, Z+1	; 0x01
     b92:	08 97       	sbiw	r24, 0x08	; 8
     b94:	24 f0       	brlt	.+8      	; 0xb9e <oled_is_out_of_bounds+0x3c>
     b96:	10 92 1c 03 	sts	0x031C, r1
     b9a:	10 92 1b 03 	sts	0x031B, r1
     b9e:	08 95       	ret

00000ba0 <oled_put_char>:
     ba0:	ef 92       	push	r14
     ba2:	ff 92       	push	r15
     ba4:	0f 93       	push	r16
     ba6:	1f 93       	push	r17
     ba8:	cf 93       	push	r28
     baa:	df 93       	push	r29
     bac:	80 52       	subi	r24, 0x20	; 32
     bae:	20 91 0c 01 	lds	r18, 0x010C
     bb2:	30 91 0d 01 	lds	r19, 0x010D
     bb6:	12 16       	cp	r1, r18
     bb8:	13 06       	cpc	r1, r19
     bba:	84 f5       	brge	.+96     	; 0xc1c <oled_put_char+0x7c>
     bbc:	e8 2e       	mov	r14, r24
     bbe:	f1 2c       	mov	r15, r1
     bc0:	c7 01       	movw	r24, r14
     bc2:	88 0f       	add	r24, r24
     bc4:	99 1f       	adc	r25, r25
     bc6:	88 0f       	add	r24, r24
     bc8:	99 1f       	adc	r25, r25
     bca:	88 0f       	add	r24, r24
     bcc:	99 1f       	adc	r25, r25
     bce:	c0 e0       	ldi	r28, 0x00	; 0
     bd0:	d0 e0       	ldi	r29, 0x00	; 0
     bd2:	9c 01       	movw	r18, r24
     bd4:	20 59       	subi	r18, 0x90	; 144
     bd6:	3f 4f       	sbci	r19, 0xFF	; 255
     bd8:	79 01       	movw	r14, r18
     bda:	0d e1       	ldi	r16, 0x1D	; 29
     bdc:	13 e0       	ldi	r17, 0x03	; 3
     bde:	f7 01       	movw	r30, r14
     be0:	ec 0f       	add	r30, r28
     be2:	fd 1f       	adc	r31, r29
     be4:	85 91       	lpm	r24, Z+
     be6:	94 91       	lpm	r25, Z
     be8:	e0 91 0e 01 	lds	r30, 0x010E
     bec:	f0 91 0f 01 	lds	r31, 0x010F
     bf0:	80 83       	st	Z, r24
     bf2:	f8 01       	movw	r30, r16
     bf4:	20 81       	ld	r18, Z
     bf6:	31 81       	ldd	r19, Z+1	; 0x01
     bf8:	80 91 0c 01 	lds	r24, 0x010C
     bfc:	90 91 0d 01 	lds	r25, 0x010D
     c00:	82 0f       	add	r24, r18
     c02:	93 1f       	adc	r25, r19
     c04:	91 83       	std	Z+1, r25	; 0x01
     c06:	80 83       	st	Z, r24
     c08:	0e 94 b1 05 	call	0xb62	; 0xb62 <oled_is_out_of_bounds>
     c0c:	21 96       	adiw	r28, 0x01	; 1
     c0e:	80 91 0c 01 	lds	r24, 0x010C
     c12:	90 91 0d 01 	lds	r25, 0x010D
     c16:	c8 17       	cp	r28, r24
     c18:	d9 07       	cpc	r29, r25
     c1a:	0c f3       	brlt	.-62     	; 0xbde <oled_put_char+0x3e>
     c1c:	80 e0       	ldi	r24, 0x00	; 0
     c1e:	90 e0       	ldi	r25, 0x00	; 0
     c20:	df 91       	pop	r29
     c22:	cf 91       	pop	r28
     c24:	1f 91       	pop	r17
     c26:	0f 91       	pop	r16
     c28:	ff 90       	pop	r15
     c2a:	ef 90       	pop	r14
     c2c:	08 95       	ret

00000c2e <oled_inv_put_char>:
     c2e:	ef 92       	push	r14
     c30:	ff 92       	push	r15
     c32:	0f 93       	push	r16
     c34:	1f 93       	push	r17
     c36:	cf 93       	push	r28
     c38:	df 93       	push	r29
     c3a:	80 52       	subi	r24, 0x20	; 32
     c3c:	20 91 0c 01 	lds	r18, 0x010C
     c40:	30 91 0d 01 	lds	r19, 0x010D
     c44:	12 16       	cp	r1, r18
     c46:	13 06       	cpc	r1, r19
     c48:	8c f5       	brge	.+98     	; 0xcac <oled_inv_put_char+0x7e>
     c4a:	e8 2e       	mov	r14, r24
     c4c:	f1 2c       	mov	r15, r1
     c4e:	c7 01       	movw	r24, r14
     c50:	88 0f       	add	r24, r24
     c52:	99 1f       	adc	r25, r25
     c54:	88 0f       	add	r24, r24
     c56:	99 1f       	adc	r25, r25
     c58:	88 0f       	add	r24, r24
     c5a:	99 1f       	adc	r25, r25
     c5c:	c0 e0       	ldi	r28, 0x00	; 0
     c5e:	d0 e0       	ldi	r29, 0x00	; 0
     c60:	9c 01       	movw	r18, r24
     c62:	20 59       	subi	r18, 0x90	; 144
     c64:	3f 4f       	sbci	r19, 0xFF	; 255
     c66:	79 01       	movw	r14, r18
     c68:	0d e1       	ldi	r16, 0x1D	; 29
     c6a:	13 e0       	ldi	r17, 0x03	; 3
     c6c:	f7 01       	movw	r30, r14
     c6e:	ec 0f       	add	r30, r28
     c70:	fd 1f       	adc	r31, r29
     c72:	85 91       	lpm	r24, Z+
     c74:	94 91       	lpm	r25, Z
     c76:	80 95       	com	r24
     c78:	e0 91 0e 01 	lds	r30, 0x010E
     c7c:	f0 91 0f 01 	lds	r31, 0x010F
     c80:	80 83       	st	Z, r24
     c82:	f8 01       	movw	r30, r16
     c84:	20 81       	ld	r18, Z
     c86:	31 81       	ldd	r19, Z+1	; 0x01
     c88:	80 91 0c 01 	lds	r24, 0x010C
     c8c:	90 91 0d 01 	lds	r25, 0x010D
     c90:	82 0f       	add	r24, r18
     c92:	93 1f       	adc	r25, r19
     c94:	91 83       	std	Z+1, r25	; 0x01
     c96:	80 83       	st	Z, r24
     c98:	0e 94 b1 05 	call	0xb62	; 0xb62 <oled_is_out_of_bounds>
     c9c:	21 96       	adiw	r28, 0x01	; 1
     c9e:	80 91 0c 01 	lds	r24, 0x010C
     ca2:	90 91 0d 01 	lds	r25, 0x010D
     ca6:	c8 17       	cp	r28, r24
     ca8:	d9 07       	cpc	r29, r25
     caa:	04 f3       	brlt	.-64     	; 0xc6c <oled_inv_put_char+0x3e>
     cac:	80 e0       	ldi	r24, 0x00	; 0
     cae:	90 e0       	ldi	r25, 0x00	; 0
     cb0:	df 91       	pop	r29
     cb2:	cf 91       	pop	r28
     cb4:	1f 91       	pop	r17
     cb6:	0f 91       	pop	r16
     cb8:	ff 90       	pop	r15
     cba:	ef 90       	pop	r14
     cbc:	08 95       	ret

00000cbe <oled_set_adressing_mode>:
     cbe:	e0 91 10 01 	lds	r30, 0x0110
     cc2:	f0 91 11 01 	lds	r31, 0x0111
     cc6:	90 e2       	ldi	r25, 0x20	; 32
     cc8:	90 83       	st	Z, r25
     cca:	e0 91 10 01 	lds	r30, 0x0110
     cce:	f0 91 11 01 	lds	r31, 0x0111
     cd2:	80 83       	st	Z, r24
     cd4:	08 95       	ret

00000cd6 <oled_printf>:
     cd6:	cf 93       	push	r28
     cd8:	df 93       	push	r29
     cda:	cd b7       	in	r28, 0x3d	; 61
     cdc:	de b7       	in	r29, 0x3e	; 62
     cde:	fe 01       	movw	r30, r28
     ce0:	35 96       	adiw	r30, 0x05	; 5
     ce2:	61 91       	ld	r22, Z+
     ce4:	71 91       	ld	r23, Z+
     ce6:	af 01       	movw	r20, r30
     ce8:	80 e2       	ldi	r24, 0x20	; 32
     cea:	91 e0       	ldi	r25, 0x01	; 1
     cec:	0e 94 a6 0a 	call	0x154c	; 0x154c <vfprintf>
     cf0:	df 91       	pop	r29
     cf2:	cf 91       	pop	r28
     cf4:	08 95       	ret

00000cf6 <oled_inv_printf>:
     cf6:	cf 93       	push	r28
     cf8:	df 93       	push	r29
     cfa:	cd b7       	in	r28, 0x3d	; 61
     cfc:	de b7       	in	r29, 0x3e	; 62
     cfe:	fe 01       	movw	r30, r28
     d00:	35 96       	adiw	r30, 0x05	; 5
     d02:	61 91       	ld	r22, Z+
     d04:	71 91       	ld	r23, Z+
     d06:	af 01       	movw	r20, r30
     d08:	82 e1       	ldi	r24, 0x12	; 18
     d0a:	91 e0       	ldi	r25, 0x01	; 1
     d0c:	0e 94 a6 0a 	call	0x154c	; 0x154c <vfprintf>
     d10:	df 91       	pop	r29
     d12:	cf 91       	pop	r28
     d14:	08 95       	ret

00000d16 <oled_goto_line>:
     d16:	cf 93       	push	r28
     d18:	df 93       	push	r29
     d1a:	ec 01       	movw	r28, r24
     d1c:	88 30       	cpi	r24, 0x08	; 8
     d1e:	91 05       	cpc	r25, r1
     d20:	80 f4       	brcc	.+32     	; 0xd42 <oled_goto_line+0x2c>
     d22:	90 93 1c 03 	sts	0x031C, r25
     d26:	80 93 1b 03 	sts	0x031B, r24
     d2a:	82 e0       	ldi	r24, 0x02	; 2
     d2c:	0e 94 5f 06 	call	0xcbe	; 0xcbe <oled_set_adressing_mode>
     d30:	c0 55       	subi	r28, 0x50	; 80
     d32:	e0 91 10 01 	lds	r30, 0x0110
     d36:	f0 91 11 01 	lds	r31, 0x0111
     d3a:	c0 83       	st	Z, r28
     d3c:	80 e0       	ldi	r24, 0x00	; 0
     d3e:	0e 94 5f 06 	call	0xcbe	; 0xcbe <oled_set_adressing_mode>
     d42:	df 91       	pop	r29
     d44:	cf 91       	pop	r28
     d46:	08 95       	ret

00000d48 <oled_goto_column>:
     d48:	cf 93       	push	r28
     d4a:	df 93       	push	r29
     d4c:	ec 01       	movw	r28, r24
     d4e:	80 38       	cpi	r24, 0x80	; 128
     d50:	91 05       	cpc	r25, r1
     d52:	50 f5       	brcc	.+84     	; 0xda8 <oled_goto_column+0x60>
     d54:	90 93 1e 03 	sts	0x031E, r25
     d58:	80 93 1d 03 	sts	0x031D, r24
     d5c:	82 e0       	ldi	r24, 0x02	; 2
     d5e:	0e 94 5f 06 	call	0xcbe	; 0xcbe <oled_set_adressing_mode>
     d62:	ce 01       	movw	r24, r28
     d64:	8f 70       	andi	r24, 0x0F	; 15
     d66:	90 78       	andi	r25, 0x80	; 128
     d68:	99 23       	and	r25, r25
     d6a:	24 f4       	brge	.+8      	; 0xd74 <oled_goto_column+0x2c>
     d6c:	01 97       	sbiw	r24, 0x01	; 1
     d6e:	80 6f       	ori	r24, 0xF0	; 240
     d70:	9f 6f       	ori	r25, 0xFF	; 255
     d72:	01 96       	adiw	r24, 0x01	; 1
     d74:	e0 91 10 01 	lds	r30, 0x0110
     d78:	f0 91 11 01 	lds	r31, 0x0111
     d7c:	80 83       	st	Z, r24
     d7e:	ce 01       	movw	r24, r28
     d80:	dd 23       	and	r29, r29
     d82:	0c f4       	brge	.+2      	; 0xd86 <oled_goto_column+0x3e>
     d84:	0f 96       	adiw	r24, 0x0f	; 15
     d86:	95 95       	asr	r25
     d88:	87 95       	ror	r24
     d8a:	95 95       	asr	r25
     d8c:	87 95       	ror	r24
     d8e:	95 95       	asr	r25
     d90:	87 95       	ror	r24
     d92:	95 95       	asr	r25
     d94:	87 95       	ror	r24
     d96:	80 5f       	subi	r24, 0xF0	; 240
     d98:	e0 91 10 01 	lds	r30, 0x0110
     d9c:	f0 91 11 01 	lds	r31, 0x0111
     da0:	80 83       	st	Z, r24
     da2:	80 e0       	ldi	r24, 0x00	; 0
     da4:	0e 94 5f 06 	call	0xcbe	; 0xcbe <oled_set_adressing_mode>
     da8:	df 91       	pop	r29
     daa:	cf 91       	pop	r28
     dac:	08 95       	ret

00000dae <oled_pos>:
     dae:	cf 93       	push	r28
     db0:	df 93       	push	r29
     db2:	eb 01       	movw	r28, r22
     db4:	0e 94 8b 06 	call	0xd16	; 0xd16 <oled_goto_line>
     db8:	ce 01       	movw	r24, r28
     dba:	0e 94 a4 06 	call	0xd48	; 0xd48 <oled_goto_column>
     dbe:	df 91       	pop	r29
     dc0:	cf 91       	pop	r28
     dc2:	08 95       	ret

00000dc4 <oled_home>:
     dc4:	60 e0       	ldi	r22, 0x00	; 0
     dc6:	70 e0       	ldi	r23, 0x00	; 0
     dc8:	80 e0       	ldi	r24, 0x00	; 0
     dca:	90 e0       	ldi	r25, 0x00	; 0
     dcc:	0e 94 d7 06 	call	0xdae	; 0xdae <oled_pos>
     dd0:	08 95       	ret

00000dd2 <oled_clear_line>:
     dd2:	cf 93       	push	r28
     dd4:	df 93       	push	r29
     dd6:	ec 01       	movw	r28, r24
     dd8:	60 e0       	ldi	r22, 0x00	; 0
     dda:	70 e0       	ldi	r23, 0x00	; 0
     ddc:	0e 94 d7 06 	call	0xdae	; 0xdae <oled_pos>
     de0:	20 e8       	ldi	r18, 0x80	; 128
     de2:	30 e0       	ldi	r19, 0x00	; 0
     de4:	e0 91 0e 01 	lds	r30, 0x010E
     de8:	f0 91 0f 01 	lds	r31, 0x010F
     dec:	10 82       	st	Z, r1
     dee:	21 50       	subi	r18, 0x01	; 1
     df0:	31 09       	sbc	r19, r1
     df2:	21 15       	cp	r18, r1
     df4:	31 05       	cpc	r19, r1
     df6:	b1 f7       	brne	.-20     	; 0xde4 <oled_clear_line+0x12>
     df8:	ce 01       	movw	r24, r28
     dfa:	0e 94 8b 06 	call	0xd16	; 0xd16 <oled_goto_line>
     dfe:	df 91       	pop	r29
     e00:	cf 91       	pop	r28
     e02:	08 95       	ret

00000e04 <oled_reset>:
     e04:	cf 93       	push	r28
     e06:	df 93       	push	r29
     e08:	c0 e0       	ldi	r28, 0x00	; 0
     e0a:	d0 e0       	ldi	r29, 0x00	; 0
     e0c:	ce 01       	movw	r24, r28
     e0e:	0e 94 e9 06 	call	0xdd2	; 0xdd2 <oled_clear_line>
     e12:	21 96       	adiw	r28, 0x01	; 1
     e14:	c8 30       	cpi	r28, 0x08	; 8
     e16:	d1 05       	cpc	r29, r1
     e18:	c9 f7       	brne	.-14     	; 0xe0c <oled_reset+0x8>
     e1a:	0e 94 e2 06 	call	0xdc4	; 0xdc4 <oled_home>
     e1e:	df 91       	pop	r29
     e20:	cf 91       	pop	r28
     e22:	08 95       	ret

00000e24 <oled_init>:
     e24:	e0 91 10 01 	lds	r30, 0x0110
     e28:	f0 91 11 01 	lds	r31, 0x0111
     e2c:	8e ea       	ldi	r24, 0xAE	; 174
     e2e:	80 83       	st	Z, r24
     e30:	e0 91 10 01 	lds	r30, 0x0110
     e34:	f0 91 11 01 	lds	r31, 0x0111
     e38:	81 ea       	ldi	r24, 0xA1	; 161
     e3a:	80 83       	st	Z, r24
     e3c:	e0 91 10 01 	lds	r30, 0x0110
     e40:	f0 91 11 01 	lds	r31, 0x0111
     e44:	8a ed       	ldi	r24, 0xDA	; 218
     e46:	80 83       	st	Z, r24
     e48:	e0 91 10 01 	lds	r30, 0x0110
     e4c:	f0 91 11 01 	lds	r31, 0x0111
     e50:	82 e1       	ldi	r24, 0x12	; 18
     e52:	80 83       	st	Z, r24
     e54:	e0 91 10 01 	lds	r30, 0x0110
     e58:	f0 91 11 01 	lds	r31, 0x0111
     e5c:	88 ec       	ldi	r24, 0xC8	; 200
     e5e:	80 83       	st	Z, r24
     e60:	e0 91 10 01 	lds	r30, 0x0110
     e64:	f0 91 11 01 	lds	r31, 0x0111
     e68:	88 ea       	ldi	r24, 0xA8	; 168
     e6a:	80 83       	st	Z, r24
     e6c:	e0 91 10 01 	lds	r30, 0x0110
     e70:	f0 91 11 01 	lds	r31, 0x0111
     e74:	8f e3       	ldi	r24, 0x3F	; 63
     e76:	80 83       	st	Z, r24
     e78:	e0 91 10 01 	lds	r30, 0x0110
     e7c:	f0 91 11 01 	lds	r31, 0x0111
     e80:	85 ed       	ldi	r24, 0xD5	; 213
     e82:	80 83       	st	Z, r24
     e84:	e0 91 10 01 	lds	r30, 0x0110
     e88:	f0 91 11 01 	lds	r31, 0x0111
     e8c:	80 e8       	ldi	r24, 0x80	; 128
     e8e:	80 83       	st	Z, r24
     e90:	e0 91 10 01 	lds	r30, 0x0110
     e94:	f0 91 11 01 	lds	r31, 0x0111
     e98:	81 e8       	ldi	r24, 0x81	; 129
     e9a:	80 83       	st	Z, r24
     e9c:	e0 91 10 01 	lds	r30, 0x0110
     ea0:	f0 91 11 01 	lds	r31, 0x0111
     ea4:	80 e5       	ldi	r24, 0x50	; 80
     ea6:	80 83       	st	Z, r24
     ea8:	e0 91 10 01 	lds	r30, 0x0110
     eac:	f0 91 11 01 	lds	r31, 0x0111
     eb0:	89 ed       	ldi	r24, 0xD9	; 217
     eb2:	80 83       	st	Z, r24
     eb4:	e0 91 10 01 	lds	r30, 0x0110
     eb8:	f0 91 11 01 	lds	r31, 0x0111
     ebc:	81 e2       	ldi	r24, 0x21	; 33
     ebe:	80 83       	st	Z, r24
     ec0:	80 e0       	ldi	r24, 0x00	; 0
     ec2:	0e 94 5f 06 	call	0xcbe	; 0xcbe <oled_set_adressing_mode>
     ec6:	e0 91 10 01 	lds	r30, 0x0110
     eca:	f0 91 11 01 	lds	r31, 0x0111
     ece:	8b ed       	ldi	r24, 0xDB	; 219
     ed0:	80 83       	st	Z, r24
     ed2:	e0 91 10 01 	lds	r30, 0x0110
     ed6:	f0 91 11 01 	lds	r31, 0x0111
     eda:	80 e3       	ldi	r24, 0x30	; 48
     edc:	80 83       	st	Z, r24
     ede:	e0 91 10 01 	lds	r30, 0x0110
     ee2:	f0 91 11 01 	lds	r31, 0x0111
     ee6:	8d ea       	ldi	r24, 0xAD	; 173
     ee8:	80 83       	st	Z, r24
     eea:	e0 91 10 01 	lds	r30, 0x0110
     eee:	f0 91 11 01 	lds	r31, 0x0111
     ef2:	10 82       	st	Z, r1
     ef4:	e0 91 10 01 	lds	r30, 0x0110
     ef8:	f0 91 11 01 	lds	r31, 0x0111
     efc:	84 ea       	ldi	r24, 0xA4	; 164
     efe:	80 83       	st	Z, r24
     f00:	e0 91 10 01 	lds	r30, 0x0110
     f04:	f0 91 11 01 	lds	r31, 0x0111
     f08:	86 ea       	ldi	r24, 0xA6	; 166
     f0a:	80 83       	st	Z, r24
     f0c:	e0 91 10 01 	lds	r30, 0x0110
     f10:	f0 91 11 01 	lds	r31, 0x0111
     f14:	8f ea       	ldi	r24, 0xAF	; 175
     f16:	80 83       	st	Z, r24
     f18:	0e 94 02 07 	call	0xe04	; 0xe04 <oled_reset>
     f1c:	08 95       	ret

00000f1e <new_menu>:
void set_first_child(menu* mymenu, menu* first_child) {
	mymenu->first_child = first_child;
}


menu* new_menu(char* name, menu* parent) {
     f1e:	0f 93       	push	r16
     f20:	1f 93       	push	r17
     f22:	cf 93       	push	r28
     f24:	df 93       	push	r29
     f26:	8c 01       	movw	r16, r24
     f28:	eb 01       	movw	r28, r22
	menu* nextmenu = malloc(sizeof(menu));
     f2a:	89 e0       	ldi	r24, 0x09	; 9
     f2c:	90 e0       	ldi	r25, 0x00	; 0
     f2e:	0e 94 95 08 	call	0x112a	; 0x112a <malloc>
     f32:	fc 01       	movw	r30, r24
 	nextmenu->title = name;
     f34:	11 83       	std	Z+1, r17	; 0x01
     f36:	00 83       	st	Z, r16
	nextmenu->parent = parent;
     f38:	d4 83       	std	Z+4, r29	; 0x04
     f3a:	c3 83       	std	Z+3, r28	; 0x03
 	nextmenu->right_sibling = NULL;
     f3c:	10 86       	std	Z+8, r1	; 0x08
     f3e:	17 82       	std	Z+7, r1	; 0x07
	nextmenu->first_child = NULL;
     f40:	16 82       	std	Z+6, r1	; 0x06
     f42:	15 82       	std	Z+5, r1	; 0x05
	return nextmenu;
}
     f44:	df 91       	pop	r29
     f46:	cf 91       	pop	r28
     f48:	1f 91       	pop	r17
     f4a:	0f 91       	pop	r16
     f4c:	08 95       	ret

00000f4e <size_of_menu>:

int size_of_menu(menu* mymenu) {
	
	int menu_size = 0;
	
	mymenu = mymenu->first_child;
     f4e:	dc 01       	movw	r26, r24
     f50:	15 96       	adiw	r26, 0x05	; 5
     f52:	ed 91       	ld	r30, X+
     f54:	fc 91       	ld	r31, X
     f56:	16 97       	sbiw	r26, 0x06	; 6
	if (mymenu == NULL) {
     f58:	30 97       	sbiw	r30, 0x00	; 0
     f5a:	79 f0       	breq	.+30     	; 0xf7a <size_of_menu+0x2c>
		return menu_size;
	}
	menu_size ++;
	while (mymenu->right_sibling != NULL) {
     f5c:	07 80       	ldd	r0, Z+7	; 0x07
     f5e:	f0 85       	ldd	r31, Z+8	; 0x08
     f60:	e0 2d       	mov	r30, r0
     f62:	30 97       	sbiw	r30, 0x00	; 0
     f64:	69 f0       	breq	.+26     	; 0xf80 <size_of_menu+0x32>
     f66:	21 e0       	ldi	r18, 0x01	; 1
     f68:	30 e0       	ldi	r19, 0x00	; 0
		mymenu = mymenu->right_sibling;
		menu_size++;
     f6a:	2f 5f       	subi	r18, 0xFF	; 255
     f6c:	3f 4f       	sbci	r19, 0xFF	; 255
	mymenu = mymenu->first_child;
	if (mymenu == NULL) {
		return menu_size;
	}
	menu_size ++;
	while (mymenu->right_sibling != NULL) {
     f6e:	07 80       	ldd	r0, Z+7	; 0x07
     f70:	f0 85       	ldd	r31, Z+8	; 0x08
     f72:	e0 2d       	mov	r30, r0
     f74:	30 97       	sbiw	r30, 0x00	; 0
     f76:	c9 f7       	brne	.-14     	; 0xf6a <size_of_menu+0x1c>
     f78:	06 c0       	rjmp	.+12     	; 0xf86 <size_of_menu+0x38>
	
	int menu_size = 0;
	
	mymenu = mymenu->first_child;
	if (mymenu == NULL) {
		return menu_size;
     f7a:	80 e0       	ldi	r24, 0x00	; 0
     f7c:	90 e0       	ldi	r25, 0x00	; 0
     f7e:	08 95       	ret
	}
	menu_size ++;
	while (mymenu->right_sibling != NULL) {
     f80:	81 e0       	ldi	r24, 0x01	; 1
     f82:	90 e0       	ldi	r25, 0x00	; 0
     f84:	08 95       	ret
		mymenu = mymenu->right_sibling;
		menu_size++;
     f86:	82 2f       	mov	r24, r18
     f88:	93 2f       	mov	r25, r19
	}
	return menu_size;
}
     f8a:	08 95       	ret

00000f8c <oled_menu_print>:
	current_menu_size = size_of_menu(current_menu);
	oled_menu_print(current_menu);
	return direction;
}

void oled_menu_print(menu* mymenu){
     f8c:	0f 93       	push	r16
     f8e:	1f 93       	push	r17
     f90:	cf 93       	push	r28
     f92:	df 93       	push	r29
     f94:	ec 01       	movw	r28, r24
	
	oled_reset(); 
     f96:	0e 94 02 07 	call	0xe04	; 0xe04 <oled_reset>
	
	current_menu_size = size_of_menu(mymenu);
     f9a:	ce 01       	movw	r24, r28
     f9c:	0e 94 a7 07 	call	0xf4e	; 0xf4e <size_of_menu>
     fa0:	90 93 22 03 	sts	0x0322, r25
     fa4:	80 93 21 03 	sts	0x0321, r24
	mymenu = mymenu->first_child;
     fa8:	0d 81       	ldd	r16, Y+5	; 0x05
     faa:	1e 81       	ldd	r17, Y+6	; 0x06
	for(int i = 0; i < current_menu_size; i++){
     fac:	80 91 21 03 	lds	r24, 0x0321
     fb0:	90 91 22 03 	lds	r25, 0x0322
     fb4:	18 16       	cp	r1, r24
     fb6:	19 06       	cpc	r1, r25
     fb8:	64 f5       	brge	.+88     	; 0x1012 <oled_menu_print+0x86>
     fba:	c0 e0       	ldi	r28, 0x00	; 0
     fbc:	d0 e0       	ldi	r29, 0x00	; 0
		oled_pos(i,0);
     fbe:	60 e0       	ldi	r22, 0x00	; 0
     fc0:	70 e0       	ldi	r23, 0x00	; 0
     fc2:	ce 01       	movw	r24, r28
     fc4:	0e 94 d7 06 	call	0xdae	; 0xdae <oled_pos>
		if(current_line == i){
     fc8:	80 91 2e 01 	lds	r24, 0x012E
     fcc:	90 91 2f 01 	lds	r25, 0x012F
     fd0:	8c 17       	cp	r24, r28
     fd2:	9d 07       	cpc	r25, r29
     fd4:	51 f4       	brne	.+20     	; 0xfea <oled_menu_print+0x5e>
			oled_inv_printf(mymenu->title);
     fd6:	f8 01       	movw	r30, r16
     fd8:	81 81       	ldd	r24, Z+1	; 0x01
     fda:	8f 93       	push	r24
     fdc:	80 81       	ld	r24, Z
     fde:	8f 93       	push	r24
     fe0:	0e 94 7b 06 	call	0xcf6	; 0xcf6 <oled_inv_printf>
     fe4:	0f 90       	pop	r0
     fe6:	0f 90       	pop	r0
     fe8:	09 c0       	rjmp	.+18     	; 0xffc <oled_menu_print+0x70>
		}
		else{
			oled_printf(mymenu->title);
     fea:	f8 01       	movw	r30, r16
     fec:	81 81       	ldd	r24, Z+1	; 0x01
     fee:	8f 93       	push	r24
     ff0:	80 81       	ld	r24, Z
     ff2:	8f 93       	push	r24
     ff4:	0e 94 6b 06 	call	0xcd6	; 0xcd6 <oled_printf>
     ff8:	0f 90       	pop	r0
     ffa:	0f 90       	pop	r0
		}
		mymenu = mymenu->right_sibling;
     ffc:	f8 01       	movw	r30, r16
     ffe:	07 81       	ldd	r16, Z+7	; 0x07
    1000:	10 85       	ldd	r17, Z+8	; 0x08
	
	oled_reset(); 
	
	current_menu_size = size_of_menu(mymenu);
	mymenu = mymenu->first_child;
	for(int i = 0; i < current_menu_size; i++){
    1002:	21 96       	adiw	r28, 0x01	; 1
    1004:	80 91 21 03 	lds	r24, 0x0321
    1008:	90 91 22 03 	lds	r25, 0x0322
    100c:	c8 17       	cp	r28, r24
    100e:	d9 07       	cpc	r29, r25
    1010:	b4 f2       	brlt	.-84     	; 0xfbe <oled_menu_print+0x32>
		}
		mymenu = mymenu->right_sibling;
	}
	mymenu = mymenu->parent;
	
    1012:	df 91       	pop	r29
    1014:	cf 91       	pop	r28
    1016:	1f 91       	pop	r17
    1018:	0f 91       	pop	r16
    101a:	08 95       	ret

0000101c <oled_menu_init>:
		menu_size++;
	}
	return menu_size;
}

menu* oled_menu_init(void) {
    101c:	4f 92       	push	r4
    101e:	5f 92       	push	r5
    1020:	6f 92       	push	r6
    1022:	7f 92       	push	r7
    1024:	8f 92       	push	r8
    1026:	9f 92       	push	r9
    1028:	af 92       	push	r10
    102a:	bf 92       	push	r11
    102c:	cf 92       	push	r12
    102e:	df 92       	push	r13
    1030:	ef 92       	push	r14
    1032:	ff 92       	push	r15
    1034:	0f 93       	push	r16
    1036:	1f 93       	push	r17
    1038:	cf 93       	push	r28
    103a:	df 93       	push	r29
	menu* main_menu = new_menu("Main Menu", NULL);
    103c:	60 e0       	ldi	r22, 0x00	; 0
    103e:	70 e0       	ldi	r23, 0x00	; 0
    1040:	87 ed       	ldi	r24, 0xD7	; 215
    1042:	92 e0       	ldi	r25, 0x02	; 2
    1044:	0e 94 8f 07 	call	0xf1e	; 0xf1e <new_menu>
    1048:	ec 01       	movw	r28, r24
	menu* play_game = new_menu("Play Game", main_menu);
    104a:	bc 01       	movw	r22, r24
    104c:	81 ee       	ldi	r24, 0xE1	; 225
    104e:	92 e0       	ldi	r25, 0x02	; 2
    1050:	0e 94 8f 07 	call	0xf1e	; 0xf1e <new_menu>
    1054:	7c 01       	movw	r14, r24
	menu* highscores = new_menu("Highscores", main_menu);
    1056:	be 01       	movw	r22, r28
    1058:	8b ee       	ldi	r24, 0xEB	; 235
    105a:	92 e0       	ldi	r25, 0x02	; 2
    105c:	0e 94 8f 07 	call	0xf1e	; 0xf1e <new_menu>
    1060:	8c 01       	movw	r16, r24
	menu* Test = new_menu("Test", main_menu);
    1062:	be 01       	movw	r22, r28
    1064:	86 ef       	ldi	r24, 0xF6	; 246
    1066:	92 e0       	ldi	r25, 0x02	; 2
    1068:	0e 94 8f 07 	call	0xf1e	; 0xf1e <new_menu>
    106c:	4c 01       	movw	r8, r24
	menu* Test1 = new_menu("Test1", Test);
    106e:	bc 01       	movw	r22, r24
    1070:	8b ef       	ldi	r24, 0xFB	; 251
    1072:	92 e0       	ldi	r25, 0x02	; 2
    1074:	0e 94 8f 07 	call	0xf1e	; 0xf1e <new_menu>
    1078:	6c 01       	movw	r12, r24
	menu* Test2 = new_menu("Test2", Test1);
    107a:	bc 01       	movw	r22, r24
    107c:	81 e0       	ldi	r24, 0x01	; 1
    107e:	93 e0       	ldi	r25, 0x03	; 3
    1080:	0e 94 8f 07 	call	0xf1e	; 0xf1e <new_menu>
    1084:	2c 01       	movw	r4, r24
	menu* TestP = new_menu("TestP", play_game);
    1086:	b7 01       	movw	r22, r14
    1088:	87 e0       	ldi	r24, 0x07	; 7
    108a:	93 e0       	ldi	r25, 0x03	; 3
    108c:	0e 94 8f 07 	call	0xf1e	; 0xf1e <new_menu>
    1090:	5c 01       	movw	r10, r24
	menu* TestH = new_menu("TestH", highscores);
    1092:	b8 01       	movw	r22, r16
    1094:	8d e0       	ldi	r24, 0x0D	; 13
    1096:	93 e0       	ldi	r25, 0x03	; 3
    1098:	0e 94 8f 07 	call	0xf1e	; 0xf1e <new_menu>
    109c:	3c 01       	movw	r6, r24
	
	
	current_menu = main_menu;
    109e:	d0 93 20 03 	sts	0x0320, r29
    10a2:	c0 93 1f 03 	sts	0x031F, r28
	current_menu_size = size_of_menu(current_menu);
    10a6:	ce 01       	movw	r24, r28
    10a8:	0e 94 a7 07 	call	0xf4e	; 0xf4e <size_of_menu>
    10ac:	90 93 22 03 	sts	0x0322, r25
    10b0:	80 93 21 03 	sts	0x0321, r24
	oled_menu_print(current_menu);
    10b4:	ce 01       	movw	r24, r28
    10b6:	0e 94 c6 07 	call	0xf8c	; 0xf8c <oled_menu_print>
	mymenu->right_sibling = right_sibling;
}


void set_first_child(menu* mymenu, menu* first_child) {
	mymenu->first_child = first_child;
    10ba:	fe 82       	std	Y+6, r15	; 0x06
    10bc:	ed 82       	std	Y+5, r14	; 0x05
volatile menu* current_menu;
volatile int current_line = 2;
volatile int current_menu_size;

void set_right_sibling(menu* mymenu, menu* right_sibling) {
	mymenu->right_sibling = right_sibling;
    10be:	f7 01       	movw	r30, r14
    10c0:	10 87       	std	Z+8, r17	; 0x08
    10c2:	07 83       	std	Z+7, r16	; 0x07
    10c4:	f8 01       	movw	r30, r16
    10c6:	90 86       	std	Z+8, r9	; 0x08
    10c8:	87 82       	std	Z+7, r8	; 0x07
}


void set_first_child(menu* mymenu, menu* first_child) {
	mymenu->first_child = first_child;
    10ca:	f4 01       	movw	r30, r8
    10cc:	d6 82       	std	Z+6, r13	; 0x06
    10ce:	c5 82       	std	Z+5, r12	; 0x05
    10d0:	f7 01       	movw	r30, r14
    10d2:	b6 82       	std	Z+6, r11	; 0x06
    10d4:	a5 82       	std	Z+5, r10	; 0x05
    10d6:	f8 01       	movw	r30, r16
    10d8:	76 82       	std	Z+6, r7	; 0x06
    10da:	65 82       	std	Z+5, r6	; 0x05
    10dc:	f6 01       	movw	r30, r12
    10de:	56 82       	std	Z+6, r5	; 0x06
    10e0:	45 82       	std	Z+5, r4	; 0x05
	set_first_child(play_game, TestP);
	set_first_child(highscores, TestH);
	//set_right_sibling(Test1,Test2);
	set_first_child(Test1, Test2);
	return current_menu;
}
    10e2:	80 91 1f 03 	lds	r24, 0x031F
    10e6:	90 91 20 03 	lds	r25, 0x0320
    10ea:	df 91       	pop	r29
    10ec:	cf 91       	pop	r28
    10ee:	1f 91       	pop	r17
    10f0:	0f 91       	pop	r16
    10f2:	ff 90       	pop	r15
    10f4:	ef 90       	pop	r14
    10f6:	df 90       	pop	r13
    10f8:	cf 90       	pop	r12
    10fa:	bf 90       	pop	r11
    10fc:	af 90       	pop	r10
    10fe:	9f 90       	pop	r9
    1100:	8f 90       	pop	r8
    1102:	7f 90       	pop	r7
    1104:	6f 90       	pop	r6
    1106:	5f 90       	pop	r5
    1108:	4f 90       	pop	r4
    110a:	08 95       	ret

0000110c <SPI_init>:
#include "bit_macros.h"
#include <avr/delay.h>
void SPI_init(){
	
	/* Set SS, MOSI and SCK output, all others input */
	DDRB = (1<<PB4)|(1<<PB5)|(1<<PB7);
    110c:	80 eb       	ldi	r24, 0xB0	; 176
    110e:	87 bb       	out	0x17, r24	; 23
	/* Enable SPI, Master, set clock rate fck/16 */
	SPCR = (1<<SPE)|(1<<MSTR)|(1<<SPR0);
    1110:	81 e5       	ldi	r24, 0x51	; 81
    1112:	8d b9       	out	0x0d, r24	; 13
	
	/* Set SS-pin high */
	set_bit(PORTB, PB4);
    1114:	c4 9a       	sbi	0x18, 4	; 24
    1116:	08 95       	ret

00001118 <SPI_write>:

void SPI_write(char cData) {
	
	
	/* Start transmission */
	SPDR = cData;
    1118:	8f b9       	out	0x0f, r24	; 15
	
	/* Wait for transmission complete */
	loop_until_bit_is_set(SPSR, SPIF);
    111a:	77 9b       	sbis	0x0e, 7	; 14
    111c:	fe cf       	rjmp	.-4      	; 0x111a <SPI_write+0x2>
	
}
    111e:	08 95       	ret

00001120 <SPI_read>:

char SPI_read() {
	
	/* Start shifting registers by putting a char in the register */
	SPDR = 0x00;
    1120:	1f b8       	out	0x0f, r1	; 15
	//_delay_ms(10);
	/* Wait for receive complete */ 
	loop_until_bit_is_set(SPSR,SPIF);
    1122:	77 9b       	sbis	0x0e, 7	; 14
    1124:	fe cf       	rjmp	.-4      	; 0x1122 <SPI_read+0x2>
	
	return SPDR;
    1126:	8f b1       	in	r24, 0x0f	; 15
}
    1128:	08 95       	ret

0000112a <malloc>:
    112a:	cf 93       	push	r28
    112c:	df 93       	push	r29
    112e:	82 30       	cpi	r24, 0x02	; 2
    1130:	91 05       	cpc	r25, r1
    1132:	10 f4       	brcc	.+4      	; 0x1138 <malloc+0xe>
    1134:	82 e0       	ldi	r24, 0x02	; 2
    1136:	90 e0       	ldi	r25, 0x00	; 0
    1138:	e0 91 25 03 	lds	r30, 0x0325
    113c:	f0 91 26 03 	lds	r31, 0x0326
    1140:	20 e0       	ldi	r18, 0x00	; 0
    1142:	30 e0       	ldi	r19, 0x00	; 0
    1144:	a0 e0       	ldi	r26, 0x00	; 0
    1146:	b0 e0       	ldi	r27, 0x00	; 0
    1148:	30 97       	sbiw	r30, 0x00	; 0
    114a:	39 f1       	breq	.+78     	; 0x119a <malloc+0x70>
    114c:	40 81       	ld	r20, Z
    114e:	51 81       	ldd	r21, Z+1	; 0x01
    1150:	48 17       	cp	r20, r24
    1152:	59 07       	cpc	r21, r25
    1154:	b8 f0       	brcs	.+46     	; 0x1184 <malloc+0x5a>
    1156:	48 17       	cp	r20, r24
    1158:	59 07       	cpc	r21, r25
    115a:	71 f4       	brne	.+28     	; 0x1178 <malloc+0x4e>
    115c:	82 81       	ldd	r24, Z+2	; 0x02
    115e:	93 81       	ldd	r25, Z+3	; 0x03
    1160:	10 97       	sbiw	r26, 0x00	; 0
    1162:	29 f0       	breq	.+10     	; 0x116e <malloc+0x44>
    1164:	13 96       	adiw	r26, 0x03	; 3
    1166:	9c 93       	st	X, r25
    1168:	8e 93       	st	-X, r24
    116a:	12 97       	sbiw	r26, 0x02	; 2
    116c:	2c c0       	rjmp	.+88     	; 0x11c6 <malloc+0x9c>
    116e:	90 93 26 03 	sts	0x0326, r25
    1172:	80 93 25 03 	sts	0x0325, r24
    1176:	27 c0       	rjmp	.+78     	; 0x11c6 <malloc+0x9c>
    1178:	21 15       	cp	r18, r1
    117a:	31 05       	cpc	r19, r1
    117c:	31 f0       	breq	.+12     	; 0x118a <malloc+0x60>
    117e:	42 17       	cp	r20, r18
    1180:	53 07       	cpc	r21, r19
    1182:	18 f0       	brcs	.+6      	; 0x118a <malloc+0x60>
    1184:	a9 01       	movw	r20, r18
    1186:	db 01       	movw	r26, r22
    1188:	01 c0       	rjmp	.+2      	; 0x118c <malloc+0x62>
    118a:	ef 01       	movw	r28, r30
    118c:	9a 01       	movw	r18, r20
    118e:	bd 01       	movw	r22, r26
    1190:	df 01       	movw	r26, r30
    1192:	02 80       	ldd	r0, Z+2	; 0x02
    1194:	f3 81       	ldd	r31, Z+3	; 0x03
    1196:	e0 2d       	mov	r30, r0
    1198:	d7 cf       	rjmp	.-82     	; 0x1148 <malloc+0x1e>
    119a:	21 15       	cp	r18, r1
    119c:	31 05       	cpc	r19, r1
    119e:	f9 f0       	breq	.+62     	; 0x11de <malloc+0xb4>
    11a0:	28 1b       	sub	r18, r24
    11a2:	39 0b       	sbc	r19, r25
    11a4:	24 30       	cpi	r18, 0x04	; 4
    11a6:	31 05       	cpc	r19, r1
    11a8:	80 f4       	brcc	.+32     	; 0x11ca <malloc+0xa0>
    11aa:	8a 81       	ldd	r24, Y+2	; 0x02
    11ac:	9b 81       	ldd	r25, Y+3	; 0x03
    11ae:	61 15       	cp	r22, r1
    11b0:	71 05       	cpc	r23, r1
    11b2:	21 f0       	breq	.+8      	; 0x11bc <malloc+0x92>
    11b4:	fb 01       	movw	r30, r22
    11b6:	93 83       	std	Z+3, r25	; 0x03
    11b8:	82 83       	std	Z+2, r24	; 0x02
    11ba:	04 c0       	rjmp	.+8      	; 0x11c4 <malloc+0x9a>
    11bc:	90 93 26 03 	sts	0x0326, r25
    11c0:	80 93 25 03 	sts	0x0325, r24
    11c4:	fe 01       	movw	r30, r28
    11c6:	32 96       	adiw	r30, 0x02	; 2
    11c8:	44 c0       	rjmp	.+136    	; 0x1252 <malloc+0x128>
    11ca:	fe 01       	movw	r30, r28
    11cc:	e2 0f       	add	r30, r18
    11ce:	f3 1f       	adc	r31, r19
    11d0:	81 93       	st	Z+, r24
    11d2:	91 93       	st	Z+, r25
    11d4:	22 50       	subi	r18, 0x02	; 2
    11d6:	31 09       	sbc	r19, r1
    11d8:	39 83       	std	Y+1, r19	; 0x01
    11da:	28 83       	st	Y, r18
    11dc:	3a c0       	rjmp	.+116    	; 0x1252 <malloc+0x128>
    11de:	20 91 23 03 	lds	r18, 0x0323
    11e2:	30 91 24 03 	lds	r19, 0x0324
    11e6:	23 2b       	or	r18, r19
    11e8:	41 f4       	brne	.+16     	; 0x11fa <malloc+0xd0>
    11ea:	20 91 02 01 	lds	r18, 0x0102
    11ee:	30 91 03 01 	lds	r19, 0x0103
    11f2:	30 93 24 03 	sts	0x0324, r19
    11f6:	20 93 23 03 	sts	0x0323, r18
    11fa:	20 91 00 01 	lds	r18, 0x0100
    11fe:	30 91 01 01 	lds	r19, 0x0101
    1202:	21 15       	cp	r18, r1
    1204:	31 05       	cpc	r19, r1
    1206:	41 f4       	brne	.+16     	; 0x1218 <malloc+0xee>
    1208:	2d b7       	in	r18, 0x3d	; 61
    120a:	3e b7       	in	r19, 0x3e	; 62
    120c:	40 91 04 01 	lds	r20, 0x0104
    1210:	50 91 05 01 	lds	r21, 0x0105
    1214:	24 1b       	sub	r18, r20
    1216:	35 0b       	sbc	r19, r21
    1218:	e0 91 23 03 	lds	r30, 0x0323
    121c:	f0 91 24 03 	lds	r31, 0x0324
    1220:	e2 17       	cp	r30, r18
    1222:	f3 07       	cpc	r31, r19
    1224:	a0 f4       	brcc	.+40     	; 0x124e <malloc+0x124>
    1226:	2e 1b       	sub	r18, r30
    1228:	3f 0b       	sbc	r19, r31
    122a:	28 17       	cp	r18, r24
    122c:	39 07       	cpc	r19, r25
    122e:	78 f0       	brcs	.+30     	; 0x124e <malloc+0x124>
    1230:	ac 01       	movw	r20, r24
    1232:	4e 5f       	subi	r20, 0xFE	; 254
    1234:	5f 4f       	sbci	r21, 0xFF	; 255
    1236:	24 17       	cp	r18, r20
    1238:	35 07       	cpc	r19, r21
    123a:	48 f0       	brcs	.+18     	; 0x124e <malloc+0x124>
    123c:	4e 0f       	add	r20, r30
    123e:	5f 1f       	adc	r21, r31
    1240:	50 93 24 03 	sts	0x0324, r21
    1244:	40 93 23 03 	sts	0x0323, r20
    1248:	81 93       	st	Z+, r24
    124a:	91 93       	st	Z+, r25
    124c:	02 c0       	rjmp	.+4      	; 0x1252 <malloc+0x128>
    124e:	e0 e0       	ldi	r30, 0x00	; 0
    1250:	f0 e0       	ldi	r31, 0x00	; 0
    1252:	cf 01       	movw	r24, r30
    1254:	df 91       	pop	r29
    1256:	cf 91       	pop	r28
    1258:	08 95       	ret

0000125a <free>:
    125a:	cf 93       	push	r28
    125c:	df 93       	push	r29
    125e:	00 97       	sbiw	r24, 0x00	; 0
    1260:	09 f4       	brne	.+2      	; 0x1264 <free+0xa>
    1262:	87 c0       	rjmp	.+270    	; 0x1372 <free+0x118>
    1264:	fc 01       	movw	r30, r24
    1266:	32 97       	sbiw	r30, 0x02	; 2
    1268:	13 82       	std	Z+3, r1	; 0x03
    126a:	12 82       	std	Z+2, r1	; 0x02
    126c:	c0 91 25 03 	lds	r28, 0x0325
    1270:	d0 91 26 03 	lds	r29, 0x0326
    1274:	20 97       	sbiw	r28, 0x00	; 0
    1276:	81 f4       	brne	.+32     	; 0x1298 <free+0x3e>
    1278:	20 81       	ld	r18, Z
    127a:	31 81       	ldd	r19, Z+1	; 0x01
    127c:	28 0f       	add	r18, r24
    127e:	39 1f       	adc	r19, r25
    1280:	80 91 23 03 	lds	r24, 0x0323
    1284:	90 91 24 03 	lds	r25, 0x0324
    1288:	82 17       	cp	r24, r18
    128a:	93 07       	cpc	r25, r19
    128c:	79 f5       	brne	.+94     	; 0x12ec <free+0x92>
    128e:	f0 93 24 03 	sts	0x0324, r31
    1292:	e0 93 23 03 	sts	0x0323, r30
    1296:	6d c0       	rjmp	.+218    	; 0x1372 <free+0x118>
    1298:	de 01       	movw	r26, r28
    129a:	20 e0       	ldi	r18, 0x00	; 0
    129c:	30 e0       	ldi	r19, 0x00	; 0
    129e:	ae 17       	cp	r26, r30
    12a0:	bf 07       	cpc	r27, r31
    12a2:	50 f4       	brcc	.+20     	; 0x12b8 <free+0x5e>
    12a4:	12 96       	adiw	r26, 0x02	; 2
    12a6:	4d 91       	ld	r20, X+
    12a8:	5c 91       	ld	r21, X
    12aa:	13 97       	sbiw	r26, 0x03	; 3
    12ac:	9d 01       	movw	r18, r26
    12ae:	41 15       	cp	r20, r1
    12b0:	51 05       	cpc	r21, r1
    12b2:	09 f1       	breq	.+66     	; 0x12f6 <free+0x9c>
    12b4:	da 01       	movw	r26, r20
    12b6:	f3 cf       	rjmp	.-26     	; 0x129e <free+0x44>
    12b8:	b3 83       	std	Z+3, r27	; 0x03
    12ba:	a2 83       	std	Z+2, r26	; 0x02
    12bc:	40 81       	ld	r20, Z
    12be:	51 81       	ldd	r21, Z+1	; 0x01
    12c0:	84 0f       	add	r24, r20
    12c2:	95 1f       	adc	r25, r21
    12c4:	8a 17       	cp	r24, r26
    12c6:	9b 07       	cpc	r25, r27
    12c8:	71 f4       	brne	.+28     	; 0x12e6 <free+0x8c>
    12ca:	8d 91       	ld	r24, X+
    12cc:	9c 91       	ld	r25, X
    12ce:	11 97       	sbiw	r26, 0x01	; 1
    12d0:	84 0f       	add	r24, r20
    12d2:	95 1f       	adc	r25, r21
    12d4:	02 96       	adiw	r24, 0x02	; 2
    12d6:	91 83       	std	Z+1, r25	; 0x01
    12d8:	80 83       	st	Z, r24
    12da:	12 96       	adiw	r26, 0x02	; 2
    12dc:	8d 91       	ld	r24, X+
    12de:	9c 91       	ld	r25, X
    12e0:	13 97       	sbiw	r26, 0x03	; 3
    12e2:	93 83       	std	Z+3, r25	; 0x03
    12e4:	82 83       	std	Z+2, r24	; 0x02
    12e6:	21 15       	cp	r18, r1
    12e8:	31 05       	cpc	r19, r1
    12ea:	29 f4       	brne	.+10     	; 0x12f6 <free+0x9c>
    12ec:	f0 93 26 03 	sts	0x0326, r31
    12f0:	e0 93 25 03 	sts	0x0325, r30
    12f4:	3e c0       	rjmp	.+124    	; 0x1372 <free+0x118>
    12f6:	d9 01       	movw	r26, r18
    12f8:	13 96       	adiw	r26, 0x03	; 3
    12fa:	fc 93       	st	X, r31
    12fc:	ee 93       	st	-X, r30
    12fe:	12 97       	sbiw	r26, 0x02	; 2
    1300:	4d 91       	ld	r20, X+
    1302:	5d 91       	ld	r21, X+
    1304:	a4 0f       	add	r26, r20
    1306:	b5 1f       	adc	r27, r21
    1308:	ea 17       	cp	r30, r26
    130a:	fb 07       	cpc	r31, r27
    130c:	79 f4       	brne	.+30     	; 0x132c <free+0xd2>
    130e:	80 81       	ld	r24, Z
    1310:	91 81       	ldd	r25, Z+1	; 0x01
    1312:	84 0f       	add	r24, r20
    1314:	95 1f       	adc	r25, r21
    1316:	02 96       	adiw	r24, 0x02	; 2
    1318:	d9 01       	movw	r26, r18
    131a:	11 96       	adiw	r26, 0x01	; 1
    131c:	9c 93       	st	X, r25
    131e:	8e 93       	st	-X, r24
    1320:	82 81       	ldd	r24, Z+2	; 0x02
    1322:	93 81       	ldd	r25, Z+3	; 0x03
    1324:	13 96       	adiw	r26, 0x03	; 3
    1326:	9c 93       	st	X, r25
    1328:	8e 93       	st	-X, r24
    132a:	12 97       	sbiw	r26, 0x02	; 2
    132c:	e0 e0       	ldi	r30, 0x00	; 0
    132e:	f0 e0       	ldi	r31, 0x00	; 0
    1330:	8a 81       	ldd	r24, Y+2	; 0x02
    1332:	9b 81       	ldd	r25, Y+3	; 0x03
    1334:	00 97       	sbiw	r24, 0x00	; 0
    1336:	19 f0       	breq	.+6      	; 0x133e <free+0xe4>
    1338:	fe 01       	movw	r30, r28
    133a:	ec 01       	movw	r28, r24
    133c:	f9 cf       	rjmp	.-14     	; 0x1330 <free+0xd6>
    133e:	ce 01       	movw	r24, r28
    1340:	02 96       	adiw	r24, 0x02	; 2
    1342:	28 81       	ld	r18, Y
    1344:	39 81       	ldd	r19, Y+1	; 0x01
    1346:	82 0f       	add	r24, r18
    1348:	93 1f       	adc	r25, r19
    134a:	20 91 23 03 	lds	r18, 0x0323
    134e:	30 91 24 03 	lds	r19, 0x0324
    1352:	28 17       	cp	r18, r24
    1354:	39 07       	cpc	r19, r25
    1356:	69 f4       	brne	.+26     	; 0x1372 <free+0x118>
    1358:	30 97       	sbiw	r30, 0x00	; 0
    135a:	29 f4       	brne	.+10     	; 0x1366 <free+0x10c>
    135c:	10 92 26 03 	sts	0x0326, r1
    1360:	10 92 25 03 	sts	0x0325, r1
    1364:	02 c0       	rjmp	.+4      	; 0x136a <free+0x110>
    1366:	13 82       	std	Z+3, r1	; 0x03
    1368:	12 82       	std	Z+2, r1	; 0x02
    136a:	d0 93 24 03 	sts	0x0324, r29
    136e:	c0 93 23 03 	sts	0x0323, r28
    1372:	df 91       	pop	r29
    1374:	cf 91       	pop	r28
    1376:	08 95       	ret

00001378 <do_rand>:
    1378:	8f 92       	push	r8
    137a:	9f 92       	push	r9
    137c:	af 92       	push	r10
    137e:	bf 92       	push	r11
    1380:	cf 92       	push	r12
    1382:	df 92       	push	r13
    1384:	ef 92       	push	r14
    1386:	ff 92       	push	r15
    1388:	cf 93       	push	r28
    138a:	df 93       	push	r29
    138c:	ec 01       	movw	r28, r24
    138e:	68 81       	ld	r22, Y
    1390:	79 81       	ldd	r23, Y+1	; 0x01
    1392:	8a 81       	ldd	r24, Y+2	; 0x02
    1394:	9b 81       	ldd	r25, Y+3	; 0x03
    1396:	61 15       	cp	r22, r1
    1398:	71 05       	cpc	r23, r1
    139a:	81 05       	cpc	r24, r1
    139c:	91 05       	cpc	r25, r1
    139e:	21 f4       	brne	.+8      	; 0x13a8 <do_rand+0x30>
    13a0:	64 e2       	ldi	r22, 0x24	; 36
    13a2:	79 ed       	ldi	r23, 0xD9	; 217
    13a4:	8b e5       	ldi	r24, 0x5B	; 91
    13a6:	97 e0       	ldi	r25, 0x07	; 7
    13a8:	2d e1       	ldi	r18, 0x1D	; 29
    13aa:	33 ef       	ldi	r19, 0xF3	; 243
    13ac:	41 e0       	ldi	r20, 0x01	; 1
    13ae:	50 e0       	ldi	r21, 0x00	; 0
    13b0:	0e 94 41 0d 	call	0x1a82	; 0x1a82 <__divmodsi4>
    13b4:	49 01       	movw	r8, r18
    13b6:	5a 01       	movw	r10, r20
    13b8:	9b 01       	movw	r18, r22
    13ba:	ac 01       	movw	r20, r24
    13bc:	a7 ea       	ldi	r26, 0xA7	; 167
    13be:	b1 e4       	ldi	r27, 0x41	; 65
    13c0:	0e 94 60 0d 	call	0x1ac0	; 0x1ac0 <__muluhisi3>
    13c4:	6b 01       	movw	r12, r22
    13c6:	7c 01       	movw	r14, r24
    13c8:	ac ee       	ldi	r26, 0xEC	; 236
    13ca:	b4 ef       	ldi	r27, 0xF4	; 244
    13cc:	a5 01       	movw	r20, r10
    13ce:	94 01       	movw	r18, r8
    13d0:	0e 94 6e 0d 	call	0x1adc	; 0x1adc <__mulohisi3>
    13d4:	c6 0e       	add	r12, r22
    13d6:	d7 1e       	adc	r13, r23
    13d8:	e8 1e       	adc	r14, r24
    13da:	f9 1e       	adc	r15, r25
    13dc:	f7 fe       	sbrs	r15, 7
    13de:	06 c0       	rjmp	.+12     	; 0x13ec <do_rand+0x74>
    13e0:	81 e0       	ldi	r24, 0x01	; 1
    13e2:	c8 1a       	sub	r12, r24
    13e4:	d1 08       	sbc	r13, r1
    13e6:	e1 08       	sbc	r14, r1
    13e8:	80 e8       	ldi	r24, 0x80	; 128
    13ea:	f8 0a       	sbc	r15, r24
    13ec:	c8 82       	st	Y, r12
    13ee:	d9 82       	std	Y+1, r13	; 0x01
    13f0:	ea 82       	std	Y+2, r14	; 0x02
    13f2:	fb 82       	std	Y+3, r15	; 0x03
    13f4:	c6 01       	movw	r24, r12
    13f6:	9f 77       	andi	r25, 0x7F	; 127
    13f8:	df 91       	pop	r29
    13fa:	cf 91       	pop	r28
    13fc:	ff 90       	pop	r15
    13fe:	ef 90       	pop	r14
    1400:	df 90       	pop	r13
    1402:	cf 90       	pop	r12
    1404:	bf 90       	pop	r11
    1406:	af 90       	pop	r10
    1408:	9f 90       	pop	r9
    140a:	8f 90       	pop	r8
    140c:	08 95       	ret

0000140e <rand_r>:
    140e:	0e 94 bc 09 	call	0x1378	; 0x1378 <do_rand>
    1412:	08 95       	ret

00001414 <rand>:
    1414:	86 e0       	ldi	r24, 0x06	; 6
    1416:	91 e0       	ldi	r25, 0x01	; 1
    1418:	0e 94 bc 09 	call	0x1378	; 0x1378 <do_rand>
    141c:	08 95       	ret

0000141e <srand>:
    141e:	a0 e0       	ldi	r26, 0x00	; 0
    1420:	b0 e0       	ldi	r27, 0x00	; 0
    1422:	80 93 06 01 	sts	0x0106, r24
    1426:	90 93 07 01 	sts	0x0107, r25
    142a:	a0 93 08 01 	sts	0x0108, r26
    142e:	b0 93 09 01 	sts	0x0109, r27
    1432:	08 95       	ret

00001434 <fdevopen>:
    1434:	0f 93       	push	r16
    1436:	1f 93       	push	r17
    1438:	cf 93       	push	r28
    143a:	df 93       	push	r29
    143c:	ec 01       	movw	r28, r24
    143e:	8b 01       	movw	r16, r22
    1440:	00 97       	sbiw	r24, 0x00	; 0
    1442:	31 f4       	brne	.+12     	; 0x1450 <fdevopen+0x1c>
    1444:	61 15       	cp	r22, r1
    1446:	71 05       	cpc	r23, r1
    1448:	19 f4       	brne	.+6      	; 0x1450 <fdevopen+0x1c>
    144a:	80 e0       	ldi	r24, 0x00	; 0
    144c:	90 e0       	ldi	r25, 0x00	; 0
    144e:	38 c0       	rjmp	.+112    	; 0x14c0 <fdevopen+0x8c>
    1450:	6e e0       	ldi	r22, 0x0E	; 14
    1452:	70 e0       	ldi	r23, 0x00	; 0
    1454:	81 e0       	ldi	r24, 0x01	; 1
    1456:	90 e0       	ldi	r25, 0x00	; 0
    1458:	0e 94 78 0c 	call	0x18f0	; 0x18f0 <calloc>
    145c:	fc 01       	movw	r30, r24
    145e:	00 97       	sbiw	r24, 0x00	; 0
    1460:	a1 f3       	breq	.-24     	; 0x144a <fdevopen+0x16>
    1462:	80 e8       	ldi	r24, 0x80	; 128
    1464:	83 83       	std	Z+3, r24	; 0x03
    1466:	01 15       	cp	r16, r1
    1468:	11 05       	cpc	r17, r1
    146a:	71 f0       	breq	.+28     	; 0x1488 <fdevopen+0x54>
    146c:	13 87       	std	Z+11, r17	; 0x0b
    146e:	02 87       	std	Z+10, r16	; 0x0a
    1470:	81 e8       	ldi	r24, 0x81	; 129
    1472:	83 83       	std	Z+3, r24	; 0x03
    1474:	80 91 27 03 	lds	r24, 0x0327
    1478:	90 91 28 03 	lds	r25, 0x0328
    147c:	89 2b       	or	r24, r25
    147e:	21 f4       	brne	.+8      	; 0x1488 <fdevopen+0x54>
    1480:	f0 93 28 03 	sts	0x0328, r31
    1484:	e0 93 27 03 	sts	0x0327, r30
    1488:	20 97       	sbiw	r28, 0x00	; 0
    148a:	c9 f0       	breq	.+50     	; 0x14be <fdevopen+0x8a>
    148c:	d1 87       	std	Z+9, r29	; 0x09
    148e:	c0 87       	std	Z+8, r28	; 0x08
    1490:	83 81       	ldd	r24, Z+3	; 0x03
    1492:	82 60       	ori	r24, 0x02	; 2
    1494:	83 83       	std	Z+3, r24	; 0x03
    1496:	80 91 29 03 	lds	r24, 0x0329
    149a:	90 91 2a 03 	lds	r25, 0x032A
    149e:	89 2b       	or	r24, r25
    14a0:	71 f4       	brne	.+28     	; 0x14be <fdevopen+0x8a>
    14a2:	f0 93 2a 03 	sts	0x032A, r31
    14a6:	e0 93 29 03 	sts	0x0329, r30
    14aa:	80 91 2b 03 	lds	r24, 0x032B
    14ae:	90 91 2c 03 	lds	r25, 0x032C
    14b2:	89 2b       	or	r24, r25
    14b4:	21 f4       	brne	.+8      	; 0x14be <fdevopen+0x8a>
    14b6:	f0 93 2c 03 	sts	0x032C, r31
    14ba:	e0 93 2b 03 	sts	0x032B, r30
    14be:	cf 01       	movw	r24, r30
    14c0:	df 91       	pop	r29
    14c2:	cf 91       	pop	r28
    14c4:	1f 91       	pop	r17
    14c6:	0f 91       	pop	r16
    14c8:	08 95       	ret

000014ca <printf>:
    14ca:	a0 e0       	ldi	r26, 0x00	; 0
    14cc:	b0 e0       	ldi	r27, 0x00	; 0
    14ce:	eb e6       	ldi	r30, 0x6B	; 107
    14d0:	fa e0       	ldi	r31, 0x0A	; 10
    14d2:	0c 94 83 0d 	jmp	0x1b06	; 0x1b06 <__prologue_saves__+0x20>
    14d6:	fe 01       	movw	r30, r28
    14d8:	35 96       	adiw	r30, 0x05	; 5
    14da:	61 91       	ld	r22, Z+
    14dc:	71 91       	ld	r23, Z+
    14de:	af 01       	movw	r20, r30
    14e0:	80 91 29 03 	lds	r24, 0x0329
    14e4:	90 91 2a 03 	lds	r25, 0x032A
    14e8:	0e 94 a6 0a 	call	0x154c	; 0x154c <vfprintf>
    14ec:	e2 e0       	ldi	r30, 0x02	; 2
    14ee:	0c 94 9f 0d 	jmp	0x1b3e	; 0x1b3e <__epilogue_restores__+0x20>

000014f2 <puts>:
    14f2:	0f 93       	push	r16
    14f4:	1f 93       	push	r17
    14f6:	cf 93       	push	r28
    14f8:	df 93       	push	r29
    14fa:	e0 91 29 03 	lds	r30, 0x0329
    14fe:	f0 91 2a 03 	lds	r31, 0x032A
    1502:	23 81       	ldd	r18, Z+3	; 0x03
    1504:	21 ff       	sbrs	r18, 1
    1506:	1b c0       	rjmp	.+54     	; 0x153e <puts+0x4c>
    1508:	ec 01       	movw	r28, r24
    150a:	00 e0       	ldi	r16, 0x00	; 0
    150c:	10 e0       	ldi	r17, 0x00	; 0
    150e:	89 91       	ld	r24, Y+
    1510:	60 91 29 03 	lds	r22, 0x0329
    1514:	70 91 2a 03 	lds	r23, 0x032A
    1518:	db 01       	movw	r26, r22
    151a:	18 96       	adiw	r26, 0x08	; 8
    151c:	ed 91       	ld	r30, X+
    151e:	fc 91       	ld	r31, X
    1520:	19 97       	sbiw	r26, 0x09	; 9
    1522:	88 23       	and	r24, r24
    1524:	31 f0       	breq	.+12     	; 0x1532 <puts+0x40>
    1526:	09 95       	icall
    1528:	89 2b       	or	r24, r25
    152a:	89 f3       	breq	.-30     	; 0x150e <puts+0x1c>
    152c:	0f ef       	ldi	r16, 0xFF	; 255
    152e:	1f ef       	ldi	r17, 0xFF	; 255
    1530:	ee cf       	rjmp	.-36     	; 0x150e <puts+0x1c>
    1532:	8a e0       	ldi	r24, 0x0A	; 10
    1534:	09 95       	icall
    1536:	89 2b       	or	r24, r25
    1538:	11 f4       	brne	.+4      	; 0x153e <puts+0x4c>
    153a:	c8 01       	movw	r24, r16
    153c:	02 c0       	rjmp	.+4      	; 0x1542 <puts+0x50>
    153e:	8f ef       	ldi	r24, 0xFF	; 255
    1540:	9f ef       	ldi	r25, 0xFF	; 255
    1542:	df 91       	pop	r29
    1544:	cf 91       	pop	r28
    1546:	1f 91       	pop	r17
    1548:	0f 91       	pop	r16
    154a:	08 95       	ret

0000154c <vfprintf>:
    154c:	ac e0       	ldi	r26, 0x0C	; 12
    154e:	b0 e0       	ldi	r27, 0x00	; 0
    1550:	ec ea       	ldi	r30, 0xAC	; 172
    1552:	fa e0       	ldi	r31, 0x0A	; 10
    1554:	0c 94 73 0d 	jmp	0x1ae6	; 0x1ae6 <__prologue_saves__>
    1558:	7c 01       	movw	r14, r24
    155a:	6b 01       	movw	r12, r22
    155c:	8a 01       	movw	r16, r20
    155e:	fc 01       	movw	r30, r24
    1560:	17 82       	std	Z+7, r1	; 0x07
    1562:	16 82       	std	Z+6, r1	; 0x06
    1564:	83 81       	ldd	r24, Z+3	; 0x03
    1566:	81 ff       	sbrs	r24, 1
    1568:	bd c1       	rjmp	.+890    	; 0x18e4 <vfprintf+0x398>
    156a:	ce 01       	movw	r24, r28
    156c:	01 96       	adiw	r24, 0x01	; 1
    156e:	4c 01       	movw	r8, r24
    1570:	f7 01       	movw	r30, r14
    1572:	93 81       	ldd	r25, Z+3	; 0x03
    1574:	f6 01       	movw	r30, r12
    1576:	93 fd       	sbrc	r25, 3
    1578:	85 91       	lpm	r24, Z+
    157a:	93 ff       	sbrs	r25, 3
    157c:	81 91       	ld	r24, Z+
    157e:	6f 01       	movw	r12, r30
    1580:	88 23       	and	r24, r24
    1582:	09 f4       	brne	.+2      	; 0x1586 <vfprintf+0x3a>
    1584:	ab c1       	rjmp	.+854    	; 0x18dc <vfprintf+0x390>
    1586:	85 32       	cpi	r24, 0x25	; 37
    1588:	39 f4       	brne	.+14     	; 0x1598 <vfprintf+0x4c>
    158a:	93 fd       	sbrc	r25, 3
    158c:	85 91       	lpm	r24, Z+
    158e:	93 ff       	sbrs	r25, 3
    1590:	81 91       	ld	r24, Z+
    1592:	6f 01       	movw	r12, r30
    1594:	85 32       	cpi	r24, 0x25	; 37
    1596:	29 f4       	brne	.+10     	; 0x15a2 <vfprintf+0x56>
    1598:	b7 01       	movw	r22, r14
    159a:	90 e0       	ldi	r25, 0x00	; 0
    159c:	0e 94 b1 0c 	call	0x1962	; 0x1962 <fputc>
    15a0:	e7 cf       	rjmp	.-50     	; 0x1570 <vfprintf+0x24>
    15a2:	51 2c       	mov	r5, r1
    15a4:	31 2c       	mov	r3, r1
    15a6:	20 e0       	ldi	r18, 0x00	; 0
    15a8:	20 32       	cpi	r18, 0x20	; 32
    15aa:	a0 f4       	brcc	.+40     	; 0x15d4 <vfprintf+0x88>
    15ac:	8b 32       	cpi	r24, 0x2B	; 43
    15ae:	69 f0       	breq	.+26     	; 0x15ca <vfprintf+0x7e>
    15b0:	30 f4       	brcc	.+12     	; 0x15be <vfprintf+0x72>
    15b2:	80 32       	cpi	r24, 0x20	; 32
    15b4:	59 f0       	breq	.+22     	; 0x15cc <vfprintf+0x80>
    15b6:	83 32       	cpi	r24, 0x23	; 35
    15b8:	69 f4       	brne	.+26     	; 0x15d4 <vfprintf+0x88>
    15ba:	20 61       	ori	r18, 0x10	; 16
    15bc:	2c c0       	rjmp	.+88     	; 0x1616 <vfprintf+0xca>
    15be:	8d 32       	cpi	r24, 0x2D	; 45
    15c0:	39 f0       	breq	.+14     	; 0x15d0 <vfprintf+0x84>
    15c2:	80 33       	cpi	r24, 0x30	; 48
    15c4:	39 f4       	brne	.+14     	; 0x15d4 <vfprintf+0x88>
    15c6:	21 60       	ori	r18, 0x01	; 1
    15c8:	26 c0       	rjmp	.+76     	; 0x1616 <vfprintf+0xca>
    15ca:	22 60       	ori	r18, 0x02	; 2
    15cc:	24 60       	ori	r18, 0x04	; 4
    15ce:	23 c0       	rjmp	.+70     	; 0x1616 <vfprintf+0xca>
    15d0:	28 60       	ori	r18, 0x08	; 8
    15d2:	21 c0       	rjmp	.+66     	; 0x1616 <vfprintf+0xca>
    15d4:	27 fd       	sbrc	r18, 7
    15d6:	27 c0       	rjmp	.+78     	; 0x1626 <vfprintf+0xda>
    15d8:	30 ed       	ldi	r19, 0xD0	; 208
    15da:	38 0f       	add	r19, r24
    15dc:	3a 30       	cpi	r19, 0x0A	; 10
    15de:	78 f4       	brcc	.+30     	; 0x15fe <vfprintf+0xb2>
    15e0:	26 ff       	sbrs	r18, 6
    15e2:	06 c0       	rjmp	.+12     	; 0x15f0 <vfprintf+0xa4>
    15e4:	fa e0       	ldi	r31, 0x0A	; 10
    15e6:	5f 9e       	mul	r5, r31
    15e8:	30 0d       	add	r19, r0
    15ea:	11 24       	eor	r1, r1
    15ec:	53 2e       	mov	r5, r19
    15ee:	13 c0       	rjmp	.+38     	; 0x1616 <vfprintf+0xca>
    15f0:	8a e0       	ldi	r24, 0x0A	; 10
    15f2:	38 9e       	mul	r3, r24
    15f4:	30 0d       	add	r19, r0
    15f6:	11 24       	eor	r1, r1
    15f8:	33 2e       	mov	r3, r19
    15fa:	20 62       	ori	r18, 0x20	; 32
    15fc:	0c c0       	rjmp	.+24     	; 0x1616 <vfprintf+0xca>
    15fe:	8e 32       	cpi	r24, 0x2E	; 46
    1600:	21 f4       	brne	.+8      	; 0x160a <vfprintf+0xbe>
    1602:	26 fd       	sbrc	r18, 6
    1604:	6b c1       	rjmp	.+726    	; 0x18dc <vfprintf+0x390>
    1606:	20 64       	ori	r18, 0x40	; 64
    1608:	06 c0       	rjmp	.+12     	; 0x1616 <vfprintf+0xca>
    160a:	8c 36       	cpi	r24, 0x6C	; 108
    160c:	11 f4       	brne	.+4      	; 0x1612 <vfprintf+0xc6>
    160e:	20 68       	ori	r18, 0x80	; 128
    1610:	02 c0       	rjmp	.+4      	; 0x1616 <vfprintf+0xca>
    1612:	88 36       	cpi	r24, 0x68	; 104
    1614:	41 f4       	brne	.+16     	; 0x1626 <vfprintf+0xda>
    1616:	f6 01       	movw	r30, r12
    1618:	93 fd       	sbrc	r25, 3
    161a:	85 91       	lpm	r24, Z+
    161c:	93 ff       	sbrs	r25, 3
    161e:	81 91       	ld	r24, Z+
    1620:	6f 01       	movw	r12, r30
    1622:	81 11       	cpse	r24, r1
    1624:	c1 cf       	rjmp	.-126    	; 0x15a8 <vfprintf+0x5c>
    1626:	98 2f       	mov	r25, r24
    1628:	9f 7d       	andi	r25, 0xDF	; 223
    162a:	95 54       	subi	r25, 0x45	; 69
    162c:	93 30       	cpi	r25, 0x03	; 3
    162e:	28 f4       	brcc	.+10     	; 0x163a <vfprintf+0xee>
    1630:	0c 5f       	subi	r16, 0xFC	; 252
    1632:	1f 4f       	sbci	r17, 0xFF	; 255
    1634:	ff e3       	ldi	r31, 0x3F	; 63
    1636:	f9 83       	std	Y+1, r31	; 0x01
    1638:	0d c0       	rjmp	.+26     	; 0x1654 <vfprintf+0x108>
    163a:	83 36       	cpi	r24, 0x63	; 99
    163c:	31 f0       	breq	.+12     	; 0x164a <vfprintf+0xfe>
    163e:	83 37       	cpi	r24, 0x73	; 115
    1640:	71 f0       	breq	.+28     	; 0x165e <vfprintf+0x112>
    1642:	83 35       	cpi	r24, 0x53	; 83
    1644:	09 f0       	breq	.+2      	; 0x1648 <vfprintf+0xfc>
    1646:	5b c0       	rjmp	.+182    	; 0x16fe <vfprintf+0x1b2>
    1648:	22 c0       	rjmp	.+68     	; 0x168e <vfprintf+0x142>
    164a:	f8 01       	movw	r30, r16
    164c:	80 81       	ld	r24, Z
    164e:	89 83       	std	Y+1, r24	; 0x01
    1650:	0e 5f       	subi	r16, 0xFE	; 254
    1652:	1f 4f       	sbci	r17, 0xFF	; 255
    1654:	44 24       	eor	r4, r4
    1656:	43 94       	inc	r4
    1658:	51 2c       	mov	r5, r1
    165a:	54 01       	movw	r10, r8
    165c:	15 c0       	rjmp	.+42     	; 0x1688 <vfprintf+0x13c>
    165e:	38 01       	movw	r6, r16
    1660:	f2 e0       	ldi	r31, 0x02	; 2
    1662:	6f 0e       	add	r6, r31
    1664:	71 1c       	adc	r7, r1
    1666:	f8 01       	movw	r30, r16
    1668:	a0 80       	ld	r10, Z
    166a:	b1 80       	ldd	r11, Z+1	; 0x01
    166c:	26 ff       	sbrs	r18, 6
    166e:	03 c0       	rjmp	.+6      	; 0x1676 <vfprintf+0x12a>
    1670:	65 2d       	mov	r22, r5
    1672:	70 e0       	ldi	r23, 0x00	; 0
    1674:	02 c0       	rjmp	.+4      	; 0x167a <vfprintf+0x12e>
    1676:	6f ef       	ldi	r22, 0xFF	; 255
    1678:	7f ef       	ldi	r23, 0xFF	; 255
    167a:	c5 01       	movw	r24, r10
    167c:	2c 87       	std	Y+12, r18	; 0x0c
    167e:	0e 94 a6 0c 	call	0x194c	; 0x194c <strnlen>
    1682:	2c 01       	movw	r4, r24
    1684:	83 01       	movw	r16, r6
    1686:	2c 85       	ldd	r18, Y+12	; 0x0c
    1688:	2f 77       	andi	r18, 0x7F	; 127
    168a:	22 2e       	mov	r2, r18
    168c:	17 c0       	rjmp	.+46     	; 0x16bc <vfprintf+0x170>
    168e:	38 01       	movw	r6, r16
    1690:	f2 e0       	ldi	r31, 0x02	; 2
    1692:	6f 0e       	add	r6, r31
    1694:	71 1c       	adc	r7, r1
    1696:	f8 01       	movw	r30, r16
    1698:	a0 80       	ld	r10, Z
    169a:	b1 80       	ldd	r11, Z+1	; 0x01
    169c:	26 ff       	sbrs	r18, 6
    169e:	03 c0       	rjmp	.+6      	; 0x16a6 <vfprintf+0x15a>
    16a0:	65 2d       	mov	r22, r5
    16a2:	70 e0       	ldi	r23, 0x00	; 0
    16a4:	02 c0       	rjmp	.+4      	; 0x16aa <vfprintf+0x15e>
    16a6:	6f ef       	ldi	r22, 0xFF	; 255
    16a8:	7f ef       	ldi	r23, 0xFF	; 255
    16aa:	c5 01       	movw	r24, r10
    16ac:	2c 87       	std	Y+12, r18	; 0x0c
    16ae:	0e 94 94 0c 	call	0x1928	; 0x1928 <strnlen_P>
    16b2:	2c 01       	movw	r4, r24
    16b4:	2c 85       	ldd	r18, Y+12	; 0x0c
    16b6:	20 68       	ori	r18, 0x80	; 128
    16b8:	22 2e       	mov	r2, r18
    16ba:	83 01       	movw	r16, r6
    16bc:	23 fc       	sbrc	r2, 3
    16be:	1b c0       	rjmp	.+54     	; 0x16f6 <vfprintf+0x1aa>
    16c0:	83 2d       	mov	r24, r3
    16c2:	90 e0       	ldi	r25, 0x00	; 0
    16c4:	48 16       	cp	r4, r24
    16c6:	59 06       	cpc	r5, r25
    16c8:	b0 f4       	brcc	.+44     	; 0x16f6 <vfprintf+0x1aa>
    16ca:	b7 01       	movw	r22, r14
    16cc:	80 e2       	ldi	r24, 0x20	; 32
    16ce:	90 e0       	ldi	r25, 0x00	; 0
    16d0:	0e 94 b1 0c 	call	0x1962	; 0x1962 <fputc>
    16d4:	3a 94       	dec	r3
    16d6:	f4 cf       	rjmp	.-24     	; 0x16c0 <vfprintf+0x174>
    16d8:	f5 01       	movw	r30, r10
    16da:	27 fc       	sbrc	r2, 7
    16dc:	85 91       	lpm	r24, Z+
    16de:	27 fe       	sbrs	r2, 7
    16e0:	81 91       	ld	r24, Z+
    16e2:	5f 01       	movw	r10, r30
    16e4:	b7 01       	movw	r22, r14
    16e6:	90 e0       	ldi	r25, 0x00	; 0
    16e8:	0e 94 b1 0c 	call	0x1962	; 0x1962 <fputc>
    16ec:	31 10       	cpse	r3, r1
    16ee:	3a 94       	dec	r3
    16f0:	f1 e0       	ldi	r31, 0x01	; 1
    16f2:	4f 1a       	sub	r4, r31
    16f4:	51 08       	sbc	r5, r1
    16f6:	41 14       	cp	r4, r1
    16f8:	51 04       	cpc	r5, r1
    16fa:	71 f7       	brne	.-36     	; 0x16d8 <vfprintf+0x18c>
    16fc:	e5 c0       	rjmp	.+458    	; 0x18c8 <vfprintf+0x37c>
    16fe:	84 36       	cpi	r24, 0x64	; 100
    1700:	11 f0       	breq	.+4      	; 0x1706 <vfprintf+0x1ba>
    1702:	89 36       	cpi	r24, 0x69	; 105
    1704:	39 f5       	brne	.+78     	; 0x1754 <vfprintf+0x208>
    1706:	f8 01       	movw	r30, r16
    1708:	27 ff       	sbrs	r18, 7
    170a:	07 c0       	rjmp	.+14     	; 0x171a <vfprintf+0x1ce>
    170c:	60 81       	ld	r22, Z
    170e:	71 81       	ldd	r23, Z+1	; 0x01
    1710:	82 81       	ldd	r24, Z+2	; 0x02
    1712:	93 81       	ldd	r25, Z+3	; 0x03
    1714:	0c 5f       	subi	r16, 0xFC	; 252
    1716:	1f 4f       	sbci	r17, 0xFF	; 255
    1718:	08 c0       	rjmp	.+16     	; 0x172a <vfprintf+0x1de>
    171a:	60 81       	ld	r22, Z
    171c:	71 81       	ldd	r23, Z+1	; 0x01
    171e:	88 27       	eor	r24, r24
    1720:	77 fd       	sbrc	r23, 7
    1722:	80 95       	com	r24
    1724:	98 2f       	mov	r25, r24
    1726:	0e 5f       	subi	r16, 0xFE	; 254
    1728:	1f 4f       	sbci	r17, 0xFF	; 255
    172a:	2f 76       	andi	r18, 0x6F	; 111
    172c:	b2 2e       	mov	r11, r18
    172e:	97 ff       	sbrs	r25, 7
    1730:	09 c0       	rjmp	.+18     	; 0x1744 <vfprintf+0x1f8>
    1732:	90 95       	com	r25
    1734:	80 95       	com	r24
    1736:	70 95       	com	r23
    1738:	61 95       	neg	r22
    173a:	7f 4f       	sbci	r23, 0xFF	; 255
    173c:	8f 4f       	sbci	r24, 0xFF	; 255
    173e:	9f 4f       	sbci	r25, 0xFF	; 255
    1740:	20 68       	ori	r18, 0x80	; 128
    1742:	b2 2e       	mov	r11, r18
    1744:	2a e0       	ldi	r18, 0x0A	; 10
    1746:	30 e0       	ldi	r19, 0x00	; 0
    1748:	a4 01       	movw	r20, r8
    174a:	0e 94 e3 0c 	call	0x19c6	; 0x19c6 <__ultoa_invert>
    174e:	a8 2e       	mov	r10, r24
    1750:	a8 18       	sub	r10, r8
    1752:	44 c0       	rjmp	.+136    	; 0x17dc <vfprintf+0x290>
    1754:	85 37       	cpi	r24, 0x75	; 117
    1756:	29 f4       	brne	.+10     	; 0x1762 <vfprintf+0x216>
    1758:	2f 7e       	andi	r18, 0xEF	; 239
    175a:	b2 2e       	mov	r11, r18
    175c:	2a e0       	ldi	r18, 0x0A	; 10
    175e:	30 e0       	ldi	r19, 0x00	; 0
    1760:	25 c0       	rjmp	.+74     	; 0x17ac <vfprintf+0x260>
    1762:	f2 2f       	mov	r31, r18
    1764:	f9 7f       	andi	r31, 0xF9	; 249
    1766:	bf 2e       	mov	r11, r31
    1768:	8f 36       	cpi	r24, 0x6F	; 111
    176a:	c1 f0       	breq	.+48     	; 0x179c <vfprintf+0x250>
    176c:	18 f4       	brcc	.+6      	; 0x1774 <vfprintf+0x228>
    176e:	88 35       	cpi	r24, 0x58	; 88
    1770:	79 f0       	breq	.+30     	; 0x1790 <vfprintf+0x244>
    1772:	b4 c0       	rjmp	.+360    	; 0x18dc <vfprintf+0x390>
    1774:	80 37       	cpi	r24, 0x70	; 112
    1776:	19 f0       	breq	.+6      	; 0x177e <vfprintf+0x232>
    1778:	88 37       	cpi	r24, 0x78	; 120
    177a:	21 f0       	breq	.+8      	; 0x1784 <vfprintf+0x238>
    177c:	af c0       	rjmp	.+350    	; 0x18dc <vfprintf+0x390>
    177e:	2f 2f       	mov	r18, r31
    1780:	20 61       	ori	r18, 0x10	; 16
    1782:	b2 2e       	mov	r11, r18
    1784:	b4 fe       	sbrs	r11, 4
    1786:	0d c0       	rjmp	.+26     	; 0x17a2 <vfprintf+0x256>
    1788:	8b 2d       	mov	r24, r11
    178a:	84 60       	ori	r24, 0x04	; 4
    178c:	b8 2e       	mov	r11, r24
    178e:	09 c0       	rjmp	.+18     	; 0x17a2 <vfprintf+0x256>
    1790:	24 ff       	sbrs	r18, 4
    1792:	0a c0       	rjmp	.+20     	; 0x17a8 <vfprintf+0x25c>
    1794:	9f 2f       	mov	r25, r31
    1796:	96 60       	ori	r25, 0x06	; 6
    1798:	b9 2e       	mov	r11, r25
    179a:	06 c0       	rjmp	.+12     	; 0x17a8 <vfprintf+0x25c>
    179c:	28 e0       	ldi	r18, 0x08	; 8
    179e:	30 e0       	ldi	r19, 0x00	; 0
    17a0:	05 c0       	rjmp	.+10     	; 0x17ac <vfprintf+0x260>
    17a2:	20 e1       	ldi	r18, 0x10	; 16
    17a4:	30 e0       	ldi	r19, 0x00	; 0
    17a6:	02 c0       	rjmp	.+4      	; 0x17ac <vfprintf+0x260>
    17a8:	20 e1       	ldi	r18, 0x10	; 16
    17aa:	32 e0       	ldi	r19, 0x02	; 2
    17ac:	f8 01       	movw	r30, r16
    17ae:	b7 fe       	sbrs	r11, 7
    17b0:	07 c0       	rjmp	.+14     	; 0x17c0 <vfprintf+0x274>
    17b2:	60 81       	ld	r22, Z
    17b4:	71 81       	ldd	r23, Z+1	; 0x01
    17b6:	82 81       	ldd	r24, Z+2	; 0x02
    17b8:	93 81       	ldd	r25, Z+3	; 0x03
    17ba:	0c 5f       	subi	r16, 0xFC	; 252
    17bc:	1f 4f       	sbci	r17, 0xFF	; 255
    17be:	06 c0       	rjmp	.+12     	; 0x17cc <vfprintf+0x280>
    17c0:	60 81       	ld	r22, Z
    17c2:	71 81       	ldd	r23, Z+1	; 0x01
    17c4:	80 e0       	ldi	r24, 0x00	; 0
    17c6:	90 e0       	ldi	r25, 0x00	; 0
    17c8:	0e 5f       	subi	r16, 0xFE	; 254
    17ca:	1f 4f       	sbci	r17, 0xFF	; 255
    17cc:	a4 01       	movw	r20, r8
    17ce:	0e 94 e3 0c 	call	0x19c6	; 0x19c6 <__ultoa_invert>
    17d2:	a8 2e       	mov	r10, r24
    17d4:	a8 18       	sub	r10, r8
    17d6:	fb 2d       	mov	r31, r11
    17d8:	ff 77       	andi	r31, 0x7F	; 127
    17da:	bf 2e       	mov	r11, r31
    17dc:	b6 fe       	sbrs	r11, 6
    17de:	0b c0       	rjmp	.+22     	; 0x17f6 <vfprintf+0x2aa>
    17e0:	2b 2d       	mov	r18, r11
    17e2:	2e 7f       	andi	r18, 0xFE	; 254
    17e4:	a5 14       	cp	r10, r5
    17e6:	50 f4       	brcc	.+20     	; 0x17fc <vfprintf+0x2b0>
    17e8:	b4 fe       	sbrs	r11, 4
    17ea:	0a c0       	rjmp	.+20     	; 0x1800 <vfprintf+0x2b4>
    17ec:	b2 fc       	sbrc	r11, 2
    17ee:	08 c0       	rjmp	.+16     	; 0x1800 <vfprintf+0x2b4>
    17f0:	2b 2d       	mov	r18, r11
    17f2:	2e 7e       	andi	r18, 0xEE	; 238
    17f4:	05 c0       	rjmp	.+10     	; 0x1800 <vfprintf+0x2b4>
    17f6:	7a 2c       	mov	r7, r10
    17f8:	2b 2d       	mov	r18, r11
    17fa:	03 c0       	rjmp	.+6      	; 0x1802 <vfprintf+0x2b6>
    17fc:	7a 2c       	mov	r7, r10
    17fe:	01 c0       	rjmp	.+2      	; 0x1802 <vfprintf+0x2b6>
    1800:	75 2c       	mov	r7, r5
    1802:	24 ff       	sbrs	r18, 4
    1804:	0d c0       	rjmp	.+26     	; 0x1820 <vfprintf+0x2d4>
    1806:	fe 01       	movw	r30, r28
    1808:	ea 0d       	add	r30, r10
    180a:	f1 1d       	adc	r31, r1
    180c:	80 81       	ld	r24, Z
    180e:	80 33       	cpi	r24, 0x30	; 48
    1810:	11 f4       	brne	.+4      	; 0x1816 <vfprintf+0x2ca>
    1812:	29 7e       	andi	r18, 0xE9	; 233
    1814:	09 c0       	rjmp	.+18     	; 0x1828 <vfprintf+0x2dc>
    1816:	22 ff       	sbrs	r18, 2
    1818:	06 c0       	rjmp	.+12     	; 0x1826 <vfprintf+0x2da>
    181a:	73 94       	inc	r7
    181c:	73 94       	inc	r7
    181e:	04 c0       	rjmp	.+8      	; 0x1828 <vfprintf+0x2dc>
    1820:	82 2f       	mov	r24, r18
    1822:	86 78       	andi	r24, 0x86	; 134
    1824:	09 f0       	breq	.+2      	; 0x1828 <vfprintf+0x2dc>
    1826:	73 94       	inc	r7
    1828:	23 fd       	sbrc	r18, 3
    182a:	13 c0       	rjmp	.+38     	; 0x1852 <vfprintf+0x306>
    182c:	20 ff       	sbrs	r18, 0
    182e:	06 c0       	rjmp	.+12     	; 0x183c <vfprintf+0x2f0>
    1830:	5a 2c       	mov	r5, r10
    1832:	73 14       	cp	r7, r3
    1834:	18 f4       	brcc	.+6      	; 0x183c <vfprintf+0x2f0>
    1836:	53 0c       	add	r5, r3
    1838:	57 18       	sub	r5, r7
    183a:	73 2c       	mov	r7, r3
    183c:	73 14       	cp	r7, r3
    183e:	68 f4       	brcc	.+26     	; 0x185a <vfprintf+0x30e>
    1840:	b7 01       	movw	r22, r14
    1842:	80 e2       	ldi	r24, 0x20	; 32
    1844:	90 e0       	ldi	r25, 0x00	; 0
    1846:	2c 87       	std	Y+12, r18	; 0x0c
    1848:	0e 94 b1 0c 	call	0x1962	; 0x1962 <fputc>
    184c:	73 94       	inc	r7
    184e:	2c 85       	ldd	r18, Y+12	; 0x0c
    1850:	f5 cf       	rjmp	.-22     	; 0x183c <vfprintf+0x2f0>
    1852:	73 14       	cp	r7, r3
    1854:	10 f4       	brcc	.+4      	; 0x185a <vfprintf+0x30e>
    1856:	37 18       	sub	r3, r7
    1858:	01 c0       	rjmp	.+2      	; 0x185c <vfprintf+0x310>
    185a:	31 2c       	mov	r3, r1
    185c:	24 ff       	sbrs	r18, 4
    185e:	12 c0       	rjmp	.+36     	; 0x1884 <vfprintf+0x338>
    1860:	b7 01       	movw	r22, r14
    1862:	80 e3       	ldi	r24, 0x30	; 48
    1864:	90 e0       	ldi	r25, 0x00	; 0
    1866:	2c 87       	std	Y+12, r18	; 0x0c
    1868:	0e 94 b1 0c 	call	0x1962	; 0x1962 <fputc>
    186c:	2c 85       	ldd	r18, Y+12	; 0x0c
    186e:	22 ff       	sbrs	r18, 2
    1870:	17 c0       	rjmp	.+46     	; 0x18a0 <vfprintf+0x354>
    1872:	21 ff       	sbrs	r18, 1
    1874:	03 c0       	rjmp	.+6      	; 0x187c <vfprintf+0x330>
    1876:	88 e5       	ldi	r24, 0x58	; 88
    1878:	90 e0       	ldi	r25, 0x00	; 0
    187a:	02 c0       	rjmp	.+4      	; 0x1880 <vfprintf+0x334>
    187c:	88 e7       	ldi	r24, 0x78	; 120
    187e:	90 e0       	ldi	r25, 0x00	; 0
    1880:	b7 01       	movw	r22, r14
    1882:	0c c0       	rjmp	.+24     	; 0x189c <vfprintf+0x350>
    1884:	82 2f       	mov	r24, r18
    1886:	86 78       	andi	r24, 0x86	; 134
    1888:	59 f0       	breq	.+22     	; 0x18a0 <vfprintf+0x354>
    188a:	21 fd       	sbrc	r18, 1
    188c:	02 c0       	rjmp	.+4      	; 0x1892 <vfprintf+0x346>
    188e:	80 e2       	ldi	r24, 0x20	; 32
    1890:	01 c0       	rjmp	.+2      	; 0x1894 <vfprintf+0x348>
    1892:	8b e2       	ldi	r24, 0x2B	; 43
    1894:	27 fd       	sbrc	r18, 7
    1896:	8d e2       	ldi	r24, 0x2D	; 45
    1898:	b7 01       	movw	r22, r14
    189a:	90 e0       	ldi	r25, 0x00	; 0
    189c:	0e 94 b1 0c 	call	0x1962	; 0x1962 <fputc>
    18a0:	a5 14       	cp	r10, r5
    18a2:	38 f4       	brcc	.+14     	; 0x18b2 <vfprintf+0x366>
    18a4:	b7 01       	movw	r22, r14
    18a6:	80 e3       	ldi	r24, 0x30	; 48
    18a8:	90 e0       	ldi	r25, 0x00	; 0
    18aa:	0e 94 b1 0c 	call	0x1962	; 0x1962 <fputc>
    18ae:	5a 94       	dec	r5
    18b0:	f7 cf       	rjmp	.-18     	; 0x18a0 <vfprintf+0x354>
    18b2:	aa 94       	dec	r10
    18b4:	f4 01       	movw	r30, r8
    18b6:	ea 0d       	add	r30, r10
    18b8:	f1 1d       	adc	r31, r1
    18ba:	80 81       	ld	r24, Z
    18bc:	b7 01       	movw	r22, r14
    18be:	90 e0       	ldi	r25, 0x00	; 0
    18c0:	0e 94 b1 0c 	call	0x1962	; 0x1962 <fputc>
    18c4:	a1 10       	cpse	r10, r1
    18c6:	f5 cf       	rjmp	.-22     	; 0x18b2 <vfprintf+0x366>
    18c8:	33 20       	and	r3, r3
    18ca:	09 f4       	brne	.+2      	; 0x18ce <vfprintf+0x382>
    18cc:	51 ce       	rjmp	.-862    	; 0x1570 <vfprintf+0x24>
    18ce:	b7 01       	movw	r22, r14
    18d0:	80 e2       	ldi	r24, 0x20	; 32
    18d2:	90 e0       	ldi	r25, 0x00	; 0
    18d4:	0e 94 b1 0c 	call	0x1962	; 0x1962 <fputc>
    18d8:	3a 94       	dec	r3
    18da:	f6 cf       	rjmp	.-20     	; 0x18c8 <vfprintf+0x37c>
    18dc:	f7 01       	movw	r30, r14
    18de:	86 81       	ldd	r24, Z+6	; 0x06
    18e0:	97 81       	ldd	r25, Z+7	; 0x07
    18e2:	02 c0       	rjmp	.+4      	; 0x18e8 <vfprintf+0x39c>
    18e4:	8f ef       	ldi	r24, 0xFF	; 255
    18e6:	9f ef       	ldi	r25, 0xFF	; 255
    18e8:	2c 96       	adiw	r28, 0x0c	; 12
    18ea:	e2 e1       	ldi	r30, 0x12	; 18
    18ec:	0c 94 8f 0d 	jmp	0x1b1e	; 0x1b1e <__epilogue_restores__>

000018f0 <calloc>:
    18f0:	0f 93       	push	r16
    18f2:	1f 93       	push	r17
    18f4:	cf 93       	push	r28
    18f6:	df 93       	push	r29
    18f8:	86 9f       	mul	r24, r22
    18fa:	80 01       	movw	r16, r0
    18fc:	87 9f       	mul	r24, r23
    18fe:	10 0d       	add	r17, r0
    1900:	96 9f       	mul	r25, r22
    1902:	10 0d       	add	r17, r0
    1904:	11 24       	eor	r1, r1
    1906:	c8 01       	movw	r24, r16
    1908:	0e 94 95 08 	call	0x112a	; 0x112a <malloc>
    190c:	ec 01       	movw	r28, r24
    190e:	00 97       	sbiw	r24, 0x00	; 0
    1910:	29 f0       	breq	.+10     	; 0x191c <calloc+0x2c>
    1912:	a8 01       	movw	r20, r16
    1914:	60 e0       	ldi	r22, 0x00	; 0
    1916:	70 e0       	ldi	r23, 0x00	; 0
    1918:	0e 94 9f 0c 	call	0x193e	; 0x193e <memset>
    191c:	ce 01       	movw	r24, r28
    191e:	df 91       	pop	r29
    1920:	cf 91       	pop	r28
    1922:	1f 91       	pop	r17
    1924:	0f 91       	pop	r16
    1926:	08 95       	ret

00001928 <strnlen_P>:
    1928:	fc 01       	movw	r30, r24
    192a:	05 90       	lpm	r0, Z+
    192c:	61 50       	subi	r22, 0x01	; 1
    192e:	70 40       	sbci	r23, 0x00	; 0
    1930:	01 10       	cpse	r0, r1
    1932:	d8 f7       	brcc	.-10     	; 0x192a <strnlen_P+0x2>
    1934:	80 95       	com	r24
    1936:	90 95       	com	r25
    1938:	8e 0f       	add	r24, r30
    193a:	9f 1f       	adc	r25, r31
    193c:	08 95       	ret

0000193e <memset>:
    193e:	dc 01       	movw	r26, r24
    1940:	01 c0       	rjmp	.+2      	; 0x1944 <memset+0x6>
    1942:	6d 93       	st	X+, r22
    1944:	41 50       	subi	r20, 0x01	; 1
    1946:	50 40       	sbci	r21, 0x00	; 0
    1948:	e0 f7       	brcc	.-8      	; 0x1942 <memset+0x4>
    194a:	08 95       	ret

0000194c <strnlen>:
    194c:	fc 01       	movw	r30, r24
    194e:	61 50       	subi	r22, 0x01	; 1
    1950:	70 40       	sbci	r23, 0x00	; 0
    1952:	01 90       	ld	r0, Z+
    1954:	01 10       	cpse	r0, r1
    1956:	d8 f7       	brcc	.-10     	; 0x194e <strnlen+0x2>
    1958:	80 95       	com	r24
    195a:	90 95       	com	r25
    195c:	8e 0f       	add	r24, r30
    195e:	9f 1f       	adc	r25, r31
    1960:	08 95       	ret

00001962 <fputc>:
    1962:	0f 93       	push	r16
    1964:	1f 93       	push	r17
    1966:	cf 93       	push	r28
    1968:	df 93       	push	r29
    196a:	18 2f       	mov	r17, r24
    196c:	09 2f       	mov	r16, r25
    196e:	eb 01       	movw	r28, r22
    1970:	8b 81       	ldd	r24, Y+3	; 0x03
    1972:	81 fd       	sbrc	r24, 1
    1974:	03 c0       	rjmp	.+6      	; 0x197c <fputc+0x1a>
    1976:	8f ef       	ldi	r24, 0xFF	; 255
    1978:	9f ef       	ldi	r25, 0xFF	; 255
    197a:	20 c0       	rjmp	.+64     	; 0x19bc <fputc+0x5a>
    197c:	82 ff       	sbrs	r24, 2
    197e:	10 c0       	rjmp	.+32     	; 0x19a0 <fputc+0x3e>
    1980:	4e 81       	ldd	r20, Y+6	; 0x06
    1982:	5f 81       	ldd	r21, Y+7	; 0x07
    1984:	2c 81       	ldd	r18, Y+4	; 0x04
    1986:	3d 81       	ldd	r19, Y+5	; 0x05
    1988:	42 17       	cp	r20, r18
    198a:	53 07       	cpc	r21, r19
    198c:	7c f4       	brge	.+30     	; 0x19ac <fputc+0x4a>
    198e:	e8 81       	ld	r30, Y
    1990:	f9 81       	ldd	r31, Y+1	; 0x01
    1992:	9f 01       	movw	r18, r30
    1994:	2f 5f       	subi	r18, 0xFF	; 255
    1996:	3f 4f       	sbci	r19, 0xFF	; 255
    1998:	39 83       	std	Y+1, r19	; 0x01
    199a:	28 83       	st	Y, r18
    199c:	10 83       	st	Z, r17
    199e:	06 c0       	rjmp	.+12     	; 0x19ac <fputc+0x4a>
    19a0:	e8 85       	ldd	r30, Y+8	; 0x08
    19a2:	f9 85       	ldd	r31, Y+9	; 0x09
    19a4:	81 2f       	mov	r24, r17
    19a6:	09 95       	icall
    19a8:	89 2b       	or	r24, r25
    19aa:	29 f7       	brne	.-54     	; 0x1976 <fputc+0x14>
    19ac:	2e 81       	ldd	r18, Y+6	; 0x06
    19ae:	3f 81       	ldd	r19, Y+7	; 0x07
    19b0:	2f 5f       	subi	r18, 0xFF	; 255
    19b2:	3f 4f       	sbci	r19, 0xFF	; 255
    19b4:	3f 83       	std	Y+7, r19	; 0x07
    19b6:	2e 83       	std	Y+6, r18	; 0x06
    19b8:	81 2f       	mov	r24, r17
    19ba:	90 2f       	mov	r25, r16
    19bc:	df 91       	pop	r29
    19be:	cf 91       	pop	r28
    19c0:	1f 91       	pop	r17
    19c2:	0f 91       	pop	r16
    19c4:	08 95       	ret

000019c6 <__ultoa_invert>:
    19c6:	fa 01       	movw	r30, r20
    19c8:	aa 27       	eor	r26, r26
    19ca:	28 30       	cpi	r18, 0x08	; 8
    19cc:	51 f1       	breq	.+84     	; 0x1a22 <__ultoa_invert+0x5c>
    19ce:	20 31       	cpi	r18, 0x10	; 16
    19d0:	81 f1       	breq	.+96     	; 0x1a32 <__ultoa_invert+0x6c>
    19d2:	e8 94       	clt
    19d4:	6f 93       	push	r22
    19d6:	6e 7f       	andi	r22, 0xFE	; 254
    19d8:	6e 5f       	subi	r22, 0xFE	; 254
    19da:	7f 4f       	sbci	r23, 0xFF	; 255
    19dc:	8f 4f       	sbci	r24, 0xFF	; 255
    19de:	9f 4f       	sbci	r25, 0xFF	; 255
    19e0:	af 4f       	sbci	r26, 0xFF	; 255
    19e2:	b1 e0       	ldi	r27, 0x01	; 1
    19e4:	3e d0       	rcall	.+124    	; 0x1a62 <__ultoa_invert+0x9c>
    19e6:	b4 e0       	ldi	r27, 0x04	; 4
    19e8:	3c d0       	rcall	.+120    	; 0x1a62 <__ultoa_invert+0x9c>
    19ea:	67 0f       	add	r22, r23
    19ec:	78 1f       	adc	r23, r24
    19ee:	89 1f       	adc	r24, r25
    19f0:	9a 1f       	adc	r25, r26
    19f2:	a1 1d       	adc	r26, r1
    19f4:	68 0f       	add	r22, r24
    19f6:	79 1f       	adc	r23, r25
    19f8:	8a 1f       	adc	r24, r26
    19fa:	91 1d       	adc	r25, r1
    19fc:	a1 1d       	adc	r26, r1
    19fe:	6a 0f       	add	r22, r26
    1a00:	71 1d       	adc	r23, r1
    1a02:	81 1d       	adc	r24, r1
    1a04:	91 1d       	adc	r25, r1
    1a06:	a1 1d       	adc	r26, r1
    1a08:	20 d0       	rcall	.+64     	; 0x1a4a <__ultoa_invert+0x84>
    1a0a:	09 f4       	brne	.+2      	; 0x1a0e <__ultoa_invert+0x48>
    1a0c:	68 94       	set
    1a0e:	3f 91       	pop	r19
    1a10:	2a e0       	ldi	r18, 0x0A	; 10
    1a12:	26 9f       	mul	r18, r22
    1a14:	11 24       	eor	r1, r1
    1a16:	30 19       	sub	r19, r0
    1a18:	30 5d       	subi	r19, 0xD0	; 208
    1a1a:	31 93       	st	Z+, r19
    1a1c:	de f6       	brtc	.-74     	; 0x19d4 <__ultoa_invert+0xe>
    1a1e:	cf 01       	movw	r24, r30
    1a20:	08 95       	ret
    1a22:	46 2f       	mov	r20, r22
    1a24:	47 70       	andi	r20, 0x07	; 7
    1a26:	40 5d       	subi	r20, 0xD0	; 208
    1a28:	41 93       	st	Z+, r20
    1a2a:	b3 e0       	ldi	r27, 0x03	; 3
    1a2c:	0f d0       	rcall	.+30     	; 0x1a4c <__ultoa_invert+0x86>
    1a2e:	c9 f7       	brne	.-14     	; 0x1a22 <__ultoa_invert+0x5c>
    1a30:	f6 cf       	rjmp	.-20     	; 0x1a1e <__ultoa_invert+0x58>
    1a32:	46 2f       	mov	r20, r22
    1a34:	4f 70       	andi	r20, 0x0F	; 15
    1a36:	40 5d       	subi	r20, 0xD0	; 208
    1a38:	4a 33       	cpi	r20, 0x3A	; 58
    1a3a:	18 f0       	brcs	.+6      	; 0x1a42 <__ultoa_invert+0x7c>
    1a3c:	49 5d       	subi	r20, 0xD9	; 217
    1a3e:	31 fd       	sbrc	r19, 1
    1a40:	40 52       	subi	r20, 0x20	; 32
    1a42:	41 93       	st	Z+, r20
    1a44:	02 d0       	rcall	.+4      	; 0x1a4a <__ultoa_invert+0x84>
    1a46:	a9 f7       	brne	.-22     	; 0x1a32 <__ultoa_invert+0x6c>
    1a48:	ea cf       	rjmp	.-44     	; 0x1a1e <__ultoa_invert+0x58>
    1a4a:	b4 e0       	ldi	r27, 0x04	; 4
    1a4c:	a6 95       	lsr	r26
    1a4e:	97 95       	ror	r25
    1a50:	87 95       	ror	r24
    1a52:	77 95       	ror	r23
    1a54:	67 95       	ror	r22
    1a56:	ba 95       	dec	r27
    1a58:	c9 f7       	brne	.-14     	; 0x1a4c <__ultoa_invert+0x86>
    1a5a:	00 97       	sbiw	r24, 0x00	; 0
    1a5c:	61 05       	cpc	r22, r1
    1a5e:	71 05       	cpc	r23, r1
    1a60:	08 95       	ret
    1a62:	9b 01       	movw	r18, r22
    1a64:	ac 01       	movw	r20, r24
    1a66:	0a 2e       	mov	r0, r26
    1a68:	06 94       	lsr	r0
    1a6a:	57 95       	ror	r21
    1a6c:	47 95       	ror	r20
    1a6e:	37 95       	ror	r19
    1a70:	27 95       	ror	r18
    1a72:	ba 95       	dec	r27
    1a74:	c9 f7       	brne	.-14     	; 0x1a68 <__ultoa_invert+0xa2>
    1a76:	62 0f       	add	r22, r18
    1a78:	73 1f       	adc	r23, r19
    1a7a:	84 1f       	adc	r24, r20
    1a7c:	95 1f       	adc	r25, r21
    1a7e:	a0 1d       	adc	r26, r0
    1a80:	08 95       	ret

00001a82 <__divmodsi4>:
    1a82:	05 2e       	mov	r0, r21
    1a84:	97 fb       	bst	r25, 7
    1a86:	1e f4       	brtc	.+6      	; 0x1a8e <__divmodsi4+0xc>
    1a88:	00 94       	com	r0
    1a8a:	0e 94 58 0d 	call	0x1ab0	; 0x1ab0 <__negsi2>
    1a8e:	57 fd       	sbrc	r21, 7
    1a90:	07 d0       	rcall	.+14     	; 0x1aa0 <__divmodsi4_neg2>
    1a92:	0e 94 aa 0d 	call	0x1b54	; 0x1b54 <__udivmodsi4>
    1a96:	07 fc       	sbrc	r0, 7
    1a98:	03 d0       	rcall	.+6      	; 0x1aa0 <__divmodsi4_neg2>
    1a9a:	4e f4       	brtc	.+18     	; 0x1aae <__divmodsi4_exit>
    1a9c:	0c 94 58 0d 	jmp	0x1ab0	; 0x1ab0 <__negsi2>

00001aa0 <__divmodsi4_neg2>:
    1aa0:	50 95       	com	r21
    1aa2:	40 95       	com	r20
    1aa4:	30 95       	com	r19
    1aa6:	21 95       	neg	r18
    1aa8:	3f 4f       	sbci	r19, 0xFF	; 255
    1aaa:	4f 4f       	sbci	r20, 0xFF	; 255
    1aac:	5f 4f       	sbci	r21, 0xFF	; 255

00001aae <__divmodsi4_exit>:
    1aae:	08 95       	ret

00001ab0 <__negsi2>:
    1ab0:	90 95       	com	r25
    1ab2:	80 95       	com	r24
    1ab4:	70 95       	com	r23
    1ab6:	61 95       	neg	r22
    1ab8:	7f 4f       	sbci	r23, 0xFF	; 255
    1aba:	8f 4f       	sbci	r24, 0xFF	; 255
    1abc:	9f 4f       	sbci	r25, 0xFF	; 255
    1abe:	08 95       	ret

00001ac0 <__muluhisi3>:
    1ac0:	0e 94 cc 0d 	call	0x1b98	; 0x1b98 <__umulhisi3>
    1ac4:	a5 9f       	mul	r26, r21
    1ac6:	90 0d       	add	r25, r0
    1ac8:	b4 9f       	mul	r27, r20
    1aca:	90 0d       	add	r25, r0
    1acc:	a4 9f       	mul	r26, r20
    1ace:	80 0d       	add	r24, r0
    1ad0:	91 1d       	adc	r25, r1
    1ad2:	11 24       	eor	r1, r1
    1ad4:	08 95       	ret

00001ad6 <__mulshisi3>:
    1ad6:	b7 ff       	sbrs	r27, 7
    1ad8:	0c 94 60 0d 	jmp	0x1ac0	; 0x1ac0 <__muluhisi3>

00001adc <__mulohisi3>:
    1adc:	0e 94 60 0d 	call	0x1ac0	; 0x1ac0 <__muluhisi3>
    1ae0:	82 1b       	sub	r24, r18
    1ae2:	93 0b       	sbc	r25, r19
    1ae4:	08 95       	ret

00001ae6 <__prologue_saves__>:
    1ae6:	2f 92       	push	r2
    1ae8:	3f 92       	push	r3
    1aea:	4f 92       	push	r4
    1aec:	5f 92       	push	r5
    1aee:	6f 92       	push	r6
    1af0:	7f 92       	push	r7
    1af2:	8f 92       	push	r8
    1af4:	9f 92       	push	r9
    1af6:	af 92       	push	r10
    1af8:	bf 92       	push	r11
    1afa:	cf 92       	push	r12
    1afc:	df 92       	push	r13
    1afe:	ef 92       	push	r14
    1b00:	ff 92       	push	r15
    1b02:	0f 93       	push	r16
    1b04:	1f 93       	push	r17
    1b06:	cf 93       	push	r28
    1b08:	df 93       	push	r29
    1b0a:	cd b7       	in	r28, 0x3d	; 61
    1b0c:	de b7       	in	r29, 0x3e	; 62
    1b0e:	ca 1b       	sub	r28, r26
    1b10:	db 0b       	sbc	r29, r27
    1b12:	0f b6       	in	r0, 0x3f	; 63
    1b14:	f8 94       	cli
    1b16:	de bf       	out	0x3e, r29	; 62
    1b18:	0f be       	out	0x3f, r0	; 63
    1b1a:	cd bf       	out	0x3d, r28	; 61
    1b1c:	09 94       	ijmp

00001b1e <__epilogue_restores__>:
    1b1e:	2a 88       	ldd	r2, Y+18	; 0x12
    1b20:	39 88       	ldd	r3, Y+17	; 0x11
    1b22:	48 88       	ldd	r4, Y+16	; 0x10
    1b24:	5f 84       	ldd	r5, Y+15	; 0x0f
    1b26:	6e 84       	ldd	r6, Y+14	; 0x0e
    1b28:	7d 84       	ldd	r7, Y+13	; 0x0d
    1b2a:	8c 84       	ldd	r8, Y+12	; 0x0c
    1b2c:	9b 84       	ldd	r9, Y+11	; 0x0b
    1b2e:	aa 84       	ldd	r10, Y+10	; 0x0a
    1b30:	b9 84       	ldd	r11, Y+9	; 0x09
    1b32:	c8 84       	ldd	r12, Y+8	; 0x08
    1b34:	df 80       	ldd	r13, Y+7	; 0x07
    1b36:	ee 80       	ldd	r14, Y+6	; 0x06
    1b38:	fd 80       	ldd	r15, Y+5	; 0x05
    1b3a:	0c 81       	ldd	r16, Y+4	; 0x04
    1b3c:	1b 81       	ldd	r17, Y+3	; 0x03
    1b3e:	aa 81       	ldd	r26, Y+2	; 0x02
    1b40:	b9 81       	ldd	r27, Y+1	; 0x01
    1b42:	ce 0f       	add	r28, r30
    1b44:	d1 1d       	adc	r29, r1
    1b46:	0f b6       	in	r0, 0x3f	; 63
    1b48:	f8 94       	cli
    1b4a:	de bf       	out	0x3e, r29	; 62
    1b4c:	0f be       	out	0x3f, r0	; 63
    1b4e:	cd bf       	out	0x3d, r28	; 61
    1b50:	ed 01       	movw	r28, r26
    1b52:	08 95       	ret

00001b54 <__udivmodsi4>:
    1b54:	a1 e2       	ldi	r26, 0x21	; 33
    1b56:	1a 2e       	mov	r1, r26
    1b58:	aa 1b       	sub	r26, r26
    1b5a:	bb 1b       	sub	r27, r27
    1b5c:	fd 01       	movw	r30, r26
    1b5e:	0d c0       	rjmp	.+26     	; 0x1b7a <__udivmodsi4_ep>

00001b60 <__udivmodsi4_loop>:
    1b60:	aa 1f       	adc	r26, r26
    1b62:	bb 1f       	adc	r27, r27
    1b64:	ee 1f       	adc	r30, r30
    1b66:	ff 1f       	adc	r31, r31
    1b68:	a2 17       	cp	r26, r18
    1b6a:	b3 07       	cpc	r27, r19
    1b6c:	e4 07       	cpc	r30, r20
    1b6e:	f5 07       	cpc	r31, r21
    1b70:	20 f0       	brcs	.+8      	; 0x1b7a <__udivmodsi4_ep>
    1b72:	a2 1b       	sub	r26, r18
    1b74:	b3 0b       	sbc	r27, r19
    1b76:	e4 0b       	sbc	r30, r20
    1b78:	f5 0b       	sbc	r31, r21

00001b7a <__udivmodsi4_ep>:
    1b7a:	66 1f       	adc	r22, r22
    1b7c:	77 1f       	adc	r23, r23
    1b7e:	88 1f       	adc	r24, r24
    1b80:	99 1f       	adc	r25, r25
    1b82:	1a 94       	dec	r1
    1b84:	69 f7       	brne	.-38     	; 0x1b60 <__udivmodsi4_loop>
    1b86:	60 95       	com	r22
    1b88:	70 95       	com	r23
    1b8a:	80 95       	com	r24
    1b8c:	90 95       	com	r25
    1b8e:	9b 01       	movw	r18, r22
    1b90:	ac 01       	movw	r20, r24
    1b92:	bd 01       	movw	r22, r26
    1b94:	cf 01       	movw	r24, r30
    1b96:	08 95       	ret

00001b98 <__umulhisi3>:
    1b98:	a2 9f       	mul	r26, r18
    1b9a:	b0 01       	movw	r22, r0
    1b9c:	b3 9f       	mul	r27, r19
    1b9e:	c0 01       	movw	r24, r0
    1ba0:	a3 9f       	mul	r26, r19
    1ba2:	70 0d       	add	r23, r0
    1ba4:	81 1d       	adc	r24, r1
    1ba6:	11 24       	eor	r1, r1
    1ba8:	91 1d       	adc	r25, r1
    1baa:	b2 9f       	mul	r27, r18
    1bac:	70 0d       	add	r23, r0
    1bae:	81 1d       	adc	r24, r1
    1bb0:	11 24       	eor	r1, r1
    1bb2:	91 1d       	adc	r25, r1
    1bb4:	08 95       	ret

00001bb6 <_exit>:
    1bb6:	f8 94       	cli

00001bb8 <__stop_program>:
    1bb8:	ff cf       	rjmp	.-2      	; 0x1bb8 <__stop_program>
