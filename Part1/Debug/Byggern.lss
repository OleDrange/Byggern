
Byggern.elf:     file format elf32-avr

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .data         000002b8  00800100  00002380  00002414  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  1 .text         00002380  00000000  00000000  00000094  2**1
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .bss          00000050  008003b8  008003b8  000026cc  2**0
                  ALLOC
  3 .comment      0000005c  00000000  00000000  000026cc  2**0
                  CONTENTS, READONLY
  4 .debug_aranges 00000358  00000000  00000000  00002728  2**0
                  CONTENTS, READONLY, DEBUGGING
  5 .debug_info   00003d1a  00000000  00000000  00002a80  2**0
                  CONTENTS, READONLY, DEBUGGING
  6 .debug_abbrev 000016e8  00000000  00000000  0000679a  2**0
                  CONTENTS, READONLY, DEBUGGING
  7 .debug_line   00001505  00000000  00000000  00007e82  2**0
                  CONTENTS, READONLY, DEBUGGING
  8 .debug_frame  000009f0  00000000  00000000  00009388  2**2
                  CONTENTS, READONLY, DEBUGGING
  9 .debug_str    00000b4b  00000000  00000000  00009d78  2**0
                  CONTENTS, READONLY, DEBUGGING
 10 .debug_loc    0000295d  00000000  00000000  0000a8c3  2**0
                  CONTENTS, READONLY, DEBUGGING
 11 .debug_ranges 00000328  00000000  00000000  0000d220  2**0
                  CONTENTS, READONLY, DEBUGGING

Disassembly of section .text:

00000000 <__vectors>:
       0:	0c 94 b4 01 	jmp	0x368	; 0x368 <__ctors_end>
       4:	0c 94 e7 02 	jmp	0x5ce	; 0x5ce <__vector_1>
       8:	0c 94 d3 01 	jmp	0x3a6	; 0x3a6 <__vector_2>
       c:	0c 94 d1 01 	jmp	0x3a2	; 0x3a2 <__bad_interrupt>
      10:	0c 94 d1 01 	jmp	0x3a2	; 0x3a2 <__bad_interrupt>
      14:	0c 94 d1 01 	jmp	0x3a2	; 0x3a2 <__bad_interrupt>
      18:	0c 94 d1 01 	jmp	0x3a2	; 0x3a2 <__bad_interrupt>
      1c:	0c 94 d1 01 	jmp	0x3a2	; 0x3a2 <__bad_interrupt>
      20:	0c 94 d1 01 	jmp	0x3a2	; 0x3a2 <__bad_interrupt>
      24:	0c 94 d1 01 	jmp	0x3a2	; 0x3a2 <__bad_interrupt>
      28:	0c 94 d1 01 	jmp	0x3a2	; 0x3a2 <__bad_interrupt>
      2c:	0c 94 d1 01 	jmp	0x3a2	; 0x3a2 <__bad_interrupt>
      30:	0c 94 d1 01 	jmp	0x3a2	; 0x3a2 <__bad_interrupt>
      34:	0c 94 d1 01 	jmp	0x3a2	; 0x3a2 <__bad_interrupt>
      38:	0c 94 d1 01 	jmp	0x3a2	; 0x3a2 <__bad_interrupt>
      3c:	0c 94 d1 01 	jmp	0x3a2	; 0x3a2 <__bad_interrupt>
      40:	0c 94 d1 01 	jmp	0x3a2	; 0x3a2 <__bad_interrupt>
      44:	0c 94 d1 01 	jmp	0x3a2	; 0x3a2 <__bad_interrupt>
      48:	0c 94 d1 01 	jmp	0x3a2	; 0x3a2 <__bad_interrupt>
      4c:	0c 94 d1 01 	jmp	0x3a2	; 0x3a2 <__bad_interrupt>
      50:	0c 94 d1 01 	jmp	0x3a2	; 0x3a2 <__bad_interrupt>
      54:	0c 94 d1 01 	jmp	0x3a2	; 0x3a2 <__bad_interrupt>
      58:	0c 94 d1 01 	jmp	0x3a2	; 0x3a2 <__bad_interrupt>
      5c:	0c 94 d1 01 	jmp	0x3a2	; 0x3a2 <__bad_interrupt>
      60:	0c 94 d1 01 	jmp	0x3a2	; 0x3a2 <__bad_interrupt>
      64:	0c 94 d1 01 	jmp	0x3a2	; 0x3a2 <__bad_interrupt>
      68:	0c 94 d1 01 	jmp	0x3a2	; 0x3a2 <__bad_interrupt>
      6c:	0c 94 d1 01 	jmp	0x3a2	; 0x3a2 <__bad_interrupt>

00000070 <__trampolines_end>:
	...
      78:	00 06       	cpc	r0, r16
      7a:	5f 5f       	subi	r21, 0xFF	; 255
      7c:	06 00       	.word	0x0006	; ????
      7e:	00 00       	nop
      80:	00 07       	cpc	r16, r16
      82:	07 00       	.word	0x0007	; ????
      84:	07 07       	cpc	r16, r23
      86:	00 00       	nop
      88:	14 7f       	andi	r17, 0xF4	; 244
      8a:	7f 14       	cp	r7, r15
      8c:	7f 7f       	andi	r23, 0xFF	; 255
      8e:	14 00       	.word	0x0014	; ????
      90:	24 2e       	mov	r2, r20
      92:	6b 6b       	ori	r22, 0xBB	; 187
      94:	3a 12       	cpse	r3, r26
      96:	00 00       	nop
      98:	46 66       	ori	r20, 0x66	; 102
      9a:	30 18       	sub	r3, r0
      9c:	0c 66       	ori	r16, 0x6C	; 108
      9e:	62 00       	.word	0x0062	; ????
      a0:	30 7a       	andi	r19, 0xA0	; 160
      a2:	4f 5d       	subi	r20, 0xDF	; 223
      a4:	37 7a       	andi	r19, 0xA7	; 167
      a6:	48 00       	.word	0x0048	; ????
      a8:	04 07       	cpc	r16, r20
      aa:	03 00       	.word	0x0003	; ????
      ac:	00 00       	nop
      ae:	00 00       	nop
      b0:	00 1c       	adc	r0, r0
      b2:	3e 63       	ori	r19, 0x3E	; 62
      b4:	41 00       	.word	0x0041	; ????
      b6:	00 00       	nop
      b8:	00 41       	sbci	r16, 0x10	; 16
      ba:	63 3e       	cpi	r22, 0xE3	; 227
      bc:	1c 00       	.word	0x001c	; ????
      be:	00 00       	nop
      c0:	08 2a       	or	r0, r24
      c2:	3e 1c       	adc	r3, r14
      c4:	1c 3e       	cpi	r17, 0xEC	; 236
      c6:	2a 08       	sbc	r2, r10
      c8:	08 08       	sbc	r0, r8
      ca:	3e 3e       	cpi	r19, 0xEE	; 238
      cc:	08 08       	sbc	r0, r8
      ce:	00 00       	nop
      d0:	00 a0       	ldd	r0, Z+32	; 0x20
      d2:	e0 60       	ori	r30, 0x00	; 0
      d4:	00 00       	nop
      d6:	00 00       	nop
      d8:	08 08       	sbc	r0, r8
      da:	08 08       	sbc	r0, r8
      dc:	08 08       	sbc	r0, r8
      de:	00 00       	nop
      e0:	00 00       	nop
      e2:	60 60       	ori	r22, 0x00	; 0
      e4:	00 00       	nop
      e6:	00 00       	nop
      e8:	60 30       	cpi	r22, 0x00	; 0
      ea:	18 0c       	add	r1, r8
      ec:	06 03       	mulsu	r16, r22
      ee:	01 00       	.word	0x0001	; ????
      f0:	3e 7f       	andi	r19, 0xFE	; 254
      f2:	59 4d       	sbci	r21, 0xD9	; 217
      f4:	7f 3e       	cpi	r23, 0xEF	; 239
      f6:	00 00       	nop
      f8:	42 42       	sbci	r20, 0x22	; 34
      fa:	7f 7f       	andi	r23, 0xFF	; 255
      fc:	40 40       	sbci	r20, 0x00	; 0
      fe:	00 00       	nop
     100:	62 73       	andi	r22, 0x32	; 50
     102:	59 49       	sbci	r21, 0x99	; 153
     104:	6f 66       	ori	r22, 0x6F	; 111
     106:	00 00       	nop
     108:	22 63       	ori	r18, 0x32	; 50
     10a:	49 49       	sbci	r20, 0x99	; 153
     10c:	7f 36       	cpi	r23, 0x6F	; 111
     10e:	00 00       	nop
     110:	18 1c       	adc	r1, r8
     112:	16 13       	cpse	r17, r22
     114:	7f 7f       	andi	r23, 0xFF	; 255
     116:	10 00       	.word	0x0010	; ????
     118:	27 67       	ori	r18, 0x77	; 119
     11a:	45 45       	sbci	r20, 0x55	; 85
     11c:	7d 39       	cpi	r23, 0x9D	; 157
     11e:	00 00       	nop
     120:	3c 7e       	andi	r19, 0xEC	; 236
     122:	4b 49       	sbci	r20, 0x9B	; 155
     124:	79 30       	cpi	r23, 0x09	; 9
     126:	00 00       	nop
     128:	03 63       	ori	r16, 0x33	; 51
     12a:	71 19       	sub	r23, r1
     12c:	0f 07       	cpc	r16, r31
     12e:	00 00       	nop
     130:	36 7f       	andi	r19, 0xF6	; 246
     132:	49 49       	sbci	r20, 0x99	; 153
     134:	7f 36       	cpi	r23, 0x6F	; 111
     136:	00 00       	nop
     138:	06 4f       	sbci	r16, 0xF6	; 246
     13a:	49 69       	ori	r20, 0x99	; 153
     13c:	3f 1e       	adc	r3, r31
     13e:	00 00       	nop
     140:	00 00       	nop
     142:	6c 6c       	ori	r22, 0xCC	; 204
     144:	00 00       	nop
     146:	00 00       	nop
     148:	00 a0       	ldd	r0, Z+32	; 0x20
     14a:	ec 6c       	ori	r30, 0xCC	; 204
     14c:	00 00       	nop
     14e:	00 00       	nop
     150:	08 1c       	adc	r0, r8
     152:	36 63       	ori	r19, 0x36	; 54
     154:	41 00       	.word	0x0041	; ????
     156:	00 00       	nop
     158:	14 14       	cp	r1, r4
     15a:	14 14       	cp	r1, r4
     15c:	14 14       	cp	r1, r4
     15e:	00 00       	nop
     160:	00 41       	sbci	r16, 0x10	; 16
     162:	63 36       	cpi	r22, 0x63	; 99
     164:	1c 08       	sbc	r1, r12
     166:	00 00       	nop
     168:	02 03       	mulsu	r16, r18
     16a:	51 59       	subi	r21, 0x91	; 145
     16c:	0f 06       	cpc	r0, r31
     16e:	00 00       	nop
     170:	3e 7f       	andi	r19, 0xFE	; 254
     172:	41 5d       	subi	r20, 0xD1	; 209
     174:	5d 1f       	adc	r21, r29
     176:	1e 00       	.word	0x001e	; ????
     178:	7c 7e       	andi	r23, 0xEC	; 236
     17a:	13 13       	cpse	r17, r19
     17c:	7e 7c       	andi	r23, 0xCE	; 206
     17e:	00 00       	nop
     180:	41 7f       	andi	r20, 0xF1	; 241
     182:	7f 49       	sbci	r23, 0x9F	; 159
     184:	49 7f       	andi	r20, 0xF9	; 249
     186:	36 00       	.word	0x0036	; ????
     188:	1c 3e       	cpi	r17, 0xEC	; 236
     18a:	63 41       	sbci	r22, 0x13	; 19
     18c:	41 63       	ori	r20, 0x31	; 49
     18e:	22 00       	.word	0x0022	; ????
     190:	41 7f       	andi	r20, 0xF1	; 241
     192:	7f 41       	sbci	r23, 0x1F	; 31
     194:	63 7f       	andi	r22, 0xF3	; 243
     196:	1c 00       	.word	0x001c	; ????
     198:	41 7f       	andi	r20, 0xF1	; 241
     19a:	7f 49       	sbci	r23, 0x9F	; 159
     19c:	5d 41       	sbci	r21, 0x1D	; 29
     19e:	63 00       	.word	0x0063	; ????
     1a0:	41 7f       	andi	r20, 0xF1	; 241
     1a2:	7f 49       	sbci	r23, 0x9F	; 159
     1a4:	1d 01       	movw	r2, r26
     1a6:	03 00       	.word	0x0003	; ????
     1a8:	1c 3e       	cpi	r17, 0xEC	; 236
     1aa:	63 41       	sbci	r22, 0x13	; 19
     1ac:	51 73       	andi	r21, 0x31	; 49
     1ae:	72 00       	.word	0x0072	; ????
     1b0:	7f 7f       	andi	r23, 0xFF	; 255
     1b2:	08 08       	sbc	r0, r8
     1b4:	7f 7f       	andi	r23, 0xFF	; 255
     1b6:	00 00       	nop
     1b8:	00 41       	sbci	r16, 0x10	; 16
     1ba:	7f 7f       	andi	r23, 0xFF	; 255
     1bc:	41 00       	.word	0x0041	; ????
     1be:	00 00       	nop
     1c0:	30 70       	andi	r19, 0x00	; 0
     1c2:	40 41       	sbci	r20, 0x10	; 16
     1c4:	7f 3f       	cpi	r23, 0xFF	; 255
     1c6:	01 00       	.word	0x0001	; ????
     1c8:	41 7f       	andi	r20, 0xF1	; 241
     1ca:	7f 08       	sbc	r7, r15
     1cc:	1c 77       	andi	r17, 0x7C	; 124
     1ce:	63 00       	.word	0x0063	; ????
     1d0:	41 7f       	andi	r20, 0xF1	; 241
     1d2:	7f 41       	sbci	r23, 0x1F	; 31
     1d4:	40 60       	ori	r20, 0x00	; 0
     1d6:	70 00       	.word	0x0070	; ????
     1d8:	7f 7f       	andi	r23, 0xFF	; 255
     1da:	06 0c       	add	r0, r6
     1dc:	06 7f       	andi	r16, 0xF6	; 246
     1de:	7f 00       	.word	0x007f	; ????
     1e0:	7f 7f       	andi	r23, 0xFF	; 255
     1e2:	06 0c       	add	r0, r6
     1e4:	18 7f       	andi	r17, 0xF8	; 248
     1e6:	7f 00       	.word	0x007f	; ????
     1e8:	1c 3e       	cpi	r17, 0xEC	; 236
     1ea:	63 41       	sbci	r22, 0x13	; 19
     1ec:	63 3e       	cpi	r22, 0xE3	; 227
     1ee:	1c 00       	.word	0x001c	; ????
     1f0:	41 7f       	andi	r20, 0xF1	; 241
     1f2:	7f 49       	sbci	r23, 0x9F	; 159
     1f4:	09 0f       	add	r16, r25
     1f6:	06 00       	.word	0x0006	; ????
     1f8:	1e 3f       	cpi	r17, 0xFE	; 254
     1fa:	21 71       	andi	r18, 0x11	; 17
     1fc:	7f 5e       	subi	r23, 0xEF	; 239
     1fe:	00 00       	nop
     200:	41 7f       	andi	r20, 0xF1	; 241
     202:	7f 19       	sub	r23, r15
     204:	39 6f       	ori	r19, 0xF9	; 249
     206:	46 00       	.word	0x0046	; ????
     208:	26 67       	ori	r18, 0x76	; 118
     20a:	4d 59       	subi	r20, 0x9D	; 157
     20c:	7b 32       	cpi	r23, 0x2B	; 43
     20e:	00 00       	nop
     210:	03 41       	sbci	r16, 0x13	; 19
     212:	7f 7f       	andi	r23, 0xFF	; 255
     214:	41 03       	mulsu	r20, r17
     216:	00 00       	nop
     218:	7f 7f       	andi	r23, 0xFF	; 255
     21a:	40 40       	sbci	r20, 0x00	; 0
     21c:	7f 7f       	andi	r23, 0xFF	; 255
     21e:	00 00       	nop
     220:	1f 3f       	cpi	r17, 0xFF	; 255
     222:	60 60       	ori	r22, 0x00	; 0
     224:	3f 1f       	adc	r19, r31
     226:	00 00       	nop
     228:	7f 7f       	andi	r23, 0xFF	; 255
     22a:	30 18       	sub	r3, r0
     22c:	30 7f       	andi	r19, 0xF0	; 240
     22e:	7f 00       	.word	0x007f	; ????
     230:	63 77       	andi	r22, 0x73	; 115
     232:	1c 08       	sbc	r1, r12
     234:	1c 77       	andi	r17, 0x7C	; 124
     236:	63 00       	.word	0x0063	; ????
     238:	07 4f       	sbci	r16, 0xF7	; 247
     23a:	78 78       	andi	r23, 0x88	; 136
     23c:	4f 07       	cpc	r20, r31
     23e:	00 00       	nop
     240:	67 73       	andi	r22, 0x37	; 55
     242:	59 4d       	sbci	r21, 0xD9	; 217
     244:	47 63       	ori	r20, 0x37	; 55
     246:	71 00       	.word	0x0071	; ????
     248:	00 7f       	andi	r16, 0xF0	; 240
     24a:	7f 41       	sbci	r23, 0x1F	; 31
     24c:	41 00       	.word	0x0041	; ????
     24e:	00 00       	nop
     250:	01 03       	mulsu	r16, r17
     252:	06 0c       	add	r0, r6
     254:	18 30       	cpi	r17, 0x08	; 8
     256:	60 00       	.word	0x0060	; ????
     258:	00 41       	sbci	r16, 0x10	; 16
     25a:	41 7f       	andi	r20, 0xF1	; 241
     25c:	7f 00       	.word	0x007f	; ????
     25e:	00 00       	nop
     260:	08 0c       	add	r0, r8
     262:	06 03       	mulsu	r16, r22
     264:	06 0c       	add	r0, r6
     266:	08 00       	.word	0x0008	; ????
     268:	80 80       	ld	r8, Z
     26a:	80 80       	ld	r8, Z
     26c:	80 80       	ld	r8, Z
     26e:	80 80       	ld	r8, Z
     270:	00 00       	nop
     272:	03 07       	cpc	r16, r19
     274:	04 00       	.word	0x0004	; ????
     276:	00 00       	nop
     278:	20 74       	andi	r18, 0x40	; 64
     27a:	54 54       	subi	r21, 0x44	; 68
     27c:	3c 78       	andi	r19, 0x8C	; 140
     27e:	40 00       	.word	0x0040	; ????
     280:	41 3f       	cpi	r20, 0xF1	; 241
     282:	7f 44       	sbci	r23, 0x4F	; 79
     284:	44 7c       	andi	r20, 0xC4	; 196
     286:	38 00       	.word	0x0038	; ????
     288:	38 7c       	andi	r19, 0xC8	; 200
     28a:	44 44       	sbci	r20, 0x44	; 68
     28c:	6c 28       	or	r6, r12
     28e:	00 00       	nop
     290:	30 78       	andi	r19, 0x80	; 128
     292:	48 49       	sbci	r20, 0x98	; 152
     294:	3f 7f       	andi	r19, 0xFF	; 255
     296:	40 00       	.word	0x0040	; ????
     298:	38 7c       	andi	r19, 0xC8	; 200
     29a:	54 54       	subi	r21, 0x44	; 68
     29c:	5c 18       	sub	r5, r12
     29e:	00 00       	nop
     2a0:	48 7e       	andi	r20, 0xE8	; 232
     2a2:	7f 49       	sbci	r23, 0x9F	; 159
     2a4:	03 02       	muls	r16, r19
     2a6:	00 00       	nop
     2a8:	98 bc       	out	0x28, r9	; 40
     2aa:	a4 a4       	ldd	r10, Z+44	; 0x2c
     2ac:	f8 7c       	andi	r31, 0xC8	; 200
     2ae:	04 00       	.word	0x0004	; ????
     2b0:	41 7f       	andi	r20, 0xF1	; 241
     2b2:	7f 08       	sbc	r7, r15
     2b4:	04 7c       	andi	r16, 0xC4	; 196
     2b6:	78 00       	.word	0x0078	; ????
     2b8:	00 44       	sbci	r16, 0x40	; 64
     2ba:	7d 7d       	andi	r23, 0xDD	; 221
     2bc:	40 00       	.word	0x0040	; ????
     2be:	00 00       	nop
     2c0:	40 c4       	rjmp	.+2176   	; 0xb42 <getInfo+0x5e>
     2c2:	84 fd       	sbrc	r24, 4
     2c4:	7d 00       	.word	0x007d	; ????
     2c6:	00 00       	nop
     2c8:	41 7f       	andi	r20, 0xF1	; 241
     2ca:	7f 10       	cpse	r7, r15
     2cc:	38 6c       	ori	r19, 0xC8	; 200
     2ce:	44 00       	.word	0x0044	; ????
     2d0:	00 41       	sbci	r16, 0x10	; 16
     2d2:	7f 7f       	andi	r23, 0xFF	; 255
     2d4:	40 00       	.word	0x0040	; ????
     2d6:	00 00       	nop
     2d8:	7c 7c       	andi	r23, 0xCC	; 204
     2da:	0c 18       	sub	r0, r12
     2dc:	0c 7c       	andi	r16, 0xCC	; 204
     2de:	78 00       	.word	0x0078	; ????
     2e0:	7c 7c       	andi	r23, 0xCC	; 204
     2e2:	04 04       	cpc	r0, r4
     2e4:	7c 78       	andi	r23, 0x8C	; 140
     2e6:	00 00       	nop
     2e8:	38 7c       	andi	r19, 0xC8	; 200
     2ea:	44 44       	sbci	r20, 0x44	; 68
     2ec:	7c 38       	cpi	r23, 0x8C	; 140
     2ee:	00 00       	nop
     2f0:	84 fc       	sbrc	r8, 4
     2f2:	f8 a4       	ldd	r15, Y+40	; 0x28
     2f4:	24 3c       	cpi	r18, 0xC4	; 196
     2f6:	18 00       	.word	0x0018	; ????
     2f8:	18 3c       	cpi	r17, 0xC8	; 200
     2fa:	24 a4       	ldd	r2, Z+44	; 0x2c
     2fc:	f8 fc       	.word	0xfcf8	; ????
     2fe:	84 00       	.word	0x0084	; ????
     300:	44 7c       	andi	r20, 0xC4	; 196
     302:	78 44       	sbci	r23, 0x48	; 72
     304:	1c 18       	sub	r1, r12
     306:	00 00       	nop
     308:	48 5c       	subi	r20, 0xC8	; 200
     30a:	54 54       	subi	r21, 0x44	; 68
     30c:	74 24       	eor	r7, r4
     30e:	00 00       	nop
     310:	00 04       	cpc	r0, r0
     312:	3e 7f       	andi	r19, 0xFE	; 254
     314:	44 24       	eor	r4, r4
     316:	00 00       	nop
     318:	3c 7c       	andi	r19, 0xCC	; 204
     31a:	40 40       	sbci	r20, 0x00	; 0
     31c:	3c 7c       	andi	r19, 0xCC	; 204
     31e:	40 00       	.word	0x0040	; ????
     320:	1c 3c       	cpi	r17, 0xCC	; 204
     322:	60 60       	ori	r22, 0x00	; 0
     324:	3c 1c       	adc	r3, r12
     326:	00 00       	nop
     328:	3c 7c       	andi	r19, 0xCC	; 204
     32a:	60 30       	cpi	r22, 0x00	; 0
     32c:	60 7c       	andi	r22, 0xC0	; 192
     32e:	3c 00       	.word	0x003c	; ????
     330:	44 6c       	ori	r20, 0xC4	; 196
     332:	38 10       	cpse	r3, r8
     334:	38 6c       	ori	r19, 0xC8	; 200
     336:	44 00       	.word	0x0044	; ????
     338:	9c bc       	out	0x2c, r9	; 44
     33a:	a0 a0       	ldd	r10, Z+32	; 0x20
     33c:	fc 7c       	andi	r31, 0xCC	; 204
     33e:	00 00       	nop
     340:	4c 64       	ori	r20, 0x4C	; 76
     342:	74 5c       	subi	r23, 0xC4	; 196
     344:	4c 64       	ori	r20, 0x4C	; 76
     346:	00 00       	nop
     348:	08 08       	sbc	r0, r8
     34a:	3e 77       	andi	r19, 0x7E	; 126
     34c:	41 41       	sbci	r20, 0x11	; 17
     34e:	00 00       	nop
     350:	00 00       	nop
     352:	00 77       	andi	r16, 0x70	; 112
     354:	77 00       	.word	0x0077	; ????
     356:	00 00       	nop
     358:	41 41       	sbci	r20, 0x11	; 17
     35a:	77 3e       	cpi	r23, 0xE7	; 231
     35c:	08 08       	sbc	r0, r8
     35e:	00 00       	nop
     360:	02 03       	mulsu	r16, r18
     362:	01 03       	mulsu	r16, r17
     364:	02 03       	mulsu	r16, r18
     366:	01 00       	.word	0x0001	; ????

00000368 <__ctors_end>:
     368:	11 24       	eor	r1, r1
     36a:	1f be       	out	0x3f, r1	; 63
     36c:	cf ef       	ldi	r28, 0xFF	; 255
     36e:	d4 e0       	ldi	r29, 0x04	; 4
     370:	de bf       	out	0x3e, r29	; 62
     372:	cd bf       	out	0x3d, r28	; 61

00000374 <__do_copy_data>:
     374:	13 e0       	ldi	r17, 0x03	; 3
     376:	a0 e0       	ldi	r26, 0x00	; 0
     378:	b1 e0       	ldi	r27, 0x01	; 1
     37a:	e0 e8       	ldi	r30, 0x80	; 128
     37c:	f3 e2       	ldi	r31, 0x23	; 35
     37e:	02 c0       	rjmp	.+4      	; 0x384 <__do_copy_data+0x10>
     380:	05 90       	lpm	r0, Z+
     382:	0d 92       	st	X+, r0
     384:	a8 3b       	cpi	r26, 0xB8	; 184
     386:	b1 07       	cpc	r27, r17
     388:	d9 f7       	brne	.-10     	; 0x380 <__do_copy_data+0xc>

0000038a <__do_clear_bss>:
     38a:	24 e0       	ldi	r18, 0x04	; 4
     38c:	a8 eb       	ldi	r26, 0xB8	; 184
     38e:	b3 e0       	ldi	r27, 0x03	; 3
     390:	01 c0       	rjmp	.+2      	; 0x394 <.do_clear_bss_start>

00000392 <.do_clear_bss_loop>:
     392:	1d 92       	st	X+, r1

00000394 <.do_clear_bss_start>:
     394:	a8 30       	cpi	r26, 0x08	; 8
     396:	b2 07       	cpc	r27, r18
     398:	e1 f7       	brne	.-8      	; 0x392 <.do_clear_bss_loop>
     39a:	0e 94 4d 02 	call	0x49a	; 0x49a <main>
     39e:	0c 94 be 11 	jmp	0x237c	; 0x237c <_exit>

000003a2 <__bad_interrupt>:
     3a2:	0c 94 00 00 	jmp	0	; 0x0 <__vectors>

000003a6 <__vector_2>:
#endif

volatile char* ext_adc = ADC_ADDRESS;
volatile char ADC_data;

ISR(INT1_vect){
     3a6:	1f 92       	push	r1
     3a8:	0f 92       	push	r0
     3aa:	0f b6       	in	r0, 0x3f	; 63
     3ac:	0f 92       	push	r0
     3ae:	11 24       	eor	r1, r1
     3b0:	8f 93       	push	r24
     3b2:	ef 93       	push	r30
     3b4:	ff 93       	push	r31
	
	ADC_data = ext_adc[0x00];
     3b6:	e0 91 06 01 	lds	r30, 0x0106
     3ba:	f0 91 07 01 	lds	r31, 0x0107
     3be:	80 81       	ld	r24, Z
     3c0:	80 93 d2 03 	sts	0x03D2, r24
}
     3c4:	ff 91       	pop	r31
     3c6:	ef 91       	pop	r30
     3c8:	8f 91       	pop	r24
     3ca:	0f 90       	pop	r0
     3cc:	0f be       	out	0x3f, r0	; 63
     3ce:	0f 90       	pop	r0
     3d0:	1f 90       	pop	r1
     3d2:	18 95       	reti

000003d4 <ADC_init>:

void ADC_init(void){
	

	clear_bit(DDRD, PD3);
     3d4:	8b 98       	cbi	0x11, 3	; 17
	set_bit(PORTD, PD3);	
     3d6:	93 9a       	sbi	0x12, 3	; 18
	
	cli();
     3d8:	f8 94       	cli
	
	set_bit(MCUCR, ISC11);
     3da:	85 b7       	in	r24, 0x35	; 53
     3dc:	88 60       	ori	r24, 0x08	; 8
     3de:	85 bf       	out	0x35, r24	; 53
	clear_bit(MCUCR, ISC10);
     3e0:	85 b7       	in	r24, 0x35	; 53
     3e2:	8b 7f       	andi	r24, 0xFB	; 251
     3e4:	85 bf       	out	0x35, r24	; 53
	
	set_bit(GICR,INT1);
     3e6:	8b b7       	in	r24, 0x3b	; 59
     3e8:	80 68       	ori	r24, 0x80	; 128
     3ea:	8b bf       	out	0x3b, r24	; 59

	sei();
     3ec:	78 94       	sei
     3ee:	08 95       	ret

000003f0 <get_ADC_data>:
}

char get_ADC_data(void){
	return ext_adc[0x00]; 
     3f0:	e0 91 06 01 	lds	r30, 0x0106
     3f4:	f0 91 07 01 	lds	r31, 0x0107
     3f8:	80 81       	ld	r24, Z
}
     3fa:	08 95       	ret

000003fc <ADC_start_read>:

void ADC_start_read(ADC_channel channel){
	
	char data = 0x00;
	switch (channel) {
     3fc:	81 30       	cpi	r24, 0x01	; 1
     3fe:	b1 f0       	breq	.+44     	; 0x42c <ADC_start_read+0x30>
     400:	28 f0       	brcs	.+10     	; 0x40c <ADC_start_read+0x10>
     402:	82 30       	cpi	r24, 0x02	; 2
     404:	29 f0       	breq	.+10     	; 0x410 <ADC_start_read+0x14>
     406:	83 30       	cpi	r24, 0x03	; 3
     408:	29 f0       	breq	.+10     	; 0x414 <ADC_start_read+0x18>
     40a:	06 c0       	rjmp	.+12     	; 0x418 <ADC_start_read+0x1c>
		case CHANNEL1 :
		data = 0x04;
     40c:	84 e0       	ldi	r24, 0x04	; 4
     40e:	0f c0       	rjmp	.+30     	; 0x42e <ADC_start_read+0x32>
		break;
		case CHANNEL2 :
		data = 0x05;
		break;
		case CHANNEL3 :
		data = 0x06;
     410:	86 e0       	ldi	r24, 0x06	; 6
		break;
     412:	0d c0       	rjmp	.+26     	; 0x42e <ADC_start_read+0x32>
		case CHANNEL4 :
		data = 0x07;
     414:	87 e0       	ldi	r24, 0x07	; 7
		break;
     416:	0b c0       	rjmp	.+22     	; 0x42e <ADC_start_read+0x32>
		default:
		printf("Not valid channel");
     418:	8c e4       	ldi	r24, 0x4C	; 76
     41a:	91 e0       	ldi	r25, 0x01	; 1
     41c:	9f 93       	push	r25
     41e:	8f 93       	push	r24
     420:	0e 94 ab 0e 	call	0x1d56	; 0x1d56 <printf>
     424:	0f 90       	pop	r0
     426:	0f 90       	pop	r0
	return ext_adc[0x00]; 
}

void ADC_start_read(ADC_channel channel){
	
	char data = 0x00;
     428:	80 e0       	ldi	r24, 0x00	; 0
     42a:	01 c0       	rjmp	.+2      	; 0x42e <ADC_start_read+0x32>
	switch (channel) {
		case CHANNEL1 :
		data = 0x04;
		break;
		case CHANNEL2 :
		data = 0x05;
     42c:	85 e0       	ldi	r24, 0x05	; 5
		break;
		default:
		printf("Not valid channel");
	}
	
	ext_adc[0] = data;
     42e:	e0 91 06 01 	lds	r30, 0x0106
     432:	f0 91 07 01 	lds	r31, 0x0107
     436:	80 83       	st	Z, r24
     438:	08 95       	ret

0000043a <joyupdatejoystickavrage>:
long map(long x, long in_min, long in_max, long out_min, long out_max)
{
	return (x - in_min) * (out_max - out_min) / (in_max - in_min) + out_min;
}
JoystickDir joyupdatejoystickavrage(JoystickDir input){
	joystickarray[nextIndex] = input;
     43a:	20 91 b8 03 	lds	r18, 0x03B8
     43e:	30 91 b9 03 	lds	r19, 0x03B9
     442:	f9 01       	movw	r30, r18
     444:	ee 0f       	add	r30, r30
     446:	ff 1f       	adc	r31, r31
     448:	ed 52       	subi	r30, 0x2D	; 45
     44a:	fc 4f       	sbci	r31, 0xFC	; 252
     44c:	90 e0       	ldi	r25, 0x00	; 0
     44e:	91 83       	std	Z+1, r25	; 0x01
     450:	80 83       	st	Z, r24
	nextIndex ++;
     452:	2f 5f       	subi	r18, 0xFF	; 255
     454:	3f 4f       	sbci	r19, 0xFF	; 255
	if(nextIndex > 9){
     456:	2a 30       	cpi	r18, 0x0A	; 10
     458:	31 05       	cpc	r19, r1
     45a:	2c f4       	brge	.+10     	; 0x466 <joyupdatejoystickavrage+0x2c>
{
	return (x - in_min) * (out_max - out_min) / (in_max - in_min) + out_min;
}
JoystickDir joyupdatejoystickavrage(JoystickDir input){
	joystickarray[nextIndex] = input;
	nextIndex ++;
     45c:	30 93 b9 03 	sts	0x03B9, r19
     460:	20 93 b8 03 	sts	0x03B8, r18
     464:	04 c0       	rjmp	.+8      	; 0x46e <joyupdatejoystickavrage+0x34>
	if(nextIndex > 9){
		nextIndex = 0;
     466:	10 92 b9 03 	sts	0x03B9, r1
     46a:	10 92 b8 03 	sts	0x03B8, r1
     46e:	e3 ed       	ldi	r30, 0xD3	; 211
     470:	f3 e0       	ldi	r31, 0x03	; 3
     472:	45 ee       	ldi	r20, 0xE5	; 229
     474:	53 e0       	ldi	r21, 0x03	; 3
	}
	int count = 0;
     476:	20 e0       	ldi	r18, 0x00	; 0
     478:	30 e0       	ldi	r19, 0x00	; 0
	for(int i = 0; i < 9; i++){
		if(joystickarray[i] == 0){
     47a:	81 91       	ld	r24, Z+
     47c:	91 91       	ld	r25, Z+
     47e:	89 2b       	or	r24, r25
     480:	11 f4       	brne	.+4      	; 0x486 <joyupdatejoystickavrage+0x4c>
			count++;
     482:	2f 5f       	subi	r18, 0xFF	; 255
     484:	3f 4f       	sbci	r19, 0xFF	; 255
	nextIndex ++;
	if(nextIndex > 9){
		nextIndex = 0;
	}
	int count = 0;
	for(int i = 0; i < 9; i++){
     486:	e4 17       	cp	r30, r20
     488:	f5 07       	cpc	r31, r21
     48a:	b9 f7       	brne	.-18     	; 0x47a <joyupdatejoystickavrage+0x40>
		if(joystickarray[i] == 0){
			count++;
		}
	}
	if(count > 2){
     48c:	23 30       	cpi	r18, 0x03	; 3
     48e:	31 05       	cpc	r19, r1
     490:	14 f0       	brlt	.+4      	; 0x496 <joyupdatejoystickavrage+0x5c>
		return LEFT;
     492:	80 e0       	ldi	r24, 0x00	; 0
     494:	08 95       	ret
	}
	return NEUTRAL;
     496:	84 e0       	ldi	r24, 0x04	; 4
     498:	08 95       	ret

0000049a <main>:
int nextIndex = 0;
int joystickarray[10];
long map(long x, long in_min, long in_max, long out_min, long out_max);
JoystickDir joyupdatejoystickavrage(JoystickDir input);
int main( )
{
     49a:	cf 93       	push	r28
     49c:	df 93       	push	r29
     49e:	00 d0       	rcall	.+0      	; 0x4a0 <main+0x6>
     4a0:	00 d0       	rcall	.+0      	; 0x4a2 <main+0x8>
     4a2:	1f 92       	push	r1
     4a4:	cd b7       	in	r28, 0x3d	; 61
     4a6:	de b7       	in	r29, 0x3e	; 62
	My_serial_Init ( MYUBRR );
     4a8:	8f e1       	ldi	r24, 0x1F	; 31
     4aa:	90 e0       	ldi	r25, 0x00	; 0
     4ac:	0e 94 01 05 	call	0xa02	; 0xa02 <My_serial_Init>
	#else
		//round up by default
		__ticks_dc = (uint32_t)(ceil(fabs(__tmp)));
	#endif

	__builtin_avr_delay_cycles(__ticks_dc);
     4b0:	2f ef       	ldi	r18, 0xFF	; 255
     4b2:	8f ef       	ldi	r24, 0xFF	; 255
     4b4:	9e e0       	ldi	r25, 0x0E	; 14
     4b6:	21 50       	subi	r18, 0x01	; 1
     4b8:	80 40       	sbci	r24, 0x00	; 0
     4ba:	90 40       	sbci	r25, 0x00	; 0
     4bc:	e1 f7       	brne	.-8      	; 0x4b6 <main+0x1c>
     4be:	00 c0       	rjmp	.+0      	; 0x4c0 <main+0x26>
     4c0:	00 00       	nop
	_delay_ms(1000);
	ADC_init();
     4c2:	0e 94 ea 01 	call	0x3d4	; 0x3d4 <ADC_init>
	Joystick_calibrate();
     4c6:	0e 94 ac 05 	call	0xb58	; 0xb58 <Joystick_calibrate>
	oled_init();
     4ca:	0e 94 54 0a 	call	0x14a8	; 0x14a8 <oled_init>
	menu* mymenu = oled_menu_init();
     4ce:	0e 94 74 0b 	call	0x16e8	; 0x16e8 <oled_menu_init>
	Joystick myjoystick;
	gamevars mygame;
	gamevars mygameold;
	menu_option lastOption;
	int updatescore = 0;
	oled_menu_select(0);
     4d2:	80 e0       	ldi	r24, 0x00	; 0
     4d4:	90 e0       	ldi	r25, 0x00	; 0
     4d6:	0e 94 ff 0b 	call	0x17fe	; 0x17fe <oled_menu_select>
	can_init(MODE_NORMAL);
     4da:	80 e0       	ldi	r24, 0x00	; 0
     4dc:	0e 94 fb 02 	call	0x5f6	; 0x5f6 <can_init>
	printf("NEW START!!!!");
     4e0:	87 e4       	ldi	r24, 0x47	; 71
     4e2:	92 e0       	ldi	r25, 0x02	; 2
     4e4:	9f 93       	push	r25
     4e6:	8f 93       	push	r24
     4e8:	0e 94 ab 0e 	call	0x1d56	; 0x1d56 <printf>
     4ec:	0f 90       	pop	r0
     4ee:	0f 90       	pop	r0
	int sendinfoflag =0;
	int gamemode = 0;

	JoystickDir myjoystickhold = NEUTRAL;
     4f0:	68 94       	set
     4f2:	99 24       	eor	r9, r9
     4f4:	92 f8       	bld	r9, 2
	int updatescore = 0;
	oled_menu_select(0);
	can_init(MODE_NORMAL);
	printf("NEW START!!!!");
	int sendinfoflag =0;
	int gamemode = 0;
     4f6:	00 e0       	ldi	r16, 0x00	; 0
     4f8:	10 e0       	ldi	r17, 0x00	; 0
	menu_option lastOption;
	int updatescore = 0;
	oled_menu_select(0);
	can_init(MODE_NORMAL);
	printf("NEW START!!!!");
	int sendinfoflag =0;
     4fa:	c1 2c       	mov	r12, r1
     4fc:	d1 2c       	mov	r13, r1
	while(1)
	{
		//printf("TESTINGS\r\n");
		mygame = getInfo();
		if(mygame.enemypoints != mygameold.enemypoints || mygame.mypoints != mygameold.mypoints){
			updatescore = 1;
     4fe:	33 24       	eor	r3, r3
     500:	33 94       	inc	r3
     502:	21 2c       	mov	r2, r1

	JoystickDir myjoystickhold = NEUTRAL;
	while(1)
	{
		//printf("TESTINGS\r\n");
		mygame = getInfo();
     504:	0e 94 72 05 	call	0xae4	; 0xae4 <getInfo>
     508:	2b 01       	movw	r4, r22
     50a:	3c 01       	movw	r6, r24
		if(mygame.enemypoints != mygameold.enemypoints || mygame.mypoints != mygameold.mypoints){
     50c:	e6 14       	cp	r14, r6
     50e:	f7 04       	cpc	r15, r7
     510:	51 f4       	brne	.+20     	; 0x526 <__stack+0x27>
     512:	33 2d       	mov	r19, r3
     514:	22 2d       	mov	r18, r2
     516:	a6 16       	cp	r10, r22
     518:	b7 06       	cpc	r11, r23
     51a:	11 f4       	brne	.+4      	; 0x520 <__stack+0x21>
     51c:	30 e0       	ldi	r19, 0x00	; 0
     51e:	20 e0       	ldi	r18, 0x00	; 0
			updatescore = 1;
     520:	e3 2e       	mov	r14, r19
     522:	f2 2e       	mov	r15, r18
     524:	02 c0       	rjmp	.+4      	; 0x52a <__stack+0x2b>
     526:	e3 2c       	mov	r14, r3
     528:	f2 2c       	mov	r15, r2
		}
		else{
			updatescore = 0;
		}
		mygameold = mygame;
		myjoystick = joystickPos();
     52a:	0e 94 09 06 	call	0xc12	; 0xc12 <joystickPos>
     52e:	b6 2e       	mov	r11, r22
     530:	29 83       	std	Y+1, r18	; 0x01
     532:	3a 83       	std	Y+2, r19	; 0x02
     534:	4b 83       	std	Y+3, r20	; 0x03
     536:	5c 83       	std	Y+4, r21	; 0x04
     538:	6d 83       	std	Y+5, r22	; 0x05
		if(myjoystick.Dir != myjoystickhold){
     53a:	96 16       	cp	r9, r22
     53c:	01 f1       	breq	.+64     	; 0x57e <__stack+0x7f>
			if(joyupdatejoystickavrage(myjoystick.Dir) == LEFT){
     53e:	86 2f       	mov	r24, r22
     540:	0e 94 1d 02 	call	0x43a	; 0x43a <joyupdatejoystickavrage>
     544:	81 11       	cpse	r24, r1
     546:	0b c0       	rjmp	.+22     	; 0x55e <__stack+0x5f>
				sendReset();
     548:	0e 94 54 05 	call	0xaa8	; 0xaa8 <sendReset>
				lastOption = NONE;
				printf("SVART!!!!");
     54c:	a5 e5       	ldi	r26, 0x55	; 85
     54e:	b2 e0       	ldi	r27, 0x02	; 2
     550:	bf 93       	push	r27
     552:	af 93       	push	r26
     554:	0e 94 ab 0e 	call	0x1d56	; 0x1d56 <printf>
     558:	0f 90       	pop	r0
     55a:	0f 90       	pop	r0
     55c:	04 c0       	rjmp	.+8      	; 0x566 <__stack+0x67>
			}
			if(lastOption == SinglePlayer || lastOption == Multiplayer){
     55e:	8f ef       	ldi	r24, 0xFF	; 255
     560:	88 0d       	add	r24, r8
     562:	82 30       	cpi	r24, 0x02	; 2
     564:	80 f0       	brcs	.+32     	; 0x586 <__stack+0x87>
				gamemode = 1;
			}
			else{
				lastOption = printgame(oled_menu_select(),mygame);
     566:	0e 94 ff 0b 	call	0x17fe	; 0x17fe <oled_menu_select>
     56a:	b3 01       	movw	r22, r6
     56c:	a2 01       	movw	r20, r4
     56e:	0e 94 f1 07 	call	0xfe2	; 0xfe2 <printgame>
     572:	88 2e       	mov	r8, r24
				sendInfo(lastOption);
     574:	0e 94 14 05 	call	0xa28	; 0xa28 <sendInfo>
				gamemode = 0;
     578:	00 e0       	ldi	r16, 0x00	; 0
     57a:	10 e0       	ldi	r17, 0x00	; 0
     57c:	1e c0       	rjmp	.+60     	; 0x5ba <__stack+0xbb>
			}
		}
		myjoystickhold = myjoystick.Dir;
		if(gamemode){
     57e:	01 15       	cp	r16, r1
     580:	11 05       	cpc	r17, r1
     582:	19 f4       	brne	.+6      	; 0x58a <__stack+0x8b>
     584:	1a c0       	rjmp	.+52     	; 0x5ba <__stack+0xbb>
				sendReset();
				lastOption = NONE;
				printf("SVART!!!!");
			}
			if(lastOption == SinglePlayer || lastOption == Multiplayer){
				gamemode = 1;
     586:	03 2d       	mov	r16, r3
     588:	12 2d       	mov	r17, r2
				gamemode = 0;
			}
		}
		myjoystickhold = myjoystick.Dir;
		if(gamemode){
			if(updatescore){
     58a:	ef 28       	or	r14, r15
     58c:	51 f0       	breq	.+20     	; 0x5a2 <__stack+0xa3>
				lastOption = printgame(lastOption,mygame);
     58e:	b3 01       	movw	r22, r6
     590:	a2 01       	movw	r20, r4
     592:	88 2d       	mov	r24, r8
     594:	0e 94 f1 07 	call	0xfe2	; 0xfe2 <printgame>
     598:	88 2e       	mov	r8, r24
				printf("UPDATE SCORE\r\n");
     59a:	8f e5       	ldi	r24, 0x5F	; 95
     59c:	92 e0       	ldi	r25, 0x02	; 2
     59e:	0e 94 bf 0e 	call	0x1d7e	; 0x1d7e <puts>
			}
			sendinfoflag++;
     5a2:	8f ef       	ldi	r24, 0xFF	; 255
     5a4:	c8 1a       	sub	r12, r24
     5a6:	d8 0a       	sbc	r13, r24
			if(sendinfoflag > 20){
     5a8:	95 e1       	ldi	r25, 0x15	; 21
     5aa:	c9 16       	cp	r12, r25
     5ac:	d1 04       	cpc	r13, r1
     5ae:	2c f0       	brlt	.+10     	; 0x5ba <__stack+0xbb>
				sendInfo(lastOption);
     5b0:	88 2d       	mov	r24, r8
     5b2:	0e 94 14 05 	call	0xa28	; 0xa28 <sendInfo>
				sendinfoflag = 0;
     5b6:	c1 2c       	mov	r12, r1
     5b8:	d1 2c       	mov	r13, r1
     5ba:	af ef       	ldi	r26, 0xFF	; 255
     5bc:	bf e2       	ldi	r27, 0x2F	; 47
     5be:	11 97       	sbiw	r26, 0x01	; 1
     5c0:	f1 f7       	brne	.-4      	; 0x5be <__stack+0xbf>
     5c2:	00 c0       	rjmp	.+0      	; 0x5c4 <__stack+0xc5>
     5c4:	00 00       	nop
				lastOption = printgame(oled_menu_select(),mygame);
				sendInfo(lastOption);
				gamemode = 0;
			}
		}
		myjoystickhold = myjoystick.Dir;
     5c6:	9b 2c       	mov	r9, r11
			updatescore = 1;
		}
		else{
			updatescore = 0;
		}
		mygameold = mygame;
     5c8:	52 01       	movw	r10, r4
     5ca:	73 01       	movw	r14, r6
     5cc:	9b cf       	rjmp	.-202    	; 0x504 <__stack+0x5>

000005ce <__vector_1>:
#include <avr/delay.h>

volatile int flag = 0;


ISR(INT0_vect){
     5ce:	1f 92       	push	r1
     5d0:	0f 92       	push	r0
     5d2:	0f b6       	in	r0, 0x3f	; 63
     5d4:	0f 92       	push	r0
     5d6:	11 24       	eor	r1, r1
     5d8:	8f 93       	push	r24
     5da:	9f 93       	push	r25
	flag = 1;
     5dc:	81 e0       	ldi	r24, 0x01	; 1
     5de:	90 e0       	ldi	r25, 0x00	; 0
     5e0:	90 93 bd 03 	sts	0x03BD, r25
     5e4:	80 93 bc 03 	sts	0x03BC, r24
	//printf("\r\n INTERUPT\r\n");
}
     5e8:	9f 91       	pop	r25
     5ea:	8f 91       	pop	r24
     5ec:	0f 90       	pop	r0
     5ee:	0f be       	out	0x3f, r0	; 63
     5f0:	0f 90       	pop	r0
     5f2:	1f 90       	pop	r1
     5f4:	18 95       	reti

000005f6 <can_init>:

void can_init(uint8_t mode){

	mcp_2515_init(mode);
     5f6:	0e 94 9c 04 	call	0x938	; 0x938 <mcp_2515_init>
	
	
	mcp_2515_write(MCP_CANINTE, MCP_RX_INT);
     5fa:	63 e0       	ldi	r22, 0x03	; 3
     5fc:	8b e2       	ldi	r24, 0x2B	; 43
     5fe:	0e 94 83 04 	call	0x906	; 0x906 <mcp_2515_write>
	
	// Disable global interrupts
	cli();
     602:	f8 94       	cli
	// Interrupt on falling edge PD2
	set_bit(MCUCR, ISC01);
     604:	85 b7       	in	r24, 0x35	; 53
     606:	82 60       	ori	r24, 0x02	; 2
     608:	85 bf       	out	0x35, r24	; 53
	clear_bit(MCUCR, ISC00);
     60a:	85 b7       	in	r24, 0x35	; 53
     60c:	8e 7f       	andi	r24, 0xFE	; 254
     60e:	85 bf       	out	0x35, r24	; 53
	// Enable interrupt on PD2
	set_bit(GICR,INT0);
     610:	8b b7       	in	r24, 0x3b	; 59
     612:	80 64       	ori	r24, 0x40	; 64
     614:	8b bf       	out	0x3b, r24	; 59
	// Enable global interrupts
	sei();
     616:	78 94       	sei
     618:	08 95       	ret

0000061a <can_interrupt>:
	 
	
}

uint8_t can_interrupt(){
	if (flag){	
     61a:	80 91 bc 03 	lds	r24, 0x03BC
     61e:	90 91 bd 03 	lds	r25, 0x03BD
     622:	89 2b       	or	r24, r25
     624:	31 f0       	breq	.+12     	; 0x632 <can_interrupt+0x18>
		flag = 0;
     626:	10 92 bd 03 	sts	0x03BD, r1
     62a:	10 92 bc 03 	sts	0x03BC, r1
		return 1;
     62e:	81 e0       	ldi	r24, 0x01	; 1
     630:	08 95       	ret
	}
	return 0;
     632:	80 e0       	ldi	r24, 0x00	; 0
}
     634:	08 95       	ret

00000636 <can_transmit_complete>:
	mcp_2515_request_to_send(MCP_RTS_TX0 + buffer_number);
	//printf("buffer nr. %d\n\r",buffer_number);
	
}

int can_transmit_complete(int buffer_number){
     636:	cf 93       	push	r28
     638:	df 93       	push	r29
     63a:	ec 01       	movw	r28, r24
	uint8_t transmit_flag = mcp_2515_read(MCP_CANINTF);
     63c:	8c e2       	ldi	r24, 0x2C	; 44
     63e:	0e 94 71 04 	call	0x8e2	; 0x8e2 <mcp_2515_read>
	uint8_t interrupt_bits = (transmit_flag & (MCP_TX0IF + buffer_number*2));
     642:	9e 01       	movw	r18, r28
     644:	2e 5f       	subi	r18, 0xFE	; 254
     646:	3f 4f       	sbci	r19, 0xFF	; 255
     648:	42 2f       	mov	r20, r18
     64a:	44 0f       	add	r20, r20
     64c:	84 23       	and	r24, r20
	
	if(interrupt_bits == (MCP_TX0IF + buffer_number*2)){
     64e:	48 2f       	mov	r20, r24
     650:	50 e0       	ldi	r21, 0x00	; 0
     652:	22 0f       	add	r18, r18
     654:	33 1f       	adc	r19, r19
     656:	81 e0       	ldi	r24, 0x01	; 1
     658:	90 e0       	ldi	r25, 0x00	; 0
     65a:	42 17       	cp	r20, r18
     65c:	53 07       	cpc	r21, r19
     65e:	11 f4       	brne	.+4      	; 0x664 <can_transmit_complete+0x2e>
     660:	80 e0       	ldi	r24, 0x00	; 0
     662:	90 e0       	ldi	r25, 0x00	; 0
			return 0;
	}
	return 1;
}
     664:	df 91       	pop	r29
     666:	cf 91       	pop	r28
     668:	08 95       	ret

0000066a <can_message_send>:
	}
	
	return message1;
}

void can_message_send(can_message* message){
     66a:	ef 92       	push	r14
     66c:	ff 92       	push	r15
     66e:	0f 93       	push	r16
     670:	1f 93       	push	r17
     672:	cf 93       	push	r28
     674:	df 93       	push	r29
     676:	ec 01       	movw	r28, r24
	
	static int buffer_number = 0;
	
	while (!can_transmit_complete(buffer_number)){
     678:	11 c0       	rjmp	.+34     	; 0x69c <can_message_send+0x32>
		buffer_number +=1;
     67a:	20 91 ba 03 	lds	r18, 0x03BA
     67e:	30 91 bb 03 	lds	r19, 0x03BB
     682:	2f 5f       	subi	r18, 0xFF	; 255
     684:	3f 4f       	sbci	r19, 0xFF	; 255
     686:	30 93 bb 03 	sts	0x03BB, r19
     68a:	20 93 ba 03 	sts	0x03BA, r18
		if (buffer_number > 2) {
     68e:	23 30       	cpi	r18, 0x03	; 3
     690:	31 05       	cpc	r19, r1
     692:	24 f0       	brlt	.+8      	; 0x69c <can_message_send+0x32>
			buffer_number = 0;
     694:	10 92 bb 03 	sts	0x03BB, r1
     698:	10 92 ba 03 	sts	0x03BA, r1

void can_message_send(can_message* message){
	
	static int buffer_number = 0;
	
	while (!can_transmit_complete(buffer_number)){
     69c:	80 91 ba 03 	lds	r24, 0x03BA
     6a0:	90 91 bb 03 	lds	r25, 0x03BB
     6a4:	0e 94 1b 03 	call	0x636	; 0x636 <can_transmit_complete>
     6a8:	89 2b       	or	r24, r25
     6aa:	39 f3       	breq	.-50     	; 0x67a <can_message_send+0x10>
			buffer_number = 0;
		}
	}
	
	// Arbitration field identifier ID = 1337;    id high = 167  id low = 0
	unsigned int ID = message->id;
     6ac:	88 81       	ld	r24, Y
     6ae:	99 81       	ldd	r25, Y+1	; 0x01
	char id_high = ID / 8;
	char id_low = ID % 8;
     6b0:	28 2f       	mov	r18, r24
     6b2:	27 70       	andi	r18, 0x07	; 7
     6b4:	f2 2e       	mov	r15, r18
		}
	}
	
	// Arbitration field identifier ID = 1337;    id high = 167  id low = 0
	unsigned int ID = message->id;
	char id_high = ID / 8;
     6b6:	bc 01       	movw	r22, r24
     6b8:	76 95       	lsr	r23
     6ba:	67 95       	ror	r22
     6bc:	76 95       	lsr	r23
     6be:	67 95       	ror	r22
     6c0:	76 95       	lsr	r23
     6c2:	67 95       	ror	r22
	char id_low = ID % 8;
	id_low = id_low*0b100000;
	mcp_2515_write(MCP_TXB0SIDH + 16 * buffer_number, id_high);
     6c4:	0a eb       	ldi	r16, 0xBA	; 186
     6c6:	13 e0       	ldi	r17, 0x03	; 3
     6c8:	f8 01       	movw	r30, r16
     6ca:	80 81       	ld	r24, Z
     6cc:	82 95       	swap	r24
     6ce:	80 7f       	andi	r24, 0xF0	; 240
     6d0:	8f 5c       	subi	r24, 0xCF	; 207
     6d2:	0e 94 83 04 	call	0x906	; 0x906 <mcp_2515_write>
	
	// Arbitration field identifier ID = 1337;    id high = 167  id low = 0
	unsigned int ID = message->id;
	char id_high = ID / 8;
	char id_low = ID % 8;
	id_low = id_low*0b100000;
     6d6:	6f 2d       	mov	r22, r15
     6d8:	62 95       	swap	r22
     6da:	66 0f       	add	r22, r22
     6dc:	60 7e       	andi	r22, 0xE0	; 224
	mcp_2515_write(MCP_TXB0SIDH + 16 * buffer_number, id_high);
	mcp_2515_write(MCP_TXB0SIDL + 16 * buffer_number, id_low);
     6de:	f8 01       	movw	r30, r16
     6e0:	80 81       	ld	r24, Z
     6e2:	82 95       	swap	r24
     6e4:	80 7f       	andi	r24, 0xF0	; 240
     6e6:	8e 5c       	subi	r24, 0xCE	; 206
     6e8:	0e 94 83 04 	call	0x906	; 0x906 <mcp_2515_write>
	
	// Define data length of message
	uint8_t data_length = message->length;
     6ec:	ea 80       	ldd	r14, Y+2	; 0x02
	mcp_2515_write(MCP_TXB0DLC + 16 * buffer_number, data_length);
     6ee:	f8 01       	movw	r30, r16
     6f0:	80 81       	ld	r24, Z
     6f2:	82 95       	swap	r24
     6f4:	80 7f       	andi	r24, 0xF0	; 240
     6f6:	6e 2d       	mov	r22, r14
     6f8:	8b 5c       	subi	r24, 0xCB	; 203
     6fa:	0e 94 83 04 	call	0x906	; 0x906 <mcp_2515_write>
	
	// Write data bytes to transmit buffer
	char* data_bytes = message->data;
     6fe:	23 96       	adiw	r28, 0x03	; 3
	for (uint8_t byte = 0; byte < data_length; byte++) {
     700:	ee 20       	and	r14, r14
     702:	81 f0       	breq	.+32     	; 0x724 <can_message_send+0xba>
     704:	f1 2c       	mov	r15, r1
		mcp_2515_write(MCP_TXB0Dm + byte + 16 * buffer_number, data_bytes[byte]);
     706:	69 91       	ld	r22, Y+
     708:	f8 01       	movw	r30, r16
     70a:	80 81       	ld	r24, Z
     70c:	2f 2d       	mov	r18, r15
     70e:	f0 e1       	ldi	r31, 0x10	; 16
     710:	8f 9f       	mul	r24, r31
     712:	20 0d       	add	r18, r0
     714:	11 24       	eor	r1, r1
     716:	82 2f       	mov	r24, r18
     718:	8a 5c       	subi	r24, 0xCA	; 202
     71a:	0e 94 83 04 	call	0x906	; 0x906 <mcp_2515_write>
	uint8_t data_length = message->length;
	mcp_2515_write(MCP_TXB0DLC + 16 * buffer_number, data_length);
	
	// Write data bytes to transmit buffer
	char* data_bytes = message->data;
	for (uint8_t byte = 0; byte < data_length; byte++) {
     71e:	f3 94       	inc	r15
     720:	fe 10       	cpse	r15, r14
     722:	f1 cf       	rjmp	.-30     	; 0x706 <can_message_send+0x9c>
		mcp_2515_write(MCP_TXB0Dm + byte + 16 * buffer_number, data_bytes[byte]);
	}
	
	// Request to send message, send if successful
	mcp_2515_request_to_send(MCP_RTS_TX0 + buffer_number);
     724:	80 91 ba 03 	lds	r24, 0x03BA
     728:	8f 57       	subi	r24, 0x7F	; 127
     72a:	0e 94 d4 04 	call	0x9a8	; 0x9a8 <mcp_2515_request_to_send>
	//printf("buffer nr. %d\n\r",buffer_number);
	
}
     72e:	df 91       	pop	r29
     730:	cf 91       	pop	r28
     732:	1f 91       	pop	r17
     734:	0f 91       	pop	r16
     736:	ff 90       	pop	r15
     738:	ef 90       	pop	r14
     73a:	08 95       	ret

0000073c <can_message_receive>:
			return 0;
	}
	return 1;
}

void can_message_receive(int rec_buff_num, can_message* received_message){
     73c:	0f 93       	push	r16
     73e:	1f 93       	push	r17
     740:	cf 93       	push	r28
     742:	df 93       	push	r29
     744:	eb 01       	movw	r28, r22
	uint8_t id_high = mcp_2515_read(MCP_RXB0SIDH + 16 * rec_buff_num);
     746:	18 2f       	mov	r17, r24
     748:	12 95       	swap	r17
     74a:	10 7f       	andi	r17, 0xF0	; 240
     74c:	81 e6       	ldi	r24, 0x61	; 97
     74e:	81 0f       	add	r24, r17
     750:	0e 94 71 04 	call	0x8e2	; 0x8e2 <mcp_2515_read>
     754:	08 2f       	mov	r16, r24
	uint8_t id_low = mcp_2515_read(MCP_RXB0SIDL + 16 * rec_buff_num);
     756:	82 e6       	ldi	r24, 0x62	; 98
     758:	81 0f       	add	r24, r17
     75a:	0e 94 71 04 	call	0x8e2	; 0x8e2 <mcp_2515_read>
	uint8_t mask = 0b11100000;
	id_low = (id_low & mask);
	received_message->id = 0b1000*id_high + id_low/0b100000;
     75e:	20 2f       	mov	r18, r16
     760:	30 e0       	ldi	r19, 0x00	; 0
     762:	22 0f       	add	r18, r18
     764:	33 1f       	adc	r19, r19
     766:	22 0f       	add	r18, r18
     768:	33 1f       	adc	r19, r19
     76a:	22 0f       	add	r18, r18
     76c:	33 1f       	adc	r19, r19
     76e:	82 95       	swap	r24
     770:	86 95       	lsr	r24
     772:	87 70       	andi	r24, 0x07	; 7
     774:	28 0f       	add	r18, r24
     776:	31 1d       	adc	r19, r1
     778:	39 83       	std	Y+1, r19	; 0x01
     77a:	28 83       	st	Y, r18
	
	uint8_t data_length = mcp_2515_read(MCP_RXB0DLC + 16 * rec_buff_num);
     77c:	85 e6       	ldi	r24, 0x65	; 101
     77e:	81 0f       	add	r24, r17
     780:	0e 94 71 04 	call	0x8e2	; 0x8e2 <mcp_2515_read>
	mask = 0b1111;
	received_message->length = (data_length & mask);
     784:	98 2f       	mov	r25, r24
     786:	9f 70       	andi	r25, 0x0F	; 15
     788:	9a 83       	std	Y+2, r25	; 0x02
	
	for (uint8_t byte = 0; byte < data_length; byte++) {
     78a:	88 23       	and	r24, r24
     78c:	59 f0       	breq	.+22     	; 0x7a4 <can_message_receive+0x68>
     78e:	1a 59       	subi	r17, 0x9A	; 154
     790:	23 96       	adiw	r28, 0x03	; 3
     792:	08 2f       	mov	r16, r24
     794:	01 0f       	add	r16, r17
		received_message->data[byte] = mcp_2515_read(MCP_RXB0DM + byte + 16 * rec_buff_num);
     796:	81 2f       	mov	r24, r17
     798:	0e 94 71 04 	call	0x8e2	; 0x8e2 <mcp_2515_read>
     79c:	89 93       	st	Y+, r24
     79e:	1f 5f       	subi	r17, 0xFF	; 255
	
	uint8_t data_length = mcp_2515_read(MCP_RXB0DLC + 16 * rec_buff_num);
	mask = 0b1111;
	received_message->length = (data_length & mask);
	
	for (uint8_t byte = 0; byte < data_length; byte++) {
     7a0:	10 13       	cpse	r17, r16
     7a2:	f9 cf       	rjmp	.-14     	; 0x796 <can_message_receive+0x5a>
		received_message->data[byte] = mcp_2515_read(MCP_RXB0DM + byte + 16 * rec_buff_num);
	}
	
}
     7a4:	df 91       	pop	r29
     7a6:	cf 91       	pop	r28
     7a8:	1f 91       	pop	r17
     7aa:	0f 91       	pop	r16
     7ac:	08 95       	ret

000007ae <can_int_vect>:

void can_int_vect(int* v) { 
     7ae:	cf 93       	push	r28
     7b0:	df 93       	push	r29
     7b2:	ec 01       	movw	r28, r24
	uint8_t int_flag = mcp_2515_read(MCP_CANINTF);
     7b4:	8c e2       	ldi	r24, 0x2C	; 44
     7b6:	0e 94 71 04 	call	0x8e2	; 0x8e2 <mcp_2515_read>
	v[0] = (int_flag & MCP_RX0IF);
     7ba:	98 2f       	mov	r25, r24
     7bc:	91 70       	andi	r25, 0x01	; 1
     7be:	98 83       	st	Y, r25
     7c0:	19 82       	std	Y+1, r1	; 0x01
	v[1] = (int_flag & MCP_RX1IF);
     7c2:	82 70       	andi	r24, 0x02	; 2
     7c4:	90 e0       	ldi	r25, 0x00	; 0
     7c6:	9b 83       	std	Y+3, r25	; 0x03
     7c8:	8a 83       	std	Y+2, r24	; 0x02
}
     7ca:	df 91       	pop	r29
     7cc:	cf 91       	pop	r28
     7ce:	08 95       	ret

000007d0 <can_handle_messages>:
		return 1;
	}
	return 0;
}

can_message can_handle_messages(){
     7d0:	0f 93       	push	r16
     7d2:	1f 93       	push	r17
     7d4:	cf 93       	push	r28
     7d6:	df 93       	push	r29
     7d8:	cd b7       	in	r28, 0x3d	; 61
     7da:	de b7       	in	r29, 0x3e	; 62
     7dc:	68 97       	sbiw	r28, 0x18	; 24
     7de:	0f b6       	in	r0, 0x3f	; 63
     7e0:	f8 94       	cli
     7e2:	de bf       	out	0x3e, r29	; 62
     7e4:	0f be       	out	0x3f, r0	; 63
     7e6:	cd bf       	out	0x3d, r28	; 61
     7e8:	8c 01       	movw	r16, r24
	uint8_t v[2] = {0};
     7ea:	1a 82       	std	Y+2, r1	; 0x02
     7ec:	19 82       	std	Y+1, r1	; 0x01

	can_int_vect(v);
     7ee:	ce 01       	movw	r24, r28
     7f0:	01 96       	adiw	r24, 0x01	; 1
     7f2:	0e 94 d7 03 	call	0x7ae	; 0x7ae <can_int_vect>

	can_message message1;
	if (v[0]){
     7f6:	89 81       	ldd	r24, Y+1	; 0x01
     7f8:	88 23       	and	r24, r24
     7fa:	29 f1       	breq	.+74     	; 0x846 <can_handle_messages+0x76>
		can_message_receive(0, &message1);
     7fc:	be 01       	movw	r22, r28
     7fe:	6d 5f       	subi	r22, 0xFD	; 253
     800:	7f 4f       	sbci	r23, 0xFF	; 255
     802:	80 e0       	ldi	r24, 0x00	; 0
     804:	90 e0       	ldi	r25, 0x00	; 0
     806:	0e 94 9e 03 	call	0x73c	; 0x73c <can_message_receive>
		//mcp_2515_write(MCP_CANINTF,0);
		mcp_2515_bit_modify(MCP_CANINTF, 1, 0);
     80a:	40 e0       	ldi	r20, 0x00	; 0
     80c:	61 e0       	ldi	r22, 0x01	; 1
     80e:	8c e2       	ldi	r24, 0x2C	; 44
     810:	0e 94 df 04 	call	0x9be	; 0x9be <mcp_2515_bit_modify>
		mcp_2515_bit_modify(MCP_CANINTF, 1, 0);
     814:	40 e0       	ldi	r20, 0x00	; 0
     816:	61 e0       	ldi	r22, 0x01	; 1
     818:	8c e2       	ldi	r24, 0x2C	; 44
     81a:	0e 94 df 04 	call	0x9be	; 0x9be <mcp_2515_bit_modify>
		can_int_vect(v);
     81e:	ce 01       	movw	r24, r28
     820:	01 96       	adiw	r24, 0x01	; 1
     822:	0e 94 d7 03 	call	0x7ae	; 0x7ae <can_int_vect>
		if (!v[1]){
     826:	8a 81       	ldd	r24, Y+2	; 0x02
     828:	81 11       	cpse	r24, r1
     82a:	04 c0       	rjmp	.+8      	; 0x834 <can_handle_messages+0x64>
			flag = 0;
     82c:	10 92 bd 03 	sts	0x03BD, r1
     830:	10 92 bc 03 	sts	0x03BC, r1
		}
		return message1;
     834:	8b e0       	ldi	r24, 0x0B	; 11
     836:	fe 01       	movw	r30, r28
     838:	33 96       	adiw	r30, 0x03	; 3
     83a:	d8 01       	movw	r26, r16
     83c:	01 90       	ld	r0, Z+
     83e:	0d 92       	st	X+, r0
     840:	8a 95       	dec	r24
     842:	e1 f7       	brne	.-8      	; 0x83c <can_handle_messages+0x6c>
     844:	30 c0       	rjmp	.+96     	; 0x8a6 <can_handle_messages+0xd6>
	}
	
	can_message message2;
	
	if (v[1]){
     846:	8a 81       	ldd	r24, Y+2	; 0x02
     848:	88 23       	and	r24, r24
     84a:	29 f1       	breq	.+74     	; 0x896 <can_handle_messages+0xc6>
		can_message_receive(1, &message2);
     84c:	be 01       	movw	r22, r28
     84e:	62 5f       	subi	r22, 0xF2	; 242
     850:	7f 4f       	sbci	r23, 0xFF	; 255
     852:	81 e0       	ldi	r24, 0x01	; 1
     854:	90 e0       	ldi	r25, 0x00	; 0
     856:	0e 94 9e 03 	call	0x73c	; 0x73c <can_message_receive>
		//mcp_2515_write(MCP_CANINTF,0);
		mcp_2515_bit_modify(MCP_CANINTF, 2, 0);
     85a:	40 e0       	ldi	r20, 0x00	; 0
     85c:	62 e0       	ldi	r22, 0x02	; 2
     85e:	8c e2       	ldi	r24, 0x2C	; 44
     860:	0e 94 df 04 	call	0x9be	; 0x9be <mcp_2515_bit_modify>
		mcp_2515_bit_modify(MCP_CANINTF, 2, 0);
     864:	40 e0       	ldi	r20, 0x00	; 0
     866:	62 e0       	ldi	r22, 0x02	; 2
     868:	8c e2       	ldi	r24, 0x2C	; 44
     86a:	0e 94 df 04 	call	0x9be	; 0x9be <mcp_2515_bit_modify>
		can_int_vect(v);
     86e:	ce 01       	movw	r24, r28
     870:	01 96       	adiw	r24, 0x01	; 1
     872:	0e 94 d7 03 	call	0x7ae	; 0x7ae <can_int_vect>
		if (!v[0]){
     876:	89 81       	ldd	r24, Y+1	; 0x01
     878:	81 11       	cpse	r24, r1
     87a:	04 c0       	rjmp	.+8      	; 0x884 <can_handle_messages+0xb4>
			flag = 0;
     87c:	10 92 bd 03 	sts	0x03BD, r1
     880:	10 92 bc 03 	sts	0x03BC, r1
		}
		return message2;
     884:	8b e0       	ldi	r24, 0x0B	; 11
     886:	fe 01       	movw	r30, r28
     888:	3e 96       	adiw	r30, 0x0e	; 14
     88a:	d8 01       	movw	r26, r16
     88c:	01 90       	ld	r0, Z+
     88e:	0d 92       	st	X+, r0
     890:	8a 95       	dec	r24
     892:	e1 f7       	brne	.-8      	; 0x88c <can_handle_messages+0xbc>
     894:	08 c0       	rjmp	.+16     	; 0x8a6 <can_handle_messages+0xd6>
	}
	
	return message1;
     896:	8b e0       	ldi	r24, 0x0B	; 11
     898:	fe 01       	movw	r30, r28
     89a:	33 96       	adiw	r30, 0x03	; 3
     89c:	d8 01       	movw	r26, r16
     89e:	01 90       	ld	r0, Z+
     8a0:	0d 92       	st	X+, r0
     8a2:	8a 95       	dec	r24
     8a4:	e1 f7       	brne	.-8      	; 0x89e <can_handle_messages+0xce>
}
     8a6:	c8 01       	movw	r24, r16
     8a8:	68 96       	adiw	r28, 0x18	; 24
     8aa:	0f b6       	in	r0, 0x3f	; 63
     8ac:	f8 94       	cli
     8ae:	de bf       	out	0x3e, r29	; 62
     8b0:	0f be       	out	0x3f, r0	; 63
     8b2:	cd bf       	out	0x3d, r28	; 61
     8b4:	df 91       	pop	r29
     8b6:	cf 91       	pop	r28
     8b8:	1f 91       	pop	r17
     8ba:	0f 91       	pop	r16
     8bc:	08 95       	ret

000008be <activate_slave>:
#include <avr/io.h>
#include <avr/delay.h>

void activate_slave(){
	/* Activate Slave Select */
	clear_bit(PORTB, PB4);
     8be:	c4 98       	cbi	0x18, 4	; 24
     8c0:	08 95       	ret

000008c2 <deactivate_slave>:
}

void deactivate_slave(){
	/* Deactivate Slave Select */
	set_bit(PORTB, PB4);
     8c2:	c4 9a       	sbi	0x18, 4	; 24
     8c4:	08 95       	ret

000008c6 <mcp_2515_reset>:
	
	return 0;
}

void mcp_2515_reset(){
	activate_slave();
     8c6:	0e 94 5f 04 	call	0x8be	; 0x8be <activate_slave>
	SPI_write(MCP_RESET);
     8ca:	80 ec       	ldi	r24, 0xC0	; 192
     8cc:	0e 94 c7 0c 	call	0x198e	; 0x198e <SPI_write>
	deactivate_slave();
     8d0:	0e 94 61 04 	call	0x8c2	; 0x8c2 <deactivate_slave>
     8d4:	83 ec       	ldi	r24, 0xC3	; 195
     8d6:	99 e0       	ldi	r25, 0x09	; 9
     8d8:	01 97       	sbiw	r24, 0x01	; 1
     8da:	f1 f7       	brne	.-4      	; 0x8d8 <mcp_2515_reset+0x12>
     8dc:	00 c0       	rjmp	.+0      	; 0x8de <mcp_2515_reset+0x18>
     8de:	00 00       	nop
     8e0:	08 95       	ret

000008e2 <mcp_2515_read>:
	_delay_ms(10);	//a small delay after mcp reset
}

uint8_t mcp_2515_read(uint8_t address){
     8e2:	cf 93       	push	r28
     8e4:	c8 2f       	mov	r28, r24
	activate_slave();
     8e6:	0e 94 5f 04 	call	0x8be	; 0x8be <activate_slave>
	
	uint8_t data;
	
	SPI_write(MCP_READ);
     8ea:	83 e0       	ldi	r24, 0x03	; 3
     8ec:	0e 94 c7 0c 	call	0x198e	; 0x198e <SPI_write>
	SPI_write(address);
     8f0:	8c 2f       	mov	r24, r28
     8f2:	0e 94 c7 0c 	call	0x198e	; 0x198e <SPI_write>
	data = SPI_read();
     8f6:	0e 94 cb 0c 	call	0x1996	; 0x1996 <SPI_read>
     8fa:	c8 2f       	mov	r28, r24
	
	deactivate_slave();
     8fc:	0e 94 61 04 	call	0x8c2	; 0x8c2 <deactivate_slave>
	
	return data;
}
     900:	8c 2f       	mov	r24, r28
     902:	cf 91       	pop	r28
     904:	08 95       	ret

00000906 <mcp_2515_write>:


void mcp_2515_write(uint8_t address, uint8_t data) {
     906:	cf 93       	push	r28
     908:	df 93       	push	r29
     90a:	d8 2f       	mov	r29, r24
     90c:	c6 2f       	mov	r28, r22
	activate_slave();
     90e:	0e 94 5f 04 	call	0x8be	; 0x8be <activate_slave>
	
	SPI_write(MCP_WRITE);
     912:	82 e0       	ldi	r24, 0x02	; 2
     914:	0e 94 c7 0c 	call	0x198e	; 0x198e <SPI_write>
	SPI_write(address);
     918:	8d 2f       	mov	r24, r29
     91a:	0e 94 c7 0c 	call	0x198e	; 0x198e <SPI_write>
	SPI_write(data);
     91e:	8c 2f       	mov	r24, r28
     920:	0e 94 c7 0c 	call	0x198e	; 0x198e <SPI_write>
	
	deactivate_slave();
     924:	0e 94 61 04 	call	0x8c2	; 0x8c2 <deactivate_slave>
}
     928:	df 91       	pop	r29
     92a:	cf 91       	pop	r28
     92c:	08 95       	ret

0000092e <mcp_2515_set_mode>:
	/* Deactivate Slave Select */
	set_bit(PORTB, PB4);
}

void mcp_2515_set_mode(uint8_t mode){
	mcp_2515_write(MCP_CANCTRL, mode);
     92e:	68 2f       	mov	r22, r24
     930:	8f e0       	ldi	r24, 0x0F	; 15
     932:	0e 94 83 04 	call	0x906	; 0x906 <mcp_2515_write>
     936:	08 95       	ret

00000938 <mcp_2515_init>:
}

uint8_t mcp_2515_init(uint8_t mode){
     938:	cf 93       	push	r28
     93a:	c8 2f       	mov	r28, r24
	
	uint8_t val;
	SPI_init();
     93c:	0e 94 c1 0c 	call	0x1982	; 0x1982 <SPI_init>
	
	mcp_2515_reset();
     940:	0e 94 63 04 	call	0x8c6	; 0x8c6 <mcp_2515_reset>
	
	val = mcp_2515_read(MCP_CANSTAT);
     944:	8e e0       	ldi	r24, 0x0E	; 14
     946:	0e 94 71 04 	call	0x8e2	; 0x8e2 <mcp_2515_read>
	//printf("val : %d ",val);
	uint8_t mode_bits = (val & MODE_MASK);
     94a:	80 7e       	andi	r24, 0xE0	; 224
	if(mode_bits != MODE_CONFIG){
     94c:	80 38       	cpi	r24, 0x80	; 128
     94e:	71 f0       	breq	.+28     	; 0x96c <mcp_2515_init+0x34>
		printf("MCP2515 is NOT in Configuration mode after reset! Its config bits are %x\n", mode_bits);
     950:	1f 92       	push	r1
     952:	8f 93       	push	r24
     954:	8d e6       	ldi	r24, 0x6D	; 109
     956:	92 e0       	ldi	r25, 0x02	; 2
     958:	9f 93       	push	r25
     95a:	8f 93       	push	r24
     95c:	0e 94 ab 0e 	call	0x1d56	; 0x1d56 <printf>
		return 1;
     960:	0f 90       	pop	r0
     962:	0f 90       	pop	r0
     964:	0f 90       	pop	r0
     966:	0f 90       	pop	r0
     968:	81 e0       	ldi	r24, 0x01	; 1
     96a:	1c c0       	rjmp	.+56     	; 0x9a4 <mcp_2515_init+0x6c>
	}
	
	mcp_2515_set_mode(mode);
     96c:	8c 2f       	mov	r24, r28
     96e:	0e 94 97 04 	call	0x92e	; 0x92e <mcp_2515_set_mode>
	
	val = mcp_2515_read(MCP_CANSTAT);
     972:	8e e0       	ldi	r24, 0x0E	; 14
     974:	0e 94 71 04 	call	0x8e2	; 0x8e2 <mcp_2515_read>
	//printf("val : %d  and  MCP %d   AND MASK %d",val, MCP_CANSTAT, MODE_MASK);
	mode_bits = (val & MODE_MASK);
     978:	80 7e       	andi	r24, 0xE0	; 224
	
	if(mode_bits != mode){
     97a:	8c 17       	cp	r24, r28
     97c:	91 f0       	breq	.+36     	; 0x9a2 <mcp_2515_init+0x6a>
		
		printf("MCP2515 is NOT in correct mode after reset! Its config bits are %x\n", mode_bits);
     97e:	1f 92       	push	r1
     980:	8f 93       	push	r24
     982:	87 eb       	ldi	r24, 0xB7	; 183
     984:	92 e0       	ldi	r25, 0x02	; 2
     986:	9f 93       	push	r25
     988:	8f 93       	push	r24
     98a:	0e 94 ab 0e 	call	0x1d56	; 0x1d56 <printf>
		printf("\n!\n");
     98e:	8b ef       	ldi	r24, 0xFB	; 251
     990:	92 e0       	ldi	r25, 0x02	; 2
     992:	0e 94 bf 0e 	call	0x1d7e	; 0x1d7e <puts>
		return 1;
     996:	0f 90       	pop	r0
     998:	0f 90       	pop	r0
     99a:	0f 90       	pop	r0
     99c:	0f 90       	pop	r0
     99e:	81 e0       	ldi	r24, 0x01	; 1
     9a0:	01 c0       	rjmp	.+2      	; 0x9a4 <mcp_2515_init+0x6c>
	}
	
	
	return 0;
     9a2:	80 e0       	ldi	r24, 0x00	; 0
}
     9a4:	cf 91       	pop	r28
     9a6:	08 95       	ret

000009a8 <mcp_2515_request_to_send>:
	SPI_write(data);
	
	deactivate_slave();
}

void mcp_2515_request_to_send(char buffer) {
     9a8:	cf 93       	push	r28
     9aa:	c8 2f       	mov	r28, r24
	activate_slave();
     9ac:	0e 94 5f 04 	call	0x8be	; 0x8be <activate_slave>
	
	SPI_write(buffer);
     9b0:	8c 2f       	mov	r24, r28
     9b2:	0e 94 c7 0c 	call	0x198e	; 0x198e <SPI_write>
	
	deactivate_slave();
     9b6:	0e 94 61 04 	call	0x8c2	; 0x8c2 <deactivate_slave>
}
     9ba:	cf 91       	pop	r28
     9bc:	08 95       	ret

000009be <mcp_2515_bit_modify>:

void mcp_2515_bit_modify(uint8_t adress, uint8_t mask, uint8_t data) {
     9be:	1f 93       	push	r17
     9c0:	cf 93       	push	r28
     9c2:	df 93       	push	r29
     9c4:	18 2f       	mov	r17, r24
     9c6:	d6 2f       	mov	r29, r22
     9c8:	c4 2f       	mov	r28, r20
	activate_slave();
     9ca:	0e 94 5f 04 	call	0x8be	; 0x8be <activate_slave>
	
	SPI_write(MCP_BITMOD);
     9ce:	85 e0       	ldi	r24, 0x05	; 5
     9d0:	0e 94 c7 0c 	call	0x198e	; 0x198e <SPI_write>
	SPI_write(adress);
     9d4:	81 2f       	mov	r24, r17
     9d6:	0e 94 c7 0c 	call	0x198e	; 0x198e <SPI_write>
	SPI_write(mask);
     9da:	8d 2f       	mov	r24, r29
     9dc:	0e 94 c7 0c 	call	0x198e	; 0x198e <SPI_write>
	SPI_write(data);
     9e0:	8c 2f       	mov	r24, r28
     9e2:	0e 94 c7 0c 	call	0x198e	; 0x198e <SPI_write>
	
	deactivate_slave();
     9e6:	0e 94 61 04 	call	0x8c2	; 0x8c2 <deactivate_slave>
}
     9ea:	df 91       	pop	r29
     9ec:	cf 91       	pop	r28
     9ee:	1f 91       	pop	r17
     9f0:	08 95       	ret

000009f2 <My_serial_Transmit>:
}

void My_serial_Transmit( unsigned char data )
{
	/* Wait for empty transmit buffer */
	while ( !( UCSR0A & (1<<UDRE0)) )
     9f2:	5d 9b       	sbis	0x0b, 5	; 11
     9f4:	fe cf       	rjmp	.-4      	; 0x9f2 <My_serial_Transmit>
	;
	/* Put data into buffer, sends the data */
	UDR0 = data;
     9f6:	8c b9       	out	0x0c, r24	; 12
     9f8:	08 95       	ret

000009fa <My_serial_Receive>:
}

unsigned char My_serial_Receive( void )
{
	/* Wait for data to be received */
	while ( !(UCSR0A & (1<<RXC0)) );
     9fa:	5f 9b       	sbis	0x0b, 7	; 11
     9fc:	fe cf       	rjmp	.-4      	; 0x9fa <My_serial_Receive>
	/* Get and return received data from buffer */
	return UDR0;
     9fe:	8c b1       	in	r24, 0x0c	; 12
     a00:	08 95       	ret

00000a02 <My_serial_Init>:
#include "DriverATmega162.h"

void My_serial_Init( unsigned int ubrr )
{
	
	MCUCR |= (1 << SRE);
     a02:	25 b7       	in	r18, 0x35	; 53
     a04:	20 68       	ori	r18, 0x80	; 128
     a06:	25 bf       	out	0x35, r18	; 53
	SFIOR |= (1 << XMM2);
     a08:	20 b7       	in	r18, 0x30	; 48
     a0a:	20 62       	ori	r18, 0x20	; 32
     a0c:	20 bf       	out	0x30, r18	; 48
	
	/* Set baud rate */
	UBRR0H = (unsigned char)(ubrr>>8);
     a0e:	90 bd       	out	0x20, r25	; 32
	UBRR0L = (unsigned char)ubrr;
     a10:	89 b9       	out	0x09, r24	; 9
	/* Enable receiver and transmitter */
	UCSR0B = (1<<RXEN0)|(1<<TXEN0);
     a12:	88 e1       	ldi	r24, 0x18	; 24
     a14:	8a b9       	out	0x0a, r24	; 10
	/* Set frame format: 8data, 2stop bit */
	UCSR0C = (1<<URSEL0)|(1<<USBS0)|(3<<UCSZ00);
     a16:	8e e8       	ldi	r24, 0x8E	; 142
     a18:	80 bd       	out	0x20, r24	; 32
	
	fdevopen(My_serial_Transmit, My_serial_Receive);
     a1a:	6d ef       	ldi	r22, 0xFD	; 253
     a1c:	74 e0       	ldi	r23, 0x04	; 4
     a1e:	89 ef       	ldi	r24, 0xF9	; 249
     a20:	94 e0       	ldi	r25, 0x04	; 4
     a22:	0e 94 60 0e 	call	0x1cc0	; 0x1cc0 <fdevopen>
     a26:	08 95       	ret

00000a28 <sendInfo>:
#include "GameInfo.h"
gamevars game = {.enemypoints = 0,.mypoints=0};
can_message newmessage;
int sendinfoFlag =0;

void sendInfo(menu_option lastOption){
     a28:	ff 92       	push	r15
     a2a:	0f 93       	push	r16
     a2c:	1f 93       	push	r17
     a2e:	cf 93       	push	r28
     a30:	df 93       	push	r29
     a32:	cd b7       	in	r28, 0x3d	; 61
     a34:	de b7       	in	r29, 0x3e	; 62
     a36:	60 97       	sbiw	r28, 0x10	; 16
     a38:	0f b6       	in	r0, 0x3f	; 63
     a3a:	f8 94       	cli
     a3c:	de bf       	out	0x3e, r29	; 62
     a3e:	0f be       	out	0x3f, r0	; 63
     a40:	cd bf       	out	0x3d, r28	; 61
     a42:	18 2f       	mov	r17, r24
	slider_str slider = slider_position();
     a44:	0e 94 9a 0c 	call	0x1934	; 0x1934 <slider_position>
     a48:	f8 2e       	mov	r15, r24
     a4a:	09 2f       	mov	r16, r25
	
	Joystick minJoystick = joystickPos();
     a4c:	0e 94 09 06 	call	0xc12	; 0xc12 <joystickPos>
     a50:	6d 83       	std	Y+5, r22	; 0x05
	printf("SEND INFO\r\n");
     a52:	8e ef       	ldi	r24, 0xFE	; 254
     a54:	92 e0       	ldi	r25, 0x02	; 2
     a56:	0e 94 bf 0e 	call	0x1d7e	; 0x1d7e <puts>
	can_message canMessage;
	canMessage.id = 1;
     a5a:	21 e0       	ldi	r18, 0x01	; 1
     a5c:	30 e0       	ldi	r19, 0x00	; 0
     a5e:	3f 83       	std	Y+7, r19	; 0x07
     a60:	2e 83       	std	Y+6, r18	; 0x06
	canMessage.data[0] = slider.L;
     a62:	f9 86       	std	Y+9, r15	; 0x09
	canMessage.data[1] = slider.R;
     a64:	0a 87       	std	Y+10, r16	; 0x0a
	canMessage.data[2] = slider_left_button();
     a66:	0e 94 bb 0c 	call	0x1976	; 0x1976 <slider_left_button>
     a6a:	8b 87       	std	Y+11, r24	; 0x0b
	canMessage.data[3] = slider_right_button();
     a6c:	0e 94 b6 0c 	call	0x196c	; 0x196c <slider_right_button>
     a70:	8c 87       	std	Y+12, r24	; 0x0c
	canMessage.data[4] = lastOption;
     a72:	1d 87       	std	Y+13, r17	; 0x0d
	if(minJoystick.Dir == LEFT){
     a74:	8d 81       	ldd	r24, Y+5	; 0x05
     a76:	81 11       	cpse	r24, r1
     a78:	05 c0       	rjmp	.+10     	; 0xa84 <sendInfo+0x5c>
		canMessage.data[5] = 'R';
     a7a:	82 e5       	ldi	r24, 0x52	; 82
     a7c:	8e 87       	std	Y+14, r24	; 0x0e
		canMessage.length = 6;
     a7e:	86 e0       	ldi	r24, 0x06	; 6
     a80:	88 87       	std	Y+8, r24	; 0x08
     a82:	02 c0       	rjmp	.+4      	; 0xa88 <sendInfo+0x60>
	}
	else
	{
		canMessage.length = 5;
     a84:	85 e0       	ldi	r24, 0x05	; 5
     a86:	88 87       	std	Y+8, r24	; 0x08
	}
	can_message_send(&canMessage);
     a88:	ce 01       	movw	r24, r28
     a8a:	06 96       	adiw	r24, 0x06	; 6
     a8c:	0e 94 35 03 	call	0x66a	; 0x66a <can_message_send>
	
}
     a90:	60 96       	adiw	r28, 0x10	; 16
     a92:	0f b6       	in	r0, 0x3f	; 63
     a94:	f8 94       	cli
     a96:	de bf       	out	0x3e, r29	; 62
     a98:	0f be       	out	0x3f, r0	; 63
     a9a:	cd bf       	out	0x3d, r28	; 61
     a9c:	df 91       	pop	r29
     a9e:	cf 91       	pop	r28
     aa0:	1f 91       	pop	r17
     aa2:	0f 91       	pop	r16
     aa4:	ff 90       	pop	r15
     aa6:	08 95       	ret

00000aa8 <sendReset>:
void sendReset(){
     aa8:	cf 93       	push	r28
     aaa:	df 93       	push	r29
     aac:	cd b7       	in	r28, 0x3d	; 61
     aae:	de b7       	in	r29, 0x3e	; 62
     ab0:	2b 97       	sbiw	r28, 0x0b	; 11
     ab2:	0f b6       	in	r0, 0x3f	; 63
     ab4:	f8 94       	cli
     ab6:	de bf       	out	0x3e, r29	; 62
     ab8:	0f be       	out	0x3f, r0	; 63
     aba:	cd bf       	out	0x3d, r28	; 61
	can_message canMessage;
	canMessage.id = 2;
     abc:	82 e0       	ldi	r24, 0x02	; 2
     abe:	90 e0       	ldi	r25, 0x00	; 0
     ac0:	9a 83       	std	Y+2, r25	; 0x02
     ac2:	89 83       	std	Y+1, r24	; 0x01
	canMessage.data[0] = 1;
     ac4:	81 e0       	ldi	r24, 0x01	; 1
     ac6:	8c 83       	std	Y+4, r24	; 0x04
	canMessage.length = 1;
     ac8:	8b 83       	std	Y+3, r24	; 0x03
	can_message_send(&canMessage);
     aca:	ce 01       	movw	r24, r28
     acc:	01 96       	adiw	r24, 0x01	; 1
     ace:	0e 94 35 03 	call	0x66a	; 0x66a <can_message_send>
}
     ad2:	2b 96       	adiw	r28, 0x0b	; 11
     ad4:	0f b6       	in	r0, 0x3f	; 63
     ad6:	f8 94       	cli
     ad8:	de bf       	out	0x3e, r29	; 62
     ada:	0f be       	out	0x3f, r0	; 63
     adc:	cd bf       	out	0x3d, r28	; 61
     ade:	df 91       	pop	r29
     ae0:	cf 91       	pop	r28
     ae2:	08 95       	ret

00000ae4 <getInfo>:
gamevars getInfo(){
     ae4:	cf 93       	push	r28
     ae6:	df 93       	push	r29
     ae8:	cd b7       	in	r28, 0x3d	; 61
     aea:	de b7       	in	r29, 0x3e	; 62
     aec:	2b 97       	sbiw	r28, 0x0b	; 11
     aee:	0f b6       	in	r0, 0x3f	; 63
     af0:	f8 94       	cli
     af2:	de bf       	out	0x3e, r29	; 62
     af4:	0f be       	out	0x3f, r0	; 63
     af6:	cd bf       	out	0x3d, r28	; 61
	if(can_interrupt()){
     af8:	0e 94 0d 03 	call	0x61a	; 0x61a <can_interrupt>
     afc:	88 23       	and	r24, r24
     afe:	d9 f0       	breq	.+54     	; 0xb36 <getInfo+0x52>
		newmessage = can_handle_messages();
     b00:	ce 01       	movw	r24, r28
     b02:	01 96       	adiw	r24, 0x01	; 1
     b04:	0e 94 e8 03 	call	0x7d0	; 0x7d0 <can_handle_messages>
     b08:	8b e0       	ldi	r24, 0x0B	; 11
     b0a:	fe 01       	movw	r30, r28
     b0c:	31 96       	adiw	r30, 0x01	; 1
     b0e:	a7 ee       	ldi	r26, 0xE7	; 231
     b10:	b3 e0       	ldi	r27, 0x03	; 3
     b12:	01 90       	ld	r0, Z+
     b14:	0d 92       	st	X+, r0
     b16:	8a 95       	dec	r24
     b18:	e1 f7       	brne	.-8      	; 0xb12 <getInfo+0x2e>
		game.enemypoints = newmessage.data[0];
     b1a:	80 91 ea 03 	lds	r24, 0x03EA
     b1e:	90 e0       	ldi	r25, 0x00	; 0
     b20:	90 93 c1 03 	sts	0x03C1, r25
     b24:	80 93 c0 03 	sts	0x03C0, r24
		game.mypoints = newmessage.data[1];
     b28:	80 91 eb 03 	lds	r24, 0x03EB
     b2c:	90 e0       	ldi	r25, 0x00	; 0
     b2e:	90 93 bf 03 	sts	0x03BF, r25
     b32:	80 93 be 03 	sts	0x03BE, r24
		//printf("MY POINTS    %d \r\n",game.mypoints);
		//printf("ENEMYPOINTS    %d  ",game.enemypoints);
		}
		
	
	return game;
     b36:	60 91 be 03 	lds	r22, 0x03BE
     b3a:	70 91 bf 03 	lds	r23, 0x03BF
     b3e:	80 91 c0 03 	lds	r24, 0x03C0
     b42:	90 91 c1 03 	lds	r25, 0x03C1
     b46:	2b 96       	adiw	r28, 0x0b	; 11
     b48:	0f b6       	in	r0, 0x3f	; 63
     b4a:	f8 94       	cli
     b4c:	de bf       	out	0x3e, r29	; 62
     b4e:	0f be       	out	0x3f, r0	; 63
     b50:	cd bf       	out	0x3d, r28	; 61
     b52:	df 91       	pop	r29
     b54:	cf 91       	pop	r28
     b56:	08 95       	ret

00000b58 <Joystick_calibrate>:

uint8_t center_x , center_y;

void Joystick_calibrate(void){
	
	ADC_start_read(CHANNEL1);
     b58:	80 e0       	ldi	r24, 0x00	; 0
     b5a:	0e 94 fe 01 	call	0x3fc	; 0x3fc <ADC_start_read>
	#else
		//round up by default
		__ticks_dc = (uint32_t)(ceil(fabs(__tmp)));
	#endif

	__builtin_avr_delay_cycles(__ticks_dc);
     b5e:	82 e4       	ldi	r24, 0x42	; 66
     b60:	8a 95       	dec	r24
     b62:	f1 f7       	brne	.-4      	; 0xb60 <Joystick_calibrate+0x8>
     b64:	00 c0       	rjmp	.+0      	; 0xb66 <Joystick_calibrate+0xe>
	_delay_us(200);
	center_x = get_ADC_data();
     b66:	0e 94 f8 01 	call	0x3f0	; 0x3f0 <get_ADC_data>
     b6a:	80 93 f2 03 	sts	0x03F2, r24
	ADC_start_read(CHANNEL2);
     b6e:	81 e0       	ldi	r24, 0x01	; 1
     b70:	0e 94 fe 01 	call	0x3fc	; 0x3fc <ADC_start_read>
     b74:	82 e4       	ldi	r24, 0x42	; 66
     b76:	8a 95       	dec	r24
     b78:	f1 f7       	brne	.-4      	; 0xb76 <Joystick_calibrate+0x1e>
     b7a:	00 c0       	rjmp	.+0      	; 0xb7c <Joystick_calibrate+0x24>
	_delay_us(200);
	center_y = get_ADC_data();
     b7c:	0e 94 f8 01 	call	0x3f0	; 0x3f0 <get_ADC_data>
     b80:	80 93 f3 03 	sts	0x03F3, r24
     b84:	08 95       	ret

00000b86 <JoystickDirection>:
	return position; 
	
	
}

Joystick JoystickDirection(Joystick position){
     b86:	cf 93       	push	r28
     b88:	df 93       	push	r29
     b8a:	cd b7       	in	r28, 0x3d	; 61
     b8c:	de b7       	in	r29, 0x3e	; 62
     b8e:	2a 97       	sbiw	r28, 0x0a	; 10
     b90:	0f b6       	in	r0, 0x3f	; 63
     b92:	f8 94       	cli
     b94:	de bf       	out	0x3e, r29	; 62
     b96:	0f be       	out	0x3f, r0	; 63
     b98:	cd bf       	out	0x3d, r28	; 61
     b9a:	4e 83       	std	Y+6, r20	; 0x06
     b9c:	5f 83       	std	Y+7, r21	; 0x07
     b9e:	68 87       	std	Y+8, r22	; 0x08
     ba0:	79 87       	std	Y+9, r23	; 0x09
     ba2:	8e 81       	ldd	r24, Y+6	; 0x06
     ba4:	9f 81       	ldd	r25, Y+7	; 0x07
     ba6:	28 85       	ldd	r18, Y+8	; 0x08
     ba8:	39 85       	ldd	r19, Y+9	; 0x09
	position.Dir = NEUTRAL;
	if(position.xPos < -60 ){
     baa:	84 3c       	cpi	r24, 0xC4	; 196
     bac:	4f ef       	ldi	r20, 0xFF	; 255
     bae:	94 07       	cpc	r25, r20
     bb0:	2c f0       	brlt	.+10     	; 0xbbc <JoystickDirection+0x36>
		position.Dir = LEFT; 
	} else if (position.xPos > 50 ){
     bb2:	83 33       	cpi	r24, 0x33	; 51
     bb4:	91 05       	cpc	r25, r1
     bb6:	24 f4       	brge	.+8      	; 0xbc0 <JoystickDirection+0x3a>
	
	
}

Joystick JoystickDirection(Joystick position){
	position.Dir = NEUTRAL;
     bb8:	64 e0       	ldi	r22, 0x04	; 4
     bba:	03 c0       	rjmp	.+6      	; 0xbc2 <JoystickDirection+0x3c>
	if(position.xPos < -60 ){
		position.Dir = LEFT; 
     bbc:	60 e0       	ldi	r22, 0x00	; 0
     bbe:	01 c0       	rjmp	.+2      	; 0xbc2 <JoystickDirection+0x3c>
	} else if (position.xPos > 50 ){
		position.Dir = RIGHT;
     bc0:	61 e0       	ldi	r22, 0x01	; 1
	}
	if(position.yPos < -50){
     bc2:	2e 3c       	cpi	r18, 0xCE	; 206
     bc4:	4f ef       	ldi	r20, 0xFF	; 255
     bc6:	34 07       	cpc	r19, r20
     bc8:	24 f0       	brlt	.+8      	; 0xbd2 <JoystickDirection+0x4c>
		position.Dir = DOWN; 
	} else if (position.yPos > 50){
     bca:	23 33       	cpi	r18, 0x33	; 51
     bcc:	31 05       	cpc	r19, r1
     bce:	1c f4       	brge	.+6      	; 0xbd6 <JoystickDirection+0x50>
     bd0:	03 c0       	rjmp	.+6      	; 0xbd8 <JoystickDirection+0x52>
		position.Dir = LEFT; 
	} else if (position.xPos > 50 ){
		position.Dir = RIGHT;
	}
	if(position.yPos < -50){
		position.Dir = DOWN; 
     bd2:	63 e0       	ldi	r22, 0x03	; 3
     bd4:	01 c0       	rjmp	.+2      	; 0xbd8 <JoystickDirection+0x52>
	} else if (position.yPos > 50){
		position.Dir = UP; 
     bd6:	62 e0       	ldi	r22, 0x02	; 2
	}
	if(position.xPos == 0 && position.yPos == 0){
     bd8:	00 97       	sbiw	r24, 0x00	; 0
     bda:	21 f4       	brne	.+8      	; 0xbe4 <JoystickDirection+0x5e>
     bdc:	21 15       	cp	r18, r1
     bde:	31 05       	cpc	r19, r1
     be0:	09 f4       	brne	.+2      	; 0xbe4 <JoystickDirection+0x5e>
		position.Dir = NEUTRAL; 
     be2:	64 e0       	ldi	r22, 0x04	; 4
	}
	if(position.Dir > 4){
		position.Dir = 4;
	}
	
	return position;
     be4:	9a 83       	std	Y+2, r25	; 0x02
     be6:	89 83       	std	Y+1, r24	; 0x01
     be8:	3c 83       	std	Y+4, r19	; 0x04
     bea:	2b 83       	std	Y+3, r18	; 0x03
     bec:	65 30       	cpi	r22, 0x05	; 5
     bee:	08 f0       	brcs	.+2      	; 0xbf2 <JoystickDirection+0x6c>
     bf0:	64 e0       	ldi	r22, 0x04	; 4
     bf2:	29 81       	ldd	r18, Y+1	; 0x01
     bf4:	3a 81       	ldd	r19, Y+2	; 0x02
     bf6:	4b 81       	ldd	r20, Y+3	; 0x03
     bf8:	5c 81       	ldd	r21, Y+4	; 0x04
}
     bfa:	70 e0       	ldi	r23, 0x00	; 0
     bfc:	80 e0       	ldi	r24, 0x00	; 0
     bfe:	90 e0       	ldi	r25, 0x00	; 0
     c00:	2a 96       	adiw	r28, 0x0a	; 10
     c02:	0f b6       	in	r0, 0x3f	; 63
     c04:	f8 94       	cli
     c06:	de bf       	out	0x3e, r29	; 62
     c08:	0f be       	out	0x3f, r0	; 63
     c0a:	cd bf       	out	0x3d, r28	; 61
     c0c:	df 91       	pop	r29
     c0e:	cf 91       	pop	r28
     c10:	08 95       	ret

00000c12 <joystickPos>:
	_delay_us(200);
	center_y = get_ADC_data();
	 
}

Joystick joystickPos(void){
     c12:	0f 93       	push	r16
     c14:	1f 93       	push	r17
     c16:	cf 93       	push	r28
     c18:	df 93       	push	r29
     c1a:	cd b7       	in	r28, 0x3d	; 61
     c1c:	de b7       	in	r29, 0x3e	; 62
     c1e:	2a 97       	sbiw	r28, 0x0a	; 10
     c20:	0f b6       	in	r0, 0x3f	; 63
     c22:	f8 94       	cli
     c24:	de bf       	out	0x3e, r29	; 62
     c26:	0f be       	out	0x3f, r0	; 63
     c28:	cd bf       	out	0x3d, r28	; 61
	uint8_t x, y; 
	Joystick position;
	position.xPos = 0;
	position.yPos = 0;
	
	ADC_start_read(CHANNEL1);
     c2a:	80 e0       	ldi	r24, 0x00	; 0
     c2c:	0e 94 fe 01 	call	0x3fc	; 0x3fc <ADC_start_read>
	#else
		//round up by default
		__ticks_dc = (uint32_t)(ceil(fabs(__tmp)));
	#endif

	__builtin_avr_delay_cycles(__ticks_dc);
     c30:	81 ee       	ldi	r24, 0xE1	; 225
     c32:	94 e0       	ldi	r25, 0x04	; 4
     c34:	01 97       	sbiw	r24, 0x01	; 1
     c36:	f1 f7       	brne	.-4      	; 0xc34 <joystickPos+0x22>
     c38:	00 c0       	rjmp	.+0      	; 0xc3a <joystickPos+0x28>
     c3a:	00 00       	nop
	_delay_ms(5);
	x = get_ADC_data();
     c3c:	0e 94 f8 01 	call	0x3f0	; 0x3f0 <get_ADC_data>
	
	if(x > center_x){
     c40:	20 91 f2 03 	lds	r18, 0x03F2
     c44:	28 17       	cp	r18, r24
     c46:	a0 f4       	brcc	.+40     	; 0xc70 <joystickPos+0x5e>
		position.xPos = 100 * (x - center_x) / (0xFF - center_x);
     c48:	30 e0       	ldi	r19, 0x00	; 0
     c4a:	99 27       	eor	r25, r25
     c4c:	ac 01       	movw	r20, r24
     c4e:	42 1b       	sub	r20, r18
     c50:	53 0b       	sbc	r21, r19
     c52:	64 e6       	ldi	r22, 0x64	; 100
     c54:	64 9f       	mul	r22, r20
     c56:	c0 01       	movw	r24, r0
     c58:	65 9f       	mul	r22, r21
     c5a:	90 0d       	add	r25, r0
     c5c:	11 24       	eor	r1, r1
     c5e:	6f ef       	ldi	r22, 0xFF	; 255
     c60:	70 e0       	ldi	r23, 0x00	; 0
     c62:	62 1b       	sub	r22, r18
     c64:	73 0b       	sbc	r23, r19
     c66:	0e 94 d0 0c 	call	0x19a0	; 0x19a0 <__divmodhi4>
     c6a:	16 2f       	mov	r17, r22
     c6c:	07 2f       	mov	r16, r23
     c6e:	15 c0       	rjmp	.+42     	; 0xc9a <joystickPos+0x88>
	} else if (x < center_x){
     c70:	82 17       	cp	r24, r18
     c72:	88 f4       	brcc	.+34     	; 0xc96 <joystickPos+0x84>
		position.xPos = 100 * (x - center_x) / (center_x - 0);
     c74:	62 2f       	mov	r22, r18
     c76:	70 e0       	ldi	r23, 0x00	; 0
     c78:	99 27       	eor	r25, r25
     c7a:	9c 01       	movw	r18, r24
     c7c:	26 1b       	sub	r18, r22
     c7e:	37 0b       	sbc	r19, r23
     c80:	44 e6       	ldi	r20, 0x64	; 100
     c82:	42 9f       	mul	r20, r18
     c84:	c0 01       	movw	r24, r0
     c86:	43 9f       	mul	r20, r19
     c88:	90 0d       	add	r25, r0
     c8a:	11 24       	eor	r1, r1
     c8c:	0e 94 d0 0c 	call	0x19a0	; 0x19a0 <__divmodhi4>
     c90:	16 2f       	mov	r17, r22
     c92:	07 2f       	mov	r16, r23
     c94:	02 c0       	rjmp	.+4      	; 0xc9a <joystickPos+0x88>
	} else {
		position.xPos = 0;
     c96:	10 e0       	ldi	r17, 0x00	; 0
     c98:	00 e0       	ldi	r16, 0x00	; 0
	}
	ADC_start_read(CHANNEL2);
     c9a:	81 e0       	ldi	r24, 0x01	; 1
     c9c:	0e 94 fe 01 	call	0x3fc	; 0x3fc <ADC_start_read>
     ca0:	81 ee       	ldi	r24, 0xE1	; 225
     ca2:	94 e0       	ldi	r25, 0x04	; 4
     ca4:	01 97       	sbiw	r24, 0x01	; 1
     ca6:	f1 f7       	brne	.-4      	; 0xca4 <joystickPos+0x92>
     ca8:	00 c0       	rjmp	.+0      	; 0xcaa <joystickPos+0x98>
     caa:	00 00       	nop
	_delay_ms(5);
	y = get_ADC_data();
     cac:	0e 94 f8 01 	call	0x3f0	; 0x3f0 <get_ADC_data>
	if(y > center_y){
     cb0:	20 91 f3 03 	lds	r18, 0x03F3
     cb4:	28 17       	cp	r18, r24
     cb6:	a0 f4       	brcc	.+40     	; 0xce0 <joystickPos+0xce>
		position.yPos = 100 * (y - center_y) / (0xFF - center_y);
     cb8:	30 e0       	ldi	r19, 0x00	; 0
     cba:	99 27       	eor	r25, r25
     cbc:	ac 01       	movw	r20, r24
     cbe:	42 1b       	sub	r20, r18
     cc0:	53 0b       	sbc	r21, r19
     cc2:	64 e6       	ldi	r22, 0x64	; 100
     cc4:	64 9f       	mul	r22, r20
     cc6:	c0 01       	movw	r24, r0
     cc8:	65 9f       	mul	r22, r21
     cca:	90 0d       	add	r25, r0
     ccc:	11 24       	eor	r1, r1
     cce:	4f ef       	ldi	r20, 0xFF	; 255
     cd0:	50 e0       	ldi	r21, 0x00	; 0
     cd2:	ba 01       	movw	r22, r20
     cd4:	62 1b       	sub	r22, r18
     cd6:	73 0b       	sbc	r23, r19
     cd8:	0e 94 d0 0c 	call	0x19a0	; 0x19a0 <__divmodhi4>
     cdc:	86 2f       	mov	r24, r22
     cde:	14 c0       	rjmp	.+40     	; 0xd08 <joystickPos+0xf6>
		} else if (y < center_y){
     ce0:	82 17       	cp	r24, r18
     ce2:	80 f4       	brcc	.+32     	; 0xd04 <joystickPos+0xf2>
		position.yPos = 100 * (y - center_y) / (center_y - 0);
     ce4:	30 e0       	ldi	r19, 0x00	; 0
     ce6:	99 27       	eor	r25, r25
     ce8:	ac 01       	movw	r20, r24
     cea:	42 1b       	sub	r20, r18
     cec:	53 0b       	sbc	r21, r19
     cee:	64 e6       	ldi	r22, 0x64	; 100
     cf0:	64 9f       	mul	r22, r20
     cf2:	c0 01       	movw	r24, r0
     cf4:	65 9f       	mul	r22, r21
     cf6:	90 0d       	add	r25, r0
     cf8:	11 24       	eor	r1, r1
     cfa:	b9 01       	movw	r22, r18
     cfc:	0e 94 d0 0c 	call	0x19a0	; 0x19a0 <__divmodhi4>
     d00:	86 2f       	mov	r24, r22
     d02:	02 c0       	rjmp	.+4      	; 0xd08 <joystickPos+0xf6>
		} else {
		position.yPos = 0;
     d04:	80 e0       	ldi	r24, 0x00	; 0
     d06:	70 e0       	ldi	r23, 0x00	; 0
	}
	position = JoystickDirection(position);
     d08:	41 2f       	mov	r20, r17
     d0a:	68 2f       	mov	r22, r24
     d0c:	50 2f       	mov	r21, r16
     d0e:	8a 85       	ldd	r24, Y+10	; 0x0a
     d10:	0e 94 c3 05 	call	0xb86	; 0xb86 <JoystickDirection>
     d14:	2e 83       	std	Y+6, r18	; 0x06
     d16:	3f 83       	std	Y+7, r19	; 0x07
     d18:	48 87       	std	Y+8, r20	; 0x08
     d1a:	59 87       	std	Y+9, r21	; 0x09
     d1c:	6a 87       	std	Y+10, r22	; 0x0a
	return position; 
     d1e:	85 e0       	ldi	r24, 0x05	; 5
     d20:	fe 01       	movw	r30, r28
     d22:	36 96       	adiw	r30, 0x06	; 6
     d24:	de 01       	movw	r26, r28
     d26:	11 96       	adiw	r26, 0x01	; 1
     d28:	01 90       	ld	r0, Z+
     d2a:	0d 92       	st	X+, r0
     d2c:	8a 95       	dec	r24
     d2e:	e1 f7       	brne	.-8      	; 0xd28 <joystickPos+0x116>
     d30:	29 81       	ldd	r18, Y+1	; 0x01
     d32:	3a 81       	ldd	r19, Y+2	; 0x02
     d34:	4b 81       	ldd	r20, Y+3	; 0x03
     d36:	5c 81       	ldd	r21, Y+4	; 0x04
     d38:	6d 81       	ldd	r22, Y+5	; 0x05
	
	
}
     d3a:	70 e0       	ldi	r23, 0x00	; 0
     d3c:	80 e0       	ldi	r24, 0x00	; 0
     d3e:	90 e0       	ldi	r25, 0x00	; 0
     d40:	2a 96       	adiw	r28, 0x0a	; 10
     d42:	0f b6       	in	r0, 0x3f	; 63
     d44:	f8 94       	cli
     d46:	de bf       	out	0x3e, r29	; 62
     d48:	0f be       	out	0x3f, r0	; 63
     d4a:	cd bf       	out	0x3d, r28	; 61
     d4c:	df 91       	pop	r29
     d4e:	cf 91       	pop	r28
     d50:	1f 91       	pop	r17
     d52:	0f 91       	pop	r16
     d54:	08 95       	ret

00000d56 <score>:
			highscorelistupdate(i,array);
			break;
		}
	}
}
int score(char*array){
     d56:	fc 01       	movw	r30, r24
	int num = (int)array[3]-48;
     d58:	23 81       	ldd	r18, Z+3	; 0x03
     d5a:	30 e0       	ldi	r19, 0x00	; 0
     d5c:	20 53       	subi	r18, 0x30	; 48
     d5e:	31 09       	sbc	r19, r1
	num *= 10;
     d60:	c9 01       	movw	r24, r18
     d62:	88 0f       	add	r24, r24
     d64:	99 1f       	adc	r25, r25
     d66:	22 0f       	add	r18, r18
     d68:	33 1f       	adc	r19, r19
     d6a:	22 0f       	add	r18, r18
     d6c:	33 1f       	adc	r19, r19
     d6e:	22 0f       	add	r18, r18
     d70:	33 1f       	adc	r19, r19
     d72:	28 0f       	add	r18, r24
     d74:	39 1f       	adc	r19, r25
	num += (int)array[4]-48;
     d76:	84 81       	ldd	r24, Z+4	; 0x04
     d78:	90 e0       	ldi	r25, 0x00	; 0
     d7a:	c0 97       	sbiw	r24, 0x30	; 48
	return num;
}
     d7c:	82 0f       	add	r24, r18
     d7e:	93 1f       	adc	r25, r19
     d80:	08 95       	ret

00000d82 <highscorelistupdate>:
void highscorelistupdate(int i,char*array){
	for(int j = i; j < 4; j++)
     d82:	84 30       	cpi	r24, 0x04	; 4
     d84:	91 05       	cpc	r25, r1
     d86:	2c f5       	brge	.+74     	; 0xdd2 <highscorelistupdate+0x50>
     d88:	9c 01       	movw	r18, r24
     d8a:	2f 5f       	subi	r18, 0xFF	; 255
     d8c:	3f 4f       	sbci	r19, 0xFF	; 255
     d8e:	f9 01       	movw	r30, r18
     d90:	ee 0f       	add	r30, r30
     d92:	ff 1f       	adc	r31, r31
     d94:	ee 0f       	add	r30, r30
     d96:	ff 1f       	adc	r31, r31
     d98:	e2 0f       	add	r30, r18
     d9a:	f3 1f       	adc	r31, r19
     d9c:	ef 5e       	subi	r30, 0xEF	; 239
     d9e:	fe 4f       	sbci	r31, 0xFE	; 254
     da0:	4a e2       	ldi	r20, 0x2A	; 42
     da2:	51 e0       	ldi	r21, 0x01	; 1
     da4:	0b c0       	rjmp	.+22     	; 0xdbc <highscorelistupdate+0x3a>
     da6:	df 01       	movw	r26, r30
     da8:	15 97       	sbiw	r26, 0x05	; 5
	{
		for(int z = 0; z < 5; z++){
			highscorelist[j+1][z] = highscorelist[j][z];
     daa:	ac 91       	ld	r26, X
     dac:	a1 93       	st	Z+, r26
	return num;
}
void highscorelistupdate(int i,char*array){
	for(int j = i; j < 4; j++)
	{
		for(int z = 0; z < 5; z++){
     dae:	e2 17       	cp	r30, r18
     db0:	f3 07       	cpc	r31, r19
     db2:	c9 f7       	brne	.-14     	; 0xda6 <highscorelistupdate+0x24>
	num *= 10;
	num += (int)array[4]-48;
	return num;
}
void highscorelistupdate(int i,char*array){
	for(int j = i; j < 4; j++)
     db4:	24 17       	cp	r18, r20
     db6:	35 07       	cpc	r19, r21
     db8:	61 f0       	breq	.+24     	; 0xdd2 <highscorelistupdate+0x50>
     dba:	f9 01       	movw	r30, r18
     dbc:	9f 01       	movw	r18, r30
     dbe:	2b 5f       	subi	r18, 0xFB	; 251
     dc0:	3f 4f       	sbci	r19, 0xFF	; 255
     dc2:	f1 cf       	rjmp	.-30     	; 0xda6 <highscorelistupdate+0x24>
		for(int z = 0; z < 5; z++){
			highscorelist[j+1][z] = highscorelist[j][z];
		}
	}
	for(int z = 0; z < 5; z++){
		highscorelist[i][z] = array[z];
     dc4:	21 91       	ld	r18, Z+
     dc6:	2d 93       	st	X+, r18
	{
		for(int z = 0; z < 5; z++){
			highscorelist[j+1][z] = highscorelist[j][z];
		}
	}
	for(int z = 0; z < 5; z++){
     dc8:	01 96       	adiw	r24, 0x01	; 1
     dca:	85 30       	cpi	r24, 0x05	; 5
     dcc:	91 05       	cpc	r25, r1
     dce:	d1 f7       	brne	.-12     	; 0xdc4 <highscorelistupdate+0x42>
     dd0:	08 95       	ret
     dd2:	e6 2f       	mov	r30, r22
     dd4:	f7 2f       	mov	r31, r23
     dd6:	dc 01       	movw	r26, r24
     dd8:	aa 0f       	add	r26, r26
     dda:	bb 1f       	adc	r27, r27
     ddc:	aa 0f       	add	r26, r26
     dde:	bb 1f       	adc	r27, r27
     de0:	a8 0f       	add	r26, r24
     de2:	b9 1f       	adc	r27, r25
     de4:	af 5e       	subi	r26, 0xEF	; 239
     de6:	be 4f       	sbci	r27, 0xFE	; 254
	int num = (int)array[3]-48;
	num *= 10;
	num += (int)array[4]-48;
	return num;
}
void highscorelistupdate(int i,char*array){
     de8:	80 e0       	ldi	r24, 0x00	; 0
     dea:	90 e0       	ldi	r25, 0x00	; 0
     dec:	eb cf       	rjmp	.-42     	; 0xdc4 <highscorelistupdate+0x42>

00000dee <EditHighscore>:
			}
		break;
	}
	return choice;
}
void EditHighscore(char* array){
     dee:	cf 92       	push	r12
     df0:	df 92       	push	r13
     df2:	ef 92       	push	r14
     df4:	ff 92       	push	r15
     df6:	0f 93       	push	r16
     df8:	1f 93       	push	r17
     dfa:	cf 93       	push	r28
     dfc:	df 93       	push	r29
     dfe:	6c 01       	movw	r12, r24
	for(int i = 0 ; i < 5;i++)
	{
		if(score(highscorelist[i]) < score(array)){
     e00:	0e 94 ab 06 	call	0xd56	; 0xd56 <score>
     e04:	7c 01       	movw	r14, r24
     e06:	c1 e1       	ldi	r28, 0x11	; 17
     e08:	d1 e0       	ldi	r29, 0x01	; 1
		break;
	}
	return choice;
}
void EditHighscore(char* array){
	for(int i = 0 ; i < 5;i++)
     e0a:	00 e0       	ldi	r16, 0x00	; 0
     e0c:	10 e0       	ldi	r17, 0x00	; 0
	{
		if(score(highscorelist[i]) < score(array)){
     e0e:	ce 01       	movw	r24, r28
     e10:	0e 94 ab 06 	call	0xd56	; 0xd56 <score>
     e14:	8e 15       	cp	r24, r14
     e16:	9f 05       	cpc	r25, r15
     e18:	2c f4       	brge	.+10     	; 0xe24 <EditHighscore+0x36>
			highscorelistupdate(i,array);
     e1a:	b6 01       	movw	r22, r12
     e1c:	c8 01       	movw	r24, r16
     e1e:	0e 94 c1 06 	call	0xd82	; 0xd82 <highscorelistupdate>
			break;
     e22:	06 c0       	rjmp	.+12     	; 0xe30 <EditHighscore+0x42>
		break;
	}
	return choice;
}
void EditHighscore(char* array){
	for(int i = 0 ; i < 5;i++)
     e24:	0f 5f       	subi	r16, 0xFF	; 255
     e26:	1f 4f       	sbci	r17, 0xFF	; 255
     e28:	25 96       	adiw	r28, 0x05	; 5
     e2a:	05 30       	cpi	r16, 0x05	; 5
     e2c:	11 05       	cpc	r17, r1
     e2e:	79 f7       	brne	.-34     	; 0xe0e <EditHighscore+0x20>
		if(score(highscorelist[i]) < score(array)){
			highscorelistupdate(i,array);
			break;
		}
	}
}
     e30:	df 91       	pop	r29
     e32:	cf 91       	pop	r28
     e34:	1f 91       	pop	r17
     e36:	0f 91       	pop	r16
     e38:	ff 90       	pop	r15
     e3a:	ef 90       	pop	r14
     e3c:	df 90       	pop	r13
     e3e:	cf 90       	pop	r12
     e40:	08 95       	ret

00000e42 <ChoseName>:

long maplols(long x, long in_min, long in_max, long out_min, long out_max)
{
	return (x - in_min) * (out_max - out_min) / (in_max - in_min) + out_min;
}
int ChoseName(){
     e42:	8f 92       	push	r8
     e44:	9f 92       	push	r9
     e46:	af 92       	push	r10
     e48:	bf 92       	push	r11
     e4a:	cf 92       	push	r12
     e4c:	df 92       	push	r13
     e4e:	ef 92       	push	r14
     e50:	ff 92       	push	r15
     e52:	0f 93       	push	r16
     e54:	1f 93       	push	r17
     e56:	cf 93       	push	r28
     e58:	df 93       	push	r29
	while(chosenLetters < 3){
     e5a:	80 91 c4 03 	lds	r24, 0x03C4
     e5e:	90 91 c5 03 	lds	r25, 0x03C5
     e62:	03 97       	sbiw	r24, 0x03	; 3
     e64:	0c f0       	brlt	.+2      	; 0xe68 <ChoseName+0x26>
     e66:	a8 c0       	rjmp	.+336    	; 0xfb8 <ChoseName+0x176>
	}
}

long maplols(long x, long in_min, long in_max, long out_min, long out_max)
{
	return (x - in_min) * (out_max - out_min) / (in_max - in_min) + out_min;
     e68:	c1 2c       	mov	r12, r1
     e6a:	d1 2c       	mov	r13, r1
     e6c:	76 01       	movw	r14, r12
     e6e:	ca 94       	dec	r12
		slider = slider_position().R;
		letter = maplols(slider,0,255,65,90);
		name[chosenLetters] = (char)letter;
		if(lastletter != letter){
			oled_reset();
			oled_printf("Select your name:");
     e70:	09 e0       	ldi	r16, 0x09	; 9
     e72:	13 e0       	ldi	r17, 0x03	; 3
			oled_pos(1,0);
			oled_printf(name);
     e74:	cc e0       	ldi	r28, 0x0C	; 12
     e76:	d1 e0       	ldi	r29, 0x01	; 1
{
	return (x - in_min) * (out_max - out_min) / (in_max - in_min) + out_min;
}
int ChoseName(){
	while(chosenLetters < 3){
		slider = slider_position().R;
     e78:	0e 94 9a 0c 	call	0x1934	; 0x1934 <slider_position>
     e7c:	89 2f       	mov	r24, r25
     e7e:	90 e0       	ldi	r25, 0x00	; 0
     e80:	a0 e0       	ldi	r26, 0x00	; 0
     e82:	b0 e0       	ldi	r27, 0x00	; 0
     e84:	80 93 ca 03 	sts	0x03CA, r24
     e88:	90 93 cb 03 	sts	0x03CB, r25
     e8c:	a0 93 cc 03 	sts	0x03CC, r26
     e90:	b0 93 cd 03 	sts	0x03CD, r27
	}
}

long maplols(long x, long in_min, long in_max, long out_min, long out_max)
{
	return (x - in_min) * (out_max - out_min) / (in_max - in_min) + out_min;
     e94:	ac 01       	movw	r20, r24
     e96:	bd 01       	movw	r22, r26
     e98:	44 0f       	add	r20, r20
     e9a:	55 1f       	adc	r21, r21
     e9c:	66 1f       	adc	r22, r22
     e9e:	77 1f       	adc	r23, r23
     ea0:	44 0f       	add	r20, r20
     ea2:	55 1f       	adc	r21, r21
     ea4:	66 1f       	adc	r22, r22
     ea6:	77 1f       	adc	r23, r23
     ea8:	84 0f       	add	r24, r20
     eaa:	95 1f       	adc	r25, r21
     eac:	a6 1f       	adc	r26, r22
     eae:	b7 1f       	adc	r27, r23
     eb0:	ac 01       	movw	r20, r24
     eb2:	bd 01       	movw	r22, r26
     eb4:	44 0f       	add	r20, r20
     eb6:	55 1f       	adc	r21, r21
     eb8:	66 1f       	adc	r22, r22
     eba:	77 1f       	adc	r23, r23
     ebc:	44 0f       	add	r20, r20
     ebe:	55 1f       	adc	r21, r21
     ec0:	66 1f       	adc	r22, r22
     ec2:	77 1f       	adc	r23, r23
     ec4:	4c 01       	movw	r8, r24
     ec6:	5d 01       	movw	r10, r26
     ec8:	84 0e       	add	r8, r20
     eca:	95 1e       	adc	r9, r21
     ecc:	a6 1e       	adc	r10, r22
     ece:	b7 1e       	adc	r11, r23
     ed0:	c5 01       	movw	r24, r10
     ed2:	b4 01       	movw	r22, r8
     ed4:	a7 01       	movw	r20, r14
     ed6:	96 01       	movw	r18, r12
     ed8:	0e 94 e4 0c 	call	0x19c8	; 0x19c8 <__divmodsi4>
     edc:	da 01       	movw	r26, r20
     ede:	c9 01       	movw	r24, r18
     ee0:	8f 5b       	subi	r24, 0xBF	; 191
     ee2:	9f 4f       	sbci	r25, 0xFF	; 255
     ee4:	af 4f       	sbci	r26, 0xFF	; 255
     ee6:	bf 4f       	sbci	r27, 0xFF	; 255
}
int ChoseName(){
	while(chosenLetters < 3){
		slider = slider_position().R;
		letter = maplols(slider,0,255,65,90);
     ee8:	80 93 c6 03 	sts	0x03C6, r24
     eec:	90 93 c7 03 	sts	0x03C7, r25
     ef0:	a0 93 c8 03 	sts	0x03C8, r26
     ef4:	b0 93 c9 03 	sts	0x03C9, r27
		name[chosenLetters] = (char)letter;
     ef8:	e0 91 c4 03 	lds	r30, 0x03C4
     efc:	f0 91 c5 03 	lds	r31, 0x03C5
     f00:	e4 5f       	subi	r30, 0xF4	; 244
     f02:	fe 4f       	sbci	r31, 0xFE	; 254
     f04:	80 83       	st	Z, r24
		if(lastletter != letter){
     f06:	40 91 08 01 	lds	r20, 0x0108
     f0a:	50 91 09 01 	lds	r21, 0x0109
     f0e:	60 91 0a 01 	lds	r22, 0x010A
     f12:	70 91 0b 01 	lds	r23, 0x010B
     f16:	48 17       	cp	r20, r24
     f18:	59 07       	cpc	r21, r25
     f1a:	6a 07       	cpc	r22, r26
     f1c:	7b 07       	cpc	r23, r27
     f1e:	a1 f0       	breq	.+40     	; 0xf48 <ChoseName+0x106>
			oled_reset();
     f20:	0e 94 44 0a 	call	0x1488	; 0x1488 <oled_reset>
			oled_printf("Select your name:");
     f24:	1f 93       	push	r17
     f26:	0f 93       	push	r16
     f28:	0e 94 ad 09 	call	0x135a	; 0x135a <oled_printf>
			oled_pos(1,0);
     f2c:	60 e0       	ldi	r22, 0x00	; 0
     f2e:	70 e0       	ldi	r23, 0x00	; 0
     f30:	81 e0       	ldi	r24, 0x01	; 1
     f32:	90 e0       	ldi	r25, 0x00	; 0
     f34:	0e 94 19 0a 	call	0x1432	; 0x1432 <oled_pos>
			oled_printf(name);
     f38:	df 93       	push	r29
     f3a:	cf 93       	push	r28
     f3c:	0e 94 ad 09 	call	0x135a	; 0x135a <oled_printf>
     f40:	0f 90       	pop	r0
     f42:	0f 90       	pop	r0
     f44:	0f 90       	pop	r0
     f46:	0f 90       	pop	r0
		}
		lastletter = letter;
     f48:	80 91 c6 03 	lds	r24, 0x03C6
     f4c:	90 91 c7 03 	lds	r25, 0x03C7
     f50:	a0 91 c8 03 	lds	r26, 0x03C8
     f54:	b0 91 c9 03 	lds	r27, 0x03C9
     f58:	80 93 08 01 	sts	0x0108, r24
     f5c:	90 93 09 01 	sts	0x0109, r25
     f60:	a0 93 0a 01 	sts	0x010A, r26
     f64:	b0 93 0b 01 	sts	0x010B, r27
		int sliderbutton = 0;
		if(slider_left_button() > 0){
     f68:	0e 94 bb 0c 	call	0x1976	; 0x1976 <slider_left_button>
     f6c:	31 e0       	ldi	r19, 0x01	; 1
     f6e:	20 e0       	ldi	r18, 0x00	; 0
     f70:	18 16       	cp	r1, r24
     f72:	19 06       	cpc	r1, r25
     f74:	0c f0       	brlt	.+2      	; 0xf78 <ChoseName+0x136>
     f76:	30 e0       	ldi	r19, 0x00	; 0
			oled_printf("Select your name:");
			oled_pos(1,0);
			oled_printf(name);
		}
		lastletter = letter;
		int sliderbutton = 0;
     f78:	83 2f       	mov	r24, r19
     f7a:	92 2f       	mov	r25, r18
		if(slider_left_button() > 0){
			sliderbutton = 1;
		}
		if(sliderbutton && sliderbutton != sliderbuttonhold){
     f7c:	00 97       	sbiw	r24, 0x00	; 0
     f7e:	89 f0       	breq	.+34     	; 0xfa2 <ChoseName+0x160>
     f80:	20 91 c2 03 	lds	r18, 0x03C2
     f84:	30 91 c3 03 	lds	r19, 0x03C3
     f88:	28 17       	cp	r18, r24
     f8a:	39 07       	cpc	r19, r25
     f8c:	51 f0       	breq	.+20     	; 0xfa2 <ChoseName+0x160>
			chosenLetters = chosenLetters + 1;
     f8e:	20 91 c4 03 	lds	r18, 0x03C4
     f92:	30 91 c5 03 	lds	r19, 0x03C5
     f96:	2f 5f       	subi	r18, 0xFF	; 255
     f98:	3f 4f       	sbci	r19, 0xFF	; 255
     f9a:	30 93 c5 03 	sts	0x03C5, r19
     f9e:	20 93 c4 03 	sts	0x03C4, r18
		}
		sliderbuttonhold = sliderbutton;
     fa2:	90 93 c3 03 	sts	0x03C3, r25
     fa6:	80 93 c2 03 	sts	0x03C2, r24
long maplols(long x, long in_min, long in_max, long out_min, long out_max)
{
	return (x - in_min) * (out_max - out_min) / (in_max - in_min) + out_min;
}
int ChoseName(){
	while(chosenLetters < 3){
     faa:	80 91 c4 03 	lds	r24, 0x03C4
     fae:	90 91 c5 03 	lds	r25, 0x03C5
     fb2:	03 97       	sbiw	r24, 0x03	; 3
     fb4:	0c f4       	brge	.+2      	; 0xfb8 <ChoseName+0x176>
     fb6:	60 cf       	rjmp	.-320    	; 0xe78 <ChoseName+0x36>
		if(sliderbutton && sliderbutton != sliderbuttonhold){
			chosenLetters = chosenLetters + 1;
		}
		sliderbuttonhold = sliderbutton;
	}
	EditHighscore(name);
     fb8:	8c e0       	ldi	r24, 0x0C	; 12
     fba:	91 e0       	ldi	r25, 0x01	; 1
     fbc:	0e 94 f7 06 	call	0xdee	; 0xdee <EditHighscore>
	return chosenLetters;
     fc0:	80 91 c4 03 	lds	r24, 0x03C4
     fc4:	90 91 c5 03 	lds	r25, 0x03C5
     fc8:	df 91       	pop	r29
     fca:	cf 91       	pop	r28
     fcc:	1f 91       	pop	r17
     fce:	0f 91       	pop	r16
     fd0:	ff 90       	pop	r15
     fd2:	ef 90       	pop	r14
     fd4:	df 90       	pop	r13
     fd6:	cf 90       	pop	r12
     fd8:	bf 90       	pop	r11
     fda:	af 90       	pop	r10
     fdc:	9f 90       	pop	r9
     fde:	8f 90       	pop	r8
     fe0:	08 95       	ret

00000fe2 <printgame>:
int chosenLetters = 0;
int sliderbuttonhold = 0;
long maplols(long x, long in_min, long in_max, long out_min, long out_max);
int ChoseName();
menu_option printgame(menu_option choice,gamevars game)
{
     fe2:	af 92       	push	r10
     fe4:	bf 92       	push	r11
     fe6:	cf 92       	push	r12
     fe8:	df 92       	push	r13
     fea:	ef 92       	push	r14
     fec:	ff 92       	push	r15
     fee:	0f 93       	push	r16
     ff0:	1f 93       	push	r17
     ff2:	cf 93       	push	r28
     ff4:	df 93       	push	r29
     ff6:	00 d0       	rcall	.+0      	; 0xff8 <printgame+0x16>
     ff8:	00 d0       	rcall	.+0      	; 0xffa <printgame+0x18>
     ffa:	00 d0       	rcall	.+0      	; 0xffc <printgame+0x1a>
     ffc:	cd b7       	in	r28, 0x3d	; 61
     ffe:	de b7       	in	r29, 0x3e	; 62
    1000:	7a 01       	movw	r14, r20
    1002:	8b 01       	movw	r16, r22
	switch(choice){ 
    1004:	82 30       	cpi	r24, 0x02	; 2
    1006:	09 f4       	brne	.+2      	; 0x100a <printgame+0x28>
    1008:	86 c0       	rjmp	.+268    	; 0x1116 <printgame+0x134>
    100a:	83 30       	cpi	r24, 0x03	; 3
    100c:	09 f4       	brne	.+2      	; 0x1010 <printgame+0x2e>
    100e:	ba c0       	rjmp	.+372    	; 0x1184 <printgame+0x1a2>
    1010:	81 30       	cpi	r24, 0x01	; 1
    1012:	09 f0       	breq	.+2      	; 0x1016 <printgame+0x34>
    1014:	f7 c0       	rjmp	.+494    	; 0x1204 <printgame+0x222>
		case SinglePlayer:
			oled_reset();
    1016:	0e 94 44 0a 	call	0x1488	; 0x1488 <oled_reset>
			oled_printf("Your score :");
    101a:	8b e1       	ldi	r24, 0x1B	; 27
    101c:	93 e0       	ldi	r25, 0x03	; 3
    101e:	9f 93       	push	r25
    1020:	8f 93       	push	r24
    1022:	0e 94 ad 09 	call	0x135a	; 0x135a <oled_printf>
			oled_pos(1,0);
    1026:	60 e0       	ldi	r22, 0x00	; 0
    1028:	70 e0       	ldi	r23, 0x00	; 0
    102a:	81 e0       	ldi	r24, 0x01	; 1
    102c:	90 e0       	ldi	r25, 0x00	; 0
    102e:	0e 94 19 0a 	call	0x1432	; 0x1432 <oled_pos>
			pointarray[0] = (game.mypoints%100-game.mypoints%10)/10 + '0';
    1032:	0f 2e       	mov	r0, r31
    1034:	fa e0       	ldi	r31, 0x0A	; 10
    1036:	cf 2e       	mov	r12, r31
    1038:	d1 2c       	mov	r13, r1
    103a:	f0 2d       	mov	r31, r0
    103c:	c7 01       	movw	r24, r14
    103e:	b6 01       	movw	r22, r12
    1040:	0e 94 d0 0c 	call	0x19a0	; 0x19a0 <__divmodhi4>
    1044:	9c 01       	movw	r18, r24
    1046:	ee ec       	ldi	r30, 0xCE	; 206
    1048:	f3 e0       	ldi	r31, 0x03	; 3
    104a:	c7 01       	movw	r24, r14
    104c:	64 e6       	ldi	r22, 0x64	; 100
    104e:	70 e0       	ldi	r23, 0x00	; 0
    1050:	0e 94 d0 0c 	call	0x19a0	; 0x19a0 <__divmodhi4>
    1054:	82 1b       	sub	r24, r18
    1056:	93 0b       	sbc	r25, r19
    1058:	b6 01       	movw	r22, r12
    105a:	0e 94 d0 0c 	call	0x19a0	; 0x19a0 <__divmodhi4>
    105e:	60 5d       	subi	r22, 0xD0	; 208
    1060:	60 83       	st	Z, r22
			pointarray[1] = game.mypoints%10 + '0';
    1062:	20 5d       	subi	r18, 0xD0	; 208
    1064:	20 93 cf 03 	sts	0x03CF, r18
			oled_printf(pointarray);
    1068:	ff 93       	push	r31
    106a:	ef 93       	push	r30
    106c:	0e 94 ad 09 	call	0x135a	; 0x135a <oled_printf>
			if(game.enemypoints > 0)
    1070:	0f 90       	pop	r0
    1072:	0f 90       	pop	r0
    1074:	0f 90       	pop	r0
    1076:	0f 90       	pop	r0
    1078:	10 16       	cp	r1, r16
    107a:	11 06       	cpc	r1, r17
    107c:	0c f0       	brlt	.+2      	; 0x1080 <printgame+0x9e>
    107e:	bd c0       	rjmp	.+378    	; 0x11fa <printgame+0x218>
			{	
				oled_pos(2,0);
    1080:	60 e0       	ldi	r22, 0x00	; 0
    1082:	70 e0       	ldi	r23, 0x00	; 0
    1084:	82 e0       	ldi	r24, 0x02	; 2
    1086:	90 e0       	ldi	r25, 0x00	; 0
    1088:	0e 94 19 0a 	call	0x1432	; 0x1432 <oled_pos>
				oled_printf("GAME OVER");
    108c:	88 e2       	ldi	r24, 0x28	; 40
    108e:	93 e0       	ldi	r25, 0x03	; 3
    1090:	9f 93       	push	r25
    1092:	8f 93       	push	r24
    1094:	0e 94 ad 09 	call	0x135a	; 0x135a <oled_printf>
				oled_pos(3,0);
    1098:	60 e0       	ldi	r22, 0x00	; 0
    109a:	70 e0       	ldi	r23, 0x00	; 0
    109c:	83 e0       	ldi	r24, 0x03	; 3
    109e:	90 e0       	ldi	r25, 0x00	; 0
    10a0:	0e 94 19 0a 	call	0x1432	; 0x1432 <oled_pos>
				if(game.mypoints > score(highscorelist[4])){
    10a4:	85 e2       	ldi	r24, 0x25	; 37
    10a6:	91 e0       	ldi	r25, 0x01	; 1
    10a8:	0e 94 ab 06 	call	0xd56	; 0xd56 <score>
    10ac:	0f 90       	pop	r0
    10ae:	0f 90       	pop	r0
    10b0:	8e 15       	cp	r24, r14
    10b2:	9f 05       	cpc	r25, r15
    10b4:	0c f0       	brlt	.+2      	; 0x10b8 <printgame+0xd6>
    10b6:	a3 c0       	rjmp	.+326    	; 0x11fe <printgame+0x21c>
					name[3] = pointarray[0];
    10b8:	0e ec       	ldi	r16, 0xCE	; 206
    10ba:	13 e0       	ldi	r17, 0x03	; 3
    10bc:	f8 01       	movw	r30, r16
    10be:	80 81       	ld	r24, Z
    10c0:	80 93 0f 01 	sts	0x010F, r24
					name[4] = pointarray[1];
    10c4:	80 91 cf 03 	lds	r24, 0x03CF
    10c8:	80 93 10 01 	sts	0x0110, r24
					oled_printf("NEW HIGHSCORE!!");
    10cc:	82 e3       	ldi	r24, 0x32	; 50
    10ce:	93 e0       	ldi	r25, 0x03	; 3
    10d0:	9f 93       	push	r25
    10d2:	8f 93       	push	r24
    10d4:	0e 94 ad 09 	call	0x135a	; 0x135a <oled_printf>
					oled_pos(4,0);
    10d8:	60 e0       	ldi	r22, 0x00	; 0
    10da:	70 e0       	ldi	r23, 0x00	; 0
    10dc:	84 e0       	ldi	r24, 0x04	; 4
    10de:	90 e0       	ldi	r25, 0x00	; 0
    10e0:	0e 94 19 0a 	call	0x1432	; 0x1432 <oled_pos>
					oled_printf(pointarray);
    10e4:	1f 93       	push	r17
    10e6:	0f 93       	push	r16
    10e8:	0e 94 ad 09 	call	0x135a	; 0x135a <oled_printf>
    10ec:	ff e7       	ldi	r31, 0x7F	; 127
    10ee:	2a e1       	ldi	r18, 0x1A	; 26
    10f0:	86 e0       	ldi	r24, 0x06	; 6
    10f2:	f1 50       	subi	r31, 0x01	; 1
    10f4:	20 40       	sbci	r18, 0x00	; 0
    10f6:	80 40       	sbci	r24, 0x00	; 0
    10f8:	e1 f7       	brne	.-8      	; 0x10f2 <printgame+0x110>
    10fa:	00 c0       	rjmp	.+0      	; 0x10fc <printgame+0x11a>
    10fc:	00 00       	nop
					_delay_ms(2000);
					int hold = 0;
					int test = ChoseName();
    10fe:	0e 94 21 07 	call	0xe42	; 0xe42 <ChoseName>
					chosenLetters = 0;
    1102:	10 92 c5 03 	sts	0x03C5, r1
    1106:	10 92 c4 03 	sts	0x03C4, r1
					//sendReset();
					return Highscore;
    110a:	0f 90       	pop	r0
    110c:	0f 90       	pop	r0
    110e:	0f 90       	pop	r0
    1110:	0f 90       	pop	r0
    1112:	83 e0       	ldi	r24, 0x03	; 3
    1114:	77 c0       	rjmp	.+238    	; 0x1204 <printgame+0x222>
				}
			}
		break;
		case Multiplayer:
			oled_reset();
    1116:	0e 94 44 0a 	call	0x1488	; 0x1488 <oled_reset>
			oled_printf("Opponents score :");
    111a:	82 e4       	ldi	r24, 0x42	; 66
    111c:	93 e0       	ldi	r25, 0x03	; 3
    111e:	9f 93       	push	r25
    1120:	8f 93       	push	r24
    1122:	0e 94 ad 09 	call	0x135a	; 0x135a <oled_printf>
			oled_pos(1,0);
    1126:	60 e0       	ldi	r22, 0x00	; 0
    1128:	70 e0       	ldi	r23, 0x00	; 0
    112a:	81 e0       	ldi	r24, 0x01	; 1
    112c:	90 e0       	ldi	r25, 0x00	; 0
    112e:	0e 94 19 0a 	call	0x1432	; 0x1432 <oled_pos>
			pointarray[4] = "";
    1132:	86 e4       	ldi	r24, 0x46	; 70
    1134:	92 e0       	ldi	r25, 0x02	; 2
    1136:	80 93 d2 03 	sts	0x03D2, r24
			pointarray[0] = (game.enemypoints%100-game.enemypoints%10)/10 + '0';
    113a:	0f 2e       	mov	r0, r31
    113c:	fa e0       	ldi	r31, 0x0A	; 10
    113e:	ef 2e       	mov	r14, r31
    1140:	f1 2c       	mov	r15, r1
    1142:	f0 2d       	mov	r31, r0
    1144:	c8 01       	movw	r24, r16
    1146:	b7 01       	movw	r22, r14
    1148:	0e 94 d0 0c 	call	0x19a0	; 0x19a0 <__divmodhi4>
    114c:	9c 01       	movw	r18, r24
    114e:	ee ec       	ldi	r30, 0xCE	; 206
    1150:	f3 e0       	ldi	r31, 0x03	; 3
    1152:	c8 01       	movw	r24, r16
    1154:	64 e6       	ldi	r22, 0x64	; 100
    1156:	70 e0       	ldi	r23, 0x00	; 0
    1158:	0e 94 d0 0c 	call	0x19a0	; 0x19a0 <__divmodhi4>
    115c:	82 1b       	sub	r24, r18
    115e:	93 0b       	sbc	r25, r19
    1160:	b7 01       	movw	r22, r14
    1162:	0e 94 d0 0c 	call	0x19a0	; 0x19a0 <__divmodhi4>
    1166:	60 5d       	subi	r22, 0xD0	; 208
    1168:	60 83       	st	Z, r22
			pointarray[1] = game.enemypoints%10 + '0';
    116a:	20 5d       	subi	r18, 0xD0	; 208
    116c:	20 93 cf 03 	sts	0x03CF, r18
			oled_printf(pointarray);
    1170:	ff 93       	push	r31
    1172:	ef 93       	push	r30
    1174:	0e 94 ad 09 	call	0x135a	; 0x135a <oled_printf>
		break;
    1178:	0f 90       	pop	r0
    117a:	0f 90       	pop	r0
    117c:	0f 90       	pop	r0
    117e:	0f 90       	pop	r0
				}
				oled_printf(hold);
			}
		break;
	}
	return choice;
    1180:	82 e0       	ldi	r24, 0x02	; 2
			oled_pos(1,0);
			pointarray[4] = "";
			pointarray[0] = (game.enemypoints%100-game.enemypoints%10)/10 + '0';
			pointarray[1] = game.enemypoints%10 + '0';
			oled_printf(pointarray);
		break;
    1182:	40 c0       	rjmp	.+128    	; 0x1204 <printgame+0x222>
		
		case Highscore:
			oled_reset();
    1184:	0e 94 44 0a 	call	0x1488	; 0x1488 <oled_reset>
			oled_printf("HIGHSCORES: ");
    1188:	84 e5       	ldi	r24, 0x54	; 84
    118a:	93 e0       	ldi	r25, 0x03	; 3
    118c:	9f 93       	push	r25
    118e:	8f 93       	push	r24
    1190:	0e 94 ad 09 	call	0x135a	; 0x135a <oled_printf>
    1194:	0f 2e       	mov	r0, r31
    1196:	f1 e1       	ldi	r31, 0x11	; 17
    1198:	af 2e       	mov	r10, r31
    119a:	f1 e0       	ldi	r31, 0x01	; 1
    119c:	bf 2e       	mov	r11, r31
    119e:	f0 2d       	mov	r31, r0
    11a0:	0f 90       	pop	r0
    11a2:	0f 90       	pop	r0
			for(int i = 0; i < 5; i++){
    11a4:	e1 2c       	mov	r14, r1
    11a6:	f1 2c       	mov	r15, r1
    11a8:	fe 01       	movw	r30, r28
    11aa:	31 96       	adiw	r30, 0x01	; 1
    11ac:	6f 01       	movw	r12, r30
    11ae:	8e 01       	movw	r16, r28
    11b0:	0a 5f       	subi	r16, 0xFA	; 250
    11b2:	1f 4f       	sbci	r17, 0xFF	; 255
				oled_pos(i+1,0);
    11b4:	ff ef       	ldi	r31, 0xFF	; 255
    11b6:	ef 1a       	sub	r14, r31
    11b8:	ff 0a       	sbc	r15, r31
    11ba:	60 e0       	ldi	r22, 0x00	; 0
    11bc:	70 e0       	ldi	r23, 0x00	; 0
    11be:	c7 01       	movw	r24, r14
    11c0:	0e 94 19 0a 	call	0x1432	; 0x1432 <oled_pos>
				char hold[6] = "";
    11c4:	19 82       	std	Y+1, r1	; 0x01
    11c6:	1a 82       	std	Y+2, r1	; 0x02
    11c8:	1b 82       	std	Y+3, r1	; 0x03
    11ca:	1c 82       	std	Y+4, r1	; 0x04
    11cc:	1e 82       	std	Y+6, r1	; 0x06
    11ce:	1d 82       	std	Y+5, r1	; 0x05
    11d0:	f6 01       	movw	r30, r12
    11d2:	d5 01       	movw	r26, r10
				for(int j = 0; j < 5; j++){
					hold[j] = highscorelist[i][j];
    11d4:	8d 91       	ld	r24, X+
    11d6:	81 93       	st	Z+, r24
			oled_reset();
			oled_printf("HIGHSCORES: ");
			for(int i = 0; i < 5; i++){
				oled_pos(i+1,0);
				char hold[6] = "";
				for(int j = 0; j < 5; j++){
    11d8:	e0 17       	cp	r30, r16
    11da:	f1 07       	cpc	r31, r17
    11dc:	d9 f7       	brne	.-10     	; 0x11d4 <printgame+0x1f2>
					hold[j] = highscorelist[i][j];
				}
				oled_printf(hold);
    11de:	df 92       	push	r13
    11e0:	cf 92       	push	r12
    11e2:	0e 94 ad 09 	call	0x135a	; 0x135a <oled_printf>
    11e6:	25 e0       	ldi	r18, 0x05	; 5
    11e8:	a2 0e       	add	r10, r18
    11ea:	b1 1c       	adc	r11, r1
		break;
		
		case Highscore:
			oled_reset();
			oled_printf("HIGHSCORES: ");
			for(int i = 0; i < 5; i++){
    11ec:	0f 90       	pop	r0
    11ee:	0f 90       	pop	r0
    11f0:	85 e0       	ldi	r24, 0x05	; 5
    11f2:	e8 16       	cp	r14, r24
    11f4:	f1 04       	cpc	r15, r1
    11f6:	f1 f6       	brne	.-68     	; 0x11b4 <printgame+0x1d2>
    11f8:	04 c0       	rjmp	.+8      	; 0x1202 <printgame+0x220>
				}
				oled_printf(hold);
			}
		break;
	}
	return choice;
    11fa:	81 e0       	ldi	r24, 0x01	; 1
    11fc:	03 c0       	rjmp	.+6      	; 0x1204 <printgame+0x222>
    11fe:	81 e0       	ldi	r24, 0x01	; 1
    1200:	01 c0       	rjmp	.+2      	; 0x1204 <printgame+0x222>
    1202:	83 e0       	ldi	r24, 0x03	; 3
}
    1204:	26 96       	adiw	r28, 0x06	; 6
    1206:	0f b6       	in	r0, 0x3f	; 63
    1208:	f8 94       	cli
    120a:	de bf       	out	0x3e, r29	; 62
    120c:	0f be       	out	0x3f, r0	; 63
    120e:	cd bf       	out	0x3d, r28	; 61
    1210:	df 91       	pop	r29
    1212:	cf 91       	pop	r28
    1214:	1f 91       	pop	r17
    1216:	0f 91       	pop	r16
    1218:	ff 90       	pop	r15
    121a:	ef 90       	pop	r14
    121c:	df 90       	pop	r13
    121e:	cf 90       	pop	r12
    1220:	bf 90       	pop	r11
    1222:	af 90       	pop	r10
    1224:	08 95       	ret

00001226 <oled_is_out_of_bounds>:
volatile oled_position_t position;

const fontSize = 8;

void oled_is_out_of_bounds() {
	if (position.col > 127) {
    1226:	80 91 f6 03 	lds	r24, 0x03F6
    122a:	90 91 f7 03 	lds	r25, 0x03F7
    122e:	80 38       	cpi	r24, 0x80	; 128
    1230:	91 05       	cpc	r25, r1
    1232:	bc f0       	brlt	.+46     	; 0x1262 <oled_is_out_of_bounds+0x3c>
		position.col -= 128;
    1234:	e6 ef       	ldi	r30, 0xF6	; 246
    1236:	f3 e0       	ldi	r31, 0x03	; 3
    1238:	80 81       	ld	r24, Z
    123a:	91 81       	ldd	r25, Z+1	; 0x01
    123c:	80 58       	subi	r24, 0x80	; 128
    123e:	91 09       	sbc	r25, r1
    1240:	91 83       	std	Z+1, r25	; 0x01
    1242:	80 83       	st	Z, r24
		position.row += 1;
    1244:	e4 ef       	ldi	r30, 0xF4	; 244
    1246:	f3 e0       	ldi	r31, 0x03	; 3
    1248:	80 81       	ld	r24, Z
    124a:	91 81       	ldd	r25, Z+1	; 0x01
    124c:	01 96       	adiw	r24, 0x01	; 1
    124e:	91 83       	std	Z+1, r25	; 0x01
    1250:	80 83       	st	Z, r24
		if (position.row > 7) {
    1252:	80 81       	ld	r24, Z
    1254:	91 81       	ldd	r25, Z+1	; 0x01
    1256:	08 97       	sbiw	r24, 0x08	; 8
    1258:	24 f0       	brlt	.+8      	; 0x1262 <oled_is_out_of_bounds+0x3c>
			position.row = 0;
    125a:	10 92 f5 03 	sts	0x03F5, r1
    125e:	10 92 f4 03 	sts	0x03F4, r1
    1262:	08 95       	ret

00001264 <oled_put_char>:

void write_data(uint8_t data){
	ext_oled_data[0] = data;
}

int oled_put_char(unsigned char c){
    1264:	ef 92       	push	r14
    1266:	ff 92       	push	r15
    1268:	0f 93       	push	r16
    126a:	1f 93       	push	r17
    126c:	cf 93       	push	r28
    126e:	df 93       	push	r29
	uint8_t printChar = c-32;
    1270:	80 52       	subi	r24, 0x20	; 32
    1272:	e8 2e       	mov	r14, r24
    1274:	f1 2c       	mov	r15, r1
    1276:	c7 01       	movw	r24, r14
    1278:	88 0f       	add	r24, r24
    127a:	99 1f       	adc	r25, r25
    127c:	88 0f       	add	r24, r24
    127e:	99 1f       	adc	r25, r25
    1280:	88 0f       	add	r24, r24
    1282:	99 1f       	adc	r25, r25
	
	for (int i=0; i < fontSize; i++) {
    1284:	c0 e0       	ldi	r28, 0x00	; 0
    1286:	d0 e0       	ldi	r29, 0x00	; 0
    1288:	9c 01       	movw	r18, r24
    128a:	20 59       	subi	r18, 0x90	; 144
    128c:	3f 4f       	sbci	r19, 0xFF	; 255
    128e:	79 01       	movw	r14, r18
		write_data(pgm_read_word(&font_8x8[printChar][i]));
		position.col += fontSize;
    1290:	06 ef       	ldi	r16, 0xF6	; 246
    1292:	13 e0       	ldi	r17, 0x03	; 3
    1294:	f7 01       	movw	r30, r14
    1296:	ec 0f       	add	r30, r28
    1298:	fd 1f       	adc	r31, r29

int oled_put_char(unsigned char c){
	uint8_t printChar = c-32;
	
	for (int i=0; i < fontSize; i++) {
		write_data(pgm_read_word(&font_8x8[printChar][i]));
    129a:	85 91       	lpm	r24, Z+
    129c:	94 91       	lpm	r25, Z
void write_command(uint8_t command){
	ext_oled_cmd[0] = command;
}

void write_data(uint8_t data){
	ext_oled_data[0] = data;
    129e:	e0 91 2a 01 	lds	r30, 0x012A
    12a2:	f0 91 2b 01 	lds	r31, 0x012B
    12a6:	80 83       	st	Z, r24
int oled_put_char(unsigned char c){
	uint8_t printChar = c-32;
	
	for (int i=0; i < fontSize; i++) {
		write_data(pgm_read_word(&font_8x8[printChar][i]));
		position.col += fontSize;
    12a8:	f8 01       	movw	r30, r16
    12aa:	80 81       	ld	r24, Z
    12ac:	91 81       	ldd	r25, Z+1	; 0x01
    12ae:	08 96       	adiw	r24, 0x08	; 8
    12b0:	91 83       	std	Z+1, r25	; 0x01
    12b2:	80 83       	st	Z, r24
		oled_is_out_of_bounds();
    12b4:	0e 94 13 09 	call	0x1226	; 0x1226 <oled_is_out_of_bounds>
}

int oled_put_char(unsigned char c){
	uint8_t printChar = c-32;
	
	for (int i=0; i < fontSize; i++) {
    12b8:	21 96       	adiw	r28, 0x01	; 1
    12ba:	c8 30       	cpi	r28, 0x08	; 8
    12bc:	d1 05       	cpc	r29, r1
    12be:	51 f7       	brne	.-44     	; 0x1294 <oled_put_char+0x30>
		position.col += fontSize;
		oled_is_out_of_bounds();
	}
	
	return 0;
}
    12c0:	80 e0       	ldi	r24, 0x00	; 0
    12c2:	90 e0       	ldi	r25, 0x00	; 0
    12c4:	df 91       	pop	r29
    12c6:	cf 91       	pop	r28
    12c8:	1f 91       	pop	r17
    12ca:	0f 91       	pop	r16
    12cc:	ff 90       	pop	r15
    12ce:	ef 90       	pop	r14
    12d0:	08 95       	ret

000012d2 <oled_inv_put_char>:

int oled_inv_put_char(unsigned char c){
    12d2:	ef 92       	push	r14
    12d4:	ff 92       	push	r15
    12d6:	0f 93       	push	r16
    12d8:	1f 93       	push	r17
    12da:	cf 93       	push	r28
    12dc:	df 93       	push	r29
	uint8_t printChar = c-32;
    12de:	80 52       	subi	r24, 0x20	; 32
    12e0:	e8 2e       	mov	r14, r24
    12e2:	f1 2c       	mov	r15, r1
    12e4:	c7 01       	movw	r24, r14
    12e6:	88 0f       	add	r24, r24
    12e8:	99 1f       	adc	r25, r25
    12ea:	88 0f       	add	r24, r24
    12ec:	99 1f       	adc	r25, r25
    12ee:	88 0f       	add	r24, r24
    12f0:	99 1f       	adc	r25, r25
	
	for (int i=0; i < fontSize; i++) {
    12f2:	c0 e0       	ldi	r28, 0x00	; 0
    12f4:	d0 e0       	ldi	r29, 0x00	; 0
    12f6:	9c 01       	movw	r18, r24
    12f8:	20 59       	subi	r18, 0x90	; 144
    12fa:	3f 4f       	sbci	r19, 0xFF	; 255
    12fc:	79 01       	movw	r14, r18
		write_data(~pgm_read_word(&font_8x8[printChar][i]));
		position.col += fontSize;
    12fe:	06 ef       	ldi	r16, 0xF6	; 246
    1300:	13 e0       	ldi	r17, 0x03	; 3
    1302:	f7 01       	movw	r30, r14
    1304:	ec 0f       	add	r30, r28
    1306:	fd 1f       	adc	r31, r29

int oled_inv_put_char(unsigned char c){
	uint8_t printChar = c-32;
	
	for (int i=0; i < fontSize; i++) {
		write_data(~pgm_read_word(&font_8x8[printChar][i]));
    1308:	85 91       	lpm	r24, Z+
    130a:	94 91       	lpm	r25, Z
    130c:	80 95       	com	r24
void write_command(uint8_t command){
	ext_oled_cmd[0] = command;
}

void write_data(uint8_t data){
	ext_oled_data[0] = data;
    130e:	e0 91 2a 01 	lds	r30, 0x012A
    1312:	f0 91 2b 01 	lds	r31, 0x012B
    1316:	80 83       	st	Z, r24
int oled_inv_put_char(unsigned char c){
	uint8_t printChar = c-32;
	
	for (int i=0; i < fontSize; i++) {
		write_data(~pgm_read_word(&font_8x8[printChar][i]));
		position.col += fontSize;
    1318:	f8 01       	movw	r30, r16
    131a:	80 81       	ld	r24, Z
    131c:	91 81       	ldd	r25, Z+1	; 0x01
    131e:	08 96       	adiw	r24, 0x08	; 8
    1320:	91 83       	std	Z+1, r25	; 0x01
    1322:	80 83       	st	Z, r24
		oled_is_out_of_bounds();
    1324:	0e 94 13 09 	call	0x1226	; 0x1226 <oled_is_out_of_bounds>
}

int oled_inv_put_char(unsigned char c){
	uint8_t printChar = c-32;
	
	for (int i=0; i < fontSize; i++) {
    1328:	21 96       	adiw	r28, 0x01	; 1
    132a:	c8 30       	cpi	r28, 0x08	; 8
    132c:	d1 05       	cpc	r29, r1
    132e:	49 f7       	brne	.-46     	; 0x1302 <oled_inv_put_char+0x30>
		position.col += fontSize;
		oled_is_out_of_bounds();
	}
	
	return 0;
}
    1330:	80 e0       	ldi	r24, 0x00	; 0
    1332:	90 e0       	ldi	r25, 0x00	; 0
    1334:	df 91       	pop	r29
    1336:	cf 91       	pop	r28
    1338:	1f 91       	pop	r17
    133a:	0f 91       	pop	r16
    133c:	ff 90       	pop	r15
    133e:	ef 90       	pop	r14
    1340:	08 95       	ret

00001342 <oled_set_adressing_mode>:
		}
	}
}

void write_command(uint8_t command){
	ext_oled_cmd[0] = command;
    1342:	e0 91 2c 01 	lds	r30, 0x012C
    1346:	f0 91 2d 01 	lds	r31, 0x012D
    134a:	90 e2       	ldi	r25, 0x20	; 32
    134c:	90 83       	st	Z, r25
    134e:	e0 91 2c 01 	lds	r30, 0x012C
    1352:	f0 91 2d 01 	lds	r31, 0x012D
    1356:	80 83       	st	Z, r24
    1358:	08 95       	ret

0000135a <oled_printf>:
	write_command(mode);
}

// ------------------ functions declared in header below this line---------------------

void oled_printf(char* data, ...){
    135a:	cf 93       	push	r28
    135c:	df 93       	push	r29
    135e:	cd b7       	in	r28, 0x3d	; 61
    1360:	de b7       	in	r29, 0x3e	; 62
    1362:	fe 01       	movw	r30, r28
    1364:	35 96       	adiw	r30, 0x05	; 5
    1366:	61 91       	ld	r22, Z+
    1368:	71 91       	ld	r23, Z+
	va_list args;
	va_start(args, data);
	vfprintf(&mystdout, data, args);
    136a:	af 01       	movw	r20, r30
    136c:	8c e3       	ldi	r24, 0x3C	; 60
    136e:	91 e0       	ldi	r25, 0x01	; 1
    1370:	0e 94 ec 0e 	call	0x1dd8	; 0x1dd8 <vfprintf>
	va_end(args);
	
}
    1374:	df 91       	pop	r29
    1376:	cf 91       	pop	r28
    1378:	08 95       	ret

0000137a <oled_inv_printf>:

void oled_inv_printf(char* data, ...){
    137a:	cf 93       	push	r28
    137c:	df 93       	push	r29
    137e:	cd b7       	in	r28, 0x3d	; 61
    1380:	de b7       	in	r29, 0x3e	; 62
    1382:	fe 01       	movw	r30, r28
    1384:	35 96       	adiw	r30, 0x05	; 5
    1386:	61 91       	ld	r22, Z+
    1388:	71 91       	ld	r23, Z+
	va_list args;
	va_start(args, data);
	vfprintf(&myinvstdout, data, args);
    138a:	af 01       	movw	r20, r30
    138c:	8e e2       	ldi	r24, 0x2E	; 46
    138e:	91 e0       	ldi	r25, 0x01	; 1
    1390:	0e 94 ec 0e 	call	0x1dd8	; 0x1dd8 <vfprintf>
	va_end(args);
	
}
    1394:	df 91       	pop	r29
    1396:	cf 91       	pop	r28
    1398:	08 95       	ret

0000139a <oled_goto_line>:

void oled_home(){
	oled_pos(0,0);
}

void oled_goto_line(int line){
    139a:	cf 93       	push	r28
    139c:	df 93       	push	r29
    139e:	ec 01       	movw	r28, r24
	if (line > 7 || line < 0) {
    13a0:	88 30       	cpi	r24, 0x08	; 8
    13a2:	91 05       	cpc	r25, r1
    13a4:	80 f4       	brcc	.+32     	; 0x13c6 <oled_goto_line+0x2c>
		return 0;
	}
	else {
		position.row = line;
    13a6:	90 93 f5 03 	sts	0x03F5, r25
    13aa:	80 93 f4 03 	sts	0x03F4, r24
		oled_set_adressing_mode(PAGE_MODE);
    13ae:	82 e0       	ldi	r24, 0x02	; 2
    13b0:	0e 94 a1 09 	call	0x1342	; 0x1342 <oled_set_adressing_mode>
		write_command(0xB0 + line);
    13b4:	c0 55       	subi	r28, 0x50	; 80
		}
	}
}

void write_command(uint8_t command){
	ext_oled_cmd[0] = command;
    13b6:	e0 91 2c 01 	lds	r30, 0x012C
    13ba:	f0 91 2d 01 	lds	r31, 0x012D
    13be:	c0 83       	st	Z, r28
	}
	else {
		position.row = line;
		oled_set_adressing_mode(PAGE_MODE);
		write_command(0xB0 + line);
		oled_set_adressing_mode(HORIZONTAL_MODE);
    13c0:	80 e0       	ldi	r24, 0x00	; 0
    13c2:	0e 94 a1 09 	call	0x1342	; 0x1342 <oled_set_adressing_mode>
	}
}
    13c6:	df 91       	pop	r29
    13c8:	cf 91       	pop	r28
    13ca:	08 95       	ret

000013cc <oled_goto_column>:

void oled_goto_column(int column){
    13cc:	cf 93       	push	r28
    13ce:	df 93       	push	r29
    13d0:	ec 01       	movw	r28, r24
	if (column > 127 || column < 0) {
    13d2:	80 38       	cpi	r24, 0x80	; 128
    13d4:	91 05       	cpc	r25, r1
    13d6:	50 f5       	brcc	.+84     	; 0x142c <oled_goto_column+0x60>
		return 0;
	}
	else {
		position.col = column;
    13d8:	90 93 f7 03 	sts	0x03F7, r25
    13dc:	80 93 f6 03 	sts	0x03F6, r24
		oled_set_adressing_mode(PAGE_MODE);
    13e0:	82 e0       	ldi	r24, 0x02	; 2
    13e2:	0e 94 a1 09 	call	0x1342	; 0x1342 <oled_set_adressing_mode>
		
		int numLow = column % 16;
    13e6:	ce 01       	movw	r24, r28
    13e8:	8f 70       	andi	r24, 0x0F	; 15
    13ea:	90 78       	andi	r25, 0x80	; 128
    13ec:	99 23       	and	r25, r25
    13ee:	24 f4       	brge	.+8      	; 0x13f8 <oled_goto_column+0x2c>
    13f0:	01 97       	sbiw	r24, 0x01	; 1
    13f2:	80 6f       	ori	r24, 0xF0	; 240
    13f4:	9f 6f       	ori	r25, 0xFF	; 255
    13f6:	01 96       	adiw	r24, 0x01	; 1
		}
	}
}

void write_command(uint8_t command){
	ext_oled_cmd[0] = command;
    13f8:	e0 91 2c 01 	lds	r30, 0x012C
    13fc:	f0 91 2d 01 	lds	r31, 0x012D
    1400:	80 83       	st	Z, r24
	else {
		position.col = column;
		oled_set_adressing_mode(PAGE_MODE);
		
		int numLow = column % 16;
		int numHigh = column / 16;
    1402:	ce 01       	movw	r24, r28
    1404:	dd 23       	and	r29, r29
    1406:	0c f4       	brge	.+2      	; 0x140a <oled_goto_column+0x3e>
    1408:	0f 96       	adiw	r24, 0x0f	; 15
    140a:	95 95       	asr	r25
    140c:	87 95       	ror	r24
    140e:	95 95       	asr	r25
    1410:	87 95       	ror	r24
    1412:	95 95       	asr	r25
    1414:	87 95       	ror	r24
    1416:	95 95       	asr	r25
    1418:	87 95       	ror	r24
		
		write_command(numLow);
		write_command(16 + numHigh);
    141a:	80 5f       	subi	r24, 0xF0	; 240
		}
	}
}

void write_command(uint8_t command){
	ext_oled_cmd[0] = command;
    141c:	e0 91 2c 01 	lds	r30, 0x012C
    1420:	f0 91 2d 01 	lds	r31, 0x012D
    1424:	80 83       	st	Z, r24
		int numLow = column % 16;
		int numHigh = column / 16;
		
		write_command(numLow);
		write_command(16 + numHigh);
		oled_set_adressing_mode(HORIZONTAL_MODE);
    1426:	80 e0       	ldi	r24, 0x00	; 0
    1428:	0e 94 a1 09 	call	0x1342	; 0x1342 <oled_set_adressing_mode>
	}
	
}
    142c:	df 91       	pop	r29
    142e:	cf 91       	pop	r28
    1430:	08 95       	ret

00001432 <oled_pos>:
		write_data(~0b00000000);
	}
	oled_goto_line(line);
}

void oled_pos(int row, int column){
    1432:	cf 93       	push	r28
    1434:	df 93       	push	r29
    1436:	eb 01       	movw	r28, r22
	oled_goto_line(row);
    1438:	0e 94 cd 09 	call	0x139a	; 0x139a <oled_goto_line>
	oled_goto_column(column);
    143c:	ce 01       	movw	r24, r28
    143e:	0e 94 e6 09 	call	0x13cc	; 0x13cc <oled_goto_column>
}
    1442:	df 91       	pop	r29
    1444:	cf 91       	pop	r28
    1446:	08 95       	ret

00001448 <oled_home>:
	}
	oled_home();
}

void oled_home(){
	oled_pos(0,0);
    1448:	60 e0       	ldi	r22, 0x00	; 0
    144a:	70 e0       	ldi	r23, 0x00	; 0
    144c:	80 e0       	ldi	r24, 0x00	; 0
    144e:	90 e0       	ldi	r25, 0x00	; 0
    1450:	0e 94 19 0a 	call	0x1432	; 0x1432 <oled_pos>
    1454:	08 95       	ret

00001456 <oled_clear_line>:
		write_command(16 + numHigh);
		oled_set_adressing_mode(HORIZONTAL_MODE);
	}
	
}
void oled_clear_line(int line){
    1456:	cf 93       	push	r28
    1458:	df 93       	push	r29
    145a:	ec 01       	movw	r28, r24
	oled_pos(line, 0);
    145c:	60 e0       	ldi	r22, 0x00	; 0
    145e:	70 e0       	ldi	r23, 0x00	; 0
    1460:	0e 94 19 0a 	call	0x1432	; 0x1432 <oled_pos>
    1464:	20 e8       	ldi	r18, 0x80	; 128
    1466:	30 e0       	ldi	r19, 0x00	; 0
void write_command(uint8_t command){
	ext_oled_cmd[0] = command;
}

void write_data(uint8_t data){
	ext_oled_data[0] = data;
    1468:	e0 91 2a 01 	lds	r30, 0x012A
    146c:	f0 91 2b 01 	lds	r31, 0x012B
    1470:	10 82       	st	Z, r1
    1472:	21 50       	subi	r18, 0x01	; 1
    1474:	31 09       	sbc	r19, r1
	
}
void oled_clear_line(int line){
	oled_pos(line, 0);
	
	for (int col = 0; col < 128; col++) {
    1476:	21 15       	cp	r18, r1
    1478:	31 05       	cpc	r19, r1
    147a:	b1 f7       	brne	.-20     	; 0x1468 <oled_clear_line+0x12>
		write_data(0b00000000);
	}
	oled_goto_line(line);
    147c:	ce 01       	movw	r24, r28
    147e:	0e 94 cd 09 	call	0x139a	; 0x139a <oled_goto_line>
}
    1482:	df 91       	pop	r29
    1484:	cf 91       	pop	r28
    1486:	08 95       	ret

00001488 <oled_reset>:
	write_command(0xaf); // display on
	oled_reset();
	
}

void oled_reset(){
    1488:	cf 93       	push	r28
    148a:	df 93       	push	r29
	
	for (int line = 0; line < 8; line++) {
    148c:	c0 e0       	ldi	r28, 0x00	; 0
    148e:	d0 e0       	ldi	r29, 0x00	; 0
		oled_clear_line(line);
    1490:	ce 01       	movw	r24, r28
    1492:	0e 94 2b 0a 	call	0x1456	; 0x1456 <oled_clear_line>
	
}

void oled_reset(){
	
	for (int line = 0; line < 8; line++) {
    1496:	21 96       	adiw	r28, 0x01	; 1
    1498:	c8 30       	cpi	r28, 0x08	; 8
    149a:	d1 05       	cpc	r29, r1
    149c:	c9 f7       	brne	.-14     	; 0x1490 <oled_reset+0x8>
		oled_clear_line(line);
	}
	oled_home();
    149e:	0e 94 24 0a 	call	0x1448	; 0x1448 <oled_home>
}
    14a2:	df 91       	pop	r29
    14a4:	cf 91       	pop	r28
    14a6:	08 95       	ret

000014a8 <oled_init>:
		}
	}
}

void write_command(uint8_t command){
	ext_oled_cmd[0] = command;
    14a8:	e0 91 2c 01 	lds	r30, 0x012C
    14ac:	f0 91 2d 01 	lds	r31, 0x012D
    14b0:	8e ea       	ldi	r24, 0xAE	; 174
    14b2:	80 83       	st	Z, r24
    14b4:	e0 91 2c 01 	lds	r30, 0x012C
    14b8:	f0 91 2d 01 	lds	r31, 0x012D
    14bc:	81 ea       	ldi	r24, 0xA1	; 161
    14be:	80 83       	st	Z, r24
    14c0:	e0 91 2c 01 	lds	r30, 0x012C
    14c4:	f0 91 2d 01 	lds	r31, 0x012D
    14c8:	8a ed       	ldi	r24, 0xDA	; 218
    14ca:	80 83       	st	Z, r24
    14cc:	e0 91 2c 01 	lds	r30, 0x012C
    14d0:	f0 91 2d 01 	lds	r31, 0x012D
    14d4:	82 e1       	ldi	r24, 0x12	; 18
    14d6:	80 83       	st	Z, r24
    14d8:	e0 91 2c 01 	lds	r30, 0x012C
    14dc:	f0 91 2d 01 	lds	r31, 0x012D
    14e0:	88 ec       	ldi	r24, 0xC8	; 200
    14e2:	80 83       	st	Z, r24
    14e4:	e0 91 2c 01 	lds	r30, 0x012C
    14e8:	f0 91 2d 01 	lds	r31, 0x012D
    14ec:	88 ea       	ldi	r24, 0xA8	; 168
    14ee:	80 83       	st	Z, r24
    14f0:	e0 91 2c 01 	lds	r30, 0x012C
    14f4:	f0 91 2d 01 	lds	r31, 0x012D
    14f8:	8f e3       	ldi	r24, 0x3F	; 63
    14fa:	80 83       	st	Z, r24
    14fc:	e0 91 2c 01 	lds	r30, 0x012C
    1500:	f0 91 2d 01 	lds	r31, 0x012D
    1504:	85 ed       	ldi	r24, 0xD5	; 213
    1506:	80 83       	st	Z, r24
    1508:	e0 91 2c 01 	lds	r30, 0x012C
    150c:	f0 91 2d 01 	lds	r31, 0x012D
    1510:	80 e8       	ldi	r24, 0x80	; 128
    1512:	80 83       	st	Z, r24
    1514:	e0 91 2c 01 	lds	r30, 0x012C
    1518:	f0 91 2d 01 	lds	r31, 0x012D
    151c:	81 e8       	ldi	r24, 0x81	; 129
    151e:	80 83       	st	Z, r24
    1520:	e0 91 2c 01 	lds	r30, 0x012C
    1524:	f0 91 2d 01 	lds	r31, 0x012D
    1528:	80 e5       	ldi	r24, 0x50	; 80
    152a:	80 83       	st	Z, r24
    152c:	e0 91 2c 01 	lds	r30, 0x012C
    1530:	f0 91 2d 01 	lds	r31, 0x012D
    1534:	89 ed       	ldi	r24, 0xD9	; 217
    1536:	80 83       	st	Z, r24
    1538:	e0 91 2c 01 	lds	r30, 0x012C
    153c:	f0 91 2d 01 	lds	r31, 0x012D
    1540:	81 e2       	ldi	r24, 0x21	; 33
    1542:	80 83       	st	Z, r24
	write_command(0x81); //contrast control
	write_command(0x50);
	write_command(0xd9); //set pre-charge period
	write_command(0x21);
	
	oled_set_adressing_mode(HORIZONTAL_MODE);
    1544:	80 e0       	ldi	r24, 0x00	; 0
    1546:	0e 94 a1 09 	call	0x1342	; 0x1342 <oled_set_adressing_mode>
		}
	}
}

void write_command(uint8_t command){
	ext_oled_cmd[0] = command;
    154a:	e0 91 2c 01 	lds	r30, 0x012C
    154e:	f0 91 2d 01 	lds	r31, 0x012D
    1552:	8b ed       	ldi	r24, 0xDB	; 219
    1554:	80 83       	st	Z, r24
    1556:	e0 91 2c 01 	lds	r30, 0x012C
    155a:	f0 91 2d 01 	lds	r31, 0x012D
    155e:	80 e3       	ldi	r24, 0x30	; 48
    1560:	80 83       	st	Z, r24
    1562:	e0 91 2c 01 	lds	r30, 0x012C
    1566:	f0 91 2d 01 	lds	r31, 0x012D
    156a:	8d ea       	ldi	r24, 0xAD	; 173
    156c:	80 83       	st	Z, r24
    156e:	e0 91 2c 01 	lds	r30, 0x012C
    1572:	f0 91 2d 01 	lds	r31, 0x012D
    1576:	10 82       	st	Z, r1
    1578:	e0 91 2c 01 	lds	r30, 0x012C
    157c:	f0 91 2d 01 	lds	r31, 0x012D
    1580:	84 ea       	ldi	r24, 0xA4	; 164
    1582:	80 83       	st	Z, r24
    1584:	e0 91 2c 01 	lds	r30, 0x012C
    1588:	f0 91 2d 01 	lds	r31, 0x012D
    158c:	86 ea       	ldi	r24, 0xA6	; 166
    158e:	80 83       	st	Z, r24
    1590:	e0 91 2c 01 	lds	r30, 0x012C
    1594:	f0 91 2d 01 	lds	r31, 0x012D
    1598:	8f ea       	ldi	r24, 0xAF	; 175
    159a:	80 83       	st	Z, r24
	write_command(0xad); //master configuration
	write_command(0x00);
	write_command(0xa4); //out follows RAM content
	write_command(0xa6); //set normal display
	write_command(0xaf); // display on
	oled_reset();
    159c:	0e 94 44 0a 	call	0x1488	; 0x1488 <oled_reset>
    15a0:	08 95       	ret

000015a2 <new_menu>:
void set_first_child(menu* mymenu, menu* first_child) {
	mymenu->first_child = first_child;
}


menu* new_menu(char* name, menu* parent) {
    15a2:	0f 93       	push	r16
    15a4:	1f 93       	push	r17
    15a6:	cf 93       	push	r28
    15a8:	df 93       	push	r29
    15aa:	8c 01       	movw	r16, r24
    15ac:	eb 01       	movw	r28, r22
	menu* nextmenu = malloc(sizeof(menu));
    15ae:	89 e0       	ldi	r24, 0x09	; 9
    15b0:	90 e0       	ldi	r25, 0x00	; 0
    15b2:	0e 94 39 0d 	call	0x1a72	; 0x1a72 <malloc>
    15b6:	fc 01       	movw	r30, r24
 	nextmenu->title = name;
    15b8:	11 83       	std	Z+1, r17	; 0x01
    15ba:	00 83       	st	Z, r16
	nextmenu->parent = parent;
    15bc:	d4 83       	std	Z+4, r29	; 0x04
    15be:	c3 83       	std	Z+3, r28	; 0x03
 	nextmenu->right_sibling = NULL;
    15c0:	10 86       	std	Z+8, r1	; 0x08
    15c2:	17 82       	std	Z+7, r1	; 0x07
	nextmenu->first_child = NULL;
    15c4:	16 82       	std	Z+6, r1	; 0x06
    15c6:	15 82       	std	Z+5, r1	; 0x05
	return nextmenu;
}
    15c8:	df 91       	pop	r29
    15ca:	cf 91       	pop	r28
    15cc:	1f 91       	pop	r17
    15ce:	0f 91       	pop	r16
    15d0:	08 95       	ret

000015d2 <size_of_menu>:

int size_of_menu(menu* mymenu) {
	
	int menu_size = 0;
	
	mymenu = mymenu->first_child;
    15d2:	dc 01       	movw	r26, r24
    15d4:	15 96       	adiw	r26, 0x05	; 5
    15d6:	ed 91       	ld	r30, X+
    15d8:	fc 91       	ld	r31, X
    15da:	16 97       	sbiw	r26, 0x06	; 6
	if (mymenu == NULL) {
    15dc:	30 97       	sbiw	r30, 0x00	; 0
    15de:	79 f0       	breq	.+30     	; 0x15fe <size_of_menu+0x2c>
		return menu_size;
	}
	menu_size ++;
	while (mymenu->right_sibling != NULL) {
    15e0:	07 80       	ldd	r0, Z+7	; 0x07
    15e2:	f0 85       	ldd	r31, Z+8	; 0x08
    15e4:	e0 2d       	mov	r30, r0
    15e6:	30 97       	sbiw	r30, 0x00	; 0
    15e8:	69 f0       	breq	.+26     	; 0x1604 <size_of_menu+0x32>
    15ea:	21 e0       	ldi	r18, 0x01	; 1
    15ec:	30 e0       	ldi	r19, 0x00	; 0
		mymenu = mymenu->right_sibling;
		menu_size++;
    15ee:	2f 5f       	subi	r18, 0xFF	; 255
    15f0:	3f 4f       	sbci	r19, 0xFF	; 255
	mymenu = mymenu->first_child;
	if (mymenu == NULL) {
		return menu_size;
	}
	menu_size ++;
	while (mymenu->right_sibling != NULL) {
    15f2:	07 80       	ldd	r0, Z+7	; 0x07
    15f4:	f0 85       	ldd	r31, Z+8	; 0x08
    15f6:	e0 2d       	mov	r30, r0
    15f8:	30 97       	sbiw	r30, 0x00	; 0
    15fa:	c9 f7       	brne	.-14     	; 0x15ee <size_of_menu+0x1c>
    15fc:	06 c0       	rjmp	.+12     	; 0x160a <size_of_menu+0x38>
	
	int menu_size = 0;
	
	mymenu = mymenu->first_child;
	if (mymenu == NULL) {
		return menu_size;
    15fe:	80 e0       	ldi	r24, 0x00	; 0
    1600:	90 e0       	ldi	r25, 0x00	; 0
    1602:	08 95       	ret
	}
	menu_size ++;
	while (mymenu->right_sibling != NULL) {
    1604:	81 e0       	ldi	r24, 0x01	; 1
    1606:	90 e0       	ldi	r25, 0x00	; 0
    1608:	08 95       	ret
		mymenu = mymenu->right_sibling;
		menu_size++;
    160a:	82 2f       	mov	r24, r18
    160c:	93 2f       	mov	r25, r19
	}
	return menu_size;
}
    160e:	08 95       	ret

00001610 <goto_menu>:
	return NONE;
}

void goto_menu() {
	int i = 0;
	menu* selected_menu = current_menu;
    1610:	e0 91 fa 03 	lds	r30, 0x03FA
    1614:	f0 91 fb 03 	lds	r31, 0x03FB
	if(current_menu->first_child != NULL){
    1618:	85 81       	ldd	r24, Z+5	; 0x05
    161a:	96 81       	ldd	r25, Z+6	; 0x06
    161c:	89 2b       	or	r24, r25
    161e:	b9 f0       	breq	.+46     	; 0x164e <goto_menu+0x3e>
		
		selected_menu = current_menu->first_child;
    1620:	05 80       	ldd	r0, Z+5	; 0x05
    1622:	f6 81       	ldd	r31, Z+6	; 0x06
    1624:	e0 2d       	mov	r30, r0
		for (i; i < current_line; i++)
    1626:	80 91 4a 01 	lds	r24, 0x014A
    162a:	90 91 4b 01 	lds	r25, 0x014B
    162e:	18 16       	cp	r1, r24
    1630:	19 06       	cpc	r1, r25
    1632:	6c f4       	brge	.+26     	; 0x164e <goto_menu+0x3e>
	oled_menu_print(current_menu);
	return NONE;
}

void goto_menu() {
	int i = 0;
    1634:	80 e0       	ldi	r24, 0x00	; 0
    1636:	90 e0       	ldi	r25, 0x00	; 0
	if(current_menu->first_child != NULL){
		
		selected_menu = current_menu->first_child;
		for (i; i < current_line; i++)
		{
			selected_menu = selected_menu->right_sibling;
    1638:	07 80       	ldd	r0, Z+7	; 0x07
    163a:	f0 85       	ldd	r31, Z+8	; 0x08
    163c:	e0 2d       	mov	r30, r0
	int i = 0;
	menu* selected_menu = current_menu;
	if(current_menu->first_child != NULL){
		
		selected_menu = current_menu->first_child;
		for (i; i < current_line; i++)
    163e:	01 96       	adiw	r24, 0x01	; 1
    1640:	20 91 4a 01 	lds	r18, 0x014A
    1644:	30 91 4b 01 	lds	r19, 0x014B
    1648:	82 17       	cp	r24, r18
    164a:	93 07       	cpc	r25, r19
    164c:	ac f3       	brlt	.-22     	; 0x1638 <goto_menu+0x28>
		{
			selected_menu = selected_menu->right_sibling;
		}
	}
	current_menu = selected_menu;
    164e:	f0 93 fb 03 	sts	0x03FB, r31
    1652:	e0 93 fa 03 	sts	0x03FA, r30
    1656:	08 95       	ret

00001658 <oled_menu_print>:
}
void oled_menu_print(menu* mymenu){
    1658:	0f 93       	push	r16
    165a:	1f 93       	push	r17
    165c:	cf 93       	push	r28
    165e:	df 93       	push	r29
    1660:	ec 01       	movw	r28, r24
	oled_reset(); 
    1662:	0e 94 44 0a 	call	0x1488	; 0x1488 <oled_reset>
	
	current_menu_size = size_of_menu(mymenu);
    1666:	ce 01       	movw	r24, r28
    1668:	0e 94 e9 0a 	call	0x15d2	; 0x15d2 <size_of_menu>
    166c:	90 93 fd 03 	sts	0x03FD, r25
    1670:	80 93 fc 03 	sts	0x03FC, r24
	mymenu = mymenu->first_child;
    1674:	0d 81       	ldd	r16, Y+5	; 0x05
    1676:	1e 81       	ldd	r17, Y+6	; 0x06
	for(int i = 0; i < current_menu_size; i++){
    1678:	80 91 fc 03 	lds	r24, 0x03FC
    167c:	90 91 fd 03 	lds	r25, 0x03FD
    1680:	18 16       	cp	r1, r24
    1682:	19 06       	cpc	r1, r25
    1684:	64 f5       	brge	.+88     	; 0x16de <oled_menu_print+0x86>
    1686:	c0 e0       	ldi	r28, 0x00	; 0
    1688:	d0 e0       	ldi	r29, 0x00	; 0
		oled_pos(i,0);
    168a:	60 e0       	ldi	r22, 0x00	; 0
    168c:	70 e0       	ldi	r23, 0x00	; 0
    168e:	ce 01       	movw	r24, r28
    1690:	0e 94 19 0a 	call	0x1432	; 0x1432 <oled_pos>
		if(current_line == i){
    1694:	80 91 4a 01 	lds	r24, 0x014A
    1698:	90 91 4b 01 	lds	r25, 0x014B
    169c:	8c 17       	cp	r24, r28
    169e:	9d 07       	cpc	r25, r29
    16a0:	51 f4       	brne	.+20     	; 0x16b6 <oled_menu_print+0x5e>
			oled_inv_printf(mymenu->title);
    16a2:	f8 01       	movw	r30, r16
    16a4:	81 81       	ldd	r24, Z+1	; 0x01
    16a6:	8f 93       	push	r24
    16a8:	80 81       	ld	r24, Z
    16aa:	8f 93       	push	r24
    16ac:	0e 94 bd 09 	call	0x137a	; 0x137a <oled_inv_printf>
    16b0:	0f 90       	pop	r0
    16b2:	0f 90       	pop	r0
    16b4:	09 c0       	rjmp	.+18     	; 0x16c8 <oled_menu_print+0x70>
		}
		else{
			oled_printf(mymenu->title);
    16b6:	f8 01       	movw	r30, r16
    16b8:	81 81       	ldd	r24, Z+1	; 0x01
    16ba:	8f 93       	push	r24
    16bc:	80 81       	ld	r24, Z
    16be:	8f 93       	push	r24
    16c0:	0e 94 ad 09 	call	0x135a	; 0x135a <oled_printf>
    16c4:	0f 90       	pop	r0
    16c6:	0f 90       	pop	r0
		}
		mymenu = mymenu->right_sibling;
    16c8:	f8 01       	movw	r30, r16
    16ca:	07 81       	ldd	r16, Z+7	; 0x07
    16cc:	10 85       	ldd	r17, Z+8	; 0x08
void oled_menu_print(menu* mymenu){
	oled_reset(); 
	
	current_menu_size = size_of_menu(mymenu);
	mymenu = mymenu->first_child;
	for(int i = 0; i < current_menu_size; i++){
    16ce:	21 96       	adiw	r28, 0x01	; 1
    16d0:	80 91 fc 03 	lds	r24, 0x03FC
    16d4:	90 91 fd 03 	lds	r25, 0x03FD
    16d8:	c8 17       	cp	r28, r24
    16da:	d9 07       	cpc	r29, r25
    16dc:	b4 f2       	brlt	.-84     	; 0x168a <oled_menu_print+0x32>
		}
		mymenu = mymenu->right_sibling;
	}
	mymenu = mymenu->parent;
	
    16de:	df 91       	pop	r29
    16e0:	cf 91       	pop	r28
    16e2:	1f 91       	pop	r17
    16e4:	0f 91       	pop	r16
    16e6:	08 95       	ret

000016e8 <oled_menu_init>:
		menu_size++;
	}
	return menu_size;
}

menu* oled_menu_init(void) {
    16e8:	2f 92       	push	r2
    16ea:	3f 92       	push	r3
    16ec:	4f 92       	push	r4
    16ee:	5f 92       	push	r5
    16f0:	6f 92       	push	r6
    16f2:	7f 92       	push	r7
    16f4:	8f 92       	push	r8
    16f6:	9f 92       	push	r9
    16f8:	af 92       	push	r10
    16fa:	bf 92       	push	r11
    16fc:	cf 92       	push	r12
    16fe:	df 92       	push	r13
    1700:	ef 92       	push	r14
    1702:	ff 92       	push	r15
    1704:	0f 93       	push	r16
    1706:	1f 93       	push	r17
    1708:	cf 93       	push	r28
    170a:	df 93       	push	r29
	print = 1;
    170c:	81 e0       	ldi	r24, 0x01	; 1
    170e:	90 e0       	ldi	r25, 0x00	; 0
    1710:	90 93 f9 03 	sts	0x03F9, r25
    1714:	80 93 f8 03 	sts	0x03F8, r24
	menu* main_menu = new_menu("Main Menu", NULL);
    1718:	60 e0       	ldi	r22, 0x00	; 0
    171a:	70 e0       	ldi	r23, 0x00	; 0
    171c:	81 e6       	ldi	r24, 0x61	; 97
    171e:	93 e0       	ldi	r25, 0x03	; 3
    1720:	0e 94 d1 0a 	call	0x15a2	; 0x15a2 <new_menu>
    1724:	ec 01       	movw	r28, r24
	menu* play_game = new_menu("Play Game", main_menu);
    1726:	bc 01       	movw	r22, r24
    1728:	8b e6       	ldi	r24, 0x6B	; 107
    172a:	93 e0       	ldi	r25, 0x03	; 3
    172c:	0e 94 d1 0a 	call	0x15a2	; 0x15a2 <new_menu>
    1730:	7c 01       	movw	r14, r24
	menu* highscores = new_menu("Highscores", main_menu);
    1732:	be 01       	movw	r22, r28
    1734:	85 e7       	ldi	r24, 0x75	; 117
    1736:	93 e0       	ldi	r25, 0x03	; 3
    1738:	0e 94 d1 0a 	call	0x15a2	; 0x15a2 <new_menu>
    173c:	4c 01       	movw	r8, r24
	menu* singelP = new_menu("Singel Player", play_game);
    173e:	b7 01       	movw	r22, r14
    1740:	80 e8       	ldi	r24, 0x80	; 128
    1742:	93 e0       	ldi	r25, 0x03	; 3
    1744:	0e 94 d1 0a 	call	0x15a2	; 0x15a2 <new_menu>
    1748:	5c 01       	movw	r10, r24
	menu* multiP = new_menu("Multi Player", play_game);
    174a:	b7 01       	movw	r22, r14
    174c:	8e e8       	ldi	r24, 0x8E	; 142
    174e:	93 e0       	ldi	r25, 0x03	; 3
    1750:	0e 94 d1 0a 	call	0x15a2	; 0x15a2 <new_menu>
    1754:	2c 01       	movw	r4, r24
	menu* difficulty = new_menu("Difficulty", main_menu);
    1756:	be 01       	movw	r22, r28
    1758:	8b e9       	ldi	r24, 0x9B	; 155
    175a:	93 e0       	ldi	r25, 0x03	; 3
    175c:	0e 94 d1 0a 	call	0x15a2	; 0x15a2 <new_menu>
    1760:	8c 01       	movw	r16, r24
	menu* d_easy = new_menu("Easy", difficulty);
    1762:	bc 01       	movw	r22, r24
    1764:	86 ea       	ldi	r24, 0xA6	; 166
    1766:	93 e0       	ldi	r25, 0x03	; 3
    1768:	0e 94 d1 0a 	call	0x15a2	; 0x15a2 <new_menu>
    176c:	6c 01       	movw	r12, r24
	menu* d_medium = new_menu("Medium", difficulty);
    176e:	b8 01       	movw	r22, r16
    1770:	8b ea       	ldi	r24, 0xAB	; 171
    1772:	93 e0       	ldi	r25, 0x03	; 3
    1774:	0e 94 d1 0a 	call	0x15a2	; 0x15a2 <new_menu>
    1778:	3c 01       	movw	r6, r24
	menu* d_hard = new_menu("Hard", difficulty);
    177a:	b8 01       	movw	r22, r16
    177c:	82 eb       	ldi	r24, 0xB2	; 178
    177e:	93 e0       	ldi	r25, 0x03	; 3
    1780:	0e 94 d1 0a 	call	0x15a2	; 0x15a2 <new_menu>
    1784:	1c 01       	movw	r2, r24
	
	
	current_menu = main_menu;
    1786:	d0 93 fb 03 	sts	0x03FB, r29
    178a:	c0 93 fa 03 	sts	0x03FA, r28
	current_menu_size = size_of_menu(current_menu);
    178e:	ce 01       	movw	r24, r28
    1790:	0e 94 e9 0a 	call	0x15d2	; 0x15d2 <size_of_menu>
    1794:	90 93 fd 03 	sts	0x03FD, r25
    1798:	80 93 fc 03 	sts	0x03FC, r24
	oled_menu_print(current_menu);
    179c:	ce 01       	movw	r24, r28
    179e:	0e 94 2c 0b 	call	0x1658	; 0x1658 <oled_menu_print>
	mymenu->right_sibling = right_sibling;
}


void set_first_child(menu* mymenu, menu* first_child) {
	mymenu->first_child = first_child;
    17a2:	fe 82       	std	Y+6, r15	; 0x06
    17a4:	ed 82       	std	Y+5, r14	; 0x05
volatile int current_menu_size;
volatile int print;


void set_right_sibling(menu* mymenu, menu* right_sibling) {
	mymenu->right_sibling = right_sibling;
    17a6:	f7 01       	movw	r30, r14
    17a8:	90 86       	std	Z+8, r9	; 0x08
    17aa:	87 82       	std	Z+7, r8	; 0x07
    17ac:	f4 01       	movw	r30, r8
    17ae:	10 87       	std	Z+8, r17	; 0x08
    17b0:	07 83       	std	Z+7, r16	; 0x07
}


void set_first_child(menu* mymenu, menu* first_child) {
	mymenu->first_child = first_child;
    17b2:	f7 01       	movw	r30, r14
    17b4:	b6 82       	std	Z+6, r11	; 0x06
    17b6:	a5 82       	std	Z+5, r10	; 0x05
volatile int current_menu_size;
volatile int print;


void set_right_sibling(menu* mymenu, menu* right_sibling) {
	mymenu->right_sibling = right_sibling;
    17b8:	f5 01       	movw	r30, r10
    17ba:	50 86       	std	Z+8, r5	; 0x08
    17bc:	47 82       	std	Z+7, r4	; 0x07
}


void set_first_child(menu* mymenu, menu* first_child) {
	mymenu->first_child = first_child;
    17be:	f8 01       	movw	r30, r16
    17c0:	d6 82       	std	Z+6, r13	; 0x06
    17c2:	c5 82       	std	Z+5, r12	; 0x05
volatile int current_menu_size;
volatile int print;


void set_right_sibling(menu* mymenu, menu* right_sibling) {
	mymenu->right_sibling = right_sibling;
    17c4:	f6 01       	movw	r30, r12
    17c6:	70 86       	std	Z+8, r7	; 0x08
    17c8:	67 82       	std	Z+7, r6	; 0x07
    17ca:	f3 01       	movw	r30, r6
    17cc:	30 86       	std	Z+8, r3	; 0x08
    17ce:	27 82       	std	Z+7, r2	; 0x07
	set_first_child(difficulty, d_easy);
	set_right_sibling(d_easy, d_medium);
	set_right_sibling(d_medium, d_hard);

	return current_menu;
}
    17d0:	80 91 fa 03 	lds	r24, 0x03FA
    17d4:	90 91 fb 03 	lds	r25, 0x03FB
    17d8:	df 91       	pop	r29
    17da:	cf 91       	pop	r28
    17dc:	1f 91       	pop	r17
    17de:	0f 91       	pop	r16
    17e0:	ff 90       	pop	r15
    17e2:	ef 90       	pop	r14
    17e4:	df 90       	pop	r13
    17e6:	cf 90       	pop	r12
    17e8:	bf 90       	pop	r11
    17ea:	af 90       	pop	r10
    17ec:	9f 90       	pop	r9
    17ee:	8f 90       	pop	r8
    17f0:	7f 90       	pop	r7
    17f2:	6f 90       	pop	r6
    17f4:	5f 90       	pop	r5
    17f6:	4f 90       	pop	r4
    17f8:	3f 90       	pop	r3
    17fa:	2f 90       	pop	r2
    17fc:	08 95       	ret

000017fe <oled_menu_select>:


menu_option oled_menu_select(){
    17fe:	1f 93       	push	r17
    1800:	cf 93       	push	r28
    1802:	df 93       	push	r29
    1804:	00 d0       	rcall	.+0      	; 0x1806 <oled_menu_select+0x8>
    1806:	00 d0       	rcall	.+0      	; 0x1808 <oled_menu_select+0xa>
    1808:	1f 92       	push	r1
    180a:	cd b7       	in	r28, 0x3d	; 61
    180c:	de b7       	in	r29, 0x3e	; 62
	
	JoystickDir direction = joystickPos().Dir;
    180e:	0e 94 09 06 	call	0xc12	; 0xc12 <joystickPos>
    1812:	29 83       	std	Y+1, r18	; 0x01
    1814:	3a 83       	std	Y+2, r19	; 0x02
    1816:	4b 83       	std	Y+3, r20	; 0x03
    1818:	5c 83       	std	Y+4, r21	; 0x04
    181a:	6d 83       	std	Y+5, r22	; 0x05
    181c:	16 2f       	mov	r17, r22
	current_menu_size = size_of_menu(current_menu);
    181e:	80 91 fa 03 	lds	r24, 0x03FA
    1822:	90 91 fb 03 	lds	r25, 0x03FB
    1826:	0e 94 e9 0a 	call	0x15d2	; 0x15d2 <size_of_menu>
    182a:	90 93 fd 03 	sts	0x03FD, r25
    182e:	80 93 fc 03 	sts	0x03FC, r24
	
	if(direction == UP){
    1832:	12 30       	cpi	r17, 0x02	; 2
    1834:	51 f4       	brne	.+20     	; 0x184a <oled_menu_select+0x4c>
		current_line--;
    1836:	80 91 4a 01 	lds	r24, 0x014A
    183a:	90 91 4b 01 	lds	r25, 0x014B
    183e:	01 97       	sbiw	r24, 0x01	; 1
    1840:	90 93 4b 01 	sts	0x014B, r25
    1844:	80 93 4a 01 	sts	0x014A, r24
    1848:	0b c0       	rjmp	.+22     	; 0x1860 <oled_menu_select+0x62>
	}
	if(direction == DOWN){
    184a:	13 30       	cpi	r17, 0x03	; 3
    184c:	49 f4       	brne	.+18     	; 0x1860 <oled_menu_select+0x62>
		current_line++;
    184e:	80 91 4a 01 	lds	r24, 0x014A
    1852:	90 91 4b 01 	lds	r25, 0x014B
    1856:	01 96       	adiw	r24, 0x01	; 1
    1858:	90 93 4b 01 	sts	0x014B, r25
    185c:	80 93 4a 01 	sts	0x014A, r24
	}
	if(current_line > current_menu_size-1){
    1860:	20 91 fc 03 	lds	r18, 0x03FC
    1864:	30 91 fd 03 	lds	r19, 0x03FD
    1868:	80 91 4a 01 	lds	r24, 0x014A
    186c:	90 91 4b 01 	lds	r25, 0x014B
    1870:	21 50       	subi	r18, 0x01	; 1
    1872:	31 09       	sbc	r19, r1
    1874:	28 17       	cp	r18, r24
    1876:	39 07       	cpc	r19, r25
    1878:	4c f4       	brge	.+18     	; 0x188c <oled_menu_select+0x8e>
		current_line = current_menu_size-1;
    187a:	80 91 fc 03 	lds	r24, 0x03FC
    187e:	90 91 fd 03 	lds	r25, 0x03FD
    1882:	01 97       	sbiw	r24, 0x01	; 1
    1884:	90 93 4b 01 	sts	0x014B, r25
    1888:	80 93 4a 01 	sts	0x014A, r24
	}
	if(current_line < 0){
    188c:	80 91 4a 01 	lds	r24, 0x014A
    1890:	90 91 4b 01 	lds	r25, 0x014B
    1894:	99 23       	and	r25, r25
    1896:	24 f4       	brge	.+8      	; 0x18a0 <oled_menu_select+0xa2>
		current_line = 0;
    1898:	10 92 4b 01 	sts	0x014B, r1
    189c:	10 92 4a 01 	sts	0x014A, r1
	}
	if (direction == RIGHT) {
    18a0:	11 30       	cpi	r17, 0x01	; 1
    18a2:	11 f5       	brne	.+68     	; 0x18e8 <oled_menu_select+0xea>
		goto_menu();
    18a4:	0e 94 08 0b 	call	0x1610	; 0x1610 <goto_menu>
		if (current_menu->title == "Singel Player"){
    18a8:	e0 91 fa 03 	lds	r30, 0x03FA
    18ac:	f0 91 fb 03 	lds	r31, 0x03FB
    18b0:	80 81       	ld	r24, Z
    18b2:	91 81       	ldd	r25, Z+1	; 0x01
    18b4:	80 58       	subi	r24, 0x80	; 128
    18b6:	93 40       	sbci	r25, 0x03	; 3
    18b8:	79 f1       	breq	.+94     	; 0x1918 <oled_menu_select+0x11a>
			return SinglePlayer;
		}
		else if (current_menu->title == "Highscores"){
    18ba:	80 81       	ld	r24, Z
    18bc:	91 81       	ldd	r25, Z+1	; 0x01
    18be:	85 57       	subi	r24, 0x75	; 117
    18c0:	93 40       	sbci	r25, 0x03	; 3
    18c2:	61 f1       	breq	.+88     	; 0x191c <oled_menu_select+0x11e>
			return Highscore;
		}
		else if (current_menu->title == "Multi Player"){
    18c4:	80 81       	ld	r24, Z
    18c6:	91 81       	ldd	r25, Z+1	; 0x01
    18c8:	8e 58       	subi	r24, 0x8E	; 142
    18ca:	93 40       	sbci	r25, 0x03	; 3
    18cc:	49 f1       	breq	.+82     	; 0x1920 <oled_menu_select+0x122>
			return Multiplayer;
		}
		else if (current_menu->title == "Easy"){
    18ce:	80 81       	ld	r24, Z
    18d0:	91 81       	ldd	r25, Z+1	; 0x01
    18d2:	86 5a       	subi	r24, 0xA6	; 166
    18d4:	93 40       	sbci	r25, 0x03	; 3
    18d6:	c1 f0       	breq	.+48     	; 0x1908 <oled_menu_select+0x10a>
			//current_menu = current_menu->parent;
			//current_menu = current_menu->parent;
		}
		else if (current_menu->title == "Medium"){
    18d8:	80 81       	ld	r24, Z
    18da:	91 81       	ldd	r25, Z+1	; 0x01
    18dc:	8b 5a       	subi	r24, 0xAB	; 171
    18de:	93 40       	sbci	r25, 0x03	; 3
    18e0:	99 f0       	breq	.+38     	; 0x1908 <oled_menu_select+0x10a>
			//current_menu = current_menu->parent;
			//current_menu = current_menu->parent;
		}
		else if (current_menu->title == "Hard"){
    18e2:	80 81       	ld	r24, Z
    18e4:	91 81       	ldd	r25, Z+1	; 0x01
    18e6:	10 c0       	rjmp	.+32     	; 0x1908 <oled_menu_select+0x10a>
			//current_menu = current_menu->parent;
			//current_menu = current_menu->parent;
		}
	}
	
	if (direction == LEFT) {
    18e8:	11 11       	cpse	r17, r1
    18ea:	0e c0       	rjmp	.+28     	; 0x1908 <oled_menu_select+0x10a>
		if(current_menu->parent != NULL){
    18ec:	e0 91 fa 03 	lds	r30, 0x03FA
    18f0:	f0 91 fb 03 	lds	r31, 0x03FB
    18f4:	83 81       	ldd	r24, Z+3	; 0x03
    18f6:	94 81       	ldd	r25, Z+4	; 0x04
    18f8:	89 2b       	or	r24, r25
    18fa:	31 f0       	breq	.+12     	; 0x1908 <oled_menu_select+0x10a>
		current_menu = current_menu->parent;
    18fc:	83 81       	ldd	r24, Z+3	; 0x03
    18fe:	94 81       	ldd	r25, Z+4	; 0x04
    1900:	90 93 fb 03 	sts	0x03FB, r25
    1904:	80 93 fa 03 	sts	0x03FA, r24
		}
	}
	oled_menu_print(current_menu);
    1908:	80 91 fa 03 	lds	r24, 0x03FA
    190c:	90 91 fb 03 	lds	r25, 0x03FB
    1910:	0e 94 2c 0b 	call	0x1658	; 0x1658 <oled_menu_print>
	return NONE;
    1914:	80 e0       	ldi	r24, 0x00	; 0
    1916:	05 c0       	rjmp	.+10     	; 0x1922 <oled_menu_select+0x124>
		current_line = 0;
	}
	if (direction == RIGHT) {
		goto_menu();
		if (current_menu->title == "Singel Player"){
			return SinglePlayer;
    1918:	81 e0       	ldi	r24, 0x01	; 1
    191a:	03 c0       	rjmp	.+6      	; 0x1922 <oled_menu_select+0x124>
		}
		else if (current_menu->title == "Highscores"){
			return Highscore;
    191c:	83 e0       	ldi	r24, 0x03	; 3
    191e:	01 c0       	rjmp	.+2      	; 0x1922 <oled_menu_select+0x124>
		}
		else if (current_menu->title == "Multi Player"){
			return Multiplayer;
    1920:	82 e0       	ldi	r24, 0x02	; 2
		current_menu = current_menu->parent;
		}
	}
	oled_menu_print(current_menu);
	return NONE;
}
    1922:	0f 90       	pop	r0
    1924:	0f 90       	pop	r0
    1926:	0f 90       	pop	r0
    1928:	0f 90       	pop	r0
    192a:	0f 90       	pop	r0
    192c:	df 91       	pop	r29
    192e:	cf 91       	pop	r28
    1930:	1f 91       	pop	r17
    1932:	08 95       	ret

00001934 <slider_position>:
 *  Author: juliessk
 */ 
#include "slider.h"


slider_str slider_position(void){
    1934:	cf 93       	push	r28
	slider_str sliderposition;
	ADC_start_read(CHANNEL3);
    1936:	82 e0       	ldi	r24, 0x02	; 2
    1938:	0e 94 fe 01 	call	0x3fc	; 0x3fc <ADC_start_read>
    193c:	81 ee       	ldi	r24, 0xE1	; 225
    193e:	94 e0       	ldi	r25, 0x04	; 4
    1940:	01 97       	sbiw	r24, 0x01	; 1
    1942:	f1 f7       	brne	.-4      	; 0x1940 <slider_position+0xc>
    1944:	00 c0       	rjmp	.+0      	; 0x1946 <slider_position+0x12>
    1946:	00 00       	nop
	_delay_ms(5);
	sliderposition.L = get_ADC_data();
    1948:	0e 94 f8 01 	call	0x3f0	; 0x3f0 <get_ADC_data>
    194c:	c8 2f       	mov	r28, r24
	ADC_start_read(CHANNEL4);
    194e:	83 e0       	ldi	r24, 0x03	; 3
    1950:	0e 94 fe 01 	call	0x3fc	; 0x3fc <ADC_start_read>
    1954:	81 ee       	ldi	r24, 0xE1	; 225
    1956:	94 e0       	ldi	r25, 0x04	; 4
    1958:	01 97       	sbiw	r24, 0x01	; 1
    195a:	f1 f7       	brne	.-4      	; 0x1958 <slider_position+0x24>
    195c:	00 c0       	rjmp	.+0      	; 0x195e <slider_position+0x2a>
    195e:	00 00       	nop
	_delay_ms(5);
	sliderposition.R =  get_ADC_data();
    1960:	0e 94 f8 01 	call	0x3f0	; 0x3f0 <get_ADC_data>
    1964:	98 2f       	mov	r25, r24
	
	return sliderposition;
}
    1966:	8c 2f       	mov	r24, r28
    1968:	cf 91       	pop	r28
    196a:	08 95       	ret

0000196c <slider_right_button>:

int slider_right_button(void){
	if((PINB & 0b00000010) != 0){ //PB1
    196c:	86 b3       	in	r24, 0x16	; 22
		return 1;
	}
	return 0;
}
    196e:	86 95       	lsr	r24
    1970:	81 70       	andi	r24, 0x01	; 1
    1972:	90 e0       	ldi	r25, 0x00	; 0
    1974:	08 95       	ret

00001976 <slider_left_button>:

int slider_left_button(void){
	if((PINB & 0b00000100) != 0){ //PB2
    1976:	86 b3       	in	r24, 0x16	; 22
		return 1;
	}
	return 0;
}
    1978:	82 fb       	bst	r24, 2
    197a:	88 27       	eor	r24, r24
    197c:	80 f9       	bld	r24, 0
    197e:	90 e0       	ldi	r25, 0x00	; 0
    1980:	08 95       	ret

00001982 <SPI_init>:
#include "bit_macros.h"
#include <avr/delay.h>
void SPI_init(){
	
	// Set SS, MOSI and SCK output
	DDRB = (1<<PB4)|(1<<PB5)|(1<<PB7);
    1982:	80 eb       	ldi	r24, 0xB0	; 176
    1984:	87 bb       	out	0x17, r24	; 23
	// Enable SPI, Master, set clock rate fck/16
	SPCR = (1<<SPE)|(1<<MSTR)|(1<<SPR0);
    1986:	81 e5       	ldi	r24, 0x51	; 81
    1988:	8d b9       	out	0x0d, r24	; 13
	
	/* Set SS-pin high */
	set_bit(PORTB, PB4);
    198a:	c4 9a       	sbi	0x18, 4	; 24
    198c:	08 95       	ret

0000198e <SPI_write>:

void SPI_write(char cData) {
	
	
	/* Start transmission */
	SPDR = cData;
    198e:	8f b9       	out	0x0f, r24	; 15
	
	/* Wait for transmission complete */
	loop_until_bit_is_set(SPSR, SPIF);
    1990:	77 9b       	sbis	0x0e, 7	; 14
    1992:	fe cf       	rjmp	.-4      	; 0x1990 <SPI_write+0x2>
	
}
    1994:	08 95       	ret

00001996 <SPI_read>:

char SPI_read() {
	
	/* Start shifting registers by putting a char in the register */
	SPDR = 0x00;
    1996:	1f b8       	out	0x0f, r1	; 15
	//_delay_ms(10);
	/* Wait for receive complete */ 
	loop_until_bit_is_set(SPSR,SPIF);
    1998:	77 9b       	sbis	0x0e, 7	; 14
    199a:	fe cf       	rjmp	.-4      	; 0x1998 <SPI_read+0x2>
	
	return SPDR;
    199c:	8f b1       	in	r24, 0x0f	; 15
}
    199e:	08 95       	ret

000019a0 <__divmodhi4>:
    19a0:	97 fb       	bst	r25, 7
    19a2:	07 2e       	mov	r0, r23
    19a4:	16 f4       	brtc	.+4      	; 0x19aa <__divmodhi4+0xa>
    19a6:	00 94       	com	r0
    19a8:	07 d0       	rcall	.+14     	; 0x19b8 <__divmodhi4_neg1>
    19aa:	77 fd       	sbrc	r23, 7
    19ac:	09 d0       	rcall	.+18     	; 0x19c0 <__divmodhi4_neg2>
    19ae:	0e 94 03 0d 	call	0x1a06	; 0x1a06 <__udivmodhi4>
    19b2:	07 fc       	sbrc	r0, 7
    19b4:	05 d0       	rcall	.+10     	; 0x19c0 <__divmodhi4_neg2>
    19b6:	3e f4       	brtc	.+14     	; 0x19c6 <__divmodhi4_exit>

000019b8 <__divmodhi4_neg1>:
    19b8:	90 95       	com	r25
    19ba:	81 95       	neg	r24
    19bc:	9f 4f       	sbci	r25, 0xFF	; 255
    19be:	08 95       	ret

000019c0 <__divmodhi4_neg2>:
    19c0:	70 95       	com	r23
    19c2:	61 95       	neg	r22
    19c4:	7f 4f       	sbci	r23, 0xFF	; 255

000019c6 <__divmodhi4_exit>:
    19c6:	08 95       	ret

000019c8 <__divmodsi4>:
    19c8:	05 2e       	mov	r0, r21
    19ca:	97 fb       	bst	r25, 7
    19cc:	1e f4       	brtc	.+6      	; 0x19d4 <__divmodsi4+0xc>
    19ce:	00 94       	com	r0
    19d0:	0e 94 fb 0c 	call	0x19f6	; 0x19f6 <__negsi2>
    19d4:	57 fd       	sbrc	r21, 7
    19d6:	07 d0       	rcall	.+14     	; 0x19e6 <__divmodsi4_neg2>
    19d8:	0e 94 17 0d 	call	0x1a2e	; 0x1a2e <__udivmodsi4>
    19dc:	07 fc       	sbrc	r0, 7
    19de:	03 d0       	rcall	.+6      	; 0x19e6 <__divmodsi4_neg2>
    19e0:	4e f4       	brtc	.+18     	; 0x19f4 <__divmodsi4_exit>
    19e2:	0c 94 fb 0c 	jmp	0x19f6	; 0x19f6 <__negsi2>

000019e6 <__divmodsi4_neg2>:
    19e6:	50 95       	com	r21
    19e8:	40 95       	com	r20
    19ea:	30 95       	com	r19
    19ec:	21 95       	neg	r18
    19ee:	3f 4f       	sbci	r19, 0xFF	; 255
    19f0:	4f 4f       	sbci	r20, 0xFF	; 255
    19f2:	5f 4f       	sbci	r21, 0xFF	; 255

000019f4 <__divmodsi4_exit>:
    19f4:	08 95       	ret

000019f6 <__negsi2>:
    19f6:	90 95       	com	r25
    19f8:	80 95       	com	r24
    19fa:	70 95       	com	r23
    19fc:	61 95       	neg	r22
    19fe:	7f 4f       	sbci	r23, 0xFF	; 255
    1a00:	8f 4f       	sbci	r24, 0xFF	; 255
    1a02:	9f 4f       	sbci	r25, 0xFF	; 255
    1a04:	08 95       	ret

00001a06 <__udivmodhi4>:
    1a06:	aa 1b       	sub	r26, r26
    1a08:	bb 1b       	sub	r27, r27
    1a0a:	51 e1       	ldi	r21, 0x11	; 17
    1a0c:	07 c0       	rjmp	.+14     	; 0x1a1c <__udivmodhi4_ep>

00001a0e <__udivmodhi4_loop>:
    1a0e:	aa 1f       	adc	r26, r26
    1a10:	bb 1f       	adc	r27, r27
    1a12:	a6 17       	cp	r26, r22
    1a14:	b7 07       	cpc	r27, r23
    1a16:	10 f0       	brcs	.+4      	; 0x1a1c <__udivmodhi4_ep>
    1a18:	a6 1b       	sub	r26, r22
    1a1a:	b7 0b       	sbc	r27, r23

00001a1c <__udivmodhi4_ep>:
    1a1c:	88 1f       	adc	r24, r24
    1a1e:	99 1f       	adc	r25, r25
    1a20:	5a 95       	dec	r21
    1a22:	a9 f7       	brne	.-22     	; 0x1a0e <__udivmodhi4_loop>
    1a24:	80 95       	com	r24
    1a26:	90 95       	com	r25
    1a28:	bc 01       	movw	r22, r24
    1a2a:	cd 01       	movw	r24, r26
    1a2c:	08 95       	ret

00001a2e <__udivmodsi4>:
    1a2e:	a1 e2       	ldi	r26, 0x21	; 33
    1a30:	1a 2e       	mov	r1, r26
    1a32:	aa 1b       	sub	r26, r26
    1a34:	bb 1b       	sub	r27, r27
    1a36:	fd 01       	movw	r30, r26
    1a38:	0d c0       	rjmp	.+26     	; 0x1a54 <__udivmodsi4_ep>

00001a3a <__udivmodsi4_loop>:
    1a3a:	aa 1f       	adc	r26, r26
    1a3c:	bb 1f       	adc	r27, r27
    1a3e:	ee 1f       	adc	r30, r30
    1a40:	ff 1f       	adc	r31, r31
    1a42:	a2 17       	cp	r26, r18
    1a44:	b3 07       	cpc	r27, r19
    1a46:	e4 07       	cpc	r30, r20
    1a48:	f5 07       	cpc	r31, r21
    1a4a:	20 f0       	brcs	.+8      	; 0x1a54 <__udivmodsi4_ep>
    1a4c:	a2 1b       	sub	r26, r18
    1a4e:	b3 0b       	sbc	r27, r19
    1a50:	e4 0b       	sbc	r30, r20
    1a52:	f5 0b       	sbc	r31, r21

00001a54 <__udivmodsi4_ep>:
    1a54:	66 1f       	adc	r22, r22
    1a56:	77 1f       	adc	r23, r23
    1a58:	88 1f       	adc	r24, r24
    1a5a:	99 1f       	adc	r25, r25
    1a5c:	1a 94       	dec	r1
    1a5e:	69 f7       	brne	.-38     	; 0x1a3a <__udivmodsi4_loop>
    1a60:	60 95       	com	r22
    1a62:	70 95       	com	r23
    1a64:	80 95       	com	r24
    1a66:	90 95       	com	r25
    1a68:	9b 01       	movw	r18, r22
    1a6a:	ac 01       	movw	r20, r24
    1a6c:	bd 01       	movw	r22, r26
    1a6e:	cf 01       	movw	r24, r30
    1a70:	08 95       	ret

00001a72 <malloc>:
    1a72:	cf 93       	push	r28
    1a74:	df 93       	push	r29
    1a76:	82 30       	cpi	r24, 0x02	; 2
    1a78:	91 05       	cpc	r25, r1
    1a7a:	10 f4       	brcc	.+4      	; 0x1a80 <malloc+0xe>
    1a7c:	82 e0       	ldi	r24, 0x02	; 2
    1a7e:	90 e0       	ldi	r25, 0x00	; 0
    1a80:	e0 91 00 04 	lds	r30, 0x0400
    1a84:	f0 91 01 04 	lds	r31, 0x0401
    1a88:	20 e0       	ldi	r18, 0x00	; 0
    1a8a:	30 e0       	ldi	r19, 0x00	; 0
    1a8c:	a0 e0       	ldi	r26, 0x00	; 0
    1a8e:	b0 e0       	ldi	r27, 0x00	; 0
    1a90:	30 97       	sbiw	r30, 0x00	; 0
    1a92:	39 f1       	breq	.+78     	; 0x1ae2 <malloc+0x70>
    1a94:	40 81       	ld	r20, Z
    1a96:	51 81       	ldd	r21, Z+1	; 0x01
    1a98:	48 17       	cp	r20, r24
    1a9a:	59 07       	cpc	r21, r25
    1a9c:	b8 f0       	brcs	.+46     	; 0x1acc <malloc+0x5a>
    1a9e:	48 17       	cp	r20, r24
    1aa0:	59 07       	cpc	r21, r25
    1aa2:	71 f4       	brne	.+28     	; 0x1ac0 <malloc+0x4e>
    1aa4:	82 81       	ldd	r24, Z+2	; 0x02
    1aa6:	93 81       	ldd	r25, Z+3	; 0x03
    1aa8:	10 97       	sbiw	r26, 0x00	; 0
    1aaa:	29 f0       	breq	.+10     	; 0x1ab6 <malloc+0x44>
    1aac:	13 96       	adiw	r26, 0x03	; 3
    1aae:	9c 93       	st	X, r25
    1ab0:	8e 93       	st	-X, r24
    1ab2:	12 97       	sbiw	r26, 0x02	; 2
    1ab4:	2c c0       	rjmp	.+88     	; 0x1b0e <malloc+0x9c>
    1ab6:	90 93 01 04 	sts	0x0401, r25
    1aba:	80 93 00 04 	sts	0x0400, r24
    1abe:	27 c0       	rjmp	.+78     	; 0x1b0e <malloc+0x9c>
    1ac0:	21 15       	cp	r18, r1
    1ac2:	31 05       	cpc	r19, r1
    1ac4:	31 f0       	breq	.+12     	; 0x1ad2 <malloc+0x60>
    1ac6:	42 17       	cp	r20, r18
    1ac8:	53 07       	cpc	r21, r19
    1aca:	18 f0       	brcs	.+6      	; 0x1ad2 <malloc+0x60>
    1acc:	a9 01       	movw	r20, r18
    1ace:	db 01       	movw	r26, r22
    1ad0:	01 c0       	rjmp	.+2      	; 0x1ad4 <malloc+0x62>
    1ad2:	ef 01       	movw	r28, r30
    1ad4:	9a 01       	movw	r18, r20
    1ad6:	bd 01       	movw	r22, r26
    1ad8:	df 01       	movw	r26, r30
    1ada:	02 80       	ldd	r0, Z+2	; 0x02
    1adc:	f3 81       	ldd	r31, Z+3	; 0x03
    1ade:	e0 2d       	mov	r30, r0
    1ae0:	d7 cf       	rjmp	.-82     	; 0x1a90 <malloc+0x1e>
    1ae2:	21 15       	cp	r18, r1
    1ae4:	31 05       	cpc	r19, r1
    1ae6:	f9 f0       	breq	.+62     	; 0x1b26 <malloc+0xb4>
    1ae8:	28 1b       	sub	r18, r24
    1aea:	39 0b       	sbc	r19, r25
    1aec:	24 30       	cpi	r18, 0x04	; 4
    1aee:	31 05       	cpc	r19, r1
    1af0:	80 f4       	brcc	.+32     	; 0x1b12 <malloc+0xa0>
    1af2:	8a 81       	ldd	r24, Y+2	; 0x02
    1af4:	9b 81       	ldd	r25, Y+3	; 0x03
    1af6:	61 15       	cp	r22, r1
    1af8:	71 05       	cpc	r23, r1
    1afa:	21 f0       	breq	.+8      	; 0x1b04 <malloc+0x92>
    1afc:	fb 01       	movw	r30, r22
    1afe:	93 83       	std	Z+3, r25	; 0x03
    1b00:	82 83       	std	Z+2, r24	; 0x02
    1b02:	04 c0       	rjmp	.+8      	; 0x1b0c <malloc+0x9a>
    1b04:	90 93 01 04 	sts	0x0401, r25
    1b08:	80 93 00 04 	sts	0x0400, r24
    1b0c:	fe 01       	movw	r30, r28
    1b0e:	32 96       	adiw	r30, 0x02	; 2
    1b10:	44 c0       	rjmp	.+136    	; 0x1b9a <malloc+0x128>
    1b12:	fe 01       	movw	r30, r28
    1b14:	e2 0f       	add	r30, r18
    1b16:	f3 1f       	adc	r31, r19
    1b18:	81 93       	st	Z+, r24
    1b1a:	91 93       	st	Z+, r25
    1b1c:	22 50       	subi	r18, 0x02	; 2
    1b1e:	31 09       	sbc	r19, r1
    1b20:	39 83       	std	Y+1, r19	; 0x01
    1b22:	28 83       	st	Y, r18
    1b24:	3a c0       	rjmp	.+116    	; 0x1b9a <malloc+0x128>
    1b26:	20 91 fe 03 	lds	r18, 0x03FE
    1b2a:	30 91 ff 03 	lds	r19, 0x03FF
    1b2e:	23 2b       	or	r18, r19
    1b30:	41 f4       	brne	.+16     	; 0x1b42 <malloc+0xd0>
    1b32:	20 91 02 01 	lds	r18, 0x0102
    1b36:	30 91 03 01 	lds	r19, 0x0103
    1b3a:	30 93 ff 03 	sts	0x03FF, r19
    1b3e:	20 93 fe 03 	sts	0x03FE, r18
    1b42:	20 91 00 01 	lds	r18, 0x0100
    1b46:	30 91 01 01 	lds	r19, 0x0101
    1b4a:	21 15       	cp	r18, r1
    1b4c:	31 05       	cpc	r19, r1
    1b4e:	41 f4       	brne	.+16     	; 0x1b60 <malloc+0xee>
    1b50:	2d b7       	in	r18, 0x3d	; 61
    1b52:	3e b7       	in	r19, 0x3e	; 62
    1b54:	40 91 04 01 	lds	r20, 0x0104
    1b58:	50 91 05 01 	lds	r21, 0x0105
    1b5c:	24 1b       	sub	r18, r20
    1b5e:	35 0b       	sbc	r19, r21
    1b60:	e0 91 fe 03 	lds	r30, 0x03FE
    1b64:	f0 91 ff 03 	lds	r31, 0x03FF
    1b68:	e2 17       	cp	r30, r18
    1b6a:	f3 07       	cpc	r31, r19
    1b6c:	a0 f4       	brcc	.+40     	; 0x1b96 <malloc+0x124>
    1b6e:	2e 1b       	sub	r18, r30
    1b70:	3f 0b       	sbc	r19, r31
    1b72:	28 17       	cp	r18, r24
    1b74:	39 07       	cpc	r19, r25
    1b76:	78 f0       	brcs	.+30     	; 0x1b96 <malloc+0x124>
    1b78:	ac 01       	movw	r20, r24
    1b7a:	4e 5f       	subi	r20, 0xFE	; 254
    1b7c:	5f 4f       	sbci	r21, 0xFF	; 255
    1b7e:	24 17       	cp	r18, r20
    1b80:	35 07       	cpc	r19, r21
    1b82:	48 f0       	brcs	.+18     	; 0x1b96 <malloc+0x124>
    1b84:	4e 0f       	add	r20, r30
    1b86:	5f 1f       	adc	r21, r31
    1b88:	50 93 ff 03 	sts	0x03FF, r21
    1b8c:	40 93 fe 03 	sts	0x03FE, r20
    1b90:	81 93       	st	Z+, r24
    1b92:	91 93       	st	Z+, r25
    1b94:	02 c0       	rjmp	.+4      	; 0x1b9a <malloc+0x128>
    1b96:	e0 e0       	ldi	r30, 0x00	; 0
    1b98:	f0 e0       	ldi	r31, 0x00	; 0
    1b9a:	cf 01       	movw	r24, r30
    1b9c:	df 91       	pop	r29
    1b9e:	cf 91       	pop	r28
    1ba0:	08 95       	ret

00001ba2 <free>:
    1ba2:	cf 93       	push	r28
    1ba4:	df 93       	push	r29
    1ba6:	00 97       	sbiw	r24, 0x00	; 0
    1ba8:	09 f4       	brne	.+2      	; 0x1bac <free+0xa>
    1baa:	87 c0       	rjmp	.+270    	; 0x1cba <free+0x118>
    1bac:	fc 01       	movw	r30, r24
    1bae:	32 97       	sbiw	r30, 0x02	; 2
    1bb0:	13 82       	std	Z+3, r1	; 0x03
    1bb2:	12 82       	std	Z+2, r1	; 0x02
    1bb4:	c0 91 00 04 	lds	r28, 0x0400
    1bb8:	d0 91 01 04 	lds	r29, 0x0401
    1bbc:	20 97       	sbiw	r28, 0x00	; 0
    1bbe:	81 f4       	brne	.+32     	; 0x1be0 <free+0x3e>
    1bc0:	20 81       	ld	r18, Z
    1bc2:	31 81       	ldd	r19, Z+1	; 0x01
    1bc4:	28 0f       	add	r18, r24
    1bc6:	39 1f       	adc	r19, r25
    1bc8:	80 91 fe 03 	lds	r24, 0x03FE
    1bcc:	90 91 ff 03 	lds	r25, 0x03FF
    1bd0:	82 17       	cp	r24, r18
    1bd2:	93 07       	cpc	r25, r19
    1bd4:	79 f5       	brne	.+94     	; 0x1c34 <free+0x92>
    1bd6:	f0 93 ff 03 	sts	0x03FF, r31
    1bda:	e0 93 fe 03 	sts	0x03FE, r30
    1bde:	6d c0       	rjmp	.+218    	; 0x1cba <free+0x118>
    1be0:	de 01       	movw	r26, r28
    1be2:	20 e0       	ldi	r18, 0x00	; 0
    1be4:	30 e0       	ldi	r19, 0x00	; 0
    1be6:	ae 17       	cp	r26, r30
    1be8:	bf 07       	cpc	r27, r31
    1bea:	50 f4       	brcc	.+20     	; 0x1c00 <free+0x5e>
    1bec:	12 96       	adiw	r26, 0x02	; 2
    1bee:	4d 91       	ld	r20, X+
    1bf0:	5c 91       	ld	r21, X
    1bf2:	13 97       	sbiw	r26, 0x03	; 3
    1bf4:	9d 01       	movw	r18, r26
    1bf6:	41 15       	cp	r20, r1
    1bf8:	51 05       	cpc	r21, r1
    1bfa:	09 f1       	breq	.+66     	; 0x1c3e <free+0x9c>
    1bfc:	da 01       	movw	r26, r20
    1bfe:	f3 cf       	rjmp	.-26     	; 0x1be6 <free+0x44>
    1c00:	b3 83       	std	Z+3, r27	; 0x03
    1c02:	a2 83       	std	Z+2, r26	; 0x02
    1c04:	40 81       	ld	r20, Z
    1c06:	51 81       	ldd	r21, Z+1	; 0x01
    1c08:	84 0f       	add	r24, r20
    1c0a:	95 1f       	adc	r25, r21
    1c0c:	8a 17       	cp	r24, r26
    1c0e:	9b 07       	cpc	r25, r27
    1c10:	71 f4       	brne	.+28     	; 0x1c2e <free+0x8c>
    1c12:	8d 91       	ld	r24, X+
    1c14:	9c 91       	ld	r25, X
    1c16:	11 97       	sbiw	r26, 0x01	; 1
    1c18:	84 0f       	add	r24, r20
    1c1a:	95 1f       	adc	r25, r21
    1c1c:	02 96       	adiw	r24, 0x02	; 2
    1c1e:	91 83       	std	Z+1, r25	; 0x01
    1c20:	80 83       	st	Z, r24
    1c22:	12 96       	adiw	r26, 0x02	; 2
    1c24:	8d 91       	ld	r24, X+
    1c26:	9c 91       	ld	r25, X
    1c28:	13 97       	sbiw	r26, 0x03	; 3
    1c2a:	93 83       	std	Z+3, r25	; 0x03
    1c2c:	82 83       	std	Z+2, r24	; 0x02
    1c2e:	21 15       	cp	r18, r1
    1c30:	31 05       	cpc	r19, r1
    1c32:	29 f4       	brne	.+10     	; 0x1c3e <free+0x9c>
    1c34:	f0 93 01 04 	sts	0x0401, r31
    1c38:	e0 93 00 04 	sts	0x0400, r30
    1c3c:	3e c0       	rjmp	.+124    	; 0x1cba <free+0x118>
    1c3e:	d9 01       	movw	r26, r18
    1c40:	13 96       	adiw	r26, 0x03	; 3
    1c42:	fc 93       	st	X, r31
    1c44:	ee 93       	st	-X, r30
    1c46:	12 97       	sbiw	r26, 0x02	; 2
    1c48:	4d 91       	ld	r20, X+
    1c4a:	5d 91       	ld	r21, X+
    1c4c:	a4 0f       	add	r26, r20
    1c4e:	b5 1f       	adc	r27, r21
    1c50:	ea 17       	cp	r30, r26
    1c52:	fb 07       	cpc	r31, r27
    1c54:	79 f4       	brne	.+30     	; 0x1c74 <free+0xd2>
    1c56:	80 81       	ld	r24, Z
    1c58:	91 81       	ldd	r25, Z+1	; 0x01
    1c5a:	84 0f       	add	r24, r20
    1c5c:	95 1f       	adc	r25, r21
    1c5e:	02 96       	adiw	r24, 0x02	; 2
    1c60:	d9 01       	movw	r26, r18
    1c62:	11 96       	adiw	r26, 0x01	; 1
    1c64:	9c 93       	st	X, r25
    1c66:	8e 93       	st	-X, r24
    1c68:	82 81       	ldd	r24, Z+2	; 0x02
    1c6a:	93 81       	ldd	r25, Z+3	; 0x03
    1c6c:	13 96       	adiw	r26, 0x03	; 3
    1c6e:	9c 93       	st	X, r25
    1c70:	8e 93       	st	-X, r24
    1c72:	12 97       	sbiw	r26, 0x02	; 2
    1c74:	e0 e0       	ldi	r30, 0x00	; 0
    1c76:	f0 e0       	ldi	r31, 0x00	; 0
    1c78:	8a 81       	ldd	r24, Y+2	; 0x02
    1c7a:	9b 81       	ldd	r25, Y+3	; 0x03
    1c7c:	00 97       	sbiw	r24, 0x00	; 0
    1c7e:	19 f0       	breq	.+6      	; 0x1c86 <free+0xe4>
    1c80:	fe 01       	movw	r30, r28
    1c82:	ec 01       	movw	r28, r24
    1c84:	f9 cf       	rjmp	.-14     	; 0x1c78 <free+0xd6>
    1c86:	ce 01       	movw	r24, r28
    1c88:	02 96       	adiw	r24, 0x02	; 2
    1c8a:	28 81       	ld	r18, Y
    1c8c:	39 81       	ldd	r19, Y+1	; 0x01
    1c8e:	82 0f       	add	r24, r18
    1c90:	93 1f       	adc	r25, r19
    1c92:	20 91 fe 03 	lds	r18, 0x03FE
    1c96:	30 91 ff 03 	lds	r19, 0x03FF
    1c9a:	28 17       	cp	r18, r24
    1c9c:	39 07       	cpc	r19, r25
    1c9e:	69 f4       	brne	.+26     	; 0x1cba <free+0x118>
    1ca0:	30 97       	sbiw	r30, 0x00	; 0
    1ca2:	29 f4       	brne	.+10     	; 0x1cae <free+0x10c>
    1ca4:	10 92 01 04 	sts	0x0401, r1
    1ca8:	10 92 00 04 	sts	0x0400, r1
    1cac:	02 c0       	rjmp	.+4      	; 0x1cb2 <free+0x110>
    1cae:	13 82       	std	Z+3, r1	; 0x03
    1cb0:	12 82       	std	Z+2, r1	; 0x02
    1cb2:	d0 93 ff 03 	sts	0x03FF, r29
    1cb6:	c0 93 fe 03 	sts	0x03FE, r28
    1cba:	df 91       	pop	r29
    1cbc:	cf 91       	pop	r28
    1cbe:	08 95       	ret

00001cc0 <fdevopen>:
    1cc0:	0f 93       	push	r16
    1cc2:	1f 93       	push	r17
    1cc4:	cf 93       	push	r28
    1cc6:	df 93       	push	r29
    1cc8:	ec 01       	movw	r28, r24
    1cca:	8b 01       	movw	r16, r22
    1ccc:	00 97       	sbiw	r24, 0x00	; 0
    1cce:	31 f4       	brne	.+12     	; 0x1cdc <fdevopen+0x1c>
    1cd0:	61 15       	cp	r22, r1
    1cd2:	71 05       	cpc	r23, r1
    1cd4:	19 f4       	brne	.+6      	; 0x1cdc <fdevopen+0x1c>
    1cd6:	80 e0       	ldi	r24, 0x00	; 0
    1cd8:	90 e0       	ldi	r25, 0x00	; 0
    1cda:	38 c0       	rjmp	.+112    	; 0x1d4c <fdevopen+0x8c>
    1cdc:	6e e0       	ldi	r22, 0x0E	; 14
    1cde:	70 e0       	ldi	r23, 0x00	; 0
    1ce0:	81 e0       	ldi	r24, 0x01	; 1
    1ce2:	90 e0       	ldi	r25, 0x00	; 0
    1ce4:	0e 94 be 10 	call	0x217c	; 0x217c <calloc>
    1ce8:	fc 01       	movw	r30, r24
    1cea:	00 97       	sbiw	r24, 0x00	; 0
    1cec:	a1 f3       	breq	.-24     	; 0x1cd6 <fdevopen+0x16>
    1cee:	80 e8       	ldi	r24, 0x80	; 128
    1cf0:	83 83       	std	Z+3, r24	; 0x03
    1cf2:	01 15       	cp	r16, r1
    1cf4:	11 05       	cpc	r17, r1
    1cf6:	71 f0       	breq	.+28     	; 0x1d14 <fdevopen+0x54>
    1cf8:	13 87       	std	Z+11, r17	; 0x0b
    1cfa:	02 87       	std	Z+10, r16	; 0x0a
    1cfc:	81 e8       	ldi	r24, 0x81	; 129
    1cfe:	83 83       	std	Z+3, r24	; 0x03
    1d00:	80 91 02 04 	lds	r24, 0x0402
    1d04:	90 91 03 04 	lds	r25, 0x0403
    1d08:	89 2b       	or	r24, r25
    1d0a:	21 f4       	brne	.+8      	; 0x1d14 <fdevopen+0x54>
    1d0c:	f0 93 03 04 	sts	0x0403, r31
    1d10:	e0 93 02 04 	sts	0x0402, r30
    1d14:	20 97       	sbiw	r28, 0x00	; 0
    1d16:	c9 f0       	breq	.+50     	; 0x1d4a <fdevopen+0x8a>
    1d18:	d1 87       	std	Z+9, r29	; 0x09
    1d1a:	c0 87       	std	Z+8, r28	; 0x08
    1d1c:	83 81       	ldd	r24, Z+3	; 0x03
    1d1e:	82 60       	ori	r24, 0x02	; 2
    1d20:	83 83       	std	Z+3, r24	; 0x03
    1d22:	80 91 04 04 	lds	r24, 0x0404
    1d26:	90 91 05 04 	lds	r25, 0x0405
    1d2a:	89 2b       	or	r24, r25
    1d2c:	71 f4       	brne	.+28     	; 0x1d4a <fdevopen+0x8a>
    1d2e:	f0 93 05 04 	sts	0x0405, r31
    1d32:	e0 93 04 04 	sts	0x0404, r30
    1d36:	80 91 06 04 	lds	r24, 0x0406
    1d3a:	90 91 07 04 	lds	r25, 0x0407
    1d3e:	89 2b       	or	r24, r25
    1d40:	21 f4       	brne	.+8      	; 0x1d4a <fdevopen+0x8a>
    1d42:	f0 93 07 04 	sts	0x0407, r31
    1d46:	e0 93 06 04 	sts	0x0406, r30
    1d4a:	cf 01       	movw	r24, r30
    1d4c:	df 91       	pop	r29
    1d4e:	cf 91       	pop	r28
    1d50:	1f 91       	pop	r17
    1d52:	0f 91       	pop	r16
    1d54:	08 95       	ret

00001d56 <printf>:
    1d56:	a0 e0       	ldi	r26, 0x00	; 0
    1d58:	b0 e0       	ldi	r27, 0x00	; 0
    1d5a:	e1 eb       	ldi	r30, 0xB1	; 177
    1d5c:	fe e0       	ldi	r31, 0x0E	; 14
    1d5e:	0c 94 97 11 	jmp	0x232e	; 0x232e <__prologue_saves__+0x20>
    1d62:	fe 01       	movw	r30, r28
    1d64:	35 96       	adiw	r30, 0x05	; 5
    1d66:	61 91       	ld	r22, Z+
    1d68:	71 91       	ld	r23, Z+
    1d6a:	af 01       	movw	r20, r30
    1d6c:	80 91 04 04 	lds	r24, 0x0404
    1d70:	90 91 05 04 	lds	r25, 0x0405
    1d74:	0e 94 ec 0e 	call	0x1dd8	; 0x1dd8 <vfprintf>
    1d78:	e2 e0       	ldi	r30, 0x02	; 2
    1d7a:	0c 94 b3 11 	jmp	0x2366	; 0x2366 <__epilogue_restores__+0x20>

00001d7e <puts>:
    1d7e:	0f 93       	push	r16
    1d80:	1f 93       	push	r17
    1d82:	cf 93       	push	r28
    1d84:	df 93       	push	r29
    1d86:	e0 91 04 04 	lds	r30, 0x0404
    1d8a:	f0 91 05 04 	lds	r31, 0x0405
    1d8e:	23 81       	ldd	r18, Z+3	; 0x03
    1d90:	21 ff       	sbrs	r18, 1
    1d92:	1b c0       	rjmp	.+54     	; 0x1dca <puts+0x4c>
    1d94:	ec 01       	movw	r28, r24
    1d96:	00 e0       	ldi	r16, 0x00	; 0
    1d98:	10 e0       	ldi	r17, 0x00	; 0
    1d9a:	89 91       	ld	r24, Y+
    1d9c:	60 91 04 04 	lds	r22, 0x0404
    1da0:	70 91 05 04 	lds	r23, 0x0405
    1da4:	db 01       	movw	r26, r22
    1da6:	18 96       	adiw	r26, 0x08	; 8
    1da8:	ed 91       	ld	r30, X+
    1daa:	fc 91       	ld	r31, X
    1dac:	19 97       	sbiw	r26, 0x09	; 9
    1dae:	88 23       	and	r24, r24
    1db0:	31 f0       	breq	.+12     	; 0x1dbe <puts+0x40>
    1db2:	09 95       	icall
    1db4:	89 2b       	or	r24, r25
    1db6:	89 f3       	breq	.-30     	; 0x1d9a <puts+0x1c>
    1db8:	0f ef       	ldi	r16, 0xFF	; 255
    1dba:	1f ef       	ldi	r17, 0xFF	; 255
    1dbc:	ee cf       	rjmp	.-36     	; 0x1d9a <puts+0x1c>
    1dbe:	8a e0       	ldi	r24, 0x0A	; 10
    1dc0:	09 95       	icall
    1dc2:	89 2b       	or	r24, r25
    1dc4:	11 f4       	brne	.+4      	; 0x1dca <puts+0x4c>
    1dc6:	c8 01       	movw	r24, r16
    1dc8:	02 c0       	rjmp	.+4      	; 0x1dce <puts+0x50>
    1dca:	8f ef       	ldi	r24, 0xFF	; 255
    1dcc:	9f ef       	ldi	r25, 0xFF	; 255
    1dce:	df 91       	pop	r29
    1dd0:	cf 91       	pop	r28
    1dd2:	1f 91       	pop	r17
    1dd4:	0f 91       	pop	r16
    1dd6:	08 95       	ret

00001dd8 <vfprintf>:
    1dd8:	ac e0       	ldi	r26, 0x0C	; 12
    1dda:	b0 e0       	ldi	r27, 0x00	; 0
    1ddc:	e2 ef       	ldi	r30, 0xF2	; 242
    1dde:	fe e0       	ldi	r31, 0x0E	; 14
    1de0:	0c 94 87 11 	jmp	0x230e	; 0x230e <__prologue_saves__>
    1de4:	7c 01       	movw	r14, r24
    1de6:	6b 01       	movw	r12, r22
    1de8:	8a 01       	movw	r16, r20
    1dea:	fc 01       	movw	r30, r24
    1dec:	17 82       	std	Z+7, r1	; 0x07
    1dee:	16 82       	std	Z+6, r1	; 0x06
    1df0:	83 81       	ldd	r24, Z+3	; 0x03
    1df2:	81 ff       	sbrs	r24, 1
    1df4:	bd c1       	rjmp	.+890    	; 0x2170 <vfprintf+0x398>
    1df6:	ce 01       	movw	r24, r28
    1df8:	01 96       	adiw	r24, 0x01	; 1
    1dfa:	4c 01       	movw	r8, r24
    1dfc:	f7 01       	movw	r30, r14
    1dfe:	93 81       	ldd	r25, Z+3	; 0x03
    1e00:	f6 01       	movw	r30, r12
    1e02:	93 fd       	sbrc	r25, 3
    1e04:	85 91       	lpm	r24, Z+
    1e06:	93 ff       	sbrs	r25, 3
    1e08:	81 91       	ld	r24, Z+
    1e0a:	6f 01       	movw	r12, r30
    1e0c:	88 23       	and	r24, r24
    1e0e:	09 f4       	brne	.+2      	; 0x1e12 <vfprintf+0x3a>
    1e10:	ab c1       	rjmp	.+854    	; 0x2168 <vfprintf+0x390>
    1e12:	85 32       	cpi	r24, 0x25	; 37
    1e14:	39 f4       	brne	.+14     	; 0x1e24 <vfprintf+0x4c>
    1e16:	93 fd       	sbrc	r25, 3
    1e18:	85 91       	lpm	r24, Z+
    1e1a:	93 ff       	sbrs	r25, 3
    1e1c:	81 91       	ld	r24, Z+
    1e1e:	6f 01       	movw	r12, r30
    1e20:	85 32       	cpi	r24, 0x25	; 37
    1e22:	29 f4       	brne	.+10     	; 0x1e2e <vfprintf+0x56>
    1e24:	b7 01       	movw	r22, r14
    1e26:	90 e0       	ldi	r25, 0x00	; 0
    1e28:	0e 94 f7 10 	call	0x21ee	; 0x21ee <fputc>
    1e2c:	e7 cf       	rjmp	.-50     	; 0x1dfc <vfprintf+0x24>
    1e2e:	51 2c       	mov	r5, r1
    1e30:	31 2c       	mov	r3, r1
    1e32:	20 e0       	ldi	r18, 0x00	; 0
    1e34:	20 32       	cpi	r18, 0x20	; 32
    1e36:	a0 f4       	brcc	.+40     	; 0x1e60 <vfprintf+0x88>
    1e38:	8b 32       	cpi	r24, 0x2B	; 43
    1e3a:	69 f0       	breq	.+26     	; 0x1e56 <vfprintf+0x7e>
    1e3c:	30 f4       	brcc	.+12     	; 0x1e4a <vfprintf+0x72>
    1e3e:	80 32       	cpi	r24, 0x20	; 32
    1e40:	59 f0       	breq	.+22     	; 0x1e58 <vfprintf+0x80>
    1e42:	83 32       	cpi	r24, 0x23	; 35
    1e44:	69 f4       	brne	.+26     	; 0x1e60 <vfprintf+0x88>
    1e46:	20 61       	ori	r18, 0x10	; 16
    1e48:	2c c0       	rjmp	.+88     	; 0x1ea2 <vfprintf+0xca>
    1e4a:	8d 32       	cpi	r24, 0x2D	; 45
    1e4c:	39 f0       	breq	.+14     	; 0x1e5c <vfprintf+0x84>
    1e4e:	80 33       	cpi	r24, 0x30	; 48
    1e50:	39 f4       	brne	.+14     	; 0x1e60 <vfprintf+0x88>
    1e52:	21 60       	ori	r18, 0x01	; 1
    1e54:	26 c0       	rjmp	.+76     	; 0x1ea2 <vfprintf+0xca>
    1e56:	22 60       	ori	r18, 0x02	; 2
    1e58:	24 60       	ori	r18, 0x04	; 4
    1e5a:	23 c0       	rjmp	.+70     	; 0x1ea2 <vfprintf+0xca>
    1e5c:	28 60       	ori	r18, 0x08	; 8
    1e5e:	21 c0       	rjmp	.+66     	; 0x1ea2 <vfprintf+0xca>
    1e60:	27 fd       	sbrc	r18, 7
    1e62:	27 c0       	rjmp	.+78     	; 0x1eb2 <vfprintf+0xda>
    1e64:	30 ed       	ldi	r19, 0xD0	; 208
    1e66:	38 0f       	add	r19, r24
    1e68:	3a 30       	cpi	r19, 0x0A	; 10
    1e6a:	78 f4       	brcc	.+30     	; 0x1e8a <vfprintf+0xb2>
    1e6c:	26 ff       	sbrs	r18, 6
    1e6e:	06 c0       	rjmp	.+12     	; 0x1e7c <vfprintf+0xa4>
    1e70:	fa e0       	ldi	r31, 0x0A	; 10
    1e72:	5f 9e       	mul	r5, r31
    1e74:	30 0d       	add	r19, r0
    1e76:	11 24       	eor	r1, r1
    1e78:	53 2e       	mov	r5, r19
    1e7a:	13 c0       	rjmp	.+38     	; 0x1ea2 <vfprintf+0xca>
    1e7c:	8a e0       	ldi	r24, 0x0A	; 10
    1e7e:	38 9e       	mul	r3, r24
    1e80:	30 0d       	add	r19, r0
    1e82:	11 24       	eor	r1, r1
    1e84:	33 2e       	mov	r3, r19
    1e86:	20 62       	ori	r18, 0x20	; 32
    1e88:	0c c0       	rjmp	.+24     	; 0x1ea2 <vfprintf+0xca>
    1e8a:	8e 32       	cpi	r24, 0x2E	; 46
    1e8c:	21 f4       	brne	.+8      	; 0x1e96 <vfprintf+0xbe>
    1e8e:	26 fd       	sbrc	r18, 6
    1e90:	6b c1       	rjmp	.+726    	; 0x2168 <vfprintf+0x390>
    1e92:	20 64       	ori	r18, 0x40	; 64
    1e94:	06 c0       	rjmp	.+12     	; 0x1ea2 <vfprintf+0xca>
    1e96:	8c 36       	cpi	r24, 0x6C	; 108
    1e98:	11 f4       	brne	.+4      	; 0x1e9e <vfprintf+0xc6>
    1e9a:	20 68       	ori	r18, 0x80	; 128
    1e9c:	02 c0       	rjmp	.+4      	; 0x1ea2 <vfprintf+0xca>
    1e9e:	88 36       	cpi	r24, 0x68	; 104
    1ea0:	41 f4       	brne	.+16     	; 0x1eb2 <vfprintf+0xda>
    1ea2:	f6 01       	movw	r30, r12
    1ea4:	93 fd       	sbrc	r25, 3
    1ea6:	85 91       	lpm	r24, Z+
    1ea8:	93 ff       	sbrs	r25, 3
    1eaa:	81 91       	ld	r24, Z+
    1eac:	6f 01       	movw	r12, r30
    1eae:	81 11       	cpse	r24, r1
    1eb0:	c1 cf       	rjmp	.-126    	; 0x1e34 <vfprintf+0x5c>
    1eb2:	98 2f       	mov	r25, r24
    1eb4:	9f 7d       	andi	r25, 0xDF	; 223
    1eb6:	95 54       	subi	r25, 0x45	; 69
    1eb8:	93 30       	cpi	r25, 0x03	; 3
    1eba:	28 f4       	brcc	.+10     	; 0x1ec6 <vfprintf+0xee>
    1ebc:	0c 5f       	subi	r16, 0xFC	; 252
    1ebe:	1f 4f       	sbci	r17, 0xFF	; 255
    1ec0:	ff e3       	ldi	r31, 0x3F	; 63
    1ec2:	f9 83       	std	Y+1, r31	; 0x01
    1ec4:	0d c0       	rjmp	.+26     	; 0x1ee0 <vfprintf+0x108>
    1ec6:	83 36       	cpi	r24, 0x63	; 99
    1ec8:	31 f0       	breq	.+12     	; 0x1ed6 <vfprintf+0xfe>
    1eca:	83 37       	cpi	r24, 0x73	; 115
    1ecc:	71 f0       	breq	.+28     	; 0x1eea <vfprintf+0x112>
    1ece:	83 35       	cpi	r24, 0x53	; 83
    1ed0:	09 f0       	breq	.+2      	; 0x1ed4 <vfprintf+0xfc>
    1ed2:	5b c0       	rjmp	.+182    	; 0x1f8a <vfprintf+0x1b2>
    1ed4:	22 c0       	rjmp	.+68     	; 0x1f1a <vfprintf+0x142>
    1ed6:	f8 01       	movw	r30, r16
    1ed8:	80 81       	ld	r24, Z
    1eda:	89 83       	std	Y+1, r24	; 0x01
    1edc:	0e 5f       	subi	r16, 0xFE	; 254
    1ede:	1f 4f       	sbci	r17, 0xFF	; 255
    1ee0:	44 24       	eor	r4, r4
    1ee2:	43 94       	inc	r4
    1ee4:	51 2c       	mov	r5, r1
    1ee6:	54 01       	movw	r10, r8
    1ee8:	15 c0       	rjmp	.+42     	; 0x1f14 <vfprintf+0x13c>
    1eea:	38 01       	movw	r6, r16
    1eec:	f2 e0       	ldi	r31, 0x02	; 2
    1eee:	6f 0e       	add	r6, r31
    1ef0:	71 1c       	adc	r7, r1
    1ef2:	f8 01       	movw	r30, r16
    1ef4:	a0 80       	ld	r10, Z
    1ef6:	b1 80       	ldd	r11, Z+1	; 0x01
    1ef8:	26 ff       	sbrs	r18, 6
    1efa:	03 c0       	rjmp	.+6      	; 0x1f02 <vfprintf+0x12a>
    1efc:	65 2d       	mov	r22, r5
    1efe:	70 e0       	ldi	r23, 0x00	; 0
    1f00:	02 c0       	rjmp	.+4      	; 0x1f06 <vfprintf+0x12e>
    1f02:	6f ef       	ldi	r22, 0xFF	; 255
    1f04:	7f ef       	ldi	r23, 0xFF	; 255
    1f06:	c5 01       	movw	r24, r10
    1f08:	2c 87       	std	Y+12, r18	; 0x0c
    1f0a:	0e 94 ec 10 	call	0x21d8	; 0x21d8 <strnlen>
    1f0e:	2c 01       	movw	r4, r24
    1f10:	83 01       	movw	r16, r6
    1f12:	2c 85       	ldd	r18, Y+12	; 0x0c
    1f14:	2f 77       	andi	r18, 0x7F	; 127
    1f16:	22 2e       	mov	r2, r18
    1f18:	17 c0       	rjmp	.+46     	; 0x1f48 <vfprintf+0x170>
    1f1a:	38 01       	movw	r6, r16
    1f1c:	f2 e0       	ldi	r31, 0x02	; 2
    1f1e:	6f 0e       	add	r6, r31
    1f20:	71 1c       	adc	r7, r1
    1f22:	f8 01       	movw	r30, r16
    1f24:	a0 80       	ld	r10, Z
    1f26:	b1 80       	ldd	r11, Z+1	; 0x01
    1f28:	26 ff       	sbrs	r18, 6
    1f2a:	03 c0       	rjmp	.+6      	; 0x1f32 <vfprintf+0x15a>
    1f2c:	65 2d       	mov	r22, r5
    1f2e:	70 e0       	ldi	r23, 0x00	; 0
    1f30:	02 c0       	rjmp	.+4      	; 0x1f36 <vfprintf+0x15e>
    1f32:	6f ef       	ldi	r22, 0xFF	; 255
    1f34:	7f ef       	ldi	r23, 0xFF	; 255
    1f36:	c5 01       	movw	r24, r10
    1f38:	2c 87       	std	Y+12, r18	; 0x0c
    1f3a:	0e 94 da 10 	call	0x21b4	; 0x21b4 <strnlen_P>
    1f3e:	2c 01       	movw	r4, r24
    1f40:	2c 85       	ldd	r18, Y+12	; 0x0c
    1f42:	20 68       	ori	r18, 0x80	; 128
    1f44:	22 2e       	mov	r2, r18
    1f46:	83 01       	movw	r16, r6
    1f48:	23 fc       	sbrc	r2, 3
    1f4a:	1b c0       	rjmp	.+54     	; 0x1f82 <vfprintf+0x1aa>
    1f4c:	83 2d       	mov	r24, r3
    1f4e:	90 e0       	ldi	r25, 0x00	; 0
    1f50:	48 16       	cp	r4, r24
    1f52:	59 06       	cpc	r5, r25
    1f54:	b0 f4       	brcc	.+44     	; 0x1f82 <vfprintf+0x1aa>
    1f56:	b7 01       	movw	r22, r14
    1f58:	80 e2       	ldi	r24, 0x20	; 32
    1f5a:	90 e0       	ldi	r25, 0x00	; 0
    1f5c:	0e 94 f7 10 	call	0x21ee	; 0x21ee <fputc>
    1f60:	3a 94       	dec	r3
    1f62:	f4 cf       	rjmp	.-24     	; 0x1f4c <vfprintf+0x174>
    1f64:	f5 01       	movw	r30, r10
    1f66:	27 fc       	sbrc	r2, 7
    1f68:	85 91       	lpm	r24, Z+
    1f6a:	27 fe       	sbrs	r2, 7
    1f6c:	81 91       	ld	r24, Z+
    1f6e:	5f 01       	movw	r10, r30
    1f70:	b7 01       	movw	r22, r14
    1f72:	90 e0       	ldi	r25, 0x00	; 0
    1f74:	0e 94 f7 10 	call	0x21ee	; 0x21ee <fputc>
    1f78:	31 10       	cpse	r3, r1
    1f7a:	3a 94       	dec	r3
    1f7c:	f1 e0       	ldi	r31, 0x01	; 1
    1f7e:	4f 1a       	sub	r4, r31
    1f80:	51 08       	sbc	r5, r1
    1f82:	41 14       	cp	r4, r1
    1f84:	51 04       	cpc	r5, r1
    1f86:	71 f7       	brne	.-36     	; 0x1f64 <vfprintf+0x18c>
    1f88:	e5 c0       	rjmp	.+458    	; 0x2154 <vfprintf+0x37c>
    1f8a:	84 36       	cpi	r24, 0x64	; 100
    1f8c:	11 f0       	breq	.+4      	; 0x1f92 <vfprintf+0x1ba>
    1f8e:	89 36       	cpi	r24, 0x69	; 105
    1f90:	39 f5       	brne	.+78     	; 0x1fe0 <vfprintf+0x208>
    1f92:	f8 01       	movw	r30, r16
    1f94:	27 ff       	sbrs	r18, 7
    1f96:	07 c0       	rjmp	.+14     	; 0x1fa6 <vfprintf+0x1ce>
    1f98:	60 81       	ld	r22, Z
    1f9a:	71 81       	ldd	r23, Z+1	; 0x01
    1f9c:	82 81       	ldd	r24, Z+2	; 0x02
    1f9e:	93 81       	ldd	r25, Z+3	; 0x03
    1fa0:	0c 5f       	subi	r16, 0xFC	; 252
    1fa2:	1f 4f       	sbci	r17, 0xFF	; 255
    1fa4:	08 c0       	rjmp	.+16     	; 0x1fb6 <vfprintf+0x1de>
    1fa6:	60 81       	ld	r22, Z
    1fa8:	71 81       	ldd	r23, Z+1	; 0x01
    1faa:	88 27       	eor	r24, r24
    1fac:	77 fd       	sbrc	r23, 7
    1fae:	80 95       	com	r24
    1fb0:	98 2f       	mov	r25, r24
    1fb2:	0e 5f       	subi	r16, 0xFE	; 254
    1fb4:	1f 4f       	sbci	r17, 0xFF	; 255
    1fb6:	2f 76       	andi	r18, 0x6F	; 111
    1fb8:	b2 2e       	mov	r11, r18
    1fba:	97 ff       	sbrs	r25, 7
    1fbc:	09 c0       	rjmp	.+18     	; 0x1fd0 <vfprintf+0x1f8>
    1fbe:	90 95       	com	r25
    1fc0:	80 95       	com	r24
    1fc2:	70 95       	com	r23
    1fc4:	61 95       	neg	r22
    1fc6:	7f 4f       	sbci	r23, 0xFF	; 255
    1fc8:	8f 4f       	sbci	r24, 0xFF	; 255
    1fca:	9f 4f       	sbci	r25, 0xFF	; 255
    1fcc:	20 68       	ori	r18, 0x80	; 128
    1fce:	b2 2e       	mov	r11, r18
    1fd0:	2a e0       	ldi	r18, 0x0A	; 10
    1fd2:	30 e0       	ldi	r19, 0x00	; 0
    1fd4:	a4 01       	movw	r20, r8
    1fd6:	0e 94 29 11 	call	0x2252	; 0x2252 <__ultoa_invert>
    1fda:	a8 2e       	mov	r10, r24
    1fdc:	a8 18       	sub	r10, r8
    1fde:	44 c0       	rjmp	.+136    	; 0x2068 <vfprintf+0x290>
    1fe0:	85 37       	cpi	r24, 0x75	; 117
    1fe2:	29 f4       	brne	.+10     	; 0x1fee <vfprintf+0x216>
    1fe4:	2f 7e       	andi	r18, 0xEF	; 239
    1fe6:	b2 2e       	mov	r11, r18
    1fe8:	2a e0       	ldi	r18, 0x0A	; 10
    1fea:	30 e0       	ldi	r19, 0x00	; 0
    1fec:	25 c0       	rjmp	.+74     	; 0x2038 <vfprintf+0x260>
    1fee:	f2 2f       	mov	r31, r18
    1ff0:	f9 7f       	andi	r31, 0xF9	; 249
    1ff2:	bf 2e       	mov	r11, r31
    1ff4:	8f 36       	cpi	r24, 0x6F	; 111
    1ff6:	c1 f0       	breq	.+48     	; 0x2028 <vfprintf+0x250>
    1ff8:	18 f4       	brcc	.+6      	; 0x2000 <vfprintf+0x228>
    1ffa:	88 35       	cpi	r24, 0x58	; 88
    1ffc:	79 f0       	breq	.+30     	; 0x201c <vfprintf+0x244>
    1ffe:	b4 c0       	rjmp	.+360    	; 0x2168 <vfprintf+0x390>
    2000:	80 37       	cpi	r24, 0x70	; 112
    2002:	19 f0       	breq	.+6      	; 0x200a <vfprintf+0x232>
    2004:	88 37       	cpi	r24, 0x78	; 120
    2006:	21 f0       	breq	.+8      	; 0x2010 <vfprintf+0x238>
    2008:	af c0       	rjmp	.+350    	; 0x2168 <vfprintf+0x390>
    200a:	2f 2f       	mov	r18, r31
    200c:	20 61       	ori	r18, 0x10	; 16
    200e:	b2 2e       	mov	r11, r18
    2010:	b4 fe       	sbrs	r11, 4
    2012:	0d c0       	rjmp	.+26     	; 0x202e <vfprintf+0x256>
    2014:	8b 2d       	mov	r24, r11
    2016:	84 60       	ori	r24, 0x04	; 4
    2018:	b8 2e       	mov	r11, r24
    201a:	09 c0       	rjmp	.+18     	; 0x202e <vfprintf+0x256>
    201c:	24 ff       	sbrs	r18, 4
    201e:	0a c0       	rjmp	.+20     	; 0x2034 <vfprintf+0x25c>
    2020:	9f 2f       	mov	r25, r31
    2022:	96 60       	ori	r25, 0x06	; 6
    2024:	b9 2e       	mov	r11, r25
    2026:	06 c0       	rjmp	.+12     	; 0x2034 <vfprintf+0x25c>
    2028:	28 e0       	ldi	r18, 0x08	; 8
    202a:	30 e0       	ldi	r19, 0x00	; 0
    202c:	05 c0       	rjmp	.+10     	; 0x2038 <vfprintf+0x260>
    202e:	20 e1       	ldi	r18, 0x10	; 16
    2030:	30 e0       	ldi	r19, 0x00	; 0
    2032:	02 c0       	rjmp	.+4      	; 0x2038 <vfprintf+0x260>
    2034:	20 e1       	ldi	r18, 0x10	; 16
    2036:	32 e0       	ldi	r19, 0x02	; 2
    2038:	f8 01       	movw	r30, r16
    203a:	b7 fe       	sbrs	r11, 7
    203c:	07 c0       	rjmp	.+14     	; 0x204c <vfprintf+0x274>
    203e:	60 81       	ld	r22, Z
    2040:	71 81       	ldd	r23, Z+1	; 0x01
    2042:	82 81       	ldd	r24, Z+2	; 0x02
    2044:	93 81       	ldd	r25, Z+3	; 0x03
    2046:	0c 5f       	subi	r16, 0xFC	; 252
    2048:	1f 4f       	sbci	r17, 0xFF	; 255
    204a:	06 c0       	rjmp	.+12     	; 0x2058 <vfprintf+0x280>
    204c:	60 81       	ld	r22, Z
    204e:	71 81       	ldd	r23, Z+1	; 0x01
    2050:	80 e0       	ldi	r24, 0x00	; 0
    2052:	90 e0       	ldi	r25, 0x00	; 0
    2054:	0e 5f       	subi	r16, 0xFE	; 254
    2056:	1f 4f       	sbci	r17, 0xFF	; 255
    2058:	a4 01       	movw	r20, r8
    205a:	0e 94 29 11 	call	0x2252	; 0x2252 <__ultoa_invert>
    205e:	a8 2e       	mov	r10, r24
    2060:	a8 18       	sub	r10, r8
    2062:	fb 2d       	mov	r31, r11
    2064:	ff 77       	andi	r31, 0x7F	; 127
    2066:	bf 2e       	mov	r11, r31
    2068:	b6 fe       	sbrs	r11, 6
    206a:	0b c0       	rjmp	.+22     	; 0x2082 <vfprintf+0x2aa>
    206c:	2b 2d       	mov	r18, r11
    206e:	2e 7f       	andi	r18, 0xFE	; 254
    2070:	a5 14       	cp	r10, r5
    2072:	50 f4       	brcc	.+20     	; 0x2088 <vfprintf+0x2b0>
    2074:	b4 fe       	sbrs	r11, 4
    2076:	0a c0       	rjmp	.+20     	; 0x208c <vfprintf+0x2b4>
    2078:	b2 fc       	sbrc	r11, 2
    207a:	08 c0       	rjmp	.+16     	; 0x208c <vfprintf+0x2b4>
    207c:	2b 2d       	mov	r18, r11
    207e:	2e 7e       	andi	r18, 0xEE	; 238
    2080:	05 c0       	rjmp	.+10     	; 0x208c <vfprintf+0x2b4>
    2082:	7a 2c       	mov	r7, r10
    2084:	2b 2d       	mov	r18, r11
    2086:	03 c0       	rjmp	.+6      	; 0x208e <vfprintf+0x2b6>
    2088:	7a 2c       	mov	r7, r10
    208a:	01 c0       	rjmp	.+2      	; 0x208e <vfprintf+0x2b6>
    208c:	75 2c       	mov	r7, r5
    208e:	24 ff       	sbrs	r18, 4
    2090:	0d c0       	rjmp	.+26     	; 0x20ac <vfprintf+0x2d4>
    2092:	fe 01       	movw	r30, r28
    2094:	ea 0d       	add	r30, r10
    2096:	f1 1d       	adc	r31, r1
    2098:	80 81       	ld	r24, Z
    209a:	80 33       	cpi	r24, 0x30	; 48
    209c:	11 f4       	brne	.+4      	; 0x20a2 <vfprintf+0x2ca>
    209e:	29 7e       	andi	r18, 0xE9	; 233
    20a0:	09 c0       	rjmp	.+18     	; 0x20b4 <vfprintf+0x2dc>
    20a2:	22 ff       	sbrs	r18, 2
    20a4:	06 c0       	rjmp	.+12     	; 0x20b2 <vfprintf+0x2da>
    20a6:	73 94       	inc	r7
    20a8:	73 94       	inc	r7
    20aa:	04 c0       	rjmp	.+8      	; 0x20b4 <vfprintf+0x2dc>
    20ac:	82 2f       	mov	r24, r18
    20ae:	86 78       	andi	r24, 0x86	; 134
    20b0:	09 f0       	breq	.+2      	; 0x20b4 <vfprintf+0x2dc>
    20b2:	73 94       	inc	r7
    20b4:	23 fd       	sbrc	r18, 3
    20b6:	13 c0       	rjmp	.+38     	; 0x20de <vfprintf+0x306>
    20b8:	20 ff       	sbrs	r18, 0
    20ba:	06 c0       	rjmp	.+12     	; 0x20c8 <vfprintf+0x2f0>
    20bc:	5a 2c       	mov	r5, r10
    20be:	73 14       	cp	r7, r3
    20c0:	18 f4       	brcc	.+6      	; 0x20c8 <vfprintf+0x2f0>
    20c2:	53 0c       	add	r5, r3
    20c4:	57 18       	sub	r5, r7
    20c6:	73 2c       	mov	r7, r3
    20c8:	73 14       	cp	r7, r3
    20ca:	68 f4       	brcc	.+26     	; 0x20e6 <vfprintf+0x30e>
    20cc:	b7 01       	movw	r22, r14
    20ce:	80 e2       	ldi	r24, 0x20	; 32
    20d0:	90 e0       	ldi	r25, 0x00	; 0
    20d2:	2c 87       	std	Y+12, r18	; 0x0c
    20d4:	0e 94 f7 10 	call	0x21ee	; 0x21ee <fputc>
    20d8:	73 94       	inc	r7
    20da:	2c 85       	ldd	r18, Y+12	; 0x0c
    20dc:	f5 cf       	rjmp	.-22     	; 0x20c8 <vfprintf+0x2f0>
    20de:	73 14       	cp	r7, r3
    20e0:	10 f4       	brcc	.+4      	; 0x20e6 <vfprintf+0x30e>
    20e2:	37 18       	sub	r3, r7
    20e4:	01 c0       	rjmp	.+2      	; 0x20e8 <vfprintf+0x310>
    20e6:	31 2c       	mov	r3, r1
    20e8:	24 ff       	sbrs	r18, 4
    20ea:	12 c0       	rjmp	.+36     	; 0x2110 <vfprintf+0x338>
    20ec:	b7 01       	movw	r22, r14
    20ee:	80 e3       	ldi	r24, 0x30	; 48
    20f0:	90 e0       	ldi	r25, 0x00	; 0
    20f2:	2c 87       	std	Y+12, r18	; 0x0c
    20f4:	0e 94 f7 10 	call	0x21ee	; 0x21ee <fputc>
    20f8:	2c 85       	ldd	r18, Y+12	; 0x0c
    20fa:	22 ff       	sbrs	r18, 2
    20fc:	17 c0       	rjmp	.+46     	; 0x212c <vfprintf+0x354>
    20fe:	21 ff       	sbrs	r18, 1
    2100:	03 c0       	rjmp	.+6      	; 0x2108 <vfprintf+0x330>
    2102:	88 e5       	ldi	r24, 0x58	; 88
    2104:	90 e0       	ldi	r25, 0x00	; 0
    2106:	02 c0       	rjmp	.+4      	; 0x210c <vfprintf+0x334>
    2108:	88 e7       	ldi	r24, 0x78	; 120
    210a:	90 e0       	ldi	r25, 0x00	; 0
    210c:	b7 01       	movw	r22, r14
    210e:	0c c0       	rjmp	.+24     	; 0x2128 <vfprintf+0x350>
    2110:	82 2f       	mov	r24, r18
    2112:	86 78       	andi	r24, 0x86	; 134
    2114:	59 f0       	breq	.+22     	; 0x212c <vfprintf+0x354>
    2116:	21 fd       	sbrc	r18, 1
    2118:	02 c0       	rjmp	.+4      	; 0x211e <vfprintf+0x346>
    211a:	80 e2       	ldi	r24, 0x20	; 32
    211c:	01 c0       	rjmp	.+2      	; 0x2120 <vfprintf+0x348>
    211e:	8b e2       	ldi	r24, 0x2B	; 43
    2120:	27 fd       	sbrc	r18, 7
    2122:	8d e2       	ldi	r24, 0x2D	; 45
    2124:	b7 01       	movw	r22, r14
    2126:	90 e0       	ldi	r25, 0x00	; 0
    2128:	0e 94 f7 10 	call	0x21ee	; 0x21ee <fputc>
    212c:	a5 14       	cp	r10, r5
    212e:	38 f4       	brcc	.+14     	; 0x213e <vfprintf+0x366>
    2130:	b7 01       	movw	r22, r14
    2132:	80 e3       	ldi	r24, 0x30	; 48
    2134:	90 e0       	ldi	r25, 0x00	; 0
    2136:	0e 94 f7 10 	call	0x21ee	; 0x21ee <fputc>
    213a:	5a 94       	dec	r5
    213c:	f7 cf       	rjmp	.-18     	; 0x212c <vfprintf+0x354>
    213e:	aa 94       	dec	r10
    2140:	f4 01       	movw	r30, r8
    2142:	ea 0d       	add	r30, r10
    2144:	f1 1d       	adc	r31, r1
    2146:	80 81       	ld	r24, Z
    2148:	b7 01       	movw	r22, r14
    214a:	90 e0       	ldi	r25, 0x00	; 0
    214c:	0e 94 f7 10 	call	0x21ee	; 0x21ee <fputc>
    2150:	a1 10       	cpse	r10, r1
    2152:	f5 cf       	rjmp	.-22     	; 0x213e <vfprintf+0x366>
    2154:	33 20       	and	r3, r3
    2156:	09 f4       	brne	.+2      	; 0x215a <vfprintf+0x382>
    2158:	51 ce       	rjmp	.-862    	; 0x1dfc <vfprintf+0x24>
    215a:	b7 01       	movw	r22, r14
    215c:	80 e2       	ldi	r24, 0x20	; 32
    215e:	90 e0       	ldi	r25, 0x00	; 0
    2160:	0e 94 f7 10 	call	0x21ee	; 0x21ee <fputc>
    2164:	3a 94       	dec	r3
    2166:	f6 cf       	rjmp	.-20     	; 0x2154 <vfprintf+0x37c>
    2168:	f7 01       	movw	r30, r14
    216a:	86 81       	ldd	r24, Z+6	; 0x06
    216c:	97 81       	ldd	r25, Z+7	; 0x07
    216e:	02 c0       	rjmp	.+4      	; 0x2174 <vfprintf+0x39c>
    2170:	8f ef       	ldi	r24, 0xFF	; 255
    2172:	9f ef       	ldi	r25, 0xFF	; 255
    2174:	2c 96       	adiw	r28, 0x0c	; 12
    2176:	e2 e1       	ldi	r30, 0x12	; 18
    2178:	0c 94 a3 11 	jmp	0x2346	; 0x2346 <__epilogue_restores__>

0000217c <calloc>:
    217c:	0f 93       	push	r16
    217e:	1f 93       	push	r17
    2180:	cf 93       	push	r28
    2182:	df 93       	push	r29
    2184:	86 9f       	mul	r24, r22
    2186:	80 01       	movw	r16, r0
    2188:	87 9f       	mul	r24, r23
    218a:	10 0d       	add	r17, r0
    218c:	96 9f       	mul	r25, r22
    218e:	10 0d       	add	r17, r0
    2190:	11 24       	eor	r1, r1
    2192:	c8 01       	movw	r24, r16
    2194:	0e 94 39 0d 	call	0x1a72	; 0x1a72 <malloc>
    2198:	ec 01       	movw	r28, r24
    219a:	00 97       	sbiw	r24, 0x00	; 0
    219c:	29 f0       	breq	.+10     	; 0x21a8 <calloc+0x2c>
    219e:	a8 01       	movw	r20, r16
    21a0:	60 e0       	ldi	r22, 0x00	; 0
    21a2:	70 e0       	ldi	r23, 0x00	; 0
    21a4:	0e 94 e5 10 	call	0x21ca	; 0x21ca <memset>
    21a8:	ce 01       	movw	r24, r28
    21aa:	df 91       	pop	r29
    21ac:	cf 91       	pop	r28
    21ae:	1f 91       	pop	r17
    21b0:	0f 91       	pop	r16
    21b2:	08 95       	ret

000021b4 <strnlen_P>:
    21b4:	fc 01       	movw	r30, r24
    21b6:	05 90       	lpm	r0, Z+
    21b8:	61 50       	subi	r22, 0x01	; 1
    21ba:	70 40       	sbci	r23, 0x00	; 0
    21bc:	01 10       	cpse	r0, r1
    21be:	d8 f7       	brcc	.-10     	; 0x21b6 <strnlen_P+0x2>
    21c0:	80 95       	com	r24
    21c2:	90 95       	com	r25
    21c4:	8e 0f       	add	r24, r30
    21c6:	9f 1f       	adc	r25, r31
    21c8:	08 95       	ret

000021ca <memset>:
    21ca:	dc 01       	movw	r26, r24
    21cc:	01 c0       	rjmp	.+2      	; 0x21d0 <memset+0x6>
    21ce:	6d 93       	st	X+, r22
    21d0:	41 50       	subi	r20, 0x01	; 1
    21d2:	50 40       	sbci	r21, 0x00	; 0
    21d4:	e0 f7       	brcc	.-8      	; 0x21ce <memset+0x4>
    21d6:	08 95       	ret

000021d8 <strnlen>:
    21d8:	fc 01       	movw	r30, r24
    21da:	61 50       	subi	r22, 0x01	; 1
    21dc:	70 40       	sbci	r23, 0x00	; 0
    21de:	01 90       	ld	r0, Z+
    21e0:	01 10       	cpse	r0, r1
    21e2:	d8 f7       	brcc	.-10     	; 0x21da <strnlen+0x2>
    21e4:	80 95       	com	r24
    21e6:	90 95       	com	r25
    21e8:	8e 0f       	add	r24, r30
    21ea:	9f 1f       	adc	r25, r31
    21ec:	08 95       	ret

000021ee <fputc>:
    21ee:	0f 93       	push	r16
    21f0:	1f 93       	push	r17
    21f2:	cf 93       	push	r28
    21f4:	df 93       	push	r29
    21f6:	18 2f       	mov	r17, r24
    21f8:	09 2f       	mov	r16, r25
    21fa:	eb 01       	movw	r28, r22
    21fc:	8b 81       	ldd	r24, Y+3	; 0x03
    21fe:	81 fd       	sbrc	r24, 1
    2200:	03 c0       	rjmp	.+6      	; 0x2208 <fputc+0x1a>
    2202:	8f ef       	ldi	r24, 0xFF	; 255
    2204:	9f ef       	ldi	r25, 0xFF	; 255
    2206:	20 c0       	rjmp	.+64     	; 0x2248 <fputc+0x5a>
    2208:	82 ff       	sbrs	r24, 2
    220a:	10 c0       	rjmp	.+32     	; 0x222c <fputc+0x3e>
    220c:	4e 81       	ldd	r20, Y+6	; 0x06
    220e:	5f 81       	ldd	r21, Y+7	; 0x07
    2210:	2c 81       	ldd	r18, Y+4	; 0x04
    2212:	3d 81       	ldd	r19, Y+5	; 0x05
    2214:	42 17       	cp	r20, r18
    2216:	53 07       	cpc	r21, r19
    2218:	7c f4       	brge	.+30     	; 0x2238 <fputc+0x4a>
    221a:	e8 81       	ld	r30, Y
    221c:	f9 81       	ldd	r31, Y+1	; 0x01
    221e:	9f 01       	movw	r18, r30
    2220:	2f 5f       	subi	r18, 0xFF	; 255
    2222:	3f 4f       	sbci	r19, 0xFF	; 255
    2224:	39 83       	std	Y+1, r19	; 0x01
    2226:	28 83       	st	Y, r18
    2228:	10 83       	st	Z, r17
    222a:	06 c0       	rjmp	.+12     	; 0x2238 <fputc+0x4a>
    222c:	e8 85       	ldd	r30, Y+8	; 0x08
    222e:	f9 85       	ldd	r31, Y+9	; 0x09
    2230:	81 2f       	mov	r24, r17
    2232:	09 95       	icall
    2234:	89 2b       	or	r24, r25
    2236:	29 f7       	brne	.-54     	; 0x2202 <fputc+0x14>
    2238:	2e 81       	ldd	r18, Y+6	; 0x06
    223a:	3f 81       	ldd	r19, Y+7	; 0x07
    223c:	2f 5f       	subi	r18, 0xFF	; 255
    223e:	3f 4f       	sbci	r19, 0xFF	; 255
    2240:	3f 83       	std	Y+7, r19	; 0x07
    2242:	2e 83       	std	Y+6, r18	; 0x06
    2244:	81 2f       	mov	r24, r17
    2246:	90 2f       	mov	r25, r16
    2248:	df 91       	pop	r29
    224a:	cf 91       	pop	r28
    224c:	1f 91       	pop	r17
    224e:	0f 91       	pop	r16
    2250:	08 95       	ret

00002252 <__ultoa_invert>:
    2252:	fa 01       	movw	r30, r20
    2254:	aa 27       	eor	r26, r26
    2256:	28 30       	cpi	r18, 0x08	; 8
    2258:	51 f1       	breq	.+84     	; 0x22ae <__ultoa_invert+0x5c>
    225a:	20 31       	cpi	r18, 0x10	; 16
    225c:	81 f1       	breq	.+96     	; 0x22be <__ultoa_invert+0x6c>
    225e:	e8 94       	clt
    2260:	6f 93       	push	r22
    2262:	6e 7f       	andi	r22, 0xFE	; 254
    2264:	6e 5f       	subi	r22, 0xFE	; 254
    2266:	7f 4f       	sbci	r23, 0xFF	; 255
    2268:	8f 4f       	sbci	r24, 0xFF	; 255
    226a:	9f 4f       	sbci	r25, 0xFF	; 255
    226c:	af 4f       	sbci	r26, 0xFF	; 255
    226e:	b1 e0       	ldi	r27, 0x01	; 1
    2270:	3e d0       	rcall	.+124    	; 0x22ee <__ultoa_invert+0x9c>
    2272:	b4 e0       	ldi	r27, 0x04	; 4
    2274:	3c d0       	rcall	.+120    	; 0x22ee <__ultoa_invert+0x9c>
    2276:	67 0f       	add	r22, r23
    2278:	78 1f       	adc	r23, r24
    227a:	89 1f       	adc	r24, r25
    227c:	9a 1f       	adc	r25, r26
    227e:	a1 1d       	adc	r26, r1
    2280:	68 0f       	add	r22, r24
    2282:	79 1f       	adc	r23, r25
    2284:	8a 1f       	adc	r24, r26
    2286:	91 1d       	adc	r25, r1
    2288:	a1 1d       	adc	r26, r1
    228a:	6a 0f       	add	r22, r26
    228c:	71 1d       	adc	r23, r1
    228e:	81 1d       	adc	r24, r1
    2290:	91 1d       	adc	r25, r1
    2292:	a1 1d       	adc	r26, r1
    2294:	20 d0       	rcall	.+64     	; 0x22d6 <__ultoa_invert+0x84>
    2296:	09 f4       	brne	.+2      	; 0x229a <__ultoa_invert+0x48>
    2298:	68 94       	set
    229a:	3f 91       	pop	r19
    229c:	2a e0       	ldi	r18, 0x0A	; 10
    229e:	26 9f       	mul	r18, r22
    22a0:	11 24       	eor	r1, r1
    22a2:	30 19       	sub	r19, r0
    22a4:	30 5d       	subi	r19, 0xD0	; 208
    22a6:	31 93       	st	Z+, r19
    22a8:	de f6       	brtc	.-74     	; 0x2260 <__ultoa_invert+0xe>
    22aa:	cf 01       	movw	r24, r30
    22ac:	08 95       	ret
    22ae:	46 2f       	mov	r20, r22
    22b0:	47 70       	andi	r20, 0x07	; 7
    22b2:	40 5d       	subi	r20, 0xD0	; 208
    22b4:	41 93       	st	Z+, r20
    22b6:	b3 e0       	ldi	r27, 0x03	; 3
    22b8:	0f d0       	rcall	.+30     	; 0x22d8 <__ultoa_invert+0x86>
    22ba:	c9 f7       	brne	.-14     	; 0x22ae <__ultoa_invert+0x5c>
    22bc:	f6 cf       	rjmp	.-20     	; 0x22aa <__ultoa_invert+0x58>
    22be:	46 2f       	mov	r20, r22
    22c0:	4f 70       	andi	r20, 0x0F	; 15
    22c2:	40 5d       	subi	r20, 0xD0	; 208
    22c4:	4a 33       	cpi	r20, 0x3A	; 58
    22c6:	18 f0       	brcs	.+6      	; 0x22ce <__ultoa_invert+0x7c>
    22c8:	49 5d       	subi	r20, 0xD9	; 217
    22ca:	31 fd       	sbrc	r19, 1
    22cc:	40 52       	subi	r20, 0x20	; 32
    22ce:	41 93       	st	Z+, r20
    22d0:	02 d0       	rcall	.+4      	; 0x22d6 <__ultoa_invert+0x84>
    22d2:	a9 f7       	brne	.-22     	; 0x22be <__ultoa_invert+0x6c>
    22d4:	ea cf       	rjmp	.-44     	; 0x22aa <__ultoa_invert+0x58>
    22d6:	b4 e0       	ldi	r27, 0x04	; 4
    22d8:	a6 95       	lsr	r26
    22da:	97 95       	ror	r25
    22dc:	87 95       	ror	r24
    22de:	77 95       	ror	r23
    22e0:	67 95       	ror	r22
    22e2:	ba 95       	dec	r27
    22e4:	c9 f7       	brne	.-14     	; 0x22d8 <__ultoa_invert+0x86>
    22e6:	00 97       	sbiw	r24, 0x00	; 0
    22e8:	61 05       	cpc	r22, r1
    22ea:	71 05       	cpc	r23, r1
    22ec:	08 95       	ret
    22ee:	9b 01       	movw	r18, r22
    22f0:	ac 01       	movw	r20, r24
    22f2:	0a 2e       	mov	r0, r26
    22f4:	06 94       	lsr	r0
    22f6:	57 95       	ror	r21
    22f8:	47 95       	ror	r20
    22fa:	37 95       	ror	r19
    22fc:	27 95       	ror	r18
    22fe:	ba 95       	dec	r27
    2300:	c9 f7       	brne	.-14     	; 0x22f4 <__ultoa_invert+0xa2>
    2302:	62 0f       	add	r22, r18
    2304:	73 1f       	adc	r23, r19
    2306:	84 1f       	adc	r24, r20
    2308:	95 1f       	adc	r25, r21
    230a:	a0 1d       	adc	r26, r0
    230c:	08 95       	ret

0000230e <__prologue_saves__>:
    230e:	2f 92       	push	r2
    2310:	3f 92       	push	r3
    2312:	4f 92       	push	r4
    2314:	5f 92       	push	r5
    2316:	6f 92       	push	r6
    2318:	7f 92       	push	r7
    231a:	8f 92       	push	r8
    231c:	9f 92       	push	r9
    231e:	af 92       	push	r10
    2320:	bf 92       	push	r11
    2322:	cf 92       	push	r12
    2324:	df 92       	push	r13
    2326:	ef 92       	push	r14
    2328:	ff 92       	push	r15
    232a:	0f 93       	push	r16
    232c:	1f 93       	push	r17
    232e:	cf 93       	push	r28
    2330:	df 93       	push	r29
    2332:	cd b7       	in	r28, 0x3d	; 61
    2334:	de b7       	in	r29, 0x3e	; 62
    2336:	ca 1b       	sub	r28, r26
    2338:	db 0b       	sbc	r29, r27
    233a:	0f b6       	in	r0, 0x3f	; 63
    233c:	f8 94       	cli
    233e:	de bf       	out	0x3e, r29	; 62
    2340:	0f be       	out	0x3f, r0	; 63
    2342:	cd bf       	out	0x3d, r28	; 61
    2344:	09 94       	ijmp

00002346 <__epilogue_restores__>:
    2346:	2a 88       	ldd	r2, Y+18	; 0x12
    2348:	39 88       	ldd	r3, Y+17	; 0x11
    234a:	48 88       	ldd	r4, Y+16	; 0x10
    234c:	5f 84       	ldd	r5, Y+15	; 0x0f
    234e:	6e 84       	ldd	r6, Y+14	; 0x0e
    2350:	7d 84       	ldd	r7, Y+13	; 0x0d
    2352:	8c 84       	ldd	r8, Y+12	; 0x0c
    2354:	9b 84       	ldd	r9, Y+11	; 0x0b
    2356:	aa 84       	ldd	r10, Y+10	; 0x0a
    2358:	b9 84       	ldd	r11, Y+9	; 0x09
    235a:	c8 84       	ldd	r12, Y+8	; 0x08
    235c:	df 80       	ldd	r13, Y+7	; 0x07
    235e:	ee 80       	ldd	r14, Y+6	; 0x06
    2360:	fd 80       	ldd	r15, Y+5	; 0x05
    2362:	0c 81       	ldd	r16, Y+4	; 0x04
    2364:	1b 81       	ldd	r17, Y+3	; 0x03
    2366:	aa 81       	ldd	r26, Y+2	; 0x02
    2368:	b9 81       	ldd	r27, Y+1	; 0x01
    236a:	ce 0f       	add	r28, r30
    236c:	d1 1d       	adc	r29, r1
    236e:	0f b6       	in	r0, 0x3f	; 63
    2370:	f8 94       	cli
    2372:	de bf       	out	0x3e, r29	; 62
    2374:	0f be       	out	0x3f, r0	; 63
    2376:	cd bf       	out	0x3d, r28	; 61
    2378:	ed 01       	movw	r28, r26
    237a:	08 95       	ret

0000237c <_exit>:
    237c:	f8 94       	cli

0000237e <__stop_program>:
    237e:	ff cf       	rjmp	.-2      	; 0x237e <__stop_program>
