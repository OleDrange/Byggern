
Byggern.elf:     file format elf32-avr

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .data         00000200  00800100  00001ea8  00001f3c  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  1 .text         00001ea8  00000000  00000000  00000094  2**1
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .bss          00000019  00800300  00800300  0000213c  2**0
                  ALLOC
  3 .comment      0000005c  00000000  00000000  0000213c  2**0
                  CONTENTS, READONLY
  4 .debug_aranges 000002b8  00000000  00000000  00002198  2**0
                  CONTENTS, READONLY, DEBUGGING
  5 .debug_info   00002dee  00000000  00000000  00002450  2**0
                  CONTENTS, READONLY, DEBUGGING
  6 .debug_abbrev 0000100e  00000000  00000000  0000523e  2**0
                  CONTENTS, READONLY, DEBUGGING
  7 .debug_line   00000faf  00000000  00000000  0000624c  2**0
                  CONTENTS, READONLY, DEBUGGING
  8 .debug_frame  00000794  00000000  00000000  000071fc  2**2
                  CONTENTS, READONLY, DEBUGGING
  9 .debug_str    000009e3  00000000  00000000  00007990  2**0
                  CONTENTS, READONLY, DEBUGGING
 10 .debug_loc    00001d8f  00000000  00000000  00008373  2**0
                  CONTENTS, READONLY, DEBUGGING
 11 .debug_ranges 00000280  00000000  00000000  0000a102  2**0
                  CONTENTS, READONLY, DEBUGGING

Disassembly of section .text:

00000000 <__vectors>:
       0:	0c 94 b4 01 	jmp	0x368	; 0x368 <__ctors_end>
       4:	0c 94 5d 03 	jmp	0x6ba	; 0x6ba <__vector_1>
       8:	0c 94 d3 01 	jmp	0x3a6	; 0x3a6 <__vector_2>
       c:	0c 94 d1 01 	jmp	0x3a2	; 0x3a2 <__bad_interrupt>
      10:	0c 94 d1 01 	jmp	0x3a2	; 0x3a2 <__bad_interrupt>
      14:	0c 94 d1 01 	jmp	0x3a2	; 0x3a2 <__bad_interrupt>
      18:	0c 94 d1 01 	jmp	0x3a2	; 0x3a2 <__bad_interrupt>
      1c:	0c 94 d1 01 	jmp	0x3a2	; 0x3a2 <__bad_interrupt>
      20:	0c 94 d1 01 	jmp	0x3a2	; 0x3a2 <__bad_interrupt>
      24:	0c 94 d1 01 	jmp	0x3a2	; 0x3a2 <__bad_interrupt>
      28:	0c 94 d1 01 	jmp	0x3a2	; 0x3a2 <__bad_interrupt>
      2c:	0c 94 d1 01 	jmp	0x3a2	; 0x3a2 <__bad_interrupt>
      30:	0c 94 d1 01 	jmp	0x3a2	; 0x3a2 <__bad_interrupt>
      34:	0c 94 d1 01 	jmp	0x3a2	; 0x3a2 <__bad_interrupt>
      38:	0c 94 d1 01 	jmp	0x3a2	; 0x3a2 <__bad_interrupt>
      3c:	0c 94 d1 01 	jmp	0x3a2	; 0x3a2 <__bad_interrupt>
      40:	0c 94 d1 01 	jmp	0x3a2	; 0x3a2 <__bad_interrupt>
      44:	0c 94 d1 01 	jmp	0x3a2	; 0x3a2 <__bad_interrupt>
      48:	0c 94 d1 01 	jmp	0x3a2	; 0x3a2 <__bad_interrupt>
      4c:	0c 94 d1 01 	jmp	0x3a2	; 0x3a2 <__bad_interrupt>
      50:	0c 94 d1 01 	jmp	0x3a2	; 0x3a2 <__bad_interrupt>
      54:	0c 94 d1 01 	jmp	0x3a2	; 0x3a2 <__bad_interrupt>
      58:	0c 94 d1 01 	jmp	0x3a2	; 0x3a2 <__bad_interrupt>
      5c:	0c 94 d1 01 	jmp	0x3a2	; 0x3a2 <__bad_interrupt>
      60:	0c 94 d1 01 	jmp	0x3a2	; 0x3a2 <__bad_interrupt>
      64:	0c 94 d1 01 	jmp	0x3a2	; 0x3a2 <__bad_interrupt>
      68:	0c 94 d1 01 	jmp	0x3a2	; 0x3a2 <__bad_interrupt>
      6c:	0c 94 d1 01 	jmp	0x3a2	; 0x3a2 <__bad_interrupt>

00000070 <__trampolines_end>:
	...
      78:	00 06       	cpc	r0, r16
      7a:	5f 5f       	subi	r21, 0xFF	; 255
      7c:	06 00       	.word	0x0006	; ????
      7e:	00 00       	nop
      80:	00 07       	cpc	r16, r16
      82:	07 00       	.word	0x0007	; ????
      84:	07 07       	cpc	r16, r23
      86:	00 00       	nop
      88:	14 7f       	andi	r17, 0xF4	; 244
      8a:	7f 14       	cp	r7, r15
      8c:	7f 7f       	andi	r23, 0xFF	; 255
      8e:	14 00       	.word	0x0014	; ????
      90:	24 2e       	mov	r2, r20
      92:	6b 6b       	ori	r22, 0xBB	; 187
      94:	3a 12       	cpse	r3, r26
      96:	00 00       	nop
      98:	46 66       	ori	r20, 0x66	; 102
      9a:	30 18       	sub	r3, r0
      9c:	0c 66       	ori	r16, 0x6C	; 108
      9e:	62 00       	.word	0x0062	; ????
      a0:	30 7a       	andi	r19, 0xA0	; 160
      a2:	4f 5d       	subi	r20, 0xDF	; 223
      a4:	37 7a       	andi	r19, 0xA7	; 167
      a6:	48 00       	.word	0x0048	; ????
      a8:	04 07       	cpc	r16, r20
      aa:	03 00       	.word	0x0003	; ????
      ac:	00 00       	nop
      ae:	00 00       	nop
      b0:	00 1c       	adc	r0, r0
      b2:	3e 63       	ori	r19, 0x3E	; 62
      b4:	41 00       	.word	0x0041	; ????
      b6:	00 00       	nop
      b8:	00 41       	sbci	r16, 0x10	; 16
      ba:	63 3e       	cpi	r22, 0xE3	; 227
      bc:	1c 00       	.word	0x001c	; ????
      be:	00 00       	nop
      c0:	08 2a       	or	r0, r24
      c2:	3e 1c       	adc	r3, r14
      c4:	1c 3e       	cpi	r17, 0xEC	; 236
      c6:	2a 08       	sbc	r2, r10
      c8:	08 08       	sbc	r0, r8
      ca:	3e 3e       	cpi	r19, 0xEE	; 238
      cc:	08 08       	sbc	r0, r8
      ce:	00 00       	nop
      d0:	00 a0       	ldd	r0, Z+32	; 0x20
      d2:	e0 60       	ori	r30, 0x00	; 0
      d4:	00 00       	nop
      d6:	00 00       	nop
      d8:	08 08       	sbc	r0, r8
      da:	08 08       	sbc	r0, r8
      dc:	08 08       	sbc	r0, r8
      de:	00 00       	nop
      e0:	00 00       	nop
      e2:	60 60       	ori	r22, 0x00	; 0
      e4:	00 00       	nop
      e6:	00 00       	nop
      e8:	60 30       	cpi	r22, 0x00	; 0
      ea:	18 0c       	add	r1, r8
      ec:	06 03       	mulsu	r16, r22
      ee:	01 00       	.word	0x0001	; ????
      f0:	3e 7f       	andi	r19, 0xFE	; 254
      f2:	59 4d       	sbci	r21, 0xD9	; 217
      f4:	7f 3e       	cpi	r23, 0xEF	; 239
      f6:	00 00       	nop
      f8:	42 42       	sbci	r20, 0x22	; 34
      fa:	7f 7f       	andi	r23, 0xFF	; 255
      fc:	40 40       	sbci	r20, 0x00	; 0
      fe:	00 00       	nop
     100:	62 73       	andi	r22, 0x32	; 50
     102:	59 49       	sbci	r21, 0x99	; 153
     104:	6f 66       	ori	r22, 0x6F	; 111
     106:	00 00       	nop
     108:	22 63       	ori	r18, 0x32	; 50
     10a:	49 49       	sbci	r20, 0x99	; 153
     10c:	7f 36       	cpi	r23, 0x6F	; 111
     10e:	00 00       	nop
     110:	18 1c       	adc	r1, r8
     112:	16 13       	cpse	r17, r22
     114:	7f 7f       	andi	r23, 0xFF	; 255
     116:	10 00       	.word	0x0010	; ????
     118:	27 67       	ori	r18, 0x77	; 119
     11a:	45 45       	sbci	r20, 0x55	; 85
     11c:	7d 39       	cpi	r23, 0x9D	; 157
     11e:	00 00       	nop
     120:	3c 7e       	andi	r19, 0xEC	; 236
     122:	4b 49       	sbci	r20, 0x9B	; 155
     124:	79 30       	cpi	r23, 0x09	; 9
     126:	00 00       	nop
     128:	03 63       	ori	r16, 0x33	; 51
     12a:	71 19       	sub	r23, r1
     12c:	0f 07       	cpc	r16, r31
     12e:	00 00       	nop
     130:	36 7f       	andi	r19, 0xF6	; 246
     132:	49 49       	sbci	r20, 0x99	; 153
     134:	7f 36       	cpi	r23, 0x6F	; 111
     136:	00 00       	nop
     138:	06 4f       	sbci	r16, 0xF6	; 246
     13a:	49 69       	ori	r20, 0x99	; 153
     13c:	3f 1e       	adc	r3, r31
     13e:	00 00       	nop
     140:	00 00       	nop
     142:	6c 6c       	ori	r22, 0xCC	; 204
     144:	00 00       	nop
     146:	00 00       	nop
     148:	00 a0       	ldd	r0, Z+32	; 0x20
     14a:	ec 6c       	ori	r30, 0xCC	; 204
     14c:	00 00       	nop
     14e:	00 00       	nop
     150:	08 1c       	adc	r0, r8
     152:	36 63       	ori	r19, 0x36	; 54
     154:	41 00       	.word	0x0041	; ????
     156:	00 00       	nop
     158:	14 14       	cp	r1, r4
     15a:	14 14       	cp	r1, r4
     15c:	14 14       	cp	r1, r4
     15e:	00 00       	nop
     160:	00 41       	sbci	r16, 0x10	; 16
     162:	63 36       	cpi	r22, 0x63	; 99
     164:	1c 08       	sbc	r1, r12
     166:	00 00       	nop
     168:	02 03       	mulsu	r16, r18
     16a:	51 59       	subi	r21, 0x91	; 145
     16c:	0f 06       	cpc	r0, r31
     16e:	00 00       	nop
     170:	3e 7f       	andi	r19, 0xFE	; 254
     172:	41 5d       	subi	r20, 0xD1	; 209
     174:	5d 1f       	adc	r21, r29
     176:	1e 00       	.word	0x001e	; ????
     178:	7c 7e       	andi	r23, 0xEC	; 236
     17a:	13 13       	cpse	r17, r19
     17c:	7e 7c       	andi	r23, 0xCE	; 206
     17e:	00 00       	nop
     180:	41 7f       	andi	r20, 0xF1	; 241
     182:	7f 49       	sbci	r23, 0x9F	; 159
     184:	49 7f       	andi	r20, 0xF9	; 249
     186:	36 00       	.word	0x0036	; ????
     188:	1c 3e       	cpi	r17, 0xEC	; 236
     18a:	63 41       	sbci	r22, 0x13	; 19
     18c:	41 63       	ori	r20, 0x31	; 49
     18e:	22 00       	.word	0x0022	; ????
     190:	41 7f       	andi	r20, 0xF1	; 241
     192:	7f 41       	sbci	r23, 0x1F	; 31
     194:	63 7f       	andi	r22, 0xF3	; 243
     196:	1c 00       	.word	0x001c	; ????
     198:	41 7f       	andi	r20, 0xF1	; 241
     19a:	7f 49       	sbci	r23, 0x9F	; 159
     19c:	5d 41       	sbci	r21, 0x1D	; 29
     19e:	63 00       	.word	0x0063	; ????
     1a0:	41 7f       	andi	r20, 0xF1	; 241
     1a2:	7f 49       	sbci	r23, 0x9F	; 159
     1a4:	1d 01       	movw	r2, r26
     1a6:	03 00       	.word	0x0003	; ????
     1a8:	1c 3e       	cpi	r17, 0xEC	; 236
     1aa:	63 41       	sbci	r22, 0x13	; 19
     1ac:	51 73       	andi	r21, 0x31	; 49
     1ae:	72 00       	.word	0x0072	; ????
     1b0:	7f 7f       	andi	r23, 0xFF	; 255
     1b2:	08 08       	sbc	r0, r8
     1b4:	7f 7f       	andi	r23, 0xFF	; 255
     1b6:	00 00       	nop
     1b8:	00 41       	sbci	r16, 0x10	; 16
     1ba:	7f 7f       	andi	r23, 0xFF	; 255
     1bc:	41 00       	.word	0x0041	; ????
     1be:	00 00       	nop
     1c0:	30 70       	andi	r19, 0x00	; 0
     1c2:	40 41       	sbci	r20, 0x10	; 16
     1c4:	7f 3f       	cpi	r23, 0xFF	; 255
     1c6:	01 00       	.word	0x0001	; ????
     1c8:	41 7f       	andi	r20, 0xF1	; 241
     1ca:	7f 08       	sbc	r7, r15
     1cc:	1c 77       	andi	r17, 0x7C	; 124
     1ce:	63 00       	.word	0x0063	; ????
     1d0:	41 7f       	andi	r20, 0xF1	; 241
     1d2:	7f 41       	sbci	r23, 0x1F	; 31
     1d4:	40 60       	ori	r20, 0x00	; 0
     1d6:	70 00       	.word	0x0070	; ????
     1d8:	7f 7f       	andi	r23, 0xFF	; 255
     1da:	06 0c       	add	r0, r6
     1dc:	06 7f       	andi	r16, 0xF6	; 246
     1de:	7f 00       	.word	0x007f	; ????
     1e0:	7f 7f       	andi	r23, 0xFF	; 255
     1e2:	06 0c       	add	r0, r6
     1e4:	18 7f       	andi	r17, 0xF8	; 248
     1e6:	7f 00       	.word	0x007f	; ????
     1e8:	1c 3e       	cpi	r17, 0xEC	; 236
     1ea:	63 41       	sbci	r22, 0x13	; 19
     1ec:	63 3e       	cpi	r22, 0xE3	; 227
     1ee:	1c 00       	.word	0x001c	; ????
     1f0:	41 7f       	andi	r20, 0xF1	; 241
     1f2:	7f 49       	sbci	r23, 0x9F	; 159
     1f4:	09 0f       	add	r16, r25
     1f6:	06 00       	.word	0x0006	; ????
     1f8:	1e 3f       	cpi	r17, 0xFE	; 254
     1fa:	21 71       	andi	r18, 0x11	; 17
     1fc:	7f 5e       	subi	r23, 0xEF	; 239
     1fe:	00 00       	nop
     200:	41 7f       	andi	r20, 0xF1	; 241
     202:	7f 19       	sub	r23, r15
     204:	39 6f       	ori	r19, 0xF9	; 249
     206:	46 00       	.word	0x0046	; ????
     208:	26 67       	ori	r18, 0x76	; 118
     20a:	4d 59       	subi	r20, 0x9D	; 157
     20c:	7b 32       	cpi	r23, 0x2B	; 43
     20e:	00 00       	nop
     210:	03 41       	sbci	r16, 0x13	; 19
     212:	7f 7f       	andi	r23, 0xFF	; 255
     214:	41 03       	mulsu	r20, r17
     216:	00 00       	nop
     218:	7f 7f       	andi	r23, 0xFF	; 255
     21a:	40 40       	sbci	r20, 0x00	; 0
     21c:	7f 7f       	andi	r23, 0xFF	; 255
     21e:	00 00       	nop
     220:	1f 3f       	cpi	r17, 0xFF	; 255
     222:	60 60       	ori	r22, 0x00	; 0
     224:	3f 1f       	adc	r19, r31
     226:	00 00       	nop
     228:	7f 7f       	andi	r23, 0xFF	; 255
     22a:	30 18       	sub	r3, r0
     22c:	30 7f       	andi	r19, 0xF0	; 240
     22e:	7f 00       	.word	0x007f	; ????
     230:	63 77       	andi	r22, 0x73	; 115
     232:	1c 08       	sbc	r1, r12
     234:	1c 77       	andi	r17, 0x7C	; 124
     236:	63 00       	.word	0x0063	; ????
     238:	07 4f       	sbci	r16, 0xF7	; 247
     23a:	78 78       	andi	r23, 0x88	; 136
     23c:	4f 07       	cpc	r20, r31
     23e:	00 00       	nop
     240:	67 73       	andi	r22, 0x37	; 55
     242:	59 4d       	sbci	r21, 0xD9	; 217
     244:	47 63       	ori	r20, 0x37	; 55
     246:	71 00       	.word	0x0071	; ????
     248:	00 7f       	andi	r16, 0xF0	; 240
     24a:	7f 41       	sbci	r23, 0x1F	; 31
     24c:	41 00       	.word	0x0041	; ????
     24e:	00 00       	nop
     250:	01 03       	mulsu	r16, r17
     252:	06 0c       	add	r0, r6
     254:	18 30       	cpi	r17, 0x08	; 8
     256:	60 00       	.word	0x0060	; ????
     258:	00 41       	sbci	r16, 0x10	; 16
     25a:	41 7f       	andi	r20, 0xF1	; 241
     25c:	7f 00       	.word	0x007f	; ????
     25e:	00 00       	nop
     260:	08 0c       	add	r0, r8
     262:	06 03       	mulsu	r16, r22
     264:	06 0c       	add	r0, r6
     266:	08 00       	.word	0x0008	; ????
     268:	80 80       	ld	r8, Z
     26a:	80 80       	ld	r8, Z
     26c:	80 80       	ld	r8, Z
     26e:	80 80       	ld	r8, Z
     270:	00 00       	nop
     272:	03 07       	cpc	r16, r19
     274:	04 00       	.word	0x0004	; ????
     276:	00 00       	nop
     278:	20 74       	andi	r18, 0x40	; 64
     27a:	54 54       	subi	r21, 0x44	; 68
     27c:	3c 78       	andi	r19, 0x8C	; 140
     27e:	40 00       	.word	0x0040	; ????
     280:	41 3f       	cpi	r20, 0xF1	; 241
     282:	7f 44       	sbci	r23, 0x4F	; 79
     284:	44 7c       	andi	r20, 0xC4	; 196
     286:	38 00       	.word	0x0038	; ????
     288:	38 7c       	andi	r19, 0xC8	; 200
     28a:	44 44       	sbci	r20, 0x44	; 68
     28c:	6c 28       	or	r6, r12
     28e:	00 00       	nop
     290:	30 78       	andi	r19, 0x80	; 128
     292:	48 49       	sbci	r20, 0x98	; 152
     294:	3f 7f       	andi	r19, 0xFF	; 255
     296:	40 00       	.word	0x0040	; ????
     298:	38 7c       	andi	r19, 0xC8	; 200
     29a:	54 54       	subi	r21, 0x44	; 68
     29c:	5c 18       	sub	r5, r12
     29e:	00 00       	nop
     2a0:	48 7e       	andi	r20, 0xE8	; 232
     2a2:	7f 49       	sbci	r23, 0x9F	; 159
     2a4:	03 02       	muls	r16, r19
     2a6:	00 00       	nop
     2a8:	98 bc       	out	0x28, r9	; 40
     2aa:	a4 a4       	ldd	r10, Z+44	; 0x2c
     2ac:	f8 7c       	andi	r31, 0xC8	; 200
     2ae:	04 00       	.word	0x0004	; ????
     2b0:	41 7f       	andi	r20, 0xF1	; 241
     2b2:	7f 08       	sbc	r7, r15
     2b4:	04 7c       	andi	r16, 0xC4	; 196
     2b6:	78 00       	.word	0x0078	; ????
     2b8:	00 44       	sbci	r16, 0x40	; 64
     2ba:	7d 7d       	andi	r23, 0xDD	; 221
     2bc:	40 00       	.word	0x0040	; ????
     2be:	00 00       	nop
     2c0:	40 c4       	rjmp	.+2176   	; 0xb42 <joystickPos+0x28>
     2c2:	84 fd       	sbrc	r24, 4
     2c4:	7d 00       	.word	0x007d	; ????
     2c6:	00 00       	nop
     2c8:	41 7f       	andi	r20, 0xF1	; 241
     2ca:	7f 10       	cpse	r7, r15
     2cc:	38 6c       	ori	r19, 0xC8	; 200
     2ce:	44 00       	.word	0x0044	; ????
     2d0:	00 41       	sbci	r16, 0x10	; 16
     2d2:	7f 7f       	andi	r23, 0xFF	; 255
     2d4:	40 00       	.word	0x0040	; ????
     2d6:	00 00       	nop
     2d8:	7c 7c       	andi	r23, 0xCC	; 204
     2da:	0c 18       	sub	r0, r12
     2dc:	0c 7c       	andi	r16, 0xCC	; 204
     2de:	78 00       	.word	0x0078	; ????
     2e0:	7c 7c       	andi	r23, 0xCC	; 204
     2e2:	04 04       	cpc	r0, r4
     2e4:	7c 78       	andi	r23, 0x8C	; 140
     2e6:	00 00       	nop
     2e8:	38 7c       	andi	r19, 0xC8	; 200
     2ea:	44 44       	sbci	r20, 0x44	; 68
     2ec:	7c 38       	cpi	r23, 0x8C	; 140
     2ee:	00 00       	nop
     2f0:	84 fc       	sbrc	r8, 4
     2f2:	f8 a4       	ldd	r15, Y+40	; 0x28
     2f4:	24 3c       	cpi	r18, 0xC4	; 196
     2f6:	18 00       	.word	0x0018	; ????
     2f8:	18 3c       	cpi	r17, 0xC8	; 200
     2fa:	24 a4       	ldd	r2, Z+44	; 0x2c
     2fc:	f8 fc       	.word	0xfcf8	; ????
     2fe:	84 00       	.word	0x0084	; ????
     300:	44 7c       	andi	r20, 0xC4	; 196
     302:	78 44       	sbci	r23, 0x48	; 72
     304:	1c 18       	sub	r1, r12
     306:	00 00       	nop
     308:	48 5c       	subi	r20, 0xC8	; 200
     30a:	54 54       	subi	r21, 0x44	; 68
     30c:	74 24       	eor	r7, r4
     30e:	00 00       	nop
     310:	00 04       	cpc	r0, r0
     312:	3e 7f       	andi	r19, 0xFE	; 254
     314:	44 24       	eor	r4, r4
     316:	00 00       	nop
     318:	3c 7c       	andi	r19, 0xCC	; 204
     31a:	40 40       	sbci	r20, 0x00	; 0
     31c:	3c 7c       	andi	r19, 0xCC	; 204
     31e:	40 00       	.word	0x0040	; ????
     320:	1c 3c       	cpi	r17, 0xCC	; 204
     322:	60 60       	ori	r22, 0x00	; 0
     324:	3c 1c       	adc	r3, r12
     326:	00 00       	nop
     328:	3c 7c       	andi	r19, 0xCC	; 204
     32a:	60 30       	cpi	r22, 0x00	; 0
     32c:	60 7c       	andi	r22, 0xC0	; 192
     32e:	3c 00       	.word	0x003c	; ????
     330:	44 6c       	ori	r20, 0xC4	; 196
     332:	38 10       	cpse	r3, r8
     334:	38 6c       	ori	r19, 0xC8	; 200
     336:	44 00       	.word	0x0044	; ????
     338:	9c bc       	out	0x2c, r9	; 44
     33a:	a0 a0       	ldd	r10, Z+32	; 0x20
     33c:	fc 7c       	andi	r31, 0xCC	; 204
     33e:	00 00       	nop
     340:	4c 64       	ori	r20, 0x4C	; 76
     342:	74 5c       	subi	r23, 0xC4	; 196
     344:	4c 64       	ori	r20, 0x4C	; 76
     346:	00 00       	nop
     348:	08 08       	sbc	r0, r8
     34a:	3e 77       	andi	r19, 0x7E	; 126
     34c:	41 41       	sbci	r20, 0x11	; 17
     34e:	00 00       	nop
     350:	00 00       	nop
     352:	00 77       	andi	r16, 0x70	; 112
     354:	77 00       	.word	0x0077	; ????
     356:	00 00       	nop
     358:	41 41       	sbci	r20, 0x11	; 17
     35a:	77 3e       	cpi	r23, 0xE7	; 231
     35c:	08 08       	sbc	r0, r8
     35e:	00 00       	nop
     360:	02 03       	mulsu	r16, r18
     362:	01 03       	mulsu	r16, r17
     364:	02 03       	mulsu	r16, r18
     366:	01 00       	.word	0x0001	; ????

00000368 <__ctors_end>:
     368:	11 24       	eor	r1, r1
     36a:	1f be       	out	0x3f, r1	; 63
     36c:	cf ef       	ldi	r28, 0xFF	; 255
     36e:	d4 e0       	ldi	r29, 0x04	; 4
     370:	de bf       	out	0x3e, r29	; 62
     372:	cd bf       	out	0x3d, r28	; 61

00000374 <__do_copy_data>:
     374:	13 e0       	ldi	r17, 0x03	; 3
     376:	a0 e0       	ldi	r26, 0x00	; 0
     378:	b1 e0       	ldi	r27, 0x01	; 1
     37a:	e8 ea       	ldi	r30, 0xA8	; 168
     37c:	fe e1       	ldi	r31, 0x1E	; 30
     37e:	02 c0       	rjmp	.+4      	; 0x384 <__do_copy_data+0x10>
     380:	05 90       	lpm	r0, Z+
     382:	0d 92       	st	X+, r0
     384:	a0 30       	cpi	r26, 0x00	; 0
     386:	b1 07       	cpc	r27, r17
     388:	d9 f7       	brne	.-10     	; 0x380 <__do_copy_data+0xc>

0000038a <__do_clear_bss>:
     38a:	23 e0       	ldi	r18, 0x03	; 3
     38c:	a0 e0       	ldi	r26, 0x00	; 0
     38e:	b3 e0       	ldi	r27, 0x03	; 3
     390:	01 c0       	rjmp	.+2      	; 0x394 <.do_clear_bss_start>

00000392 <.do_clear_bss_loop>:
     392:	1d 92       	st	X+, r1

00000394 <.do_clear_bss_start>:
     394:	a9 31       	cpi	r26, 0x19	; 25
     396:	b2 07       	cpc	r27, r18
     398:	e1 f7       	brne	.-8      	; 0x392 <.do_clear_bss_loop>
     39a:	0e 94 c2 02 	call	0x584	; 0x584 <main>
     39e:	0c 94 52 0f 	jmp	0x1ea4	; 0x1ea4 <_exit>

000003a2 <__bad_interrupt>:
     3a2:	0c 94 00 00 	jmp	0	; 0x0 <__vectors>

000003a6 <__vector_2>:
#endif

volatile char* ext_adc = ADC_ADDRESS;	//Create a pointer to the array of all addresses we will write to. ADC starting at 0x1400.
volatile char ADC_data;

ISR(INT1_vect){
     3a6:	1f 92       	push	r1
     3a8:	0f 92       	push	r0
     3aa:	0f b6       	in	r0, 0x3f	; 63
     3ac:	0f 92       	push	r0
     3ae:	11 24       	eor	r1, r1
     3b0:	8f 93       	push	r24
     3b2:	ef 93       	push	r30
     3b4:	ff 93       	push	r31
	
	ADC_data = ext_adc[0x00];
     3b6:	e0 91 0a 01 	lds	r30, 0x010A
     3ba:	f0 91 0b 01 	lds	r31, 0x010B
     3be:	80 81       	ld	r24, Z
     3c0:	80 93 04 03 	sts	0x0304, r24
}
     3c4:	ff 91       	pop	r31
     3c6:	ef 91       	pop	r30
     3c8:	8f 91       	pop	r24
     3ca:	0f 90       	pop	r0
     3cc:	0f be       	out	0x3f, r0	; 63
     3ce:	0f 90       	pop	r0
     3d0:	1f 90       	pop	r1
     3d2:	18 95       	reti

000003d4 <ADC_init>:
void ADC_init(void){
	
	//INITIALIZE INTERRUPT ON PIN PD3

	// Button input
	clear_bit(DDRD, PD3);
     3d4:	8b 98       	cbi	0x11, 3	; 17
	set_bit(PORTD, PD3);	//Set pull-up resistor
     3d6:	93 9a       	sbi	0x12, 3	; 18
	// Disable global interrupts
	cli();
     3d8:	f8 94       	cli
	// Interrupt on falling edge PD3
	set_bit(MCUCR, ISC11);
     3da:	85 b7       	in	r24, 0x35	; 53
     3dc:	88 60       	ori	r24, 0x08	; 8
     3de:	85 bf       	out	0x35, r24	; 53
	clear_bit(MCUCR, ISC10);
     3e0:	85 b7       	in	r24, 0x35	; 53
     3e2:	8b 7f       	andi	r24, 0xFB	; 251
     3e4:	85 bf       	out	0x35, r24	; 53
	// Enable interrupt on PD3
	set_bit(GICR,INT1);
     3e6:	8b b7       	in	r24, 0x3b	; 59
     3e8:	80 68       	ori	r24, 0x80	; 128
     3ea:	8b bf       	out	0x3b, r24	; 59
	// Enable global interrupts
	sei();
     3ec:	78 94       	sei
     3ee:	08 95       	ret

000003f0 <get_ADC_data>:
}

char get_ADC_data(void){
	return ext_adc[0x00]; //ADC_data;
     3f0:	e0 91 0a 01 	lds	r30, 0x010A
     3f4:	f0 91 0b 01 	lds	r31, 0x010B
     3f8:	80 81       	ld	r24, Z
}
     3fa:	08 95       	ret

000003fc <ADC_start_read>:

void ADC_start_read(ADC_channel channel){
	
	char data = 0x00;
	switch (channel) {
     3fc:	81 30       	cpi	r24, 0x01	; 1
     3fe:	a9 f0       	breq	.+42     	; 0x42a <ADC_start_read+0x2e>
     400:	90 f0       	brcs	.+36     	; 0x426 <ADC_start_read+0x2a>
     402:	82 30       	cpi	r24, 0x02	; 2
     404:	19 f0       	breq	.+6      	; 0x40c <ADC_start_read+0x10>
     406:	83 30       	cpi	r24, 0x03	; 3
     408:	19 f0       	breq	.+6      	; 0x410 <ADC_start_read+0x14>
     40a:	04 c0       	rjmp	.+8      	; 0x414 <ADC_start_read+0x18>
		break;
		case CHANNEL2 :
		data = 0x05;
		break;
		case CHANNEL3 :
		data = 0x06;
     40c:	86 e0       	ldi	r24, 0x06	; 6
		break;
     40e:	0e c0       	rjmp	.+28     	; 0x42c <ADC_start_read+0x30>
		case CHANNEL4 :
		data = 0x07;
     410:	87 e0       	ldi	r24, 0x07	; 7
		break;
     412:	0c c0       	rjmp	.+24     	; 0x42c <ADC_start_read+0x30>
		default:
		printf("Not valid channel");
     414:	80 e3       	ldi	r24, 0x30	; 48
     416:	91 e0       	ldi	r25, 0x01	; 1
     418:	9f 93       	push	r25
     41a:	8f 93       	push	r24
     41c:	0e 94 dc 0b 	call	0x17b8	; 0x17b8 <printf>
		return EXIT_FAILURE;
     420:	0f 90       	pop	r0
     422:	0f 90       	pop	r0
     424:	08 95       	ret
void ADC_start_read(ADC_channel channel){
	
	char data = 0x00;
	switch (channel) {
		case CHANNEL1 :
		data = 0x04;
     426:	84 e0       	ldi	r24, 0x04	; 4
     428:	01 c0       	rjmp	.+2      	; 0x42c <ADC_start_read+0x30>
		break;
		case CHANNEL2 :
		data = 0x05;
     42a:	85 e0       	ldi	r24, 0x05	; 5
		default:
		printf("Not valid channel");
		return EXIT_FAILURE;
	}
	
	ext_adc[0] = data;
     42c:	e0 91 0a 01 	lds	r30, 0x010A
     430:	f0 91 0b 01 	lds	r31, 0x010B
     434:	80 83       	st	Z, r24
     436:	08 95       	ret

00000438 <My_serial_Transmit>:
}

void My_serial_Transmit( unsigned char data )
{
	/* Wait for empty transmit buffer */
	while ( !( UCSR0A & (1<<UDRE0)) )
     438:	5d 9b       	sbis	0x0b, 5	; 11
     43a:	fe cf       	rjmp	.-4      	; 0x438 <My_serial_Transmit>
	;
	/* Put data into buffer, sends the data */
	UDR0 = data;
     43c:	8c b9       	out	0x0c, r24	; 12
     43e:	08 95       	ret

00000440 <My_serial_Receive>:
}

unsigned char My_serial_Receive( void )
{
	/* Wait for data to be received */
	while ( !(UCSR0A & (1<<RXC0)) );
     440:	5f 9b       	sbis	0x0b, 7	; 11
     442:	fe cf       	rjmp	.-4      	; 0x440 <My_serial_Receive>
	/* Get and return received data from buffer */
	return UDR0;
     444:	8c b1       	in	r24, 0x0c	; 12
     446:	08 95       	ret

00000448 <My_serial_Init>:


void My_serial_Init( unsigned int ubrr )
{
	
	MCUCR |= (1 << SRE);
     448:	25 b7       	in	r18, 0x35	; 53
     44a:	20 68       	ori	r18, 0x80	; 128
     44c:	25 bf       	out	0x35, r18	; 53
	SFIOR |= (1 << XMM2);
     44e:	20 b7       	in	r18, 0x30	; 48
     450:	20 62       	ori	r18, 0x20	; 32
     452:	20 bf       	out	0x30, r18	; 48
	
	/* Set baud rate */
	UBRR0H = (unsigned char)(ubrr>>8);
     454:	90 bd       	out	0x20, r25	; 32
	UBRR0L = (unsigned char)ubrr;
     456:	89 b9       	out	0x09, r24	; 9
	/* Enable receiver and transmitter */
	UCSR0B = (1<<RXEN0)|(1<<TXEN0);
     458:	88 e1       	ldi	r24, 0x18	; 24
     45a:	8a b9       	out	0x0a, r24	; 10
	/* Set frame format: 8data, 2stop bit */
	UCSR0C = (1<<URSEL0)|(1<<USBS0)|(3<<UCSZ00);
     45c:	8e e8       	ldi	r24, 0x8E	; 142
     45e:	80 bd       	out	0x20, r24	; 32
	
	fdevopen(My_serial_Transmit, My_serial_Receive);
     460:	60 e2       	ldi	r22, 0x20	; 32
     462:	72 e0       	ldi	r23, 0x02	; 2
     464:	8c e1       	ldi	r24, 0x1C	; 28
     466:	92 e0       	ldi	r25, 0x02	; 2
     468:	0e 94 91 0b 	call	0x1722	; 0x1722 <fdevopen>
     46c:	08 95       	ret

0000046e <SRAM_test>:
 * Created: 05.09.2019 12:22:35
 *  Author: oledr
 */ 
#include <stdlib.h>
void SRAM_test(void)
{
     46e:	cf 92       	push	r12
     470:	df 92       	push	r13
     472:	ef 92       	push	r14
     474:	ff 92       	push	r15
     476:	0f 93       	push	r16
     478:	1f 93       	push	r17
     47a:	cf 93       	push	r28
     47c:	df 93       	push	r29
	MCUCR |= (1 << SRE);
     47e:	85 b7       	in	r24, 0x35	; 53
     480:	80 68       	ori	r24, 0x80	; 128
     482:	85 bf       	out	0x35, r24	; 53
	SFIOR |= (1 << XMM2);
     484:	80 b7       	in	r24, 0x30	; 48
     486:	80 62       	ori	r24, 0x20	; 32
     488:	80 bf       	out	0x30, r24	; 48

	volatile char *ext_ram = (char *) 0x1800; // Start address for the SRAM
	uint16_t ext_ram_size = 0x800;
	uint16_t write_errors = 0;
	uint16_t retrieval_errors = 0;
	printf("Starting SRAM test...\r\n");
     48a:	82 e4       	ldi	r24, 0x42	; 66
     48c:	91 e0       	ldi	r25, 0x01	; 1
     48e:	0e 94 f0 0b 	call	0x17e0	; 0x17e0 <puts>
	// rand() stores some internal state, so calling this function in a loop will
	// yield different seeds each time (unless srand() is called before this
	//function)
	uint16_t seed = rand();
     492:	0e 94 81 0b 	call	0x1702	; 0x1702 <rand>
     496:	6c 01       	movw	r12, r24
	// Write phase: Immediately check that the correct value was stored
	srand(seed);
     498:	0e 94 86 0b 	call	0x170c	; 0x170c <srand>
	for (uint16_t i = 0; i < ext_ram_size; i++) {
     49c:	c0 e0       	ldi	r28, 0x00	; 0
     49e:	d0 e0       	ldi	r29, 0x00	; 0
	MCUCR |= (1 << SRE);
	SFIOR |= (1 << XMM2);

	volatile char *ext_ram = (char *) 0x1800; // Start address for the SRAM
	uint16_t ext_ram_size = 0x800;
	uint16_t write_errors = 0;
     4a0:	00 e0       	ldi	r16, 0x00	; 0
     4a2:	10 e0       	ldi	r17, 0x00	; 0
	for (uint16_t i = 0; i < ext_ram_size; i++) {
		uint8_t some_value = rand();
		ext_ram[i] = some_value;
		uint8_t retreived_value = ext_ram[i];
		if (retreived_value != some_value) {
			printf("Write phase error: ext_ram[%4d] = %02X (should be %02X)\r\n", i, retreived_value, some_value);
     4a4:	0f 2e       	mov	r0, r31
     4a6:	f9 e5       	ldi	r31, 0x59	; 89
     4a8:	ef 2e       	mov	r14, r31
     4aa:	f1 e0       	ldi	r31, 0x01	; 1
     4ac:	ff 2e       	mov	r15, r31
     4ae:	f0 2d       	mov	r31, r0
	//function)
	uint16_t seed = rand();
	// Write phase: Immediately check that the correct value was stored
	srand(seed);
	for (uint16_t i = 0; i < ext_ram_size; i++) {
		uint8_t some_value = rand();
     4b0:	0e 94 81 0b 	call	0x1702	; 0x1702 <rand>
     4b4:	fe 01       	movw	r30, r28
     4b6:	f8 5e       	subi	r31, 0xE8	; 232
		ext_ram[i] = some_value;
     4b8:	80 83       	st	Z, r24
		uint8_t retreived_value = ext_ram[i];
     4ba:	20 81       	ld	r18, Z
		if (retreived_value != some_value) {
     4bc:	28 17       	cp	r18, r24
     4be:	a9 f0       	breq	.+42     	; 0x4ea <SRAM_test+0x7c>
			printf("Write phase error: ext_ram[%4d] = %02X (should be %02X)\r\n", i, retreived_value, some_value);
     4c0:	99 27       	eor	r25, r25
     4c2:	9f 93       	push	r25
     4c4:	8f 93       	push	r24
     4c6:	1f 92       	push	r1
     4c8:	2f 93       	push	r18
     4ca:	df 93       	push	r29
     4cc:	cf 93       	push	r28
     4ce:	ff 92       	push	r15
     4d0:	ef 92       	push	r14
     4d2:	0e 94 dc 0b 	call	0x17b8	; 0x17b8 <printf>
			write_errors++;
     4d6:	0f 5f       	subi	r16, 0xFF	; 255
     4d8:	1f 4f       	sbci	r17, 0xFF	; 255
     4da:	8d b7       	in	r24, 0x3d	; 61
     4dc:	9e b7       	in	r25, 0x3e	; 62
     4de:	08 96       	adiw	r24, 0x08	; 8
     4e0:	0f b6       	in	r0, 0x3f	; 63
     4e2:	f8 94       	cli
     4e4:	9e bf       	out	0x3e, r25	; 62
     4e6:	0f be       	out	0x3f, r0	; 63
     4e8:	8d bf       	out	0x3d, r24	; 61
	// yield different seeds each time (unless srand() is called before this
	//function)
	uint16_t seed = rand();
	// Write phase: Immediately check that the correct value was stored
	srand(seed);
	for (uint16_t i = 0; i < ext_ram_size; i++) {
     4ea:	21 96       	adiw	r28, 0x01	; 1
     4ec:	c1 15       	cp	r28, r1
     4ee:	98 e0       	ldi	r25, 0x08	; 8
     4f0:	d9 07       	cpc	r29, r25
     4f2:	f1 f6       	brne	.-68     	; 0x4b0 <SRAM_test+0x42>
			write_errors++;
		}
	}
	// Retrieval phase: Check that no values were changed during or after the write
	//phase
	srand(seed); // reset the PRNG to the state it had before the write phase
     4f4:	c6 01       	movw	r24, r12
     4f6:	0e 94 86 0b 	call	0x170c	; 0x170c <srand>
	for (uint16_t i = 0; i < ext_ram_size; i++) {
     4fa:	c0 e0       	ldi	r28, 0x00	; 0
     4fc:	d0 e0       	ldi	r29, 0x00	; 0
	SFIOR |= (1 << XMM2);

	volatile char *ext_ram = (char *) 0x1800; // Start address for the SRAM
	uint16_t ext_ram_size = 0x800;
	uint16_t write_errors = 0;
	uint16_t retrieval_errors = 0;
     4fe:	e1 2c       	mov	r14, r1
     500:	f1 2c       	mov	r15, r1
	srand(seed); // reset the PRNG to the state it had before the write phase
	for (uint16_t i = 0; i < ext_ram_size; i++) {
		uint8_t some_value = rand();
		uint8_t retreived_value = ext_ram[i];
		if (retreived_value != some_value) {
			printf("Retrieval phase error: ext_ram[%4d] = %02X (should be %02X)\r\n", i, retreived_value, some_value);
     502:	0f 2e       	mov	r0, r31
     504:	f3 e9       	ldi	r31, 0x93	; 147
     506:	cf 2e       	mov	r12, r31
     508:	f1 e0       	ldi	r31, 0x01	; 1
     50a:	df 2e       	mov	r13, r31
     50c:	f0 2d       	mov	r31, r0
	}
	// Retrieval phase: Check that no values were changed during or after the write
	//phase
	srand(seed); // reset the PRNG to the state it had before the write phase
	for (uint16_t i = 0; i < ext_ram_size; i++) {
		uint8_t some_value = rand();
     50e:	0e 94 81 0b 	call	0x1702	; 0x1702 <rand>
     512:	fe 01       	movw	r30, r28
     514:	f8 5e       	subi	r31, 0xE8	; 232
		uint8_t retreived_value = ext_ram[i];
     516:	20 81       	ld	r18, Z
		if (retreived_value != some_value) {
     518:	28 17       	cp	r18, r24
     51a:	b1 f0       	breq	.+44     	; 0x548 <__stack+0x49>
			printf("Retrieval phase error: ext_ram[%4d] = %02X (should be %02X)\r\n", i, retreived_value, some_value);
     51c:	99 27       	eor	r25, r25
     51e:	9f 93       	push	r25
     520:	8f 93       	push	r24
     522:	1f 92       	push	r1
     524:	2f 93       	push	r18
     526:	df 93       	push	r29
     528:	cf 93       	push	r28
     52a:	df 92       	push	r13
     52c:	cf 92       	push	r12
     52e:	0e 94 dc 0b 	call	0x17b8	; 0x17b8 <printf>
			retrieval_errors++;
     532:	8f ef       	ldi	r24, 0xFF	; 255
     534:	e8 1a       	sub	r14, r24
     536:	f8 0a       	sbc	r15, r24
     538:	8d b7       	in	r24, 0x3d	; 61
     53a:	9e b7       	in	r25, 0x3e	; 62
     53c:	08 96       	adiw	r24, 0x08	; 8
     53e:	0f b6       	in	r0, 0x3f	; 63
     540:	f8 94       	cli
     542:	9e bf       	out	0x3e, r25	; 62
     544:	0f be       	out	0x3f, r0	; 63
     546:	8d bf       	out	0x3d, r24	; 61
		}
	}
	// Retrieval phase: Check that no values were changed during or after the write
	//phase
	srand(seed); // reset the PRNG to the state it had before the write phase
	for (uint16_t i = 0; i < ext_ram_size; i++) {
     548:	21 96       	adiw	r28, 0x01	; 1
     54a:	c1 15       	cp	r28, r1
     54c:	98 e0       	ldi	r25, 0x08	; 8
     54e:	d9 07       	cpc	r29, r25
     550:	f1 f6       	brne	.-68     	; 0x50e <__stack+0xf>
		if (retreived_value != some_value) {
			printf("Retrieval phase error: ext_ram[%4d] = %02X (should be %02X)\r\n", i, retreived_value, some_value);
			retrieval_errors++;
		}
	}
	printf("SRAM test completed with \n%4d errors in write phase and \n%4d errors in retrieval phase\r\n\n", write_errors, retrieval_errors);
     552:	ff 92       	push	r15
     554:	ef 92       	push	r14
     556:	1f 93       	push	r17
     558:	0f 93       	push	r16
     55a:	81 ed       	ldi	r24, 0xD1	; 209
     55c:	91 e0       	ldi	r25, 0x01	; 1
     55e:	9f 93       	push	r25
     560:	8f 93       	push	r24
     562:	0e 94 dc 0b 	call	0x17b8	; 0x17b8 <printf>
     566:	0f 90       	pop	r0
     568:	0f 90       	pop	r0
     56a:	0f 90       	pop	r0
     56c:	0f 90       	pop	r0
     56e:	0f 90       	pop	r0
     570:	0f 90       	pop	r0
     572:	df 91       	pop	r29
     574:	cf 91       	pop	r28
     576:	1f 91       	pop	r17
     578:	0f 91       	pop	r16
     57a:	ff 90       	pop	r15
     57c:	ef 90       	pop	r14
     57e:	df 90       	pop	r13
     580:	cf 90       	pop	r12
     582:	08 95       	ret

00000584 <main>:
#include "oled_driver.h"
#include "oled_menu.h"
#include "CAN_controller_driver.h"
#include "CAN.h"
int main( )
{
     584:	cf 93       	push	r28
     586:	df 93       	push	r29
     588:	cd b7       	in	r28, 0x3d	; 61
     58a:	de b7       	in	r29, 0x3e	; 62
     58c:	a1 97       	sbiw	r28, 0x21	; 33
     58e:	0f b6       	in	r0, 0x3f	; 63
     590:	f8 94       	cli
     592:	de bf       	out	0x3e, r29	; 62
     594:	0f be       	out	0x3f, r0	; 63
     596:	cd bf       	out	0x3d, r28	; 61
	My_serial_Init ( MYUBRR );
     598:	8f e1       	ldi	r24, 0x1F	; 31
     59a:	90 e0       	ldi	r25, 0x00	; 0
     59c:	0e 94 24 02 	call	0x448	; 0x448 <My_serial_Init>
	#else
		//round up by default
		__ticks_dc = (uint32_t)(ceil(fabs(__tmp)));
	#endif

	__builtin_avr_delay_cycles(__ticks_dc);
     5a0:	2f ef       	ldi	r18, 0xFF	; 255
     5a2:	8f ef       	ldi	r24, 0xFF	; 255
     5a4:	9e e0       	ldi	r25, 0x0E	; 14
     5a6:	21 50       	subi	r18, 0x01	; 1
     5a8:	80 40       	sbci	r24, 0x00	; 0
     5aa:	90 40       	sbci	r25, 0x00	; 0
     5ac:	e1 f7       	brne	.-8      	; 0x5a6 <main+0x22>
     5ae:	00 c0       	rjmp	.+0      	; 0x5b0 <main+0x2c>
     5b0:	00 00       	nop
	_delay_ms(1000);
	
	ADC_init();
     5b2:	0e 94 ea 01 	call	0x3d4	; 0x3d4 <ADC_init>
	SRAM_test();
     5b6:	0e 94 37 02 	call	0x46e	; 0x46e <SRAM_test>
	Joystick_calibrate();
     5ba:	0e 94 76 05 	call	0xaec	; 0xaec <Joystick_calibrate>
	Joystick position;
	SLI_pos_t sliderposition;
	oled_init();
     5be:	0e 94 ae 07 	call	0xf5c	; 0xf5c <oled_init>
	menu* mymenu = oled_menu_init();
     5c2:	0e 94 aa 08 	call	0x1154	; 0x1154 <oled_menu_init>
	
	can_init(MODE_LOOPBACK);
     5c6:	80 e4       	ldi	r24, 0x40	; 64
     5c8:	0e 94 71 03 	call	0x6e2	; 0x6e2 <can_init>
		//oled_menu_print(mymenu);
		
			

			can_message test;
			test.id		= 1337;
     5cc:	0f 2e       	mov	r0, r31
     5ce:	f9 e3       	ldi	r31, 0x39	; 57
     5d0:	8f 2e       	mov	r8, r31
     5d2:	f5 e0       	ldi	r31, 0x05	; 5
     5d4:	9f 2e       	mov	r9, r31
     5d6:	f0 2d       	mov	r31, r0
			test.data[0]	= 'H';
     5d8:	0f 2e       	mov	r0, r31
     5da:	f8 e4       	ldi	r31, 0x48	; 72
     5dc:	3f 2e       	mov	r3, r31
     5de:	f0 2d       	mov	r31, r0
			test.data[1]	= 'e';
     5e0:	0f 2e       	mov	r0, r31
     5e2:	f5 e6       	ldi	r31, 0x65	; 101
     5e4:	4f 2e       	mov	r4, r31
     5e6:	f0 2d       	mov	r31, r0
			test.data[2]	= 'l';
     5e8:	0f 2e       	mov	r0, r31
     5ea:	fc e6       	ldi	r31, 0x6C	; 108
     5ec:	7f 2e       	mov	r7, r31
     5ee:	f0 2d       	mov	r31, r0
			test.data[3]	= 'l';
			test.data[4]	= 'o';
     5f0:	0f 2e       	mov	r0, r31
     5f2:	ff e6       	ldi	r31, 0x6F	; 111
     5f4:	5f 2e       	mov	r5, r31
     5f6:	f0 2d       	mov	r31, r0
			test.length	= 5;
     5f8:	0f 2e       	mov	r0, r31
     5fa:	f5 e0       	ldi	r31, 0x05	; 5
     5fc:	6f 2e       	mov	r6, r31
     5fe:	f0 2d       	mov	r31, r0

			can_message test2;
			test2.id		= 1338;
     600:	0f 2e       	mov	r0, r31
     602:	fa e3       	ldi	r31, 0x3A	; 58
     604:	af 2e       	mov	r10, r31
     606:	f5 e0       	ldi	r31, 0x05	; 5
     608:	bf 2e       	mov	r11, r31
     60a:	f0 2d       	mov	r31, r0
			can_message_send(&test2);
			
			//printf(" %c ",test.data[0]);

			if ( can_interrupt()){
				test = can_handle_messages();
     60c:	6e 01       	movw	r12, r28
     60e:	e7 e1       	ldi	r30, 0x17	; 23
     610:	ce 0e       	add	r12, r30
     612:	d1 1c       	adc	r13, r1
				
				for(int i = 0; i < 8 ; i++){
					printf(" %d ",test.data[i]);
     614:	0f 2e       	mov	r0, r31
     616:	fb e2       	ldi	r31, 0x2B	; 43
     618:	ef 2e       	mov	r14, r31
     61a:	f2 e0       	ldi	r31, 0x02	; 2
     61c:	ff 2e       	mov	r15, r31
     61e:	f0 2d       	mov	r31, r0
		//oled_inv_printf("TESTING");
		//_delay_ms(3000);
		
		//uint16_t test = PORTB;
		//switch_font(FONT_4X6);
		JoystickDir dir = oled_menu_select();
     620:	0e 94 22 09 	call	0x1244	; 0x1244 <oled_menu_select>
		//oled_menu_print(mymenu);
		
			

			can_message test;
			test.id		= 1337;
     624:	9d 86       	std	Y+13, r9	; 0x0d
     626:	8c 86       	std	Y+12, r8	; 0x0c
			test.data[0]	= 'H';
     628:	3f 86       	std	Y+15, r3	; 0x0f
			test.data[1]	= 'e';
     62a:	48 8a       	std	Y+16, r4	; 0x10
			test.data[2]	= 'l';
     62c:	79 8a       	std	Y+17, r7	; 0x11
			test.data[3]	= 'l';
     62e:	7a 8a       	std	Y+18, r7	; 0x12
			test.data[4]	= 'o';
     630:	5b 8a       	std	Y+19, r5	; 0x13
			test.length	= 5;
     632:	6e 86       	std	Y+14, r6	; 0x0e

			can_message test2;
			test2.id		= 1338;
     634:	ba 82       	std	Y+2, r11	; 0x02
     636:	a9 82       	std	Y+1, r10	; 0x01
			test2.data[0]	= 'W';
     638:	87 e5       	ldi	r24, 0x57	; 87
     63a:	8c 83       	std	Y+4, r24	; 0x04
			test2.data[1]	= 'o';
     63c:	5d 82       	std	Y+5, r5	; 0x05
			test2.data[2]	= 'r';
     63e:	82 e7       	ldi	r24, 0x72	; 114
     640:	8e 83       	std	Y+6, r24	; 0x06
			test2.data[3]	= 'l';
     642:	7f 82       	std	Y+7, r7	; 0x07
			test2.data[4]	= 'd';
     644:	84 e6       	ldi	r24, 0x64	; 100
     646:	88 87       	std	Y+8, r24	; 0x08
			test2.length	= 5;
     648:	6b 82       	std	Y+3, r6	; 0x03


			can_message_send(&test);
     64a:	ce 01       	movw	r24, r28
     64c:	0c 96       	adiw	r24, 0x0c	; 12
     64e:	0e 94 ab 03 	call	0x756	; 0x756 <can_message_send>
			can_message_send(&test2);
     652:	ce 01       	movw	r24, r28
     654:	01 96       	adiw	r24, 0x01	; 1
     656:	0e 94 ab 03 	call	0x756	; 0x756 <can_message_send>
			
			//printf(" %c ",test.data[0]);

			if ( can_interrupt()){
     65a:	0e 94 83 03 	call	0x706	; 0x706 <can_interrupt>
     65e:	88 23       	and	r24, r24
     660:	11 f1       	breq	.+68     	; 0x6a6 <main+0x122>
				test = can_handle_messages();
     662:	c6 01       	movw	r24, r12
     664:	0e 94 6f 04 	call	0x8de	; 0x8de <can_handle_messages>
     668:	8b e0       	ldi	r24, 0x0B	; 11
     66a:	f6 01       	movw	r30, r12
     66c:	de 01       	movw	r26, r28
     66e:	1c 96       	adiw	r26, 0x0c	; 12
     670:	01 90       	ld	r0, Z+
     672:	0d 92       	st	X+, r0
     674:	8a 95       	dec	r24
     676:	e1 f7       	brne	.-8      	; 0x670 <main+0xec>
     678:	8e 01       	movw	r16, r28
     67a:	01 5f       	subi	r16, 0xF1	; 241
     67c:	1f 4f       	sbci	r17, 0xFF	; 255
				
				for(int i = 0; i < 8 ; i++){
					printf(" %d ",test.data[i]);
     67e:	f8 01       	movw	r30, r16
     680:	81 91       	ld	r24, Z+
     682:	8f 01       	movw	r16, r30
     684:	1f 92       	push	r1
     686:	8f 93       	push	r24
     688:	ff 92       	push	r15
     68a:	ef 92       	push	r14
     68c:	0e 94 dc 0b 	call	0x17b8	; 0x17b8 <printf>
			//printf(" %c ",test.data[0]);

			if ( can_interrupt()){
				test = can_handle_messages();
				
				for(int i = 0; i < 8 ; i++){
     690:	0f 90       	pop	r0
     692:	0f 90       	pop	r0
     694:	0f 90       	pop	r0
     696:	0f 90       	pop	r0
     698:	0c 15       	cp	r16, r12
     69a:	1d 05       	cpc	r17, r13
     69c:	81 f7       	brne	.-32     	; 0x67e <main+0xfa>
					printf(" %d ",test.data[i]);
				}
				printf("\r \n");
     69e:	80 e3       	ldi	r24, 0x30	; 48
     6a0:	92 e0       	ldi	r25, 0x02	; 2
     6a2:	0e 94 f0 0b 	call	0x17e0	; 0x17e0 <puts>
     6a6:	ff ef       	ldi	r31, 0xFF	; 255
     6a8:	2f e7       	ldi	r18, 0x7F	; 127
     6aa:	81 e0       	ldi	r24, 0x01	; 1
     6ac:	f1 50       	subi	r31, 0x01	; 1
     6ae:	20 40       	sbci	r18, 0x00	; 0
     6b0:	80 40       	sbci	r24, 0x00	; 0
     6b2:	e1 f7       	brne	.-8      	; 0x6ac <main+0x128>
     6b4:	00 c0       	rjmp	.+0      	; 0x6b6 <main+0x132>
     6b6:	00 c0       	rjmp	.+0      	; 0x6b8 <main+0x134>
		
		//volatile char *ext_adc = (char *) 0x1400;
		//ext_adc[0] = 0b00000010;
		

	}
     6b8:	b3 cf       	rjmp	.-154    	; 0x620 <main+0x9c>

000006ba <__vector_1>:
#include <avr/delay.h>

volatile int flag = 0;


ISR(INT0_vect){
     6ba:	1f 92       	push	r1
     6bc:	0f 92       	push	r0
     6be:	0f b6       	in	r0, 0x3f	; 63
     6c0:	0f 92       	push	r0
     6c2:	11 24       	eor	r1, r1
     6c4:	8f 93       	push	r24
     6c6:	9f 93       	push	r25
	flag = 1;
     6c8:	81 e0       	ldi	r24, 0x01	; 1
     6ca:	90 e0       	ldi	r25, 0x00	; 0
     6cc:	90 93 03 03 	sts	0x0303, r25
     6d0:	80 93 02 03 	sts	0x0302, r24
}
     6d4:	9f 91       	pop	r25
     6d6:	8f 91       	pop	r24
     6d8:	0f 90       	pop	r0
     6da:	0f be       	out	0x3f, r0	; 63
     6dc:	0f 90       	pop	r0
     6de:	1f 90       	pop	r1
     6e0:	18 95       	reti

000006e2 <can_init>:

void can_init(uint8_t mode){

	mcp_2515_init(mode);
     6e2:	0e 94 19 05 	call	0xa32	; 0xa32 <mcp_2515_init>

	
	mcp_2515_write(MCP_CANINTE, MCP_RX_INT);
     6e6:	63 e0       	ldi	r22, 0x03	; 3
     6e8:	8b e2       	ldi	r24, 0x2B	; 43
     6ea:	0e 94 00 05 	call	0xa00	; 0xa00 <mcp_2515_write>

	// Disable global interrupts
	cli();
     6ee:	f8 94       	cli
	// Interrupt on falling edge PD2
	set_bit(MCUCR, ISC01);
     6f0:	85 b7       	in	r24, 0x35	; 53
     6f2:	82 60       	ori	r24, 0x02	; 2
     6f4:	85 bf       	out	0x35, r24	; 53
	clear_bit(MCUCR, ISC00);
     6f6:	85 b7       	in	r24, 0x35	; 53
     6f8:	8e 7f       	andi	r24, 0xFE	; 254
     6fa:	85 bf       	out	0x35, r24	; 53
	// Enable interrupt on PD2
	set_bit(GICR,INT0);
     6fc:	8b b7       	in	r24, 0x3b	; 59
     6fe:	80 64       	ori	r24, 0x40	; 64
     700:	8b bf       	out	0x3b, r24	; 59
	// Enable global interrupts
	sei();
     702:	78 94       	sei
     704:	08 95       	ret

00000706 <can_interrupt>:
	
	
}

uint8_t can_interrupt(){
	if (flag){	
     706:	80 91 02 03 	lds	r24, 0x0302
     70a:	90 91 03 03 	lds	r25, 0x0303
     70e:	89 2b       	or	r24, r25
     710:	31 f0       	breq	.+12     	; 0x71e <can_interrupt+0x18>
		flag = 0;
     712:	10 92 03 03 	sts	0x0303, r1
     716:	10 92 02 03 	sts	0x0302, r1
		return 1;
     71a:	81 e0       	ldi	r24, 0x01	; 1
     71c:	08 95       	ret
	}
	return 0;
     71e:	80 e0       	ldi	r24, 0x00	; 0
}
     720:	08 95       	ret

00000722 <can_transmit_complete>:
	// Request to send message, send if successful
	mcp_2515_request_to_send(MCP_RTS_TX0 + buffer_number);
	
}

int can_transmit_complete(int buffer_number){
     722:	cf 93       	push	r28
     724:	df 93       	push	r29
     726:	ec 01       	movw	r28, r24
	uint8_t transmit_flag = mcp_2515_read(MCP_CANINTF);
     728:	8c e2       	ldi	r24, 0x2C	; 44
     72a:	0e 94 ee 04 	call	0x9dc	; 0x9dc <mcp_2515_read>
	uint8_t interrupt_bits = (transmit_flag & (MCP_TX0IF + buffer_number*2));
     72e:	9e 01       	movw	r18, r28
     730:	2e 5f       	subi	r18, 0xFE	; 254
     732:	3f 4f       	sbci	r19, 0xFF	; 255
     734:	42 2f       	mov	r20, r18
     736:	44 0f       	add	r20, r20
     738:	84 23       	and	r24, r20
	
	if(interrupt_bits == (MCP_TX0IF + buffer_number*2)){
     73a:	48 2f       	mov	r20, r24
     73c:	50 e0       	ldi	r21, 0x00	; 0
     73e:	22 0f       	add	r18, r18
     740:	33 1f       	adc	r19, r19
     742:	81 e0       	ldi	r24, 0x01	; 1
     744:	90 e0       	ldi	r25, 0x00	; 0
     746:	42 17       	cp	r20, r18
     748:	53 07       	cpc	r21, r19
     74a:	11 f4       	brne	.+4      	; 0x750 <can_transmit_complete+0x2e>
     74c:	80 e0       	ldi	r24, 0x00	; 0
     74e:	90 e0       	ldi	r25, 0x00	; 0
			return 0;
	}
	return 1;
}
     750:	df 91       	pop	r29
     752:	cf 91       	pop	r28
     754:	08 95       	ret

00000756 <can_message_send>:
	}
	
	return message1;
}

void can_message_send(can_message* message){
     756:	ef 92       	push	r14
     758:	ff 92       	push	r15
     75a:	0f 93       	push	r16
     75c:	1f 93       	push	r17
     75e:	cf 93       	push	r28
     760:	df 93       	push	r29
     762:	ec 01       	movw	r28, r24
	static int buffer_number = 0;
	
	buffer_number +=1;
     764:	80 91 00 03 	lds	r24, 0x0300
     768:	90 91 01 03 	lds	r25, 0x0301
     76c:	01 96       	adiw	r24, 0x01	; 1
	if (buffer_number > 2) {
     76e:	83 30       	cpi	r24, 0x03	; 3
     770:	91 05       	cpc	r25, r1
     772:	2c f4       	brge	.+10     	; 0x77e <can_message_send+0x28>
}

void can_message_send(can_message* message){
	static int buffer_number = 0;
	
	buffer_number +=1;
     774:	90 93 01 03 	sts	0x0301, r25
     778:	80 93 00 03 	sts	0x0300, r24
     77c:	16 c0       	rjmp	.+44     	; 0x7aa <can_message_send+0x54>
	if (buffer_number > 2) {
		buffer_number = 0;
     77e:	10 92 01 03 	sts	0x0301, r1
     782:	10 92 00 03 	sts	0x0300, r1
     786:	11 c0       	rjmp	.+34     	; 0x7aa <can_message_send+0x54>
	}
	
	while (!can_transmit_complete(buffer_number)){
		buffer_number +=1;
     788:	20 91 00 03 	lds	r18, 0x0300
     78c:	30 91 01 03 	lds	r19, 0x0301
     790:	2f 5f       	subi	r18, 0xFF	; 255
     792:	3f 4f       	sbci	r19, 0xFF	; 255
     794:	30 93 01 03 	sts	0x0301, r19
     798:	20 93 00 03 	sts	0x0300, r18
		if (buffer_number > 2) {
     79c:	23 30       	cpi	r18, 0x03	; 3
     79e:	31 05       	cpc	r19, r1
     7a0:	24 f0       	brlt	.+8      	; 0x7aa <can_message_send+0x54>
			buffer_number = 0;
     7a2:	10 92 01 03 	sts	0x0301, r1
     7a6:	10 92 00 03 	sts	0x0300, r1
	buffer_number +=1;
	if (buffer_number > 2) {
		buffer_number = 0;
	}
	
	while (!can_transmit_complete(buffer_number)){
     7aa:	80 91 00 03 	lds	r24, 0x0300
     7ae:	90 91 01 03 	lds	r25, 0x0301
     7b2:	0e 94 91 03 	call	0x722	; 0x722 <can_transmit_complete>
     7b6:	89 2b       	or	r24, r25
     7b8:	39 f3       	breq	.-50     	; 0x788 <can_message_send+0x32>
			buffer_number = 0;
		}
	}
	
	// Arbitration field identifier
	unsigned int ID = message->id;
     7ba:	88 81       	ld	r24, Y
     7bc:	99 81       	ldd	r25, Y+1	; 0x01
	char id_high = ID / 8;
	char id_low = ID % 8;
     7be:	28 2f       	mov	r18, r24
     7c0:	27 70       	andi	r18, 0x07	; 7
     7c2:	f2 2e       	mov	r15, r18
		}
	}
	
	// Arbitration field identifier
	unsigned int ID = message->id;
	char id_high = ID / 8;
     7c4:	bc 01       	movw	r22, r24
     7c6:	76 95       	lsr	r23
     7c8:	67 95       	ror	r22
     7ca:	76 95       	lsr	r23
     7cc:	67 95       	ror	r22
     7ce:	76 95       	lsr	r23
     7d0:	67 95       	ror	r22
	char id_low = ID % 8;
	id_low = id_low*0b100000;
	mcp_2515_write(MCP_TXB0SIDH + 16 * buffer_number, id_high);
     7d2:	00 e0       	ldi	r16, 0x00	; 0
     7d4:	13 e0       	ldi	r17, 0x03	; 3
     7d6:	f8 01       	movw	r30, r16
     7d8:	80 81       	ld	r24, Z
     7da:	82 95       	swap	r24
     7dc:	80 7f       	andi	r24, 0xF0	; 240
     7de:	8f 5c       	subi	r24, 0xCF	; 207
     7e0:	0e 94 00 05 	call	0xa00	; 0xa00 <mcp_2515_write>
	
	// Arbitration field identifier
	unsigned int ID = message->id;
	char id_high = ID / 8;
	char id_low = ID % 8;
	id_low = id_low*0b100000;
     7e4:	6f 2d       	mov	r22, r15
     7e6:	62 95       	swap	r22
     7e8:	66 0f       	add	r22, r22
     7ea:	60 7e       	andi	r22, 0xE0	; 224
	mcp_2515_write(MCP_TXB0SIDH + 16 * buffer_number, id_high);
	mcp_2515_write(MCP_TXB0SIDL + 16 * buffer_number, id_low);
     7ec:	f8 01       	movw	r30, r16
     7ee:	80 81       	ld	r24, Z
     7f0:	82 95       	swap	r24
     7f2:	80 7f       	andi	r24, 0xF0	; 240
     7f4:	8e 5c       	subi	r24, 0xCE	; 206
     7f6:	0e 94 00 05 	call	0xa00	; 0xa00 <mcp_2515_write>
	
	// Define data length of message
	uint8_t data_length = message->length;
     7fa:	ea 80       	ldd	r14, Y+2	; 0x02
	mcp_2515_write(MCP_TXB0DLC + 16 * buffer_number, data_length);
     7fc:	f8 01       	movw	r30, r16
     7fe:	80 81       	ld	r24, Z
     800:	82 95       	swap	r24
     802:	80 7f       	andi	r24, 0xF0	; 240
     804:	6e 2d       	mov	r22, r14
     806:	8b 5c       	subi	r24, 0xCB	; 203
     808:	0e 94 00 05 	call	0xa00	; 0xa00 <mcp_2515_write>
	
	// Write data bytes to transmit buffer
	char* data_bytes = message->data;
     80c:	23 96       	adiw	r28, 0x03	; 3
	for (uint8_t byte = 0; byte < data_length; byte++) {
     80e:	ee 20       	and	r14, r14
     810:	81 f0       	breq	.+32     	; 0x832 <can_message_send+0xdc>
     812:	f1 2c       	mov	r15, r1
		mcp_2515_write(MCP_TXB0Dm + byte + 16 * buffer_number, data_bytes[byte]);
     814:	69 91       	ld	r22, Y+
     816:	f8 01       	movw	r30, r16
     818:	80 81       	ld	r24, Z
     81a:	2f 2d       	mov	r18, r15
     81c:	f0 e1       	ldi	r31, 0x10	; 16
     81e:	8f 9f       	mul	r24, r31
     820:	20 0d       	add	r18, r0
     822:	11 24       	eor	r1, r1
     824:	82 2f       	mov	r24, r18
     826:	8a 5c       	subi	r24, 0xCA	; 202
     828:	0e 94 00 05 	call	0xa00	; 0xa00 <mcp_2515_write>
	uint8_t data_length = message->length;
	mcp_2515_write(MCP_TXB0DLC + 16 * buffer_number, data_length);
	
	// Write data bytes to transmit buffer
	char* data_bytes = message->data;
	for (uint8_t byte = 0; byte < data_length; byte++) {
     82c:	f3 94       	inc	r15
     82e:	fe 10       	cpse	r15, r14
     830:	f1 cf       	rjmp	.-30     	; 0x814 <can_message_send+0xbe>
		mcp_2515_write(MCP_TXB0Dm + byte + 16 * buffer_number, data_bytes[byte]);
	}
	
	// Request to send message, send if successful
	mcp_2515_request_to_send(MCP_RTS_TX0 + buffer_number);
     832:	80 91 00 03 	lds	r24, 0x0300
     836:	8f 57       	subi	r24, 0x7F	; 127
     838:	0e 94 51 05 	call	0xaa2	; 0xaa2 <mcp_2515_request_to_send>
	
}
     83c:	df 91       	pop	r29
     83e:	cf 91       	pop	r28
     840:	1f 91       	pop	r17
     842:	0f 91       	pop	r16
     844:	ff 90       	pop	r15
     846:	ef 90       	pop	r14
     848:	08 95       	ret

0000084a <can_message_receive>:
			return 0;
	}
	return 1;
}

void can_message_receive(int rec_buff_num, can_message* received_message){
     84a:	0f 93       	push	r16
     84c:	1f 93       	push	r17
     84e:	cf 93       	push	r28
     850:	df 93       	push	r29
     852:	eb 01       	movw	r28, r22
	uint8_t id_high = mcp_2515_read(MCP_RXB0SIDH + 16 * rec_buff_num);
     854:	18 2f       	mov	r17, r24
     856:	12 95       	swap	r17
     858:	10 7f       	andi	r17, 0xF0	; 240
     85a:	81 e6       	ldi	r24, 0x61	; 97
     85c:	81 0f       	add	r24, r17
     85e:	0e 94 ee 04 	call	0x9dc	; 0x9dc <mcp_2515_read>
     862:	08 2f       	mov	r16, r24
	uint8_t id_low = mcp_2515_read(MCP_RXB0SIDL + 16 * rec_buff_num);
     864:	82 e6       	ldi	r24, 0x62	; 98
     866:	81 0f       	add	r24, r17
     868:	0e 94 ee 04 	call	0x9dc	; 0x9dc <mcp_2515_read>
	uint8_t mask = 0b11100000;
	id_low = (id_low & mask);
	received_message->id = 0b1000*id_high + id_low/0b100000;
     86c:	20 2f       	mov	r18, r16
     86e:	30 e0       	ldi	r19, 0x00	; 0
     870:	22 0f       	add	r18, r18
     872:	33 1f       	adc	r19, r19
     874:	22 0f       	add	r18, r18
     876:	33 1f       	adc	r19, r19
     878:	22 0f       	add	r18, r18
     87a:	33 1f       	adc	r19, r19
     87c:	82 95       	swap	r24
     87e:	86 95       	lsr	r24
     880:	87 70       	andi	r24, 0x07	; 7
     882:	28 0f       	add	r18, r24
     884:	31 1d       	adc	r19, r1
     886:	39 83       	std	Y+1, r19	; 0x01
     888:	28 83       	st	Y, r18
	
	uint8_t data_length = mcp_2515_read(MCP_RXB0DLC + 16 * rec_buff_num);
     88a:	85 e6       	ldi	r24, 0x65	; 101
     88c:	81 0f       	add	r24, r17
     88e:	0e 94 ee 04 	call	0x9dc	; 0x9dc <mcp_2515_read>
	mask = 0b1111;
	received_message->length = (data_length & mask);
     892:	98 2f       	mov	r25, r24
     894:	9f 70       	andi	r25, 0x0F	; 15
     896:	9a 83       	std	Y+2, r25	; 0x02
	
	for (uint8_t byte = 0; byte < data_length; byte++) {
     898:	88 23       	and	r24, r24
     89a:	59 f0       	breq	.+22     	; 0x8b2 <can_message_receive+0x68>
     89c:	1a 59       	subi	r17, 0x9A	; 154
     89e:	23 96       	adiw	r28, 0x03	; 3
     8a0:	08 2f       	mov	r16, r24
     8a2:	01 0f       	add	r16, r17
		received_message->data[byte] = mcp_2515_read(MCP_RXB0DM + byte + 16 * rec_buff_num);
     8a4:	81 2f       	mov	r24, r17
     8a6:	0e 94 ee 04 	call	0x9dc	; 0x9dc <mcp_2515_read>
     8aa:	89 93       	st	Y+, r24
     8ac:	1f 5f       	subi	r17, 0xFF	; 255
	
	uint8_t data_length = mcp_2515_read(MCP_RXB0DLC + 16 * rec_buff_num);
	mask = 0b1111;
	received_message->length = (data_length & mask);
	
	for (uint8_t byte = 0; byte < data_length; byte++) {
     8ae:	10 13       	cpse	r17, r16
     8b0:	f9 cf       	rjmp	.-14     	; 0x8a4 <can_message_receive+0x5a>
		received_message->data[byte] = mcp_2515_read(MCP_RXB0DM + byte + 16 * rec_buff_num);
	}
	
	
}
     8b2:	df 91       	pop	r29
     8b4:	cf 91       	pop	r28
     8b6:	1f 91       	pop	r17
     8b8:	0f 91       	pop	r16
     8ba:	08 95       	ret

000008bc <can_int_vect>:

void can_int_vect(int* v) { 
     8bc:	cf 93       	push	r28
     8be:	df 93       	push	r29
     8c0:	ec 01       	movw	r28, r24
	uint8_t int_flag = mcp_2515_read(MCP_CANINTF);
     8c2:	8c e2       	ldi	r24, 0x2C	; 44
     8c4:	0e 94 ee 04 	call	0x9dc	; 0x9dc <mcp_2515_read>
	v[0] = (int_flag & MCP_RX0IF);
     8c8:	98 2f       	mov	r25, r24
     8ca:	91 70       	andi	r25, 0x01	; 1
     8cc:	98 83       	st	Y, r25
     8ce:	19 82       	std	Y+1, r1	; 0x01
	v[1] = (int_flag & MCP_RX1IF);
     8d0:	82 70       	andi	r24, 0x02	; 2
     8d2:	90 e0       	ldi	r25, 0x00	; 0
     8d4:	9b 83       	std	Y+3, r25	; 0x03
     8d6:	8a 83       	std	Y+2, r24	; 0x02
}
     8d8:	df 91       	pop	r29
     8da:	cf 91       	pop	r28
     8dc:	08 95       	ret

000008de <can_handle_messages>:
		return 1;
	}
	return 0;
}

can_message can_handle_messages(){
     8de:	0f 93       	push	r16
     8e0:	1f 93       	push	r17
     8e2:	cf 93       	push	r28
     8e4:	df 93       	push	r29
     8e6:	cd b7       	in	r28, 0x3d	; 61
     8e8:	de b7       	in	r29, 0x3e	; 62
     8ea:	68 97       	sbiw	r28, 0x18	; 24
     8ec:	0f b6       	in	r0, 0x3f	; 63
     8ee:	f8 94       	cli
     8f0:	de bf       	out	0x3e, r29	; 62
     8f2:	0f be       	out	0x3f, r0	; 63
     8f4:	cd bf       	out	0x3d, r28	; 61
     8f6:	8c 01       	movw	r16, r24
	uint8_t v[2] = {0};
     8f8:	1a 82       	std	Y+2, r1	; 0x02
     8fa:	19 82       	std	Y+1, r1	; 0x01
	
	can_int_vect(v);
     8fc:	ce 01       	movw	r24, r28
     8fe:	01 96       	adiw	r24, 0x01	; 1
     900:	0e 94 5e 04 	call	0x8bc	; 0x8bc <can_int_vect>
	can_message message1;
	
	if (v[0]){
     904:	89 81       	ldd	r24, Y+1	; 0x01
     906:	88 23       	and	r24, r24
     908:	01 f1       	breq	.+64     	; 0x94a <can_handle_messages+0x6c>
		can_message_receive(0, &message1);
     90a:	be 01       	movw	r22, r28
     90c:	6d 5f       	subi	r22, 0xFD	; 253
     90e:	7f 4f       	sbci	r23, 0xFF	; 255
     910:	80 e0       	ldi	r24, 0x00	; 0
     912:	90 e0       	ldi	r25, 0x00	; 0
     914:	0e 94 25 04 	call	0x84a	; 0x84a <can_message_receive>
		mcp_2515_bit_modify(MCP_CANINTF, 1, 0);
     918:	40 e0       	ldi	r20, 0x00	; 0
     91a:	61 e0       	ldi	r22, 0x01	; 1
     91c:	8c e2       	ldi	r24, 0x2C	; 44
     91e:	0e 94 5c 05 	call	0xab8	; 0xab8 <mcp_2515_bit_modify>
		can_int_vect(v);
     922:	ce 01       	movw	r24, r28
     924:	01 96       	adiw	r24, 0x01	; 1
     926:	0e 94 5e 04 	call	0x8bc	; 0x8bc <can_int_vect>
		if (!v[1]){
     92a:	8a 81       	ldd	r24, Y+2	; 0x02
     92c:	81 11       	cpse	r24, r1
     92e:	04 c0       	rjmp	.+8      	; 0x938 <can_handle_messages+0x5a>
			flag = 0;
     930:	10 92 03 03 	sts	0x0303, r1
     934:	10 92 02 03 	sts	0x0302, r1
		}
		return message1;
     938:	8b e0       	ldi	r24, 0x0B	; 11
     93a:	fe 01       	movw	r30, r28
     93c:	33 96       	adiw	r30, 0x03	; 3
     93e:	d8 01       	movw	r26, r16
     940:	01 90       	ld	r0, Z+
     942:	0d 92       	st	X+, r0
     944:	8a 95       	dec	r24
     946:	e1 f7       	brne	.-8      	; 0x940 <can_handle_messages+0x62>
     948:	2b c0       	rjmp	.+86     	; 0x9a0 <can_handle_messages+0xc2>
	}
	
	can_message message2;
	
	if (v[1]){
     94a:	8a 81       	ldd	r24, Y+2	; 0x02
     94c:	88 23       	and	r24, r24
     94e:	01 f1       	breq	.+64     	; 0x990 <can_handle_messages+0xb2>
		can_message_receive(1, &message2);
     950:	be 01       	movw	r22, r28
     952:	62 5f       	subi	r22, 0xF2	; 242
     954:	7f 4f       	sbci	r23, 0xFF	; 255
     956:	81 e0       	ldi	r24, 0x01	; 1
     958:	90 e0       	ldi	r25, 0x00	; 0
     95a:	0e 94 25 04 	call	0x84a	; 0x84a <can_message_receive>
		mcp_2515_bit_modify(MCP_CANINTF, 2, 0);
     95e:	40 e0       	ldi	r20, 0x00	; 0
     960:	62 e0       	ldi	r22, 0x02	; 2
     962:	8c e2       	ldi	r24, 0x2C	; 44
     964:	0e 94 5c 05 	call	0xab8	; 0xab8 <mcp_2515_bit_modify>
		can_int_vect(v);
     968:	ce 01       	movw	r24, r28
     96a:	01 96       	adiw	r24, 0x01	; 1
     96c:	0e 94 5e 04 	call	0x8bc	; 0x8bc <can_int_vect>
		if (!v[0]){
     970:	89 81       	ldd	r24, Y+1	; 0x01
     972:	81 11       	cpse	r24, r1
     974:	04 c0       	rjmp	.+8      	; 0x97e <can_handle_messages+0xa0>
			flag = 0;
     976:	10 92 03 03 	sts	0x0303, r1
     97a:	10 92 02 03 	sts	0x0302, r1
		}
		return message2;
     97e:	8b e0       	ldi	r24, 0x0B	; 11
     980:	fe 01       	movw	r30, r28
     982:	3e 96       	adiw	r30, 0x0e	; 14
     984:	d8 01       	movw	r26, r16
     986:	01 90       	ld	r0, Z+
     988:	0d 92       	st	X+, r0
     98a:	8a 95       	dec	r24
     98c:	e1 f7       	brne	.-8      	; 0x986 <can_handle_messages+0xa8>
     98e:	08 c0       	rjmp	.+16     	; 0x9a0 <can_handle_messages+0xc2>
	}
	
	return message1;
     990:	8b e0       	ldi	r24, 0x0B	; 11
     992:	fe 01       	movw	r30, r28
     994:	33 96       	adiw	r30, 0x03	; 3
     996:	d8 01       	movw	r26, r16
     998:	01 90       	ld	r0, Z+
     99a:	0d 92       	st	X+, r0
     99c:	8a 95       	dec	r24
     99e:	e1 f7       	brne	.-8      	; 0x998 <can_handle_messages+0xba>
}
     9a0:	c8 01       	movw	r24, r16
     9a2:	68 96       	adiw	r28, 0x18	; 24
     9a4:	0f b6       	in	r0, 0x3f	; 63
     9a6:	f8 94       	cli
     9a8:	de bf       	out	0x3e, r29	; 62
     9aa:	0f be       	out	0x3f, r0	; 63
     9ac:	cd bf       	out	0x3d, r28	; 61
     9ae:	df 91       	pop	r29
     9b0:	cf 91       	pop	r28
     9b2:	1f 91       	pop	r17
     9b4:	0f 91       	pop	r16
     9b6:	08 95       	ret

000009b8 <mcp_activate_slave>:
#include <avr/io.h>
#include <avr/delay.h>

void mcp_activate_slave(){
	/* Activate Slave Select */
	clear_bit(PORTB, PB4);
     9b8:	c4 98       	cbi	0x18, 4	; 24
     9ba:	08 95       	ret

000009bc <mcp_deactivate_slave>:
}

void mcp_deactivate_slave(){
	/* Deactivate Slave Select */
	set_bit(PORTB, PB4);
     9bc:	c4 9a       	sbi	0x18, 4	; 24
     9be:	08 95       	ret

000009c0 <mcp_2515_reset>:
	
	return 0;
}

void mcp_2515_reset(){
	mcp_activate_slave();
     9c0:	0e 94 dc 04 	call	0x9b8	; 0x9b8 <mcp_activate_slave>
	SPI_write(MCP_RESET);
     9c4:	80 ec       	ldi	r24, 0xC0	; 192
     9c6:	0e 94 db 09 	call	0x13b6	; 0x13b6 <SPI_write>
	mcp_deactivate_slave();
     9ca:	0e 94 de 04 	call	0x9bc	; 0x9bc <mcp_deactivate_slave>
     9ce:	83 ec       	ldi	r24, 0xC3	; 195
     9d0:	99 e0       	ldi	r25, 0x09	; 9
     9d2:	01 97       	sbiw	r24, 0x01	; 1
     9d4:	f1 f7       	brne	.-4      	; 0x9d2 <mcp_2515_reset+0x12>
     9d6:	00 c0       	rjmp	.+0      	; 0x9d8 <mcp_2515_reset+0x18>
     9d8:	00 00       	nop
     9da:	08 95       	ret

000009dc <mcp_2515_read>:
	_delay_ms(10);	//a small delay after mcp reset
}

uint8_t mcp_2515_read(uint8_t address){
     9dc:	cf 93       	push	r28
     9de:	c8 2f       	mov	r28, r24
	mcp_activate_slave();
     9e0:	0e 94 dc 04 	call	0x9b8	; 0x9b8 <mcp_activate_slave>
	
	uint8_t data;
	
	SPI_write(MCP_READ);
     9e4:	83 e0       	ldi	r24, 0x03	; 3
     9e6:	0e 94 db 09 	call	0x13b6	; 0x13b6 <SPI_write>
	SPI_write(address);
     9ea:	8c 2f       	mov	r24, r28
     9ec:	0e 94 db 09 	call	0x13b6	; 0x13b6 <SPI_write>
	data = SPI_read();
     9f0:	0e 94 df 09 	call	0x13be	; 0x13be <SPI_read>
     9f4:	c8 2f       	mov	r28, r24
	
	mcp_deactivate_slave();
     9f6:	0e 94 de 04 	call	0x9bc	; 0x9bc <mcp_deactivate_slave>
	
	return data;
}
     9fa:	8c 2f       	mov	r24, r28
     9fc:	cf 91       	pop	r28
     9fe:	08 95       	ret

00000a00 <mcp_2515_write>:


void mcp_2515_write(uint8_t address, uint8_t data) {
     a00:	cf 93       	push	r28
     a02:	df 93       	push	r29
     a04:	d8 2f       	mov	r29, r24
     a06:	c6 2f       	mov	r28, r22
	mcp_activate_slave();
     a08:	0e 94 dc 04 	call	0x9b8	; 0x9b8 <mcp_activate_slave>
	
	SPI_write(MCP_WRITE);
     a0c:	82 e0       	ldi	r24, 0x02	; 2
     a0e:	0e 94 db 09 	call	0x13b6	; 0x13b6 <SPI_write>
	SPI_write(address);
     a12:	8d 2f       	mov	r24, r29
     a14:	0e 94 db 09 	call	0x13b6	; 0x13b6 <SPI_write>
	SPI_write(data);
     a18:	8c 2f       	mov	r24, r28
     a1a:	0e 94 db 09 	call	0x13b6	; 0x13b6 <SPI_write>
	
	mcp_deactivate_slave();
     a1e:	0e 94 de 04 	call	0x9bc	; 0x9bc <mcp_deactivate_slave>
}
     a22:	df 91       	pop	r29
     a24:	cf 91       	pop	r28
     a26:	08 95       	ret

00000a28 <mcp_2515_set_mode>:
	/* Deactivate Slave Select */
	set_bit(PORTB, PB4);
}

void mcp_2515_set_mode(uint8_t mode){
	mcp_2515_write(MCP_CANCTRL, mode);
     a28:	68 2f       	mov	r22, r24
     a2a:	8f e0       	ldi	r24, 0x0F	; 15
     a2c:	0e 94 00 05 	call	0xa00	; 0xa00 <mcp_2515_write>
     a30:	08 95       	ret

00000a32 <mcp_2515_init>:
}

uint8_t mcp_2515_init(uint8_t mode){
     a32:	cf 93       	push	r28
     a34:	c8 2f       	mov	r28, r24
	
	uint8_t val;
	SPI_init();
     a36:	0e 94 d5 09 	call	0x13aa	; 0x13aa <SPI_init>
	
	mcp_2515_reset();
     a3a:	0e 94 e0 04 	call	0x9c0	; 0x9c0 <mcp_2515_reset>
	
	val = mcp_2515_read(MCP_CANSTAT);
     a3e:	8e e0       	ldi	r24, 0x0E	; 14
     a40:	0e 94 ee 04 	call	0x9dc	; 0x9dc <mcp_2515_read>
	uint8_t mode_bits = (val & MODE_MASK);
     a44:	80 7e       	andi	r24, 0xE0	; 224
	if(mode_bits != MODE_CONFIG){
     a46:	80 38       	cpi	r24, 0x80	; 128
     a48:	71 f0       	breq	.+28     	; 0xa66 <mcp_2515_init+0x34>
		printf("MCP2515 is NOT in Configuration mode after reset! Its config bits are %x\n", mode_bits);
     a4a:	1f 92       	push	r1
     a4c:	8f 93       	push	r24
     a4e:	83 e3       	ldi	r24, 0x33	; 51
     a50:	92 e0       	ldi	r25, 0x02	; 2
     a52:	9f 93       	push	r25
     a54:	8f 93       	push	r24
     a56:	0e 94 dc 0b 	call	0x17b8	; 0x17b8 <printf>
		return 1;
     a5a:	0f 90       	pop	r0
     a5c:	0f 90       	pop	r0
     a5e:	0f 90       	pop	r0
     a60:	0f 90       	pop	r0
     a62:	81 e0       	ldi	r24, 0x01	; 1
     a64:	1c c0       	rjmp	.+56     	; 0xa9e <mcp_2515_init+0x6c>
	}
	
	mcp_2515_set_mode(mode);
     a66:	8c 2f       	mov	r24, r28
     a68:	0e 94 14 05 	call	0xa28	; 0xa28 <mcp_2515_set_mode>
	
	val = mcp_2515_read(MCP_CANSTAT);
     a6c:	8e e0       	ldi	r24, 0x0E	; 14
     a6e:	0e 94 ee 04 	call	0x9dc	; 0x9dc <mcp_2515_read>
	mode_bits = (val & MODE_MASK);
     a72:	80 7e       	andi	r24, 0xE0	; 224
	
	if(mode_bits != mode){
     a74:	8c 17       	cp	r24, r28
     a76:	91 f0       	breq	.+36     	; 0xa9c <mcp_2515_init+0x6a>
		
		printf("MCP2515 is NOT in correct mode after reset! Its config bits are %x\n", mode_bits);
     a78:	1f 92       	push	r1
     a7a:	8f 93       	push	r24
     a7c:	8d e7       	ldi	r24, 0x7D	; 125
     a7e:	92 e0       	ldi	r25, 0x02	; 2
     a80:	9f 93       	push	r25
     a82:	8f 93       	push	r24
     a84:	0e 94 dc 0b 	call	0x17b8	; 0x17b8 <printf>
		printf("\n!\n");
     a88:	81 ec       	ldi	r24, 0xC1	; 193
     a8a:	92 e0       	ldi	r25, 0x02	; 2
     a8c:	0e 94 f0 0b 	call	0x17e0	; 0x17e0 <puts>
		return 1;
     a90:	0f 90       	pop	r0
     a92:	0f 90       	pop	r0
     a94:	0f 90       	pop	r0
     a96:	0f 90       	pop	r0
     a98:	81 e0       	ldi	r24, 0x01	; 1
     a9a:	01 c0       	rjmp	.+2      	; 0xa9e <mcp_2515_init+0x6c>
	}
	
	
	return 0;
     a9c:	80 e0       	ldi	r24, 0x00	; 0
}
     a9e:	cf 91       	pop	r28
     aa0:	08 95       	ret

00000aa2 <mcp_2515_request_to_send>:
	SPI_write(data);
	
	mcp_deactivate_slave();
}

void mcp_2515_request_to_send(char buffer) {
     aa2:	cf 93       	push	r28
     aa4:	c8 2f       	mov	r28, r24
	mcp_activate_slave();
     aa6:	0e 94 dc 04 	call	0x9b8	; 0x9b8 <mcp_activate_slave>
	
	SPI_write(buffer);
     aaa:	8c 2f       	mov	r24, r28
     aac:	0e 94 db 09 	call	0x13b6	; 0x13b6 <SPI_write>
	
	mcp_deactivate_slave();
     ab0:	0e 94 de 04 	call	0x9bc	; 0x9bc <mcp_deactivate_slave>
}
     ab4:	cf 91       	pop	r28
     ab6:	08 95       	ret

00000ab8 <mcp_2515_bit_modify>:

void mcp_2515_bit_modify(uint8_t adress, uint8_t mask, uint8_t data) {
     ab8:	1f 93       	push	r17
     aba:	cf 93       	push	r28
     abc:	df 93       	push	r29
     abe:	18 2f       	mov	r17, r24
     ac0:	d6 2f       	mov	r29, r22
     ac2:	c4 2f       	mov	r28, r20
	mcp_activate_slave();
     ac4:	0e 94 dc 04 	call	0x9b8	; 0x9b8 <mcp_activate_slave>
	
	SPI_write(MCP_BITMOD);
     ac8:	85 e0       	ldi	r24, 0x05	; 5
     aca:	0e 94 db 09 	call	0x13b6	; 0x13b6 <SPI_write>
	SPI_write(adress);
     ace:	81 2f       	mov	r24, r17
     ad0:	0e 94 db 09 	call	0x13b6	; 0x13b6 <SPI_write>
	SPI_write(mask);
     ad4:	8d 2f       	mov	r24, r29
     ad6:	0e 94 db 09 	call	0x13b6	; 0x13b6 <SPI_write>
	SPI_write(data);
     ada:	8c 2f       	mov	r24, r28
     adc:	0e 94 db 09 	call	0x13b6	; 0x13b6 <SPI_write>
	
	mcp_deactivate_slave();
     ae0:	0e 94 de 04 	call	0x9bc	; 0x9bc <mcp_deactivate_slave>
}
     ae4:	df 91       	pop	r29
     ae6:	cf 91       	pop	r28
     ae8:	1f 91       	pop	r17
     aea:	08 95       	ret

00000aec <Joystick_calibrate>:
     aec:	80 e0       	ldi	r24, 0x00	; 0
     aee:	0e 94 fe 01 	call	0x3fc	; 0x3fc <ADC_start_read>
	#else
		//round up by default
		__ticks_dc = (uint32_t)(ceil(fabs(__tmp)));
	#endif

	__builtin_avr_delay_cycles(__ticks_dc);
     af2:	82 e4       	ldi	r24, 0x42	; 66
     af4:	8a 95       	dec	r24
     af6:	f1 f7       	brne	.-4      	; 0xaf4 <Joystick_calibrate+0x8>
     af8:	00 c0       	rjmp	.+0      	; 0xafa <Joystick_calibrate+0xe>
     afa:	0e 94 f8 01 	call	0x3f0	; 0x3f0 <get_ADC_data>
     afe:	80 93 05 03 	sts	0x0305, r24
     b02:	81 e0       	ldi	r24, 0x01	; 1
     b04:	0e 94 fe 01 	call	0x3fc	; 0x3fc <ADC_start_read>
     b08:	82 e4       	ldi	r24, 0x42	; 66
     b0a:	8a 95       	dec	r24
     b0c:	f1 f7       	brne	.-4      	; 0xb0a <Joystick_calibrate+0x1e>
     b0e:	00 c0       	rjmp	.+0      	; 0xb10 <Joystick_calibrate+0x24>
     b10:	0e 94 f8 01 	call	0x3f0	; 0x3f0 <get_ADC_data>
     b14:	80 93 06 03 	sts	0x0306, r24
     b18:	08 95       	ret

00000b1a <joystickPos>:
     b1a:	0f 93       	push	r16
     b1c:	1f 93       	push	r17
     b1e:	cf 93       	push	r28
     b20:	df 93       	push	r29
     b22:	00 d0       	rcall	.+0      	; 0xb24 <joystickPos+0xa>
     b24:	00 d0       	rcall	.+0      	; 0xb26 <joystickPos+0xc>
     b26:	1f 92       	push	r1
     b28:	cd b7       	in	r28, 0x3d	; 61
     b2a:	de b7       	in	r29, 0x3e	; 62
     b2c:	80 e0       	ldi	r24, 0x00	; 0
     b2e:	0e 94 fe 01 	call	0x3fc	; 0x3fc <ADC_start_read>
     b32:	82 e4       	ldi	r24, 0x42	; 66
     b34:	8a 95       	dec	r24
     b36:	f1 f7       	brne	.-4      	; 0xb34 <joystickPos+0x1a>
     b38:	00 c0       	rjmp	.+0      	; 0xb3a <joystickPos+0x20>
     b3a:	0e 94 f8 01 	call	0x3f0	; 0x3f0 <get_ADC_data>
     b3e:	20 91 05 03 	lds	r18, 0x0305
     b42:	28 17       	cp	r18, r24
     b44:	a0 f4       	brcc	.+40     	; 0xb6e <joystickPos+0x54>
     b46:	30 e0       	ldi	r19, 0x00	; 0
     b48:	99 27       	eor	r25, r25
     b4a:	ac 01       	movw	r20, r24
     b4c:	42 1b       	sub	r20, r18
     b4e:	53 0b       	sbc	r21, r19
     b50:	64 e6       	ldi	r22, 0x64	; 100
     b52:	64 9f       	mul	r22, r20
     b54:	c0 01       	movw	r24, r0
     b56:	65 9f       	mul	r22, r21
     b58:	90 0d       	add	r25, r0
     b5a:	11 24       	eor	r1, r1
     b5c:	6f ef       	ldi	r22, 0xFF	; 255
     b5e:	70 e0       	ldi	r23, 0x00	; 0
     b60:	62 1b       	sub	r22, r18
     b62:	73 0b       	sbc	r23, r19
     b64:	0e 94 e4 09 	call	0x13c8	; 0x13c8 <__divmodhi4>
     b68:	16 2f       	mov	r17, r22
     b6a:	07 2f       	mov	r16, r23
     b6c:	15 c0       	rjmp	.+42     	; 0xb98 <joystickPos+0x7e>
     b6e:	82 17       	cp	r24, r18
     b70:	88 f4       	brcc	.+34     	; 0xb94 <joystickPos+0x7a>
     b72:	62 2f       	mov	r22, r18
     b74:	70 e0       	ldi	r23, 0x00	; 0
     b76:	99 27       	eor	r25, r25
     b78:	9c 01       	movw	r18, r24
     b7a:	26 1b       	sub	r18, r22
     b7c:	37 0b       	sbc	r19, r23
     b7e:	44 e6       	ldi	r20, 0x64	; 100
     b80:	42 9f       	mul	r20, r18
     b82:	c0 01       	movw	r24, r0
     b84:	43 9f       	mul	r20, r19
     b86:	90 0d       	add	r25, r0
     b88:	11 24       	eor	r1, r1
     b8a:	0e 94 e4 09 	call	0x13c8	; 0x13c8 <__divmodhi4>
     b8e:	16 2f       	mov	r17, r22
     b90:	07 2f       	mov	r16, r23
     b92:	02 c0       	rjmp	.+4      	; 0xb98 <joystickPos+0x7e>
     b94:	10 e0       	ldi	r17, 0x00	; 0
     b96:	00 e0       	ldi	r16, 0x00	; 0
     b98:	81 e0       	ldi	r24, 0x01	; 1
     b9a:	0e 94 fe 01 	call	0x3fc	; 0x3fc <ADC_start_read>
     b9e:	82 e4       	ldi	r24, 0x42	; 66
     ba0:	8a 95       	dec	r24
     ba2:	f1 f7       	brne	.-4      	; 0xba0 <joystickPos+0x86>
     ba4:	00 c0       	rjmp	.+0      	; 0xba6 <joystickPos+0x8c>
     ba6:	0e 94 f8 01 	call	0x3f0	; 0x3f0 <get_ADC_data>
     baa:	40 91 06 03 	lds	r20, 0x0306
     bae:	48 17       	cp	r20, r24
     bb0:	98 f4       	brcc	.+38     	; 0xbd8 <joystickPos+0xbe>
     bb2:	50 e0       	ldi	r21, 0x00	; 0
     bb4:	99 27       	eor	r25, r25
     bb6:	fc 01       	movw	r30, r24
     bb8:	e4 1b       	sub	r30, r20
     bba:	f5 0b       	sbc	r31, r21
     bbc:	24 e6       	ldi	r18, 0x64	; 100
     bbe:	2e 9f       	mul	r18, r30
     bc0:	c0 01       	movw	r24, r0
     bc2:	2f 9f       	mul	r18, r31
     bc4:	90 0d       	add	r25, r0
     bc6:	11 24       	eor	r1, r1
     bc8:	ef ef       	ldi	r30, 0xFF	; 255
     bca:	f0 e0       	ldi	r31, 0x00	; 0
     bcc:	bf 01       	movw	r22, r30
     bce:	64 1b       	sub	r22, r20
     bd0:	75 0b       	sbc	r23, r21
     bd2:	0e 94 e4 09 	call	0x13c8	; 0x13c8 <__divmodhi4>
     bd6:	13 c0       	rjmp	.+38     	; 0xbfe <joystickPos+0xe4>
     bd8:	84 17       	cp	r24, r20
     bda:	78 f4       	brcc	.+30     	; 0xbfa <joystickPos+0xe0>
     bdc:	50 e0       	ldi	r21, 0x00	; 0
     bde:	99 27       	eor	r25, r25
     be0:	9c 01       	movw	r18, r24
     be2:	24 1b       	sub	r18, r20
     be4:	35 0b       	sbc	r19, r21
     be6:	64 e6       	ldi	r22, 0x64	; 100
     be8:	62 9f       	mul	r22, r18
     bea:	c0 01       	movw	r24, r0
     bec:	63 9f       	mul	r22, r19
     bee:	90 0d       	add	r25, r0
     bf0:	11 24       	eor	r1, r1
     bf2:	ba 01       	movw	r22, r20
     bf4:	0e 94 e4 09 	call	0x13c8	; 0x13c8 <__divmodhi4>
     bf8:	02 c0       	rjmp	.+4      	; 0xbfe <joystickPos+0xe4>
     bfa:	60 e0       	ldi	r22, 0x00	; 0
     bfc:	70 e0       	ldi	r23, 0x00	; 0
     bfe:	21 2f       	mov	r18, r17
     c00:	30 2f       	mov	r19, r16
     c02:	46 2f       	mov	r20, r22
     c04:	57 2f       	mov	r21, r23
     c06:	6d 81       	ldd	r22, Y+5	; 0x05
     c08:	70 e0       	ldi	r23, 0x00	; 0
     c0a:	80 e0       	ldi	r24, 0x00	; 0
     c0c:	90 e0       	ldi	r25, 0x00	; 0
     c0e:	0f 90       	pop	r0
     c10:	0f 90       	pop	r0
     c12:	0f 90       	pop	r0
     c14:	0f 90       	pop	r0
     c16:	0f 90       	pop	r0
     c18:	df 91       	pop	r29
     c1a:	cf 91       	pop	r28
     c1c:	1f 91       	pop	r17
     c1e:	0f 91       	pop	r16
     c20:	08 95       	ret

00000c22 <JoystickDirection>:
     c22:	cf 93       	push	r28
     c24:	df 93       	push	r29
     c26:	cd b7       	in	r28, 0x3d	; 61
     c28:	de b7       	in	r29, 0x3e	; 62
     c2a:	2a 97       	sbiw	r28, 0x0a	; 10
     c2c:	0f b6       	in	r0, 0x3f	; 63
     c2e:	f8 94       	cli
     c30:	de bf       	out	0x3e, r29	; 62
     c32:	0f be       	out	0x3f, r0	; 63
     c34:	cd bf       	out	0x3d, r28	; 61
     c36:	0e 94 8d 05 	call	0xb1a	; 0xb1a <joystickPos>
     c3a:	2e 83       	std	Y+6, r18	; 0x06
     c3c:	3f 83       	std	Y+7, r19	; 0x07
     c3e:	48 87       	std	Y+8, r20	; 0x08
     c40:	59 87       	std	Y+9, r21	; 0x09
     c42:	2e 81       	ldd	r18, Y+6	; 0x06
     c44:	3f 81       	ldd	r19, Y+7	; 0x07
     c46:	48 85       	ldd	r20, Y+8	; 0x08
     c48:	59 85       	ldd	r21, Y+9	; 0x09
     c4a:	2e 3c       	cpi	r18, 0xCE	; 206
     c4c:	8f ef       	ldi	r24, 0xFF	; 255
     c4e:	38 07       	cpc	r19, r24
     c50:	24 f0       	brlt	.+8      	; 0xc5a <JoystickDirection+0x38>
     c52:	23 33       	cpi	r18, 0x33	; 51
     c54:	31 05       	cpc	r19, r1
     c56:	1c f4       	brge	.+6      	; 0xc5e <JoystickDirection+0x3c>
     c58:	03 c0       	rjmp	.+6      	; 0xc60 <JoystickDirection+0x3e>
     c5a:	60 e0       	ldi	r22, 0x00	; 0
     c5c:	01 c0       	rjmp	.+2      	; 0xc60 <JoystickDirection+0x3e>
     c5e:	61 e0       	ldi	r22, 0x01	; 1
     c60:	4e 3c       	cpi	r20, 0xCE	; 206
     c62:	8f ef       	ldi	r24, 0xFF	; 255
     c64:	58 07       	cpc	r21, r24
     c66:	24 f0       	brlt	.+8      	; 0xc70 <JoystickDirection+0x4e>
     c68:	43 33       	cpi	r20, 0x33	; 51
     c6a:	51 05       	cpc	r21, r1
     c6c:	1c f4       	brge	.+6      	; 0xc74 <JoystickDirection+0x52>
     c6e:	03 c0       	rjmp	.+6      	; 0xc76 <JoystickDirection+0x54>
     c70:	63 e0       	ldi	r22, 0x03	; 3
     c72:	01 c0       	rjmp	.+2      	; 0xc76 <JoystickDirection+0x54>
     c74:	62 e0       	ldi	r22, 0x02	; 2
     c76:	3a 83       	std	Y+2, r19	; 0x02
     c78:	29 83       	std	Y+1, r18	; 0x01
     c7a:	5c 83       	std	Y+4, r21	; 0x04
     c7c:	4b 83       	std	Y+3, r20	; 0x03
     c7e:	3a 81       	ldd	r19, Y+2	; 0x02
     c80:	5c 81       	ldd	r21, Y+4	; 0x04
     c82:	70 e0       	ldi	r23, 0x00	; 0
     c84:	80 e0       	ldi	r24, 0x00	; 0
     c86:	90 e0       	ldi	r25, 0x00	; 0
     c88:	2a 96       	adiw	r28, 0x0a	; 10
     c8a:	0f b6       	in	r0, 0x3f	; 63
     c8c:	f8 94       	cli
     c8e:	de bf       	out	0x3e, r29	; 62
     c90:	0f be       	out	0x3f, r0	; 63
     c92:	cd bf       	out	0x3d, r28	; 61
     c94:	df 91       	pop	r29
     c96:	cf 91       	pop	r28
     c98:	08 95       	ret

00000c9a <oled_is_out_of_bounds>:
     c9a:	80 91 09 03 	lds	r24, 0x0309
     c9e:	90 91 0a 03 	lds	r25, 0x030A
     ca2:	80 38       	cpi	r24, 0x80	; 128
     ca4:	91 05       	cpc	r25, r1
     ca6:	bc f0       	brlt	.+46     	; 0xcd6 <oled_is_out_of_bounds+0x3c>
     ca8:	e9 e0       	ldi	r30, 0x09	; 9
     caa:	f3 e0       	ldi	r31, 0x03	; 3
     cac:	80 81       	ld	r24, Z
     cae:	91 81       	ldd	r25, Z+1	; 0x01
     cb0:	80 58       	subi	r24, 0x80	; 128
     cb2:	91 09       	sbc	r25, r1
     cb4:	91 83       	std	Z+1, r25	; 0x01
     cb6:	80 83       	st	Z, r24
     cb8:	e7 e0       	ldi	r30, 0x07	; 7
     cba:	f3 e0       	ldi	r31, 0x03	; 3
     cbc:	80 81       	ld	r24, Z
     cbe:	91 81       	ldd	r25, Z+1	; 0x01
     cc0:	01 96       	adiw	r24, 0x01	; 1
     cc2:	91 83       	std	Z+1, r25	; 0x01
     cc4:	80 83       	st	Z, r24
     cc6:	80 81       	ld	r24, Z
     cc8:	91 81       	ldd	r25, Z+1	; 0x01
     cca:	08 97       	sbiw	r24, 0x08	; 8
     ccc:	24 f0       	brlt	.+8      	; 0xcd6 <oled_is_out_of_bounds+0x3c>
     cce:	10 92 08 03 	sts	0x0308, r1
     cd2:	10 92 07 03 	sts	0x0307, r1
     cd6:	08 95       	ret

00000cd8 <oled_put_char>:
     cd8:	ef 92       	push	r14
     cda:	ff 92       	push	r15
     cdc:	0f 93       	push	r16
     cde:	1f 93       	push	r17
     ce0:	cf 93       	push	r28
     ce2:	df 93       	push	r29
     ce4:	80 52       	subi	r24, 0x20	; 32
     ce6:	20 91 0c 01 	lds	r18, 0x010C
     cea:	30 91 0d 01 	lds	r19, 0x010D
     cee:	12 16       	cp	r1, r18
     cf0:	13 06       	cpc	r1, r19
     cf2:	84 f5       	brge	.+96     	; 0xd54 <oled_put_char+0x7c>
     cf4:	e8 2e       	mov	r14, r24
     cf6:	f1 2c       	mov	r15, r1
     cf8:	c7 01       	movw	r24, r14
     cfa:	88 0f       	add	r24, r24
     cfc:	99 1f       	adc	r25, r25
     cfe:	88 0f       	add	r24, r24
     d00:	99 1f       	adc	r25, r25
     d02:	88 0f       	add	r24, r24
     d04:	99 1f       	adc	r25, r25
     d06:	c0 e0       	ldi	r28, 0x00	; 0
     d08:	d0 e0       	ldi	r29, 0x00	; 0
     d0a:	9c 01       	movw	r18, r24
     d0c:	20 59       	subi	r18, 0x90	; 144
     d0e:	3f 4f       	sbci	r19, 0xFF	; 255
     d10:	79 01       	movw	r14, r18
     d12:	09 e0       	ldi	r16, 0x09	; 9
     d14:	13 e0       	ldi	r17, 0x03	; 3
     d16:	f7 01       	movw	r30, r14
     d18:	ec 0f       	add	r30, r28
     d1a:	fd 1f       	adc	r31, r29
     d1c:	85 91       	lpm	r24, Z+
     d1e:	94 91       	lpm	r25, Z
     d20:	e0 91 0e 01 	lds	r30, 0x010E
     d24:	f0 91 0f 01 	lds	r31, 0x010F
     d28:	80 83       	st	Z, r24
     d2a:	f8 01       	movw	r30, r16
     d2c:	20 81       	ld	r18, Z
     d2e:	31 81       	ldd	r19, Z+1	; 0x01
     d30:	80 91 0c 01 	lds	r24, 0x010C
     d34:	90 91 0d 01 	lds	r25, 0x010D
     d38:	82 0f       	add	r24, r18
     d3a:	93 1f       	adc	r25, r19
     d3c:	91 83       	std	Z+1, r25	; 0x01
     d3e:	80 83       	st	Z, r24
     d40:	0e 94 4d 06 	call	0xc9a	; 0xc9a <oled_is_out_of_bounds>
     d44:	21 96       	adiw	r28, 0x01	; 1
     d46:	80 91 0c 01 	lds	r24, 0x010C
     d4a:	90 91 0d 01 	lds	r25, 0x010D
     d4e:	c8 17       	cp	r28, r24
     d50:	d9 07       	cpc	r29, r25
     d52:	0c f3       	brlt	.-62     	; 0xd16 <oled_put_char+0x3e>
     d54:	80 e0       	ldi	r24, 0x00	; 0
     d56:	90 e0       	ldi	r25, 0x00	; 0
     d58:	df 91       	pop	r29
     d5a:	cf 91       	pop	r28
     d5c:	1f 91       	pop	r17
     d5e:	0f 91       	pop	r16
     d60:	ff 90       	pop	r15
     d62:	ef 90       	pop	r14
     d64:	08 95       	ret

00000d66 <oled_inv_put_char>:
     d66:	ef 92       	push	r14
     d68:	ff 92       	push	r15
     d6a:	0f 93       	push	r16
     d6c:	1f 93       	push	r17
     d6e:	cf 93       	push	r28
     d70:	df 93       	push	r29
     d72:	80 52       	subi	r24, 0x20	; 32
     d74:	20 91 0c 01 	lds	r18, 0x010C
     d78:	30 91 0d 01 	lds	r19, 0x010D
     d7c:	12 16       	cp	r1, r18
     d7e:	13 06       	cpc	r1, r19
     d80:	8c f5       	brge	.+98     	; 0xde4 <oled_inv_put_char+0x7e>
     d82:	e8 2e       	mov	r14, r24
     d84:	f1 2c       	mov	r15, r1
     d86:	c7 01       	movw	r24, r14
     d88:	88 0f       	add	r24, r24
     d8a:	99 1f       	adc	r25, r25
     d8c:	88 0f       	add	r24, r24
     d8e:	99 1f       	adc	r25, r25
     d90:	88 0f       	add	r24, r24
     d92:	99 1f       	adc	r25, r25
     d94:	c0 e0       	ldi	r28, 0x00	; 0
     d96:	d0 e0       	ldi	r29, 0x00	; 0
     d98:	9c 01       	movw	r18, r24
     d9a:	20 59       	subi	r18, 0x90	; 144
     d9c:	3f 4f       	sbci	r19, 0xFF	; 255
     d9e:	79 01       	movw	r14, r18
     da0:	09 e0       	ldi	r16, 0x09	; 9
     da2:	13 e0       	ldi	r17, 0x03	; 3
     da4:	f7 01       	movw	r30, r14
     da6:	ec 0f       	add	r30, r28
     da8:	fd 1f       	adc	r31, r29
     daa:	85 91       	lpm	r24, Z+
     dac:	94 91       	lpm	r25, Z
     dae:	80 95       	com	r24
     db0:	e0 91 0e 01 	lds	r30, 0x010E
     db4:	f0 91 0f 01 	lds	r31, 0x010F
     db8:	80 83       	st	Z, r24
     dba:	f8 01       	movw	r30, r16
     dbc:	20 81       	ld	r18, Z
     dbe:	31 81       	ldd	r19, Z+1	; 0x01
     dc0:	80 91 0c 01 	lds	r24, 0x010C
     dc4:	90 91 0d 01 	lds	r25, 0x010D
     dc8:	82 0f       	add	r24, r18
     dca:	93 1f       	adc	r25, r19
     dcc:	91 83       	std	Z+1, r25	; 0x01
     dce:	80 83       	st	Z, r24
     dd0:	0e 94 4d 06 	call	0xc9a	; 0xc9a <oled_is_out_of_bounds>
     dd4:	21 96       	adiw	r28, 0x01	; 1
     dd6:	80 91 0c 01 	lds	r24, 0x010C
     dda:	90 91 0d 01 	lds	r25, 0x010D
     dde:	c8 17       	cp	r28, r24
     de0:	d9 07       	cpc	r29, r25
     de2:	04 f3       	brlt	.-64     	; 0xda4 <oled_inv_put_char+0x3e>
     de4:	80 e0       	ldi	r24, 0x00	; 0
     de6:	90 e0       	ldi	r25, 0x00	; 0
     de8:	df 91       	pop	r29
     dea:	cf 91       	pop	r28
     dec:	1f 91       	pop	r17
     dee:	0f 91       	pop	r16
     df0:	ff 90       	pop	r15
     df2:	ef 90       	pop	r14
     df4:	08 95       	ret

00000df6 <oled_set_adressing_mode>:
     df6:	e0 91 10 01 	lds	r30, 0x0110
     dfa:	f0 91 11 01 	lds	r31, 0x0111
     dfe:	90 e2       	ldi	r25, 0x20	; 32
     e00:	90 83       	st	Z, r25
     e02:	e0 91 10 01 	lds	r30, 0x0110
     e06:	f0 91 11 01 	lds	r31, 0x0111
     e0a:	80 83       	st	Z, r24
     e0c:	08 95       	ret

00000e0e <oled_printf>:
     e0e:	cf 93       	push	r28
     e10:	df 93       	push	r29
     e12:	cd b7       	in	r28, 0x3d	; 61
     e14:	de b7       	in	r29, 0x3e	; 62
     e16:	fe 01       	movw	r30, r28
     e18:	35 96       	adiw	r30, 0x05	; 5
     e1a:	61 91       	ld	r22, Z+
     e1c:	71 91       	ld	r23, Z+
     e1e:	af 01       	movw	r20, r30
     e20:	80 e2       	ldi	r24, 0x20	; 32
     e22:	91 e0       	ldi	r25, 0x01	; 1
     e24:	0e 94 1d 0c 	call	0x183a	; 0x183a <vfprintf>
     e28:	df 91       	pop	r29
     e2a:	cf 91       	pop	r28
     e2c:	08 95       	ret

00000e2e <oled_inv_printf>:
     e2e:	cf 93       	push	r28
     e30:	df 93       	push	r29
     e32:	cd b7       	in	r28, 0x3d	; 61
     e34:	de b7       	in	r29, 0x3e	; 62
     e36:	fe 01       	movw	r30, r28
     e38:	35 96       	adiw	r30, 0x05	; 5
     e3a:	61 91       	ld	r22, Z+
     e3c:	71 91       	ld	r23, Z+
     e3e:	af 01       	movw	r20, r30
     e40:	82 e1       	ldi	r24, 0x12	; 18
     e42:	91 e0       	ldi	r25, 0x01	; 1
     e44:	0e 94 1d 0c 	call	0x183a	; 0x183a <vfprintf>
     e48:	df 91       	pop	r29
     e4a:	cf 91       	pop	r28
     e4c:	08 95       	ret

00000e4e <oled_goto_line>:
     e4e:	cf 93       	push	r28
     e50:	df 93       	push	r29
     e52:	ec 01       	movw	r28, r24
     e54:	88 30       	cpi	r24, 0x08	; 8
     e56:	91 05       	cpc	r25, r1
     e58:	80 f4       	brcc	.+32     	; 0xe7a <oled_goto_line+0x2c>
     e5a:	90 93 08 03 	sts	0x0308, r25
     e5e:	80 93 07 03 	sts	0x0307, r24
     e62:	82 e0       	ldi	r24, 0x02	; 2
     e64:	0e 94 fb 06 	call	0xdf6	; 0xdf6 <oled_set_adressing_mode>
     e68:	c0 55       	subi	r28, 0x50	; 80
     e6a:	e0 91 10 01 	lds	r30, 0x0110
     e6e:	f0 91 11 01 	lds	r31, 0x0111
     e72:	c0 83       	st	Z, r28
     e74:	80 e0       	ldi	r24, 0x00	; 0
     e76:	0e 94 fb 06 	call	0xdf6	; 0xdf6 <oled_set_adressing_mode>
     e7a:	df 91       	pop	r29
     e7c:	cf 91       	pop	r28
     e7e:	08 95       	ret

00000e80 <oled_goto_column>:
     e80:	cf 93       	push	r28
     e82:	df 93       	push	r29
     e84:	ec 01       	movw	r28, r24
     e86:	80 38       	cpi	r24, 0x80	; 128
     e88:	91 05       	cpc	r25, r1
     e8a:	50 f5       	brcc	.+84     	; 0xee0 <oled_goto_column+0x60>
     e8c:	90 93 0a 03 	sts	0x030A, r25
     e90:	80 93 09 03 	sts	0x0309, r24
     e94:	82 e0       	ldi	r24, 0x02	; 2
     e96:	0e 94 fb 06 	call	0xdf6	; 0xdf6 <oled_set_adressing_mode>
     e9a:	ce 01       	movw	r24, r28
     e9c:	8f 70       	andi	r24, 0x0F	; 15
     e9e:	90 78       	andi	r25, 0x80	; 128
     ea0:	99 23       	and	r25, r25
     ea2:	24 f4       	brge	.+8      	; 0xeac <oled_goto_column+0x2c>
     ea4:	01 97       	sbiw	r24, 0x01	; 1
     ea6:	80 6f       	ori	r24, 0xF0	; 240
     ea8:	9f 6f       	ori	r25, 0xFF	; 255
     eaa:	01 96       	adiw	r24, 0x01	; 1
     eac:	e0 91 10 01 	lds	r30, 0x0110
     eb0:	f0 91 11 01 	lds	r31, 0x0111
     eb4:	80 83       	st	Z, r24
     eb6:	ce 01       	movw	r24, r28
     eb8:	dd 23       	and	r29, r29
     eba:	0c f4       	brge	.+2      	; 0xebe <oled_goto_column+0x3e>
     ebc:	0f 96       	adiw	r24, 0x0f	; 15
     ebe:	95 95       	asr	r25
     ec0:	87 95       	ror	r24
     ec2:	95 95       	asr	r25
     ec4:	87 95       	ror	r24
     ec6:	95 95       	asr	r25
     ec8:	87 95       	ror	r24
     eca:	95 95       	asr	r25
     ecc:	87 95       	ror	r24
     ece:	80 5f       	subi	r24, 0xF0	; 240
     ed0:	e0 91 10 01 	lds	r30, 0x0110
     ed4:	f0 91 11 01 	lds	r31, 0x0111
     ed8:	80 83       	st	Z, r24
     eda:	80 e0       	ldi	r24, 0x00	; 0
     edc:	0e 94 fb 06 	call	0xdf6	; 0xdf6 <oled_set_adressing_mode>
     ee0:	df 91       	pop	r29
     ee2:	cf 91       	pop	r28
     ee4:	08 95       	ret

00000ee6 <oled_pos>:
     ee6:	cf 93       	push	r28
     ee8:	df 93       	push	r29
     eea:	eb 01       	movw	r28, r22
     eec:	0e 94 27 07 	call	0xe4e	; 0xe4e <oled_goto_line>
     ef0:	ce 01       	movw	r24, r28
     ef2:	0e 94 40 07 	call	0xe80	; 0xe80 <oled_goto_column>
     ef6:	df 91       	pop	r29
     ef8:	cf 91       	pop	r28
     efa:	08 95       	ret

00000efc <oled_home>:
     efc:	60 e0       	ldi	r22, 0x00	; 0
     efe:	70 e0       	ldi	r23, 0x00	; 0
     f00:	80 e0       	ldi	r24, 0x00	; 0
     f02:	90 e0       	ldi	r25, 0x00	; 0
     f04:	0e 94 73 07 	call	0xee6	; 0xee6 <oled_pos>
     f08:	08 95       	ret

00000f0a <oled_clear_line>:
     f0a:	cf 93       	push	r28
     f0c:	df 93       	push	r29
     f0e:	ec 01       	movw	r28, r24
     f10:	60 e0       	ldi	r22, 0x00	; 0
     f12:	70 e0       	ldi	r23, 0x00	; 0
     f14:	0e 94 73 07 	call	0xee6	; 0xee6 <oled_pos>
     f18:	20 e8       	ldi	r18, 0x80	; 128
     f1a:	30 e0       	ldi	r19, 0x00	; 0
     f1c:	e0 91 0e 01 	lds	r30, 0x010E
     f20:	f0 91 0f 01 	lds	r31, 0x010F
     f24:	10 82       	st	Z, r1
     f26:	21 50       	subi	r18, 0x01	; 1
     f28:	31 09       	sbc	r19, r1
     f2a:	21 15       	cp	r18, r1
     f2c:	31 05       	cpc	r19, r1
     f2e:	b1 f7       	brne	.-20     	; 0xf1c <oled_clear_line+0x12>
     f30:	ce 01       	movw	r24, r28
     f32:	0e 94 27 07 	call	0xe4e	; 0xe4e <oled_goto_line>
     f36:	df 91       	pop	r29
     f38:	cf 91       	pop	r28
     f3a:	08 95       	ret

00000f3c <oled_reset>:
     f3c:	cf 93       	push	r28
     f3e:	df 93       	push	r29
     f40:	c0 e0       	ldi	r28, 0x00	; 0
     f42:	d0 e0       	ldi	r29, 0x00	; 0
     f44:	ce 01       	movw	r24, r28
     f46:	0e 94 85 07 	call	0xf0a	; 0xf0a <oled_clear_line>
     f4a:	21 96       	adiw	r28, 0x01	; 1
     f4c:	c8 30       	cpi	r28, 0x08	; 8
     f4e:	d1 05       	cpc	r29, r1
     f50:	c9 f7       	brne	.-14     	; 0xf44 <oled_reset+0x8>
     f52:	0e 94 7e 07 	call	0xefc	; 0xefc <oled_home>
     f56:	df 91       	pop	r29
     f58:	cf 91       	pop	r28
     f5a:	08 95       	ret

00000f5c <oled_init>:
     f5c:	e0 91 10 01 	lds	r30, 0x0110
     f60:	f0 91 11 01 	lds	r31, 0x0111
     f64:	8e ea       	ldi	r24, 0xAE	; 174
     f66:	80 83       	st	Z, r24
     f68:	e0 91 10 01 	lds	r30, 0x0110
     f6c:	f0 91 11 01 	lds	r31, 0x0111
     f70:	81 ea       	ldi	r24, 0xA1	; 161
     f72:	80 83       	st	Z, r24
     f74:	e0 91 10 01 	lds	r30, 0x0110
     f78:	f0 91 11 01 	lds	r31, 0x0111
     f7c:	8a ed       	ldi	r24, 0xDA	; 218
     f7e:	80 83       	st	Z, r24
     f80:	e0 91 10 01 	lds	r30, 0x0110
     f84:	f0 91 11 01 	lds	r31, 0x0111
     f88:	82 e1       	ldi	r24, 0x12	; 18
     f8a:	80 83       	st	Z, r24
     f8c:	e0 91 10 01 	lds	r30, 0x0110
     f90:	f0 91 11 01 	lds	r31, 0x0111
     f94:	88 ec       	ldi	r24, 0xC8	; 200
     f96:	80 83       	st	Z, r24
     f98:	e0 91 10 01 	lds	r30, 0x0110
     f9c:	f0 91 11 01 	lds	r31, 0x0111
     fa0:	88 ea       	ldi	r24, 0xA8	; 168
     fa2:	80 83       	st	Z, r24
     fa4:	e0 91 10 01 	lds	r30, 0x0110
     fa8:	f0 91 11 01 	lds	r31, 0x0111
     fac:	8f e3       	ldi	r24, 0x3F	; 63
     fae:	80 83       	st	Z, r24
     fb0:	e0 91 10 01 	lds	r30, 0x0110
     fb4:	f0 91 11 01 	lds	r31, 0x0111
     fb8:	85 ed       	ldi	r24, 0xD5	; 213
     fba:	80 83       	st	Z, r24
     fbc:	e0 91 10 01 	lds	r30, 0x0110
     fc0:	f0 91 11 01 	lds	r31, 0x0111
     fc4:	80 e8       	ldi	r24, 0x80	; 128
     fc6:	80 83       	st	Z, r24
     fc8:	e0 91 10 01 	lds	r30, 0x0110
     fcc:	f0 91 11 01 	lds	r31, 0x0111
     fd0:	81 e8       	ldi	r24, 0x81	; 129
     fd2:	80 83       	st	Z, r24
     fd4:	e0 91 10 01 	lds	r30, 0x0110
     fd8:	f0 91 11 01 	lds	r31, 0x0111
     fdc:	80 e5       	ldi	r24, 0x50	; 80
     fde:	80 83       	st	Z, r24
     fe0:	e0 91 10 01 	lds	r30, 0x0110
     fe4:	f0 91 11 01 	lds	r31, 0x0111
     fe8:	89 ed       	ldi	r24, 0xD9	; 217
     fea:	80 83       	st	Z, r24
     fec:	e0 91 10 01 	lds	r30, 0x0110
     ff0:	f0 91 11 01 	lds	r31, 0x0111
     ff4:	81 e2       	ldi	r24, 0x21	; 33
     ff6:	80 83       	st	Z, r24
     ff8:	80 e0       	ldi	r24, 0x00	; 0
     ffa:	0e 94 fb 06 	call	0xdf6	; 0xdf6 <oled_set_adressing_mode>
     ffe:	e0 91 10 01 	lds	r30, 0x0110
    1002:	f0 91 11 01 	lds	r31, 0x0111
    1006:	8b ed       	ldi	r24, 0xDB	; 219
    1008:	80 83       	st	Z, r24
    100a:	e0 91 10 01 	lds	r30, 0x0110
    100e:	f0 91 11 01 	lds	r31, 0x0111
    1012:	80 e3       	ldi	r24, 0x30	; 48
    1014:	80 83       	st	Z, r24
    1016:	e0 91 10 01 	lds	r30, 0x0110
    101a:	f0 91 11 01 	lds	r31, 0x0111
    101e:	8d ea       	ldi	r24, 0xAD	; 173
    1020:	80 83       	st	Z, r24
    1022:	e0 91 10 01 	lds	r30, 0x0110
    1026:	f0 91 11 01 	lds	r31, 0x0111
    102a:	10 82       	st	Z, r1
    102c:	e0 91 10 01 	lds	r30, 0x0110
    1030:	f0 91 11 01 	lds	r31, 0x0111
    1034:	84 ea       	ldi	r24, 0xA4	; 164
    1036:	80 83       	st	Z, r24
    1038:	e0 91 10 01 	lds	r30, 0x0110
    103c:	f0 91 11 01 	lds	r31, 0x0111
    1040:	86 ea       	ldi	r24, 0xA6	; 166
    1042:	80 83       	st	Z, r24
    1044:	e0 91 10 01 	lds	r30, 0x0110
    1048:	f0 91 11 01 	lds	r31, 0x0111
    104c:	8f ea       	ldi	r24, 0xAF	; 175
    104e:	80 83       	st	Z, r24
    1050:	0e 94 9e 07 	call	0xf3c	; 0xf3c <oled_reset>
    1054:	08 95       	ret

00001056 <new_menu>:
void set_first_child(menu* mymenu, menu* first_child) {
	mymenu->first_child = first_child;
}


menu* new_menu(char* name, menu* parent) {
    1056:	0f 93       	push	r16
    1058:	1f 93       	push	r17
    105a:	cf 93       	push	r28
    105c:	df 93       	push	r29
    105e:	8c 01       	movw	r16, r24
    1060:	eb 01       	movw	r28, r22
	menu* nextmenu = malloc(sizeof(menu));
    1062:	89 e0       	ldi	r24, 0x09	; 9
    1064:	90 e0       	ldi	r25, 0x00	; 0
    1066:	0e 94 0c 0a 	call	0x1418	; 0x1418 <malloc>
    106a:	fc 01       	movw	r30, r24
 	nextmenu->title = name;
    106c:	11 83       	std	Z+1, r17	; 0x01
    106e:	00 83       	st	Z, r16
	nextmenu->parent = parent;
    1070:	d4 83       	std	Z+4, r29	; 0x04
    1072:	c3 83       	std	Z+3, r28	; 0x03
 	nextmenu->right_sibling = NULL;
    1074:	10 86       	std	Z+8, r1	; 0x08
    1076:	17 82       	std	Z+7, r1	; 0x07
	nextmenu->first_child = NULL;
    1078:	16 82       	std	Z+6, r1	; 0x06
    107a:	15 82       	std	Z+5, r1	; 0x05
	return nextmenu;
}
    107c:	df 91       	pop	r29
    107e:	cf 91       	pop	r28
    1080:	1f 91       	pop	r17
    1082:	0f 91       	pop	r16
    1084:	08 95       	ret

00001086 <size_of_menu>:

int size_of_menu(menu* mymenu) {
	
	int menu_size = 0;
	
	mymenu = mymenu->first_child;
    1086:	dc 01       	movw	r26, r24
    1088:	15 96       	adiw	r26, 0x05	; 5
    108a:	ed 91       	ld	r30, X+
    108c:	fc 91       	ld	r31, X
    108e:	16 97       	sbiw	r26, 0x06	; 6
	if (mymenu == NULL) {
    1090:	30 97       	sbiw	r30, 0x00	; 0
    1092:	79 f0       	breq	.+30     	; 0x10b2 <size_of_menu+0x2c>
		return menu_size;
	}
	menu_size ++;
	while (mymenu->right_sibling != NULL) {
    1094:	07 80       	ldd	r0, Z+7	; 0x07
    1096:	f0 85       	ldd	r31, Z+8	; 0x08
    1098:	e0 2d       	mov	r30, r0
    109a:	30 97       	sbiw	r30, 0x00	; 0
    109c:	69 f0       	breq	.+26     	; 0x10b8 <size_of_menu+0x32>
    109e:	21 e0       	ldi	r18, 0x01	; 1
    10a0:	30 e0       	ldi	r19, 0x00	; 0
		mymenu = mymenu->right_sibling;
		menu_size++;
    10a2:	2f 5f       	subi	r18, 0xFF	; 255
    10a4:	3f 4f       	sbci	r19, 0xFF	; 255
	mymenu = mymenu->first_child;
	if (mymenu == NULL) {
		return menu_size;
	}
	menu_size ++;
	while (mymenu->right_sibling != NULL) {
    10a6:	07 80       	ldd	r0, Z+7	; 0x07
    10a8:	f0 85       	ldd	r31, Z+8	; 0x08
    10aa:	e0 2d       	mov	r30, r0
    10ac:	30 97       	sbiw	r30, 0x00	; 0
    10ae:	c9 f7       	brne	.-14     	; 0x10a2 <size_of_menu+0x1c>
    10b0:	06 c0       	rjmp	.+12     	; 0x10be <size_of_menu+0x38>
	
	int menu_size = 0;
	
	mymenu = mymenu->first_child;
	if (mymenu == NULL) {
		return menu_size;
    10b2:	80 e0       	ldi	r24, 0x00	; 0
    10b4:	90 e0       	ldi	r25, 0x00	; 0
    10b6:	08 95       	ret
	}
	menu_size ++;
	while (mymenu->right_sibling != NULL) {
    10b8:	81 e0       	ldi	r24, 0x01	; 1
    10ba:	90 e0       	ldi	r25, 0x00	; 0
    10bc:	08 95       	ret
		mymenu = mymenu->right_sibling;
		menu_size++;
    10be:	82 2f       	mov	r24, r18
    10c0:	93 2f       	mov	r25, r19
	}
	return menu_size;
}
    10c2:	08 95       	ret

000010c4 <oled_menu_print>:
	current_menu_size = size_of_menu(current_menu);
	oled_menu_print(current_menu);
	return direction;
}

void oled_menu_print(menu* mymenu){
    10c4:	0f 93       	push	r16
    10c6:	1f 93       	push	r17
    10c8:	cf 93       	push	r28
    10ca:	df 93       	push	r29
    10cc:	ec 01       	movw	r28, r24
	
	oled_reset(); 
    10ce:	0e 94 9e 07 	call	0xf3c	; 0xf3c <oled_reset>
	
	current_menu_size = size_of_menu(mymenu);
    10d2:	ce 01       	movw	r24, r28
    10d4:	0e 94 43 08 	call	0x1086	; 0x1086 <size_of_menu>
    10d8:	90 93 0e 03 	sts	0x030E, r25
    10dc:	80 93 0d 03 	sts	0x030D, r24
	mymenu = mymenu->first_child;
    10e0:	0d 81       	ldd	r16, Y+5	; 0x05
    10e2:	1e 81       	ldd	r17, Y+6	; 0x06
	for(int i = 0; i < current_menu_size; i++){
    10e4:	80 91 0d 03 	lds	r24, 0x030D
    10e8:	90 91 0e 03 	lds	r25, 0x030E
    10ec:	18 16       	cp	r1, r24
    10ee:	19 06       	cpc	r1, r25
    10f0:	64 f5       	brge	.+88     	; 0x114a <oled_menu_print+0x86>
    10f2:	c0 e0       	ldi	r28, 0x00	; 0
    10f4:	d0 e0       	ldi	r29, 0x00	; 0
		oled_pos(i,0);
    10f6:	60 e0       	ldi	r22, 0x00	; 0
    10f8:	70 e0       	ldi	r23, 0x00	; 0
    10fa:	ce 01       	movw	r24, r28
    10fc:	0e 94 73 07 	call	0xee6	; 0xee6 <oled_pos>
		if(current_line == i){
    1100:	80 91 2e 01 	lds	r24, 0x012E
    1104:	90 91 2f 01 	lds	r25, 0x012F
    1108:	8c 17       	cp	r24, r28
    110a:	9d 07       	cpc	r25, r29
    110c:	51 f4       	brne	.+20     	; 0x1122 <oled_menu_print+0x5e>
			oled_inv_printf(mymenu->title);
    110e:	f8 01       	movw	r30, r16
    1110:	81 81       	ldd	r24, Z+1	; 0x01
    1112:	8f 93       	push	r24
    1114:	80 81       	ld	r24, Z
    1116:	8f 93       	push	r24
    1118:	0e 94 17 07 	call	0xe2e	; 0xe2e <oled_inv_printf>
    111c:	0f 90       	pop	r0
    111e:	0f 90       	pop	r0
    1120:	09 c0       	rjmp	.+18     	; 0x1134 <oled_menu_print+0x70>
		}
		else{
			oled_printf(mymenu->title);
    1122:	f8 01       	movw	r30, r16
    1124:	81 81       	ldd	r24, Z+1	; 0x01
    1126:	8f 93       	push	r24
    1128:	80 81       	ld	r24, Z
    112a:	8f 93       	push	r24
    112c:	0e 94 07 07 	call	0xe0e	; 0xe0e <oled_printf>
    1130:	0f 90       	pop	r0
    1132:	0f 90       	pop	r0
		}
		mymenu = mymenu->right_sibling;
    1134:	f8 01       	movw	r30, r16
    1136:	07 81       	ldd	r16, Z+7	; 0x07
    1138:	10 85       	ldd	r17, Z+8	; 0x08
	
	oled_reset(); 
	
	current_menu_size = size_of_menu(mymenu);
	mymenu = mymenu->first_child;
	for(int i = 0; i < current_menu_size; i++){
    113a:	21 96       	adiw	r28, 0x01	; 1
    113c:	80 91 0d 03 	lds	r24, 0x030D
    1140:	90 91 0e 03 	lds	r25, 0x030E
    1144:	c8 17       	cp	r28, r24
    1146:	d9 07       	cpc	r29, r25
    1148:	b4 f2       	brlt	.-84     	; 0x10f6 <oled_menu_print+0x32>
		}
		mymenu = mymenu->right_sibling;
	}
	mymenu = mymenu->parent;
	
    114a:	df 91       	pop	r29
    114c:	cf 91       	pop	r28
    114e:	1f 91       	pop	r17
    1150:	0f 91       	pop	r16
    1152:	08 95       	ret

00001154 <oled_menu_init>:
		menu_size++;
	}
	return menu_size;
}

menu* oled_menu_init(void) {
    1154:	4f 92       	push	r4
    1156:	5f 92       	push	r5
    1158:	6f 92       	push	r6
    115a:	7f 92       	push	r7
    115c:	8f 92       	push	r8
    115e:	9f 92       	push	r9
    1160:	af 92       	push	r10
    1162:	bf 92       	push	r11
    1164:	cf 92       	push	r12
    1166:	df 92       	push	r13
    1168:	ef 92       	push	r14
    116a:	ff 92       	push	r15
    116c:	0f 93       	push	r16
    116e:	1f 93       	push	r17
    1170:	cf 93       	push	r28
    1172:	df 93       	push	r29
	menu* main_menu = new_menu("Main Menu", NULL);
    1174:	60 e0       	ldi	r22, 0x00	; 0
    1176:	70 e0       	ldi	r23, 0x00	; 0
    1178:	84 ec       	ldi	r24, 0xC4	; 196
    117a:	92 e0       	ldi	r25, 0x02	; 2
    117c:	0e 94 2b 08 	call	0x1056	; 0x1056 <new_menu>
    1180:	ec 01       	movw	r28, r24
	menu* play_game = new_menu("Play Game", main_menu);
    1182:	bc 01       	movw	r22, r24
    1184:	8e ec       	ldi	r24, 0xCE	; 206
    1186:	92 e0       	ldi	r25, 0x02	; 2
    1188:	0e 94 2b 08 	call	0x1056	; 0x1056 <new_menu>
    118c:	7c 01       	movw	r14, r24
	menu* highscores = new_menu("Highscores", main_menu);
    118e:	be 01       	movw	r22, r28
    1190:	88 ed       	ldi	r24, 0xD8	; 216
    1192:	92 e0       	ldi	r25, 0x02	; 2
    1194:	0e 94 2b 08 	call	0x1056	; 0x1056 <new_menu>
    1198:	8c 01       	movw	r16, r24
	menu* Test = new_menu("Test", main_menu);
    119a:	be 01       	movw	r22, r28
    119c:	83 ee       	ldi	r24, 0xE3	; 227
    119e:	92 e0       	ldi	r25, 0x02	; 2
    11a0:	0e 94 2b 08 	call	0x1056	; 0x1056 <new_menu>
    11a4:	4c 01       	movw	r8, r24
	menu* Test1 = new_menu("Test1", Test);
    11a6:	bc 01       	movw	r22, r24
    11a8:	88 ee       	ldi	r24, 0xE8	; 232
    11aa:	92 e0       	ldi	r25, 0x02	; 2
    11ac:	0e 94 2b 08 	call	0x1056	; 0x1056 <new_menu>
    11b0:	6c 01       	movw	r12, r24
	menu* Test2 = new_menu("Test2", Test1);
    11b2:	bc 01       	movw	r22, r24
    11b4:	8e ee       	ldi	r24, 0xEE	; 238
    11b6:	92 e0       	ldi	r25, 0x02	; 2
    11b8:	0e 94 2b 08 	call	0x1056	; 0x1056 <new_menu>
    11bc:	2c 01       	movw	r4, r24
	menu* TestP = new_menu("TestP", play_game);
    11be:	b7 01       	movw	r22, r14
    11c0:	84 ef       	ldi	r24, 0xF4	; 244
    11c2:	92 e0       	ldi	r25, 0x02	; 2
    11c4:	0e 94 2b 08 	call	0x1056	; 0x1056 <new_menu>
    11c8:	5c 01       	movw	r10, r24
	menu* TestH = new_menu("TestH", highscores);
    11ca:	b8 01       	movw	r22, r16
    11cc:	8a ef       	ldi	r24, 0xFA	; 250
    11ce:	92 e0       	ldi	r25, 0x02	; 2
    11d0:	0e 94 2b 08 	call	0x1056	; 0x1056 <new_menu>
    11d4:	3c 01       	movw	r6, r24
	
	
	current_menu = main_menu;
    11d6:	d0 93 0c 03 	sts	0x030C, r29
    11da:	c0 93 0b 03 	sts	0x030B, r28
	current_menu_size = size_of_menu(current_menu);
    11de:	ce 01       	movw	r24, r28
    11e0:	0e 94 43 08 	call	0x1086	; 0x1086 <size_of_menu>
    11e4:	90 93 0e 03 	sts	0x030E, r25
    11e8:	80 93 0d 03 	sts	0x030D, r24
	oled_menu_print(current_menu);
    11ec:	ce 01       	movw	r24, r28
    11ee:	0e 94 62 08 	call	0x10c4	; 0x10c4 <oled_menu_print>
	mymenu->right_sibling = right_sibling;
}


void set_first_child(menu* mymenu, menu* first_child) {
	mymenu->first_child = first_child;
    11f2:	fe 82       	std	Y+6, r15	; 0x06
    11f4:	ed 82       	std	Y+5, r14	; 0x05
volatile menu* current_menu;
volatile int current_line = 2;
volatile int current_menu_size;

void set_right_sibling(menu* mymenu, menu* right_sibling) {
	mymenu->right_sibling = right_sibling;
    11f6:	f7 01       	movw	r30, r14
    11f8:	10 87       	std	Z+8, r17	; 0x08
    11fa:	07 83       	std	Z+7, r16	; 0x07
    11fc:	f8 01       	movw	r30, r16
    11fe:	90 86       	std	Z+8, r9	; 0x08
    1200:	87 82       	std	Z+7, r8	; 0x07
}


void set_first_child(menu* mymenu, menu* first_child) {
	mymenu->first_child = first_child;
    1202:	f4 01       	movw	r30, r8
    1204:	d6 82       	std	Z+6, r13	; 0x06
    1206:	c5 82       	std	Z+5, r12	; 0x05
    1208:	f7 01       	movw	r30, r14
    120a:	b6 82       	std	Z+6, r11	; 0x06
    120c:	a5 82       	std	Z+5, r10	; 0x05
    120e:	f8 01       	movw	r30, r16
    1210:	76 82       	std	Z+6, r7	; 0x06
    1212:	65 82       	std	Z+5, r6	; 0x05
    1214:	f6 01       	movw	r30, r12
    1216:	56 82       	std	Z+6, r5	; 0x06
    1218:	45 82       	std	Z+5, r4	; 0x05
	set_first_child(play_game, TestP);
	set_first_child(highscores, TestH);
	//set_right_sibling(Test1,Test2);
	set_first_child(Test1, Test2);
	return current_menu;
}
    121a:	80 91 0b 03 	lds	r24, 0x030B
    121e:	90 91 0c 03 	lds	r25, 0x030C
    1222:	df 91       	pop	r29
    1224:	cf 91       	pop	r28
    1226:	1f 91       	pop	r17
    1228:	0f 91       	pop	r16
    122a:	ff 90       	pop	r15
    122c:	ef 90       	pop	r14
    122e:	df 90       	pop	r13
    1230:	cf 90       	pop	r12
    1232:	bf 90       	pop	r11
    1234:	af 90       	pop	r10
    1236:	9f 90       	pop	r9
    1238:	8f 90       	pop	r8
    123a:	7f 90       	pop	r7
    123c:	6f 90       	pop	r6
    123e:	5f 90       	pop	r5
    1240:	4f 90       	pop	r4
    1242:	08 95       	ret

00001244 <oled_menu_select>:


JoystickDir oled_menu_select(void){
    1244:	ef 92       	push	r14
    1246:	ff 92       	push	r15
    1248:	0f 93       	push	r16
    124a:	1f 93       	push	r17
    124c:	cf 93       	push	r28
    124e:	df 93       	push	r29
    1250:	00 d0       	rcall	.+0      	; 0x1252 <oled_menu_select+0xe>
    1252:	00 d0       	rcall	.+0      	; 0x1254 <oled_menu_select+0x10>
    1254:	1f 92       	push	r1
    1256:	cd b7       	in	r28, 0x3d	; 61
    1258:	de b7       	in	r29, 0x3e	; 62
	JoystickDir direction = JoystickDirection().Dir;
    125a:	0e 94 11 06 	call	0xc22	; 0xc22 <JoystickDirection>
    125e:	f6 2e       	mov	r15, r22
    1260:	29 83       	std	Y+1, r18	; 0x01
    1262:	3a 83       	std	Y+2, r19	; 0x02
    1264:	4b 83       	std	Y+3, r20	; 0x03
    1266:	5c 83       	std	Y+4, r21	; 0x04
    1268:	6d 83       	std	Y+5, r22	; 0x05
    126a:	e6 2e       	mov	r14, r22
	current_menu_size = size_of_menu(current_menu);
    126c:	00 91 0b 03 	lds	r16, 0x030B
    1270:	10 91 0c 03 	lds	r17, 0x030C
    1274:	c8 01       	movw	r24, r16
    1276:	0e 94 43 08 	call	0x1086	; 0x1086 <size_of_menu>
    127a:	90 93 0e 03 	sts	0x030E, r25
    127e:	80 93 0d 03 	sts	0x030D, r24
	if(direction == UP){
    1282:	82 e0       	ldi	r24, 0x02	; 2
    1284:	f8 12       	cpse	r15, r24
    1286:	0a c0       	rjmp	.+20     	; 0x129c <oled_menu_select+0x58>
		current_line--;
    1288:	80 91 2e 01 	lds	r24, 0x012E
    128c:	90 91 2f 01 	lds	r25, 0x012F
    1290:	01 97       	sbiw	r24, 0x01	; 1
    1292:	90 93 2f 01 	sts	0x012F, r25
    1296:	80 93 2e 01 	sts	0x012E, r24
    129a:	0c c0       	rjmp	.+24     	; 0x12b4 <oled_menu_select+0x70>
	}
	if(direction == DOWN){
    129c:	e3 e0       	ldi	r30, 0x03	; 3
    129e:	fe 12       	cpse	r15, r30
    12a0:	09 c0       	rjmp	.+18     	; 0x12b4 <oled_menu_select+0x70>
		current_line++;
    12a2:	80 91 2e 01 	lds	r24, 0x012E
    12a6:	90 91 2f 01 	lds	r25, 0x012F
    12aa:	01 96       	adiw	r24, 0x01	; 1
    12ac:	90 93 2f 01 	sts	0x012F, r25
    12b0:	80 93 2e 01 	sts	0x012E, r24
	}
	if(current_line > current_menu_size-1){
    12b4:	20 91 0d 03 	lds	r18, 0x030D
    12b8:	30 91 0e 03 	lds	r19, 0x030E
    12bc:	80 91 2e 01 	lds	r24, 0x012E
    12c0:	90 91 2f 01 	lds	r25, 0x012F
    12c4:	21 50       	subi	r18, 0x01	; 1
    12c6:	31 09       	sbc	r19, r1
    12c8:	28 17       	cp	r18, r24
    12ca:	39 07       	cpc	r19, r25
    12cc:	4c f4       	brge	.+18     	; 0x12e0 <oled_menu_select+0x9c>
		current_line = current_menu_size-1;
    12ce:	80 91 0d 03 	lds	r24, 0x030D
    12d2:	90 91 0e 03 	lds	r25, 0x030E
    12d6:	01 97       	sbiw	r24, 0x01	; 1
    12d8:	90 93 2f 01 	sts	0x012F, r25
    12dc:	80 93 2e 01 	sts	0x012E, r24
	}
	if(current_line < 0){
    12e0:	80 91 2e 01 	lds	r24, 0x012E
    12e4:	90 91 2f 01 	lds	r25, 0x012F
    12e8:	99 23       	and	r25, r25
    12ea:	24 f4       	brge	.+8      	; 0x12f4 <oled_menu_select+0xb0>
		current_line = 0;
    12ec:	10 92 2f 01 	sts	0x012F, r1
    12f0:	10 92 2e 01 	sts	0x012E, r1
	}
	if(direction == RIGHT){
    12f4:	f1 e0       	ldi	r31, 0x01	; 1
    12f6:	ef 12       	cpse	r14, r31
    12f8:	2d c0       	rjmp	.+90     	; 0x1354 <oled_menu_select+0x110>
		if(current_menu->first_child != NULL){
    12fa:	f8 01       	movw	r30, r16
    12fc:	85 81       	ldd	r24, Z+5	; 0x05
    12fe:	96 81       	ldd	r25, Z+6	; 0x06
    1300:	89 2b       	or	r24, r25
    1302:	31 f0       	breq	.+12     	; 0x1310 <oled_menu_select+0xcc>
				current_menu = current_menu->first_child;
    1304:	85 81       	ldd	r24, Z+5	; 0x05
    1306:	96 81       	ldd	r25, Z+6	; 0x06
    1308:	90 93 0c 03 	sts	0x030C, r25
    130c:	80 93 0b 03 	sts	0x030B, r24
		}
		for(int i =0; i < current_line;i++){
    1310:	80 91 2e 01 	lds	r24, 0x012E
    1314:	90 91 2f 01 	lds	r25, 0x012F
    1318:	18 16       	cp	r1, r24
    131a:	19 06       	cpc	r1, r25
    131c:	b4 f4       	brge	.+44     	; 0x134a <oled_menu_select+0x106>
    131e:	e0 91 0b 03 	lds	r30, 0x030B
    1322:	f0 91 0c 03 	lds	r31, 0x030C
    1326:	20 e0       	ldi	r18, 0x00	; 0
    1328:	30 e0       	ldi	r19, 0x00	; 0
			current_menu = current_menu->right_sibling;
    132a:	07 80       	ldd	r0, Z+7	; 0x07
    132c:	f0 85       	ldd	r31, Z+8	; 0x08
    132e:	e0 2d       	mov	r30, r0
	}
	if(direction == RIGHT){
		if(current_menu->first_child != NULL){
				current_menu = current_menu->first_child;
		}
		for(int i =0; i < current_line;i++){
    1330:	2f 5f       	subi	r18, 0xFF	; 255
    1332:	3f 4f       	sbci	r19, 0xFF	; 255
    1334:	40 91 2e 01 	lds	r20, 0x012E
    1338:	50 91 2f 01 	lds	r21, 0x012F
    133c:	24 17       	cp	r18, r20
    133e:	35 07       	cpc	r19, r21
    1340:	a4 f3       	brlt	.-24     	; 0x132a <oled_menu_select+0xe6>
    1342:	f0 93 0c 03 	sts	0x030C, r31
    1346:	e0 93 0b 03 	sts	0x030B, r30
			current_menu = current_menu->right_sibling;
		}
		current_line = 0;
    134a:	10 92 2f 01 	sts	0x012F, r1
    134e:	10 92 2e 01 	sts	0x012E, r1
    1352:	10 c0       	rjmp	.+32     	; 0x1374 <oled_menu_select+0x130>
	}
	if(direction == LEFT){
    1354:	e1 10       	cpse	r14, r1
    1356:	0e c0       	rjmp	.+28     	; 0x1374 <oled_menu_select+0x130>
		if(current_menu->parent != NULL){
    1358:	e0 91 0b 03 	lds	r30, 0x030B
    135c:	f0 91 0c 03 	lds	r31, 0x030C
    1360:	83 81       	ldd	r24, Z+3	; 0x03
    1362:	94 81       	ldd	r25, Z+4	; 0x04
    1364:	89 2b       	or	r24, r25
    1366:	31 f0       	breq	.+12     	; 0x1374 <oled_menu_select+0x130>
		current_menu = current_menu->parent;
    1368:	83 81       	ldd	r24, Z+3	; 0x03
    136a:	94 81       	ldd	r25, Z+4	; 0x04
    136c:	90 93 0c 03 	sts	0x030C, r25
    1370:	80 93 0b 03 	sts	0x030B, r24
		}
	}
	current_menu_size = size_of_menu(current_menu);
    1374:	00 91 0b 03 	lds	r16, 0x030B
    1378:	10 91 0c 03 	lds	r17, 0x030C
    137c:	c8 01       	movw	r24, r16
    137e:	0e 94 43 08 	call	0x1086	; 0x1086 <size_of_menu>
    1382:	90 93 0e 03 	sts	0x030E, r25
    1386:	80 93 0d 03 	sts	0x030D, r24
	oled_menu_print(current_menu);
    138a:	c8 01       	movw	r24, r16
    138c:	0e 94 62 08 	call	0x10c4	; 0x10c4 <oled_menu_print>
	return direction;
}
    1390:	8f 2d       	mov	r24, r15
    1392:	0f 90       	pop	r0
    1394:	0f 90       	pop	r0
    1396:	0f 90       	pop	r0
    1398:	0f 90       	pop	r0
    139a:	0f 90       	pop	r0
    139c:	df 91       	pop	r29
    139e:	cf 91       	pop	r28
    13a0:	1f 91       	pop	r17
    13a2:	0f 91       	pop	r16
    13a4:	ff 90       	pop	r15
    13a6:	ef 90       	pop	r14
    13a8:	08 95       	ret

000013aa <SPI_init>:
#include "bit_macros.h"

void SPI_init(){
	
	/* Set SS, MOSI and SCK output, all others input */
	DDRB = (1<<PB4)|(1<<PB5)|(1<<PB7);
    13aa:	80 eb       	ldi	r24, 0xB0	; 176
    13ac:	87 bb       	out	0x17, r24	; 23
	/* Enable SPI, Master, set clock rate fck/16 */
	SPCR = (1<<SPE)|(1<<MSTR)|(1<<SPR0);
    13ae:	81 e5       	ldi	r24, 0x51	; 81
    13b0:	8d b9       	out	0x0d, r24	; 13
	
	/* Set SS-pin high */
	set_bit(PORTB, PB4);
    13b2:	c4 9a       	sbi	0x18, 4	; 24
    13b4:	08 95       	ret

000013b6 <SPI_write>:

void SPI_write(char cData) {
	
	
	/* Start transmission */
	SPDR = cData;
    13b6:	8f b9       	out	0x0f, r24	; 15
	
	/* Wait for transmission complete */
	loop_until_bit_is_set(SPSR, SPIF);
    13b8:	77 9b       	sbis	0x0e, 7	; 14
    13ba:	fe cf       	rjmp	.-4      	; 0x13b8 <SPI_write+0x2>
	
}
    13bc:	08 95       	ret

000013be <SPI_read>:

char SPI_read() {
	
	/* Start shifting registers by putting a char in the register */
	SPDR = 0x00;
    13be:	1f b8       	out	0x0f, r1	; 15
	 
	/* Wait for receive complete */ 
	loop_until_bit_is_set(SPSR,SPIF);
    13c0:	77 9b       	sbis	0x0e, 7	; 14
    13c2:	fe cf       	rjmp	.-4      	; 0x13c0 <SPI_read+0x2>
	
	return SPDR;
    13c4:	8f b1       	in	r24, 0x0f	; 15
}
    13c6:	08 95       	ret

000013c8 <__divmodhi4>:
    13c8:	97 fb       	bst	r25, 7
    13ca:	07 2e       	mov	r0, r23
    13cc:	16 f4       	brtc	.+4      	; 0x13d2 <__divmodhi4+0xa>
    13ce:	00 94       	com	r0
    13d0:	07 d0       	rcall	.+14     	; 0x13e0 <__divmodhi4_neg1>
    13d2:	77 fd       	sbrc	r23, 7
    13d4:	09 d0       	rcall	.+18     	; 0x13e8 <__divmodhi4_neg2>
    13d6:	0e 94 f8 09 	call	0x13f0	; 0x13f0 <__udivmodhi4>
    13da:	07 fc       	sbrc	r0, 7
    13dc:	05 d0       	rcall	.+10     	; 0x13e8 <__divmodhi4_neg2>
    13de:	3e f4       	brtc	.+14     	; 0x13ee <__divmodhi4_exit>

000013e0 <__divmodhi4_neg1>:
    13e0:	90 95       	com	r25
    13e2:	81 95       	neg	r24
    13e4:	9f 4f       	sbci	r25, 0xFF	; 255
    13e6:	08 95       	ret

000013e8 <__divmodhi4_neg2>:
    13e8:	70 95       	com	r23
    13ea:	61 95       	neg	r22
    13ec:	7f 4f       	sbci	r23, 0xFF	; 255

000013ee <__divmodhi4_exit>:
    13ee:	08 95       	ret

000013f0 <__udivmodhi4>:
    13f0:	aa 1b       	sub	r26, r26
    13f2:	bb 1b       	sub	r27, r27
    13f4:	51 e1       	ldi	r21, 0x11	; 17
    13f6:	07 c0       	rjmp	.+14     	; 0x1406 <__udivmodhi4_ep>

000013f8 <__udivmodhi4_loop>:
    13f8:	aa 1f       	adc	r26, r26
    13fa:	bb 1f       	adc	r27, r27
    13fc:	a6 17       	cp	r26, r22
    13fe:	b7 07       	cpc	r27, r23
    1400:	10 f0       	brcs	.+4      	; 0x1406 <__udivmodhi4_ep>
    1402:	a6 1b       	sub	r26, r22
    1404:	b7 0b       	sbc	r27, r23

00001406 <__udivmodhi4_ep>:
    1406:	88 1f       	adc	r24, r24
    1408:	99 1f       	adc	r25, r25
    140a:	5a 95       	dec	r21
    140c:	a9 f7       	brne	.-22     	; 0x13f8 <__udivmodhi4_loop>
    140e:	80 95       	com	r24
    1410:	90 95       	com	r25
    1412:	bc 01       	movw	r22, r24
    1414:	cd 01       	movw	r24, r26
    1416:	08 95       	ret

00001418 <malloc>:
    1418:	cf 93       	push	r28
    141a:	df 93       	push	r29
    141c:	82 30       	cpi	r24, 0x02	; 2
    141e:	91 05       	cpc	r25, r1
    1420:	10 f4       	brcc	.+4      	; 0x1426 <malloc+0xe>
    1422:	82 e0       	ldi	r24, 0x02	; 2
    1424:	90 e0       	ldi	r25, 0x00	; 0
    1426:	e0 91 11 03 	lds	r30, 0x0311
    142a:	f0 91 12 03 	lds	r31, 0x0312
    142e:	20 e0       	ldi	r18, 0x00	; 0
    1430:	30 e0       	ldi	r19, 0x00	; 0
    1432:	a0 e0       	ldi	r26, 0x00	; 0
    1434:	b0 e0       	ldi	r27, 0x00	; 0
    1436:	30 97       	sbiw	r30, 0x00	; 0
    1438:	39 f1       	breq	.+78     	; 0x1488 <malloc+0x70>
    143a:	40 81       	ld	r20, Z
    143c:	51 81       	ldd	r21, Z+1	; 0x01
    143e:	48 17       	cp	r20, r24
    1440:	59 07       	cpc	r21, r25
    1442:	b8 f0       	brcs	.+46     	; 0x1472 <malloc+0x5a>
    1444:	48 17       	cp	r20, r24
    1446:	59 07       	cpc	r21, r25
    1448:	71 f4       	brne	.+28     	; 0x1466 <malloc+0x4e>
    144a:	82 81       	ldd	r24, Z+2	; 0x02
    144c:	93 81       	ldd	r25, Z+3	; 0x03
    144e:	10 97       	sbiw	r26, 0x00	; 0
    1450:	29 f0       	breq	.+10     	; 0x145c <malloc+0x44>
    1452:	13 96       	adiw	r26, 0x03	; 3
    1454:	9c 93       	st	X, r25
    1456:	8e 93       	st	-X, r24
    1458:	12 97       	sbiw	r26, 0x02	; 2
    145a:	2c c0       	rjmp	.+88     	; 0x14b4 <malloc+0x9c>
    145c:	90 93 12 03 	sts	0x0312, r25
    1460:	80 93 11 03 	sts	0x0311, r24
    1464:	27 c0       	rjmp	.+78     	; 0x14b4 <malloc+0x9c>
    1466:	21 15       	cp	r18, r1
    1468:	31 05       	cpc	r19, r1
    146a:	31 f0       	breq	.+12     	; 0x1478 <malloc+0x60>
    146c:	42 17       	cp	r20, r18
    146e:	53 07       	cpc	r21, r19
    1470:	18 f0       	brcs	.+6      	; 0x1478 <malloc+0x60>
    1472:	a9 01       	movw	r20, r18
    1474:	db 01       	movw	r26, r22
    1476:	01 c0       	rjmp	.+2      	; 0x147a <malloc+0x62>
    1478:	ef 01       	movw	r28, r30
    147a:	9a 01       	movw	r18, r20
    147c:	bd 01       	movw	r22, r26
    147e:	df 01       	movw	r26, r30
    1480:	02 80       	ldd	r0, Z+2	; 0x02
    1482:	f3 81       	ldd	r31, Z+3	; 0x03
    1484:	e0 2d       	mov	r30, r0
    1486:	d7 cf       	rjmp	.-82     	; 0x1436 <malloc+0x1e>
    1488:	21 15       	cp	r18, r1
    148a:	31 05       	cpc	r19, r1
    148c:	f9 f0       	breq	.+62     	; 0x14cc <malloc+0xb4>
    148e:	28 1b       	sub	r18, r24
    1490:	39 0b       	sbc	r19, r25
    1492:	24 30       	cpi	r18, 0x04	; 4
    1494:	31 05       	cpc	r19, r1
    1496:	80 f4       	brcc	.+32     	; 0x14b8 <malloc+0xa0>
    1498:	8a 81       	ldd	r24, Y+2	; 0x02
    149a:	9b 81       	ldd	r25, Y+3	; 0x03
    149c:	61 15       	cp	r22, r1
    149e:	71 05       	cpc	r23, r1
    14a0:	21 f0       	breq	.+8      	; 0x14aa <malloc+0x92>
    14a2:	fb 01       	movw	r30, r22
    14a4:	93 83       	std	Z+3, r25	; 0x03
    14a6:	82 83       	std	Z+2, r24	; 0x02
    14a8:	04 c0       	rjmp	.+8      	; 0x14b2 <malloc+0x9a>
    14aa:	90 93 12 03 	sts	0x0312, r25
    14ae:	80 93 11 03 	sts	0x0311, r24
    14b2:	fe 01       	movw	r30, r28
    14b4:	32 96       	adiw	r30, 0x02	; 2
    14b6:	44 c0       	rjmp	.+136    	; 0x1540 <malloc+0x128>
    14b8:	fe 01       	movw	r30, r28
    14ba:	e2 0f       	add	r30, r18
    14bc:	f3 1f       	adc	r31, r19
    14be:	81 93       	st	Z+, r24
    14c0:	91 93       	st	Z+, r25
    14c2:	22 50       	subi	r18, 0x02	; 2
    14c4:	31 09       	sbc	r19, r1
    14c6:	39 83       	std	Y+1, r19	; 0x01
    14c8:	28 83       	st	Y, r18
    14ca:	3a c0       	rjmp	.+116    	; 0x1540 <malloc+0x128>
    14cc:	20 91 0f 03 	lds	r18, 0x030F
    14d0:	30 91 10 03 	lds	r19, 0x0310
    14d4:	23 2b       	or	r18, r19
    14d6:	41 f4       	brne	.+16     	; 0x14e8 <malloc+0xd0>
    14d8:	20 91 02 01 	lds	r18, 0x0102
    14dc:	30 91 03 01 	lds	r19, 0x0103
    14e0:	30 93 10 03 	sts	0x0310, r19
    14e4:	20 93 0f 03 	sts	0x030F, r18
    14e8:	20 91 00 01 	lds	r18, 0x0100
    14ec:	30 91 01 01 	lds	r19, 0x0101
    14f0:	21 15       	cp	r18, r1
    14f2:	31 05       	cpc	r19, r1
    14f4:	41 f4       	brne	.+16     	; 0x1506 <malloc+0xee>
    14f6:	2d b7       	in	r18, 0x3d	; 61
    14f8:	3e b7       	in	r19, 0x3e	; 62
    14fa:	40 91 04 01 	lds	r20, 0x0104
    14fe:	50 91 05 01 	lds	r21, 0x0105
    1502:	24 1b       	sub	r18, r20
    1504:	35 0b       	sbc	r19, r21
    1506:	e0 91 0f 03 	lds	r30, 0x030F
    150a:	f0 91 10 03 	lds	r31, 0x0310
    150e:	e2 17       	cp	r30, r18
    1510:	f3 07       	cpc	r31, r19
    1512:	a0 f4       	brcc	.+40     	; 0x153c <malloc+0x124>
    1514:	2e 1b       	sub	r18, r30
    1516:	3f 0b       	sbc	r19, r31
    1518:	28 17       	cp	r18, r24
    151a:	39 07       	cpc	r19, r25
    151c:	78 f0       	brcs	.+30     	; 0x153c <malloc+0x124>
    151e:	ac 01       	movw	r20, r24
    1520:	4e 5f       	subi	r20, 0xFE	; 254
    1522:	5f 4f       	sbci	r21, 0xFF	; 255
    1524:	24 17       	cp	r18, r20
    1526:	35 07       	cpc	r19, r21
    1528:	48 f0       	brcs	.+18     	; 0x153c <malloc+0x124>
    152a:	4e 0f       	add	r20, r30
    152c:	5f 1f       	adc	r21, r31
    152e:	50 93 10 03 	sts	0x0310, r21
    1532:	40 93 0f 03 	sts	0x030F, r20
    1536:	81 93       	st	Z+, r24
    1538:	91 93       	st	Z+, r25
    153a:	02 c0       	rjmp	.+4      	; 0x1540 <malloc+0x128>
    153c:	e0 e0       	ldi	r30, 0x00	; 0
    153e:	f0 e0       	ldi	r31, 0x00	; 0
    1540:	cf 01       	movw	r24, r30
    1542:	df 91       	pop	r29
    1544:	cf 91       	pop	r28
    1546:	08 95       	ret

00001548 <free>:
    1548:	cf 93       	push	r28
    154a:	df 93       	push	r29
    154c:	00 97       	sbiw	r24, 0x00	; 0
    154e:	09 f4       	brne	.+2      	; 0x1552 <free+0xa>
    1550:	87 c0       	rjmp	.+270    	; 0x1660 <free+0x118>
    1552:	fc 01       	movw	r30, r24
    1554:	32 97       	sbiw	r30, 0x02	; 2
    1556:	13 82       	std	Z+3, r1	; 0x03
    1558:	12 82       	std	Z+2, r1	; 0x02
    155a:	c0 91 11 03 	lds	r28, 0x0311
    155e:	d0 91 12 03 	lds	r29, 0x0312
    1562:	20 97       	sbiw	r28, 0x00	; 0
    1564:	81 f4       	brne	.+32     	; 0x1586 <free+0x3e>
    1566:	20 81       	ld	r18, Z
    1568:	31 81       	ldd	r19, Z+1	; 0x01
    156a:	28 0f       	add	r18, r24
    156c:	39 1f       	adc	r19, r25
    156e:	80 91 0f 03 	lds	r24, 0x030F
    1572:	90 91 10 03 	lds	r25, 0x0310
    1576:	82 17       	cp	r24, r18
    1578:	93 07       	cpc	r25, r19
    157a:	79 f5       	brne	.+94     	; 0x15da <free+0x92>
    157c:	f0 93 10 03 	sts	0x0310, r31
    1580:	e0 93 0f 03 	sts	0x030F, r30
    1584:	6d c0       	rjmp	.+218    	; 0x1660 <free+0x118>
    1586:	de 01       	movw	r26, r28
    1588:	20 e0       	ldi	r18, 0x00	; 0
    158a:	30 e0       	ldi	r19, 0x00	; 0
    158c:	ae 17       	cp	r26, r30
    158e:	bf 07       	cpc	r27, r31
    1590:	50 f4       	brcc	.+20     	; 0x15a6 <free+0x5e>
    1592:	12 96       	adiw	r26, 0x02	; 2
    1594:	4d 91       	ld	r20, X+
    1596:	5c 91       	ld	r21, X
    1598:	13 97       	sbiw	r26, 0x03	; 3
    159a:	9d 01       	movw	r18, r26
    159c:	41 15       	cp	r20, r1
    159e:	51 05       	cpc	r21, r1
    15a0:	09 f1       	breq	.+66     	; 0x15e4 <free+0x9c>
    15a2:	da 01       	movw	r26, r20
    15a4:	f3 cf       	rjmp	.-26     	; 0x158c <free+0x44>
    15a6:	b3 83       	std	Z+3, r27	; 0x03
    15a8:	a2 83       	std	Z+2, r26	; 0x02
    15aa:	40 81       	ld	r20, Z
    15ac:	51 81       	ldd	r21, Z+1	; 0x01
    15ae:	84 0f       	add	r24, r20
    15b0:	95 1f       	adc	r25, r21
    15b2:	8a 17       	cp	r24, r26
    15b4:	9b 07       	cpc	r25, r27
    15b6:	71 f4       	brne	.+28     	; 0x15d4 <free+0x8c>
    15b8:	8d 91       	ld	r24, X+
    15ba:	9c 91       	ld	r25, X
    15bc:	11 97       	sbiw	r26, 0x01	; 1
    15be:	84 0f       	add	r24, r20
    15c0:	95 1f       	adc	r25, r21
    15c2:	02 96       	adiw	r24, 0x02	; 2
    15c4:	91 83       	std	Z+1, r25	; 0x01
    15c6:	80 83       	st	Z, r24
    15c8:	12 96       	adiw	r26, 0x02	; 2
    15ca:	8d 91       	ld	r24, X+
    15cc:	9c 91       	ld	r25, X
    15ce:	13 97       	sbiw	r26, 0x03	; 3
    15d0:	93 83       	std	Z+3, r25	; 0x03
    15d2:	82 83       	std	Z+2, r24	; 0x02
    15d4:	21 15       	cp	r18, r1
    15d6:	31 05       	cpc	r19, r1
    15d8:	29 f4       	brne	.+10     	; 0x15e4 <free+0x9c>
    15da:	f0 93 12 03 	sts	0x0312, r31
    15de:	e0 93 11 03 	sts	0x0311, r30
    15e2:	3e c0       	rjmp	.+124    	; 0x1660 <free+0x118>
    15e4:	d9 01       	movw	r26, r18
    15e6:	13 96       	adiw	r26, 0x03	; 3
    15e8:	fc 93       	st	X, r31
    15ea:	ee 93       	st	-X, r30
    15ec:	12 97       	sbiw	r26, 0x02	; 2
    15ee:	4d 91       	ld	r20, X+
    15f0:	5d 91       	ld	r21, X+
    15f2:	a4 0f       	add	r26, r20
    15f4:	b5 1f       	adc	r27, r21
    15f6:	ea 17       	cp	r30, r26
    15f8:	fb 07       	cpc	r31, r27
    15fa:	79 f4       	brne	.+30     	; 0x161a <free+0xd2>
    15fc:	80 81       	ld	r24, Z
    15fe:	91 81       	ldd	r25, Z+1	; 0x01
    1600:	84 0f       	add	r24, r20
    1602:	95 1f       	adc	r25, r21
    1604:	02 96       	adiw	r24, 0x02	; 2
    1606:	d9 01       	movw	r26, r18
    1608:	11 96       	adiw	r26, 0x01	; 1
    160a:	9c 93       	st	X, r25
    160c:	8e 93       	st	-X, r24
    160e:	82 81       	ldd	r24, Z+2	; 0x02
    1610:	93 81       	ldd	r25, Z+3	; 0x03
    1612:	13 96       	adiw	r26, 0x03	; 3
    1614:	9c 93       	st	X, r25
    1616:	8e 93       	st	-X, r24
    1618:	12 97       	sbiw	r26, 0x02	; 2
    161a:	e0 e0       	ldi	r30, 0x00	; 0
    161c:	f0 e0       	ldi	r31, 0x00	; 0
    161e:	8a 81       	ldd	r24, Y+2	; 0x02
    1620:	9b 81       	ldd	r25, Y+3	; 0x03
    1622:	00 97       	sbiw	r24, 0x00	; 0
    1624:	19 f0       	breq	.+6      	; 0x162c <free+0xe4>
    1626:	fe 01       	movw	r30, r28
    1628:	ec 01       	movw	r28, r24
    162a:	f9 cf       	rjmp	.-14     	; 0x161e <free+0xd6>
    162c:	ce 01       	movw	r24, r28
    162e:	02 96       	adiw	r24, 0x02	; 2
    1630:	28 81       	ld	r18, Y
    1632:	39 81       	ldd	r19, Y+1	; 0x01
    1634:	82 0f       	add	r24, r18
    1636:	93 1f       	adc	r25, r19
    1638:	20 91 0f 03 	lds	r18, 0x030F
    163c:	30 91 10 03 	lds	r19, 0x0310
    1640:	28 17       	cp	r18, r24
    1642:	39 07       	cpc	r19, r25
    1644:	69 f4       	brne	.+26     	; 0x1660 <free+0x118>
    1646:	30 97       	sbiw	r30, 0x00	; 0
    1648:	29 f4       	brne	.+10     	; 0x1654 <free+0x10c>
    164a:	10 92 12 03 	sts	0x0312, r1
    164e:	10 92 11 03 	sts	0x0311, r1
    1652:	02 c0       	rjmp	.+4      	; 0x1658 <free+0x110>
    1654:	13 82       	std	Z+3, r1	; 0x03
    1656:	12 82       	std	Z+2, r1	; 0x02
    1658:	d0 93 10 03 	sts	0x0310, r29
    165c:	c0 93 0f 03 	sts	0x030F, r28
    1660:	df 91       	pop	r29
    1662:	cf 91       	pop	r28
    1664:	08 95       	ret

00001666 <do_rand>:
    1666:	8f 92       	push	r8
    1668:	9f 92       	push	r9
    166a:	af 92       	push	r10
    166c:	bf 92       	push	r11
    166e:	cf 92       	push	r12
    1670:	df 92       	push	r13
    1672:	ef 92       	push	r14
    1674:	ff 92       	push	r15
    1676:	cf 93       	push	r28
    1678:	df 93       	push	r29
    167a:	ec 01       	movw	r28, r24
    167c:	68 81       	ld	r22, Y
    167e:	79 81       	ldd	r23, Y+1	; 0x01
    1680:	8a 81       	ldd	r24, Y+2	; 0x02
    1682:	9b 81       	ldd	r25, Y+3	; 0x03
    1684:	61 15       	cp	r22, r1
    1686:	71 05       	cpc	r23, r1
    1688:	81 05       	cpc	r24, r1
    168a:	91 05       	cpc	r25, r1
    168c:	21 f4       	brne	.+8      	; 0x1696 <do_rand+0x30>
    168e:	64 e2       	ldi	r22, 0x24	; 36
    1690:	79 ed       	ldi	r23, 0xD9	; 217
    1692:	8b e5       	ldi	r24, 0x5B	; 91
    1694:	97 e0       	ldi	r25, 0x07	; 7
    1696:	2d e1       	ldi	r18, 0x1D	; 29
    1698:	33 ef       	ldi	r19, 0xF3	; 243
    169a:	41 e0       	ldi	r20, 0x01	; 1
    169c:	50 e0       	ldi	r21, 0x00	; 0
    169e:	0e 94 b8 0e 	call	0x1d70	; 0x1d70 <__divmodsi4>
    16a2:	49 01       	movw	r8, r18
    16a4:	5a 01       	movw	r10, r20
    16a6:	9b 01       	movw	r18, r22
    16a8:	ac 01       	movw	r20, r24
    16aa:	a7 ea       	ldi	r26, 0xA7	; 167
    16ac:	b1 e4       	ldi	r27, 0x41	; 65
    16ae:	0e 94 d7 0e 	call	0x1dae	; 0x1dae <__muluhisi3>
    16b2:	6b 01       	movw	r12, r22
    16b4:	7c 01       	movw	r14, r24
    16b6:	ac ee       	ldi	r26, 0xEC	; 236
    16b8:	b4 ef       	ldi	r27, 0xF4	; 244
    16ba:	a5 01       	movw	r20, r10
    16bc:	94 01       	movw	r18, r8
    16be:	0e 94 e5 0e 	call	0x1dca	; 0x1dca <__mulohisi3>
    16c2:	c6 0e       	add	r12, r22
    16c4:	d7 1e       	adc	r13, r23
    16c6:	e8 1e       	adc	r14, r24
    16c8:	f9 1e       	adc	r15, r25
    16ca:	f7 fe       	sbrs	r15, 7
    16cc:	06 c0       	rjmp	.+12     	; 0x16da <do_rand+0x74>
    16ce:	81 e0       	ldi	r24, 0x01	; 1
    16d0:	c8 1a       	sub	r12, r24
    16d2:	d1 08       	sbc	r13, r1
    16d4:	e1 08       	sbc	r14, r1
    16d6:	80 e8       	ldi	r24, 0x80	; 128
    16d8:	f8 0a       	sbc	r15, r24
    16da:	c8 82       	st	Y, r12
    16dc:	d9 82       	std	Y+1, r13	; 0x01
    16de:	ea 82       	std	Y+2, r14	; 0x02
    16e0:	fb 82       	std	Y+3, r15	; 0x03
    16e2:	c6 01       	movw	r24, r12
    16e4:	9f 77       	andi	r25, 0x7F	; 127
    16e6:	df 91       	pop	r29
    16e8:	cf 91       	pop	r28
    16ea:	ff 90       	pop	r15
    16ec:	ef 90       	pop	r14
    16ee:	df 90       	pop	r13
    16f0:	cf 90       	pop	r12
    16f2:	bf 90       	pop	r11
    16f4:	af 90       	pop	r10
    16f6:	9f 90       	pop	r9
    16f8:	8f 90       	pop	r8
    16fa:	08 95       	ret

000016fc <rand_r>:
    16fc:	0e 94 33 0b 	call	0x1666	; 0x1666 <do_rand>
    1700:	08 95       	ret

00001702 <rand>:
    1702:	86 e0       	ldi	r24, 0x06	; 6
    1704:	91 e0       	ldi	r25, 0x01	; 1
    1706:	0e 94 33 0b 	call	0x1666	; 0x1666 <do_rand>
    170a:	08 95       	ret

0000170c <srand>:
    170c:	a0 e0       	ldi	r26, 0x00	; 0
    170e:	b0 e0       	ldi	r27, 0x00	; 0
    1710:	80 93 06 01 	sts	0x0106, r24
    1714:	90 93 07 01 	sts	0x0107, r25
    1718:	a0 93 08 01 	sts	0x0108, r26
    171c:	b0 93 09 01 	sts	0x0109, r27
    1720:	08 95       	ret

00001722 <fdevopen>:
    1722:	0f 93       	push	r16
    1724:	1f 93       	push	r17
    1726:	cf 93       	push	r28
    1728:	df 93       	push	r29
    172a:	ec 01       	movw	r28, r24
    172c:	8b 01       	movw	r16, r22
    172e:	00 97       	sbiw	r24, 0x00	; 0
    1730:	31 f4       	brne	.+12     	; 0x173e <fdevopen+0x1c>
    1732:	61 15       	cp	r22, r1
    1734:	71 05       	cpc	r23, r1
    1736:	19 f4       	brne	.+6      	; 0x173e <fdevopen+0x1c>
    1738:	80 e0       	ldi	r24, 0x00	; 0
    173a:	90 e0       	ldi	r25, 0x00	; 0
    173c:	38 c0       	rjmp	.+112    	; 0x17ae <fdevopen+0x8c>
    173e:	6e e0       	ldi	r22, 0x0E	; 14
    1740:	70 e0       	ldi	r23, 0x00	; 0
    1742:	81 e0       	ldi	r24, 0x01	; 1
    1744:	90 e0       	ldi	r25, 0x00	; 0
    1746:	0e 94 ef 0d 	call	0x1bde	; 0x1bde <calloc>
    174a:	fc 01       	movw	r30, r24
    174c:	00 97       	sbiw	r24, 0x00	; 0
    174e:	a1 f3       	breq	.-24     	; 0x1738 <fdevopen+0x16>
    1750:	80 e8       	ldi	r24, 0x80	; 128
    1752:	83 83       	std	Z+3, r24	; 0x03
    1754:	01 15       	cp	r16, r1
    1756:	11 05       	cpc	r17, r1
    1758:	71 f0       	breq	.+28     	; 0x1776 <fdevopen+0x54>
    175a:	13 87       	std	Z+11, r17	; 0x0b
    175c:	02 87       	std	Z+10, r16	; 0x0a
    175e:	81 e8       	ldi	r24, 0x81	; 129
    1760:	83 83       	std	Z+3, r24	; 0x03
    1762:	80 91 13 03 	lds	r24, 0x0313
    1766:	90 91 14 03 	lds	r25, 0x0314
    176a:	89 2b       	or	r24, r25
    176c:	21 f4       	brne	.+8      	; 0x1776 <fdevopen+0x54>
    176e:	f0 93 14 03 	sts	0x0314, r31
    1772:	e0 93 13 03 	sts	0x0313, r30
    1776:	20 97       	sbiw	r28, 0x00	; 0
    1778:	c9 f0       	breq	.+50     	; 0x17ac <fdevopen+0x8a>
    177a:	d1 87       	std	Z+9, r29	; 0x09
    177c:	c0 87       	std	Z+8, r28	; 0x08
    177e:	83 81       	ldd	r24, Z+3	; 0x03
    1780:	82 60       	ori	r24, 0x02	; 2
    1782:	83 83       	std	Z+3, r24	; 0x03
    1784:	80 91 15 03 	lds	r24, 0x0315
    1788:	90 91 16 03 	lds	r25, 0x0316
    178c:	89 2b       	or	r24, r25
    178e:	71 f4       	brne	.+28     	; 0x17ac <fdevopen+0x8a>
    1790:	f0 93 16 03 	sts	0x0316, r31
    1794:	e0 93 15 03 	sts	0x0315, r30
    1798:	80 91 17 03 	lds	r24, 0x0317
    179c:	90 91 18 03 	lds	r25, 0x0318
    17a0:	89 2b       	or	r24, r25
    17a2:	21 f4       	brne	.+8      	; 0x17ac <fdevopen+0x8a>
    17a4:	f0 93 18 03 	sts	0x0318, r31
    17a8:	e0 93 17 03 	sts	0x0317, r30
    17ac:	cf 01       	movw	r24, r30
    17ae:	df 91       	pop	r29
    17b0:	cf 91       	pop	r28
    17b2:	1f 91       	pop	r17
    17b4:	0f 91       	pop	r16
    17b6:	08 95       	ret

000017b8 <printf>:
    17b8:	a0 e0       	ldi	r26, 0x00	; 0
    17ba:	b0 e0       	ldi	r27, 0x00	; 0
    17bc:	e2 ee       	ldi	r30, 0xE2	; 226
    17be:	fb e0       	ldi	r31, 0x0B	; 11
    17c0:	0c 94 fa 0e 	jmp	0x1df4	; 0x1df4 <__prologue_saves__+0x20>
    17c4:	fe 01       	movw	r30, r28
    17c6:	35 96       	adiw	r30, 0x05	; 5
    17c8:	61 91       	ld	r22, Z+
    17ca:	71 91       	ld	r23, Z+
    17cc:	af 01       	movw	r20, r30
    17ce:	80 91 15 03 	lds	r24, 0x0315
    17d2:	90 91 16 03 	lds	r25, 0x0316
    17d6:	0e 94 1d 0c 	call	0x183a	; 0x183a <vfprintf>
    17da:	e2 e0       	ldi	r30, 0x02	; 2
    17dc:	0c 94 16 0f 	jmp	0x1e2c	; 0x1e2c <__epilogue_restores__+0x20>

000017e0 <puts>:
    17e0:	0f 93       	push	r16
    17e2:	1f 93       	push	r17
    17e4:	cf 93       	push	r28
    17e6:	df 93       	push	r29
    17e8:	e0 91 15 03 	lds	r30, 0x0315
    17ec:	f0 91 16 03 	lds	r31, 0x0316
    17f0:	23 81       	ldd	r18, Z+3	; 0x03
    17f2:	21 ff       	sbrs	r18, 1
    17f4:	1b c0       	rjmp	.+54     	; 0x182c <puts+0x4c>
    17f6:	ec 01       	movw	r28, r24
    17f8:	00 e0       	ldi	r16, 0x00	; 0
    17fa:	10 e0       	ldi	r17, 0x00	; 0
    17fc:	89 91       	ld	r24, Y+
    17fe:	60 91 15 03 	lds	r22, 0x0315
    1802:	70 91 16 03 	lds	r23, 0x0316
    1806:	db 01       	movw	r26, r22
    1808:	18 96       	adiw	r26, 0x08	; 8
    180a:	ed 91       	ld	r30, X+
    180c:	fc 91       	ld	r31, X
    180e:	19 97       	sbiw	r26, 0x09	; 9
    1810:	88 23       	and	r24, r24
    1812:	31 f0       	breq	.+12     	; 0x1820 <puts+0x40>
    1814:	09 95       	icall
    1816:	89 2b       	or	r24, r25
    1818:	89 f3       	breq	.-30     	; 0x17fc <puts+0x1c>
    181a:	0f ef       	ldi	r16, 0xFF	; 255
    181c:	1f ef       	ldi	r17, 0xFF	; 255
    181e:	ee cf       	rjmp	.-36     	; 0x17fc <puts+0x1c>
    1820:	8a e0       	ldi	r24, 0x0A	; 10
    1822:	09 95       	icall
    1824:	89 2b       	or	r24, r25
    1826:	11 f4       	brne	.+4      	; 0x182c <puts+0x4c>
    1828:	c8 01       	movw	r24, r16
    182a:	02 c0       	rjmp	.+4      	; 0x1830 <puts+0x50>
    182c:	8f ef       	ldi	r24, 0xFF	; 255
    182e:	9f ef       	ldi	r25, 0xFF	; 255
    1830:	df 91       	pop	r29
    1832:	cf 91       	pop	r28
    1834:	1f 91       	pop	r17
    1836:	0f 91       	pop	r16
    1838:	08 95       	ret

0000183a <vfprintf>:
    183a:	ac e0       	ldi	r26, 0x0C	; 12
    183c:	b0 e0       	ldi	r27, 0x00	; 0
    183e:	e3 e2       	ldi	r30, 0x23	; 35
    1840:	fc e0       	ldi	r31, 0x0C	; 12
    1842:	0c 94 ea 0e 	jmp	0x1dd4	; 0x1dd4 <__prologue_saves__>
    1846:	7c 01       	movw	r14, r24
    1848:	6b 01       	movw	r12, r22
    184a:	8a 01       	movw	r16, r20
    184c:	fc 01       	movw	r30, r24
    184e:	17 82       	std	Z+7, r1	; 0x07
    1850:	16 82       	std	Z+6, r1	; 0x06
    1852:	83 81       	ldd	r24, Z+3	; 0x03
    1854:	81 ff       	sbrs	r24, 1
    1856:	bd c1       	rjmp	.+890    	; 0x1bd2 <vfprintf+0x398>
    1858:	ce 01       	movw	r24, r28
    185a:	01 96       	adiw	r24, 0x01	; 1
    185c:	4c 01       	movw	r8, r24
    185e:	f7 01       	movw	r30, r14
    1860:	93 81       	ldd	r25, Z+3	; 0x03
    1862:	f6 01       	movw	r30, r12
    1864:	93 fd       	sbrc	r25, 3
    1866:	85 91       	lpm	r24, Z+
    1868:	93 ff       	sbrs	r25, 3
    186a:	81 91       	ld	r24, Z+
    186c:	6f 01       	movw	r12, r30
    186e:	88 23       	and	r24, r24
    1870:	09 f4       	brne	.+2      	; 0x1874 <vfprintf+0x3a>
    1872:	ab c1       	rjmp	.+854    	; 0x1bca <vfprintf+0x390>
    1874:	85 32       	cpi	r24, 0x25	; 37
    1876:	39 f4       	brne	.+14     	; 0x1886 <vfprintf+0x4c>
    1878:	93 fd       	sbrc	r25, 3
    187a:	85 91       	lpm	r24, Z+
    187c:	93 ff       	sbrs	r25, 3
    187e:	81 91       	ld	r24, Z+
    1880:	6f 01       	movw	r12, r30
    1882:	85 32       	cpi	r24, 0x25	; 37
    1884:	29 f4       	brne	.+10     	; 0x1890 <vfprintf+0x56>
    1886:	b7 01       	movw	r22, r14
    1888:	90 e0       	ldi	r25, 0x00	; 0
    188a:	0e 94 28 0e 	call	0x1c50	; 0x1c50 <fputc>
    188e:	e7 cf       	rjmp	.-50     	; 0x185e <vfprintf+0x24>
    1890:	51 2c       	mov	r5, r1
    1892:	31 2c       	mov	r3, r1
    1894:	20 e0       	ldi	r18, 0x00	; 0
    1896:	20 32       	cpi	r18, 0x20	; 32
    1898:	a0 f4       	brcc	.+40     	; 0x18c2 <vfprintf+0x88>
    189a:	8b 32       	cpi	r24, 0x2B	; 43
    189c:	69 f0       	breq	.+26     	; 0x18b8 <vfprintf+0x7e>
    189e:	30 f4       	brcc	.+12     	; 0x18ac <vfprintf+0x72>
    18a0:	80 32       	cpi	r24, 0x20	; 32
    18a2:	59 f0       	breq	.+22     	; 0x18ba <vfprintf+0x80>
    18a4:	83 32       	cpi	r24, 0x23	; 35
    18a6:	69 f4       	brne	.+26     	; 0x18c2 <vfprintf+0x88>
    18a8:	20 61       	ori	r18, 0x10	; 16
    18aa:	2c c0       	rjmp	.+88     	; 0x1904 <vfprintf+0xca>
    18ac:	8d 32       	cpi	r24, 0x2D	; 45
    18ae:	39 f0       	breq	.+14     	; 0x18be <vfprintf+0x84>
    18b0:	80 33       	cpi	r24, 0x30	; 48
    18b2:	39 f4       	brne	.+14     	; 0x18c2 <vfprintf+0x88>
    18b4:	21 60       	ori	r18, 0x01	; 1
    18b6:	26 c0       	rjmp	.+76     	; 0x1904 <vfprintf+0xca>
    18b8:	22 60       	ori	r18, 0x02	; 2
    18ba:	24 60       	ori	r18, 0x04	; 4
    18bc:	23 c0       	rjmp	.+70     	; 0x1904 <vfprintf+0xca>
    18be:	28 60       	ori	r18, 0x08	; 8
    18c0:	21 c0       	rjmp	.+66     	; 0x1904 <vfprintf+0xca>
    18c2:	27 fd       	sbrc	r18, 7
    18c4:	27 c0       	rjmp	.+78     	; 0x1914 <vfprintf+0xda>
    18c6:	30 ed       	ldi	r19, 0xD0	; 208
    18c8:	38 0f       	add	r19, r24
    18ca:	3a 30       	cpi	r19, 0x0A	; 10
    18cc:	78 f4       	brcc	.+30     	; 0x18ec <vfprintf+0xb2>
    18ce:	26 ff       	sbrs	r18, 6
    18d0:	06 c0       	rjmp	.+12     	; 0x18de <vfprintf+0xa4>
    18d2:	fa e0       	ldi	r31, 0x0A	; 10
    18d4:	5f 9e       	mul	r5, r31
    18d6:	30 0d       	add	r19, r0
    18d8:	11 24       	eor	r1, r1
    18da:	53 2e       	mov	r5, r19
    18dc:	13 c0       	rjmp	.+38     	; 0x1904 <vfprintf+0xca>
    18de:	8a e0       	ldi	r24, 0x0A	; 10
    18e0:	38 9e       	mul	r3, r24
    18e2:	30 0d       	add	r19, r0
    18e4:	11 24       	eor	r1, r1
    18e6:	33 2e       	mov	r3, r19
    18e8:	20 62       	ori	r18, 0x20	; 32
    18ea:	0c c0       	rjmp	.+24     	; 0x1904 <vfprintf+0xca>
    18ec:	8e 32       	cpi	r24, 0x2E	; 46
    18ee:	21 f4       	brne	.+8      	; 0x18f8 <vfprintf+0xbe>
    18f0:	26 fd       	sbrc	r18, 6
    18f2:	6b c1       	rjmp	.+726    	; 0x1bca <vfprintf+0x390>
    18f4:	20 64       	ori	r18, 0x40	; 64
    18f6:	06 c0       	rjmp	.+12     	; 0x1904 <vfprintf+0xca>
    18f8:	8c 36       	cpi	r24, 0x6C	; 108
    18fa:	11 f4       	brne	.+4      	; 0x1900 <vfprintf+0xc6>
    18fc:	20 68       	ori	r18, 0x80	; 128
    18fe:	02 c0       	rjmp	.+4      	; 0x1904 <vfprintf+0xca>
    1900:	88 36       	cpi	r24, 0x68	; 104
    1902:	41 f4       	brne	.+16     	; 0x1914 <vfprintf+0xda>
    1904:	f6 01       	movw	r30, r12
    1906:	93 fd       	sbrc	r25, 3
    1908:	85 91       	lpm	r24, Z+
    190a:	93 ff       	sbrs	r25, 3
    190c:	81 91       	ld	r24, Z+
    190e:	6f 01       	movw	r12, r30
    1910:	81 11       	cpse	r24, r1
    1912:	c1 cf       	rjmp	.-126    	; 0x1896 <vfprintf+0x5c>
    1914:	98 2f       	mov	r25, r24
    1916:	9f 7d       	andi	r25, 0xDF	; 223
    1918:	95 54       	subi	r25, 0x45	; 69
    191a:	93 30       	cpi	r25, 0x03	; 3
    191c:	28 f4       	brcc	.+10     	; 0x1928 <vfprintf+0xee>
    191e:	0c 5f       	subi	r16, 0xFC	; 252
    1920:	1f 4f       	sbci	r17, 0xFF	; 255
    1922:	ff e3       	ldi	r31, 0x3F	; 63
    1924:	f9 83       	std	Y+1, r31	; 0x01
    1926:	0d c0       	rjmp	.+26     	; 0x1942 <vfprintf+0x108>
    1928:	83 36       	cpi	r24, 0x63	; 99
    192a:	31 f0       	breq	.+12     	; 0x1938 <vfprintf+0xfe>
    192c:	83 37       	cpi	r24, 0x73	; 115
    192e:	71 f0       	breq	.+28     	; 0x194c <vfprintf+0x112>
    1930:	83 35       	cpi	r24, 0x53	; 83
    1932:	09 f0       	breq	.+2      	; 0x1936 <vfprintf+0xfc>
    1934:	5b c0       	rjmp	.+182    	; 0x19ec <vfprintf+0x1b2>
    1936:	22 c0       	rjmp	.+68     	; 0x197c <vfprintf+0x142>
    1938:	f8 01       	movw	r30, r16
    193a:	80 81       	ld	r24, Z
    193c:	89 83       	std	Y+1, r24	; 0x01
    193e:	0e 5f       	subi	r16, 0xFE	; 254
    1940:	1f 4f       	sbci	r17, 0xFF	; 255
    1942:	44 24       	eor	r4, r4
    1944:	43 94       	inc	r4
    1946:	51 2c       	mov	r5, r1
    1948:	54 01       	movw	r10, r8
    194a:	15 c0       	rjmp	.+42     	; 0x1976 <vfprintf+0x13c>
    194c:	38 01       	movw	r6, r16
    194e:	f2 e0       	ldi	r31, 0x02	; 2
    1950:	6f 0e       	add	r6, r31
    1952:	71 1c       	adc	r7, r1
    1954:	f8 01       	movw	r30, r16
    1956:	a0 80       	ld	r10, Z
    1958:	b1 80       	ldd	r11, Z+1	; 0x01
    195a:	26 ff       	sbrs	r18, 6
    195c:	03 c0       	rjmp	.+6      	; 0x1964 <vfprintf+0x12a>
    195e:	65 2d       	mov	r22, r5
    1960:	70 e0       	ldi	r23, 0x00	; 0
    1962:	02 c0       	rjmp	.+4      	; 0x1968 <vfprintf+0x12e>
    1964:	6f ef       	ldi	r22, 0xFF	; 255
    1966:	7f ef       	ldi	r23, 0xFF	; 255
    1968:	c5 01       	movw	r24, r10
    196a:	2c 87       	std	Y+12, r18	; 0x0c
    196c:	0e 94 1d 0e 	call	0x1c3a	; 0x1c3a <strnlen>
    1970:	2c 01       	movw	r4, r24
    1972:	83 01       	movw	r16, r6
    1974:	2c 85       	ldd	r18, Y+12	; 0x0c
    1976:	2f 77       	andi	r18, 0x7F	; 127
    1978:	22 2e       	mov	r2, r18
    197a:	17 c0       	rjmp	.+46     	; 0x19aa <vfprintf+0x170>
    197c:	38 01       	movw	r6, r16
    197e:	f2 e0       	ldi	r31, 0x02	; 2
    1980:	6f 0e       	add	r6, r31
    1982:	71 1c       	adc	r7, r1
    1984:	f8 01       	movw	r30, r16
    1986:	a0 80       	ld	r10, Z
    1988:	b1 80       	ldd	r11, Z+1	; 0x01
    198a:	26 ff       	sbrs	r18, 6
    198c:	03 c0       	rjmp	.+6      	; 0x1994 <vfprintf+0x15a>
    198e:	65 2d       	mov	r22, r5
    1990:	70 e0       	ldi	r23, 0x00	; 0
    1992:	02 c0       	rjmp	.+4      	; 0x1998 <vfprintf+0x15e>
    1994:	6f ef       	ldi	r22, 0xFF	; 255
    1996:	7f ef       	ldi	r23, 0xFF	; 255
    1998:	c5 01       	movw	r24, r10
    199a:	2c 87       	std	Y+12, r18	; 0x0c
    199c:	0e 94 0b 0e 	call	0x1c16	; 0x1c16 <strnlen_P>
    19a0:	2c 01       	movw	r4, r24
    19a2:	2c 85       	ldd	r18, Y+12	; 0x0c
    19a4:	20 68       	ori	r18, 0x80	; 128
    19a6:	22 2e       	mov	r2, r18
    19a8:	83 01       	movw	r16, r6
    19aa:	23 fc       	sbrc	r2, 3
    19ac:	1b c0       	rjmp	.+54     	; 0x19e4 <vfprintf+0x1aa>
    19ae:	83 2d       	mov	r24, r3
    19b0:	90 e0       	ldi	r25, 0x00	; 0
    19b2:	48 16       	cp	r4, r24
    19b4:	59 06       	cpc	r5, r25
    19b6:	b0 f4       	brcc	.+44     	; 0x19e4 <vfprintf+0x1aa>
    19b8:	b7 01       	movw	r22, r14
    19ba:	80 e2       	ldi	r24, 0x20	; 32
    19bc:	90 e0       	ldi	r25, 0x00	; 0
    19be:	0e 94 28 0e 	call	0x1c50	; 0x1c50 <fputc>
    19c2:	3a 94       	dec	r3
    19c4:	f4 cf       	rjmp	.-24     	; 0x19ae <vfprintf+0x174>
    19c6:	f5 01       	movw	r30, r10
    19c8:	27 fc       	sbrc	r2, 7
    19ca:	85 91       	lpm	r24, Z+
    19cc:	27 fe       	sbrs	r2, 7
    19ce:	81 91       	ld	r24, Z+
    19d0:	5f 01       	movw	r10, r30
    19d2:	b7 01       	movw	r22, r14
    19d4:	90 e0       	ldi	r25, 0x00	; 0
    19d6:	0e 94 28 0e 	call	0x1c50	; 0x1c50 <fputc>
    19da:	31 10       	cpse	r3, r1
    19dc:	3a 94       	dec	r3
    19de:	f1 e0       	ldi	r31, 0x01	; 1
    19e0:	4f 1a       	sub	r4, r31
    19e2:	51 08       	sbc	r5, r1
    19e4:	41 14       	cp	r4, r1
    19e6:	51 04       	cpc	r5, r1
    19e8:	71 f7       	brne	.-36     	; 0x19c6 <vfprintf+0x18c>
    19ea:	e5 c0       	rjmp	.+458    	; 0x1bb6 <vfprintf+0x37c>
    19ec:	84 36       	cpi	r24, 0x64	; 100
    19ee:	11 f0       	breq	.+4      	; 0x19f4 <vfprintf+0x1ba>
    19f0:	89 36       	cpi	r24, 0x69	; 105
    19f2:	39 f5       	brne	.+78     	; 0x1a42 <vfprintf+0x208>
    19f4:	f8 01       	movw	r30, r16
    19f6:	27 ff       	sbrs	r18, 7
    19f8:	07 c0       	rjmp	.+14     	; 0x1a08 <vfprintf+0x1ce>
    19fa:	60 81       	ld	r22, Z
    19fc:	71 81       	ldd	r23, Z+1	; 0x01
    19fe:	82 81       	ldd	r24, Z+2	; 0x02
    1a00:	93 81       	ldd	r25, Z+3	; 0x03
    1a02:	0c 5f       	subi	r16, 0xFC	; 252
    1a04:	1f 4f       	sbci	r17, 0xFF	; 255
    1a06:	08 c0       	rjmp	.+16     	; 0x1a18 <vfprintf+0x1de>
    1a08:	60 81       	ld	r22, Z
    1a0a:	71 81       	ldd	r23, Z+1	; 0x01
    1a0c:	88 27       	eor	r24, r24
    1a0e:	77 fd       	sbrc	r23, 7
    1a10:	80 95       	com	r24
    1a12:	98 2f       	mov	r25, r24
    1a14:	0e 5f       	subi	r16, 0xFE	; 254
    1a16:	1f 4f       	sbci	r17, 0xFF	; 255
    1a18:	2f 76       	andi	r18, 0x6F	; 111
    1a1a:	b2 2e       	mov	r11, r18
    1a1c:	97 ff       	sbrs	r25, 7
    1a1e:	09 c0       	rjmp	.+18     	; 0x1a32 <vfprintf+0x1f8>
    1a20:	90 95       	com	r25
    1a22:	80 95       	com	r24
    1a24:	70 95       	com	r23
    1a26:	61 95       	neg	r22
    1a28:	7f 4f       	sbci	r23, 0xFF	; 255
    1a2a:	8f 4f       	sbci	r24, 0xFF	; 255
    1a2c:	9f 4f       	sbci	r25, 0xFF	; 255
    1a2e:	20 68       	ori	r18, 0x80	; 128
    1a30:	b2 2e       	mov	r11, r18
    1a32:	2a e0       	ldi	r18, 0x0A	; 10
    1a34:	30 e0       	ldi	r19, 0x00	; 0
    1a36:	a4 01       	movw	r20, r8
    1a38:	0e 94 5a 0e 	call	0x1cb4	; 0x1cb4 <__ultoa_invert>
    1a3c:	a8 2e       	mov	r10, r24
    1a3e:	a8 18       	sub	r10, r8
    1a40:	44 c0       	rjmp	.+136    	; 0x1aca <vfprintf+0x290>
    1a42:	85 37       	cpi	r24, 0x75	; 117
    1a44:	29 f4       	brne	.+10     	; 0x1a50 <vfprintf+0x216>
    1a46:	2f 7e       	andi	r18, 0xEF	; 239
    1a48:	b2 2e       	mov	r11, r18
    1a4a:	2a e0       	ldi	r18, 0x0A	; 10
    1a4c:	30 e0       	ldi	r19, 0x00	; 0
    1a4e:	25 c0       	rjmp	.+74     	; 0x1a9a <vfprintf+0x260>
    1a50:	f2 2f       	mov	r31, r18
    1a52:	f9 7f       	andi	r31, 0xF9	; 249
    1a54:	bf 2e       	mov	r11, r31
    1a56:	8f 36       	cpi	r24, 0x6F	; 111
    1a58:	c1 f0       	breq	.+48     	; 0x1a8a <vfprintf+0x250>
    1a5a:	18 f4       	brcc	.+6      	; 0x1a62 <vfprintf+0x228>
    1a5c:	88 35       	cpi	r24, 0x58	; 88
    1a5e:	79 f0       	breq	.+30     	; 0x1a7e <vfprintf+0x244>
    1a60:	b4 c0       	rjmp	.+360    	; 0x1bca <vfprintf+0x390>
    1a62:	80 37       	cpi	r24, 0x70	; 112
    1a64:	19 f0       	breq	.+6      	; 0x1a6c <vfprintf+0x232>
    1a66:	88 37       	cpi	r24, 0x78	; 120
    1a68:	21 f0       	breq	.+8      	; 0x1a72 <vfprintf+0x238>
    1a6a:	af c0       	rjmp	.+350    	; 0x1bca <vfprintf+0x390>
    1a6c:	2f 2f       	mov	r18, r31
    1a6e:	20 61       	ori	r18, 0x10	; 16
    1a70:	b2 2e       	mov	r11, r18
    1a72:	b4 fe       	sbrs	r11, 4
    1a74:	0d c0       	rjmp	.+26     	; 0x1a90 <vfprintf+0x256>
    1a76:	8b 2d       	mov	r24, r11
    1a78:	84 60       	ori	r24, 0x04	; 4
    1a7a:	b8 2e       	mov	r11, r24
    1a7c:	09 c0       	rjmp	.+18     	; 0x1a90 <vfprintf+0x256>
    1a7e:	24 ff       	sbrs	r18, 4
    1a80:	0a c0       	rjmp	.+20     	; 0x1a96 <vfprintf+0x25c>
    1a82:	9f 2f       	mov	r25, r31
    1a84:	96 60       	ori	r25, 0x06	; 6
    1a86:	b9 2e       	mov	r11, r25
    1a88:	06 c0       	rjmp	.+12     	; 0x1a96 <vfprintf+0x25c>
    1a8a:	28 e0       	ldi	r18, 0x08	; 8
    1a8c:	30 e0       	ldi	r19, 0x00	; 0
    1a8e:	05 c0       	rjmp	.+10     	; 0x1a9a <vfprintf+0x260>
    1a90:	20 e1       	ldi	r18, 0x10	; 16
    1a92:	30 e0       	ldi	r19, 0x00	; 0
    1a94:	02 c0       	rjmp	.+4      	; 0x1a9a <vfprintf+0x260>
    1a96:	20 e1       	ldi	r18, 0x10	; 16
    1a98:	32 e0       	ldi	r19, 0x02	; 2
    1a9a:	f8 01       	movw	r30, r16
    1a9c:	b7 fe       	sbrs	r11, 7
    1a9e:	07 c0       	rjmp	.+14     	; 0x1aae <vfprintf+0x274>
    1aa0:	60 81       	ld	r22, Z
    1aa2:	71 81       	ldd	r23, Z+1	; 0x01
    1aa4:	82 81       	ldd	r24, Z+2	; 0x02
    1aa6:	93 81       	ldd	r25, Z+3	; 0x03
    1aa8:	0c 5f       	subi	r16, 0xFC	; 252
    1aaa:	1f 4f       	sbci	r17, 0xFF	; 255
    1aac:	06 c0       	rjmp	.+12     	; 0x1aba <vfprintf+0x280>
    1aae:	60 81       	ld	r22, Z
    1ab0:	71 81       	ldd	r23, Z+1	; 0x01
    1ab2:	80 e0       	ldi	r24, 0x00	; 0
    1ab4:	90 e0       	ldi	r25, 0x00	; 0
    1ab6:	0e 5f       	subi	r16, 0xFE	; 254
    1ab8:	1f 4f       	sbci	r17, 0xFF	; 255
    1aba:	a4 01       	movw	r20, r8
    1abc:	0e 94 5a 0e 	call	0x1cb4	; 0x1cb4 <__ultoa_invert>
    1ac0:	a8 2e       	mov	r10, r24
    1ac2:	a8 18       	sub	r10, r8
    1ac4:	fb 2d       	mov	r31, r11
    1ac6:	ff 77       	andi	r31, 0x7F	; 127
    1ac8:	bf 2e       	mov	r11, r31
    1aca:	b6 fe       	sbrs	r11, 6
    1acc:	0b c0       	rjmp	.+22     	; 0x1ae4 <vfprintf+0x2aa>
    1ace:	2b 2d       	mov	r18, r11
    1ad0:	2e 7f       	andi	r18, 0xFE	; 254
    1ad2:	a5 14       	cp	r10, r5
    1ad4:	50 f4       	brcc	.+20     	; 0x1aea <vfprintf+0x2b0>
    1ad6:	b4 fe       	sbrs	r11, 4
    1ad8:	0a c0       	rjmp	.+20     	; 0x1aee <vfprintf+0x2b4>
    1ada:	b2 fc       	sbrc	r11, 2
    1adc:	08 c0       	rjmp	.+16     	; 0x1aee <vfprintf+0x2b4>
    1ade:	2b 2d       	mov	r18, r11
    1ae0:	2e 7e       	andi	r18, 0xEE	; 238
    1ae2:	05 c0       	rjmp	.+10     	; 0x1aee <vfprintf+0x2b4>
    1ae4:	7a 2c       	mov	r7, r10
    1ae6:	2b 2d       	mov	r18, r11
    1ae8:	03 c0       	rjmp	.+6      	; 0x1af0 <vfprintf+0x2b6>
    1aea:	7a 2c       	mov	r7, r10
    1aec:	01 c0       	rjmp	.+2      	; 0x1af0 <vfprintf+0x2b6>
    1aee:	75 2c       	mov	r7, r5
    1af0:	24 ff       	sbrs	r18, 4
    1af2:	0d c0       	rjmp	.+26     	; 0x1b0e <vfprintf+0x2d4>
    1af4:	fe 01       	movw	r30, r28
    1af6:	ea 0d       	add	r30, r10
    1af8:	f1 1d       	adc	r31, r1
    1afa:	80 81       	ld	r24, Z
    1afc:	80 33       	cpi	r24, 0x30	; 48
    1afe:	11 f4       	brne	.+4      	; 0x1b04 <vfprintf+0x2ca>
    1b00:	29 7e       	andi	r18, 0xE9	; 233
    1b02:	09 c0       	rjmp	.+18     	; 0x1b16 <vfprintf+0x2dc>
    1b04:	22 ff       	sbrs	r18, 2
    1b06:	06 c0       	rjmp	.+12     	; 0x1b14 <vfprintf+0x2da>
    1b08:	73 94       	inc	r7
    1b0a:	73 94       	inc	r7
    1b0c:	04 c0       	rjmp	.+8      	; 0x1b16 <vfprintf+0x2dc>
    1b0e:	82 2f       	mov	r24, r18
    1b10:	86 78       	andi	r24, 0x86	; 134
    1b12:	09 f0       	breq	.+2      	; 0x1b16 <vfprintf+0x2dc>
    1b14:	73 94       	inc	r7
    1b16:	23 fd       	sbrc	r18, 3
    1b18:	13 c0       	rjmp	.+38     	; 0x1b40 <vfprintf+0x306>
    1b1a:	20 ff       	sbrs	r18, 0
    1b1c:	06 c0       	rjmp	.+12     	; 0x1b2a <vfprintf+0x2f0>
    1b1e:	5a 2c       	mov	r5, r10
    1b20:	73 14       	cp	r7, r3
    1b22:	18 f4       	brcc	.+6      	; 0x1b2a <vfprintf+0x2f0>
    1b24:	53 0c       	add	r5, r3
    1b26:	57 18       	sub	r5, r7
    1b28:	73 2c       	mov	r7, r3
    1b2a:	73 14       	cp	r7, r3
    1b2c:	68 f4       	brcc	.+26     	; 0x1b48 <vfprintf+0x30e>
    1b2e:	b7 01       	movw	r22, r14
    1b30:	80 e2       	ldi	r24, 0x20	; 32
    1b32:	90 e0       	ldi	r25, 0x00	; 0
    1b34:	2c 87       	std	Y+12, r18	; 0x0c
    1b36:	0e 94 28 0e 	call	0x1c50	; 0x1c50 <fputc>
    1b3a:	73 94       	inc	r7
    1b3c:	2c 85       	ldd	r18, Y+12	; 0x0c
    1b3e:	f5 cf       	rjmp	.-22     	; 0x1b2a <vfprintf+0x2f0>
    1b40:	73 14       	cp	r7, r3
    1b42:	10 f4       	brcc	.+4      	; 0x1b48 <vfprintf+0x30e>
    1b44:	37 18       	sub	r3, r7
    1b46:	01 c0       	rjmp	.+2      	; 0x1b4a <vfprintf+0x310>
    1b48:	31 2c       	mov	r3, r1
    1b4a:	24 ff       	sbrs	r18, 4
    1b4c:	12 c0       	rjmp	.+36     	; 0x1b72 <vfprintf+0x338>
    1b4e:	b7 01       	movw	r22, r14
    1b50:	80 e3       	ldi	r24, 0x30	; 48
    1b52:	90 e0       	ldi	r25, 0x00	; 0
    1b54:	2c 87       	std	Y+12, r18	; 0x0c
    1b56:	0e 94 28 0e 	call	0x1c50	; 0x1c50 <fputc>
    1b5a:	2c 85       	ldd	r18, Y+12	; 0x0c
    1b5c:	22 ff       	sbrs	r18, 2
    1b5e:	17 c0       	rjmp	.+46     	; 0x1b8e <vfprintf+0x354>
    1b60:	21 ff       	sbrs	r18, 1
    1b62:	03 c0       	rjmp	.+6      	; 0x1b6a <vfprintf+0x330>
    1b64:	88 e5       	ldi	r24, 0x58	; 88
    1b66:	90 e0       	ldi	r25, 0x00	; 0
    1b68:	02 c0       	rjmp	.+4      	; 0x1b6e <vfprintf+0x334>
    1b6a:	88 e7       	ldi	r24, 0x78	; 120
    1b6c:	90 e0       	ldi	r25, 0x00	; 0
    1b6e:	b7 01       	movw	r22, r14
    1b70:	0c c0       	rjmp	.+24     	; 0x1b8a <vfprintf+0x350>
    1b72:	82 2f       	mov	r24, r18
    1b74:	86 78       	andi	r24, 0x86	; 134
    1b76:	59 f0       	breq	.+22     	; 0x1b8e <vfprintf+0x354>
    1b78:	21 fd       	sbrc	r18, 1
    1b7a:	02 c0       	rjmp	.+4      	; 0x1b80 <vfprintf+0x346>
    1b7c:	80 e2       	ldi	r24, 0x20	; 32
    1b7e:	01 c0       	rjmp	.+2      	; 0x1b82 <vfprintf+0x348>
    1b80:	8b e2       	ldi	r24, 0x2B	; 43
    1b82:	27 fd       	sbrc	r18, 7
    1b84:	8d e2       	ldi	r24, 0x2D	; 45
    1b86:	b7 01       	movw	r22, r14
    1b88:	90 e0       	ldi	r25, 0x00	; 0
    1b8a:	0e 94 28 0e 	call	0x1c50	; 0x1c50 <fputc>
    1b8e:	a5 14       	cp	r10, r5
    1b90:	38 f4       	brcc	.+14     	; 0x1ba0 <vfprintf+0x366>
    1b92:	b7 01       	movw	r22, r14
    1b94:	80 e3       	ldi	r24, 0x30	; 48
    1b96:	90 e0       	ldi	r25, 0x00	; 0
    1b98:	0e 94 28 0e 	call	0x1c50	; 0x1c50 <fputc>
    1b9c:	5a 94       	dec	r5
    1b9e:	f7 cf       	rjmp	.-18     	; 0x1b8e <vfprintf+0x354>
    1ba0:	aa 94       	dec	r10
    1ba2:	f4 01       	movw	r30, r8
    1ba4:	ea 0d       	add	r30, r10
    1ba6:	f1 1d       	adc	r31, r1
    1ba8:	80 81       	ld	r24, Z
    1baa:	b7 01       	movw	r22, r14
    1bac:	90 e0       	ldi	r25, 0x00	; 0
    1bae:	0e 94 28 0e 	call	0x1c50	; 0x1c50 <fputc>
    1bb2:	a1 10       	cpse	r10, r1
    1bb4:	f5 cf       	rjmp	.-22     	; 0x1ba0 <vfprintf+0x366>
    1bb6:	33 20       	and	r3, r3
    1bb8:	09 f4       	brne	.+2      	; 0x1bbc <vfprintf+0x382>
    1bba:	51 ce       	rjmp	.-862    	; 0x185e <vfprintf+0x24>
    1bbc:	b7 01       	movw	r22, r14
    1bbe:	80 e2       	ldi	r24, 0x20	; 32
    1bc0:	90 e0       	ldi	r25, 0x00	; 0
    1bc2:	0e 94 28 0e 	call	0x1c50	; 0x1c50 <fputc>
    1bc6:	3a 94       	dec	r3
    1bc8:	f6 cf       	rjmp	.-20     	; 0x1bb6 <vfprintf+0x37c>
    1bca:	f7 01       	movw	r30, r14
    1bcc:	86 81       	ldd	r24, Z+6	; 0x06
    1bce:	97 81       	ldd	r25, Z+7	; 0x07
    1bd0:	02 c0       	rjmp	.+4      	; 0x1bd6 <vfprintf+0x39c>
    1bd2:	8f ef       	ldi	r24, 0xFF	; 255
    1bd4:	9f ef       	ldi	r25, 0xFF	; 255
    1bd6:	2c 96       	adiw	r28, 0x0c	; 12
    1bd8:	e2 e1       	ldi	r30, 0x12	; 18
    1bda:	0c 94 06 0f 	jmp	0x1e0c	; 0x1e0c <__epilogue_restores__>

00001bde <calloc>:
    1bde:	0f 93       	push	r16
    1be0:	1f 93       	push	r17
    1be2:	cf 93       	push	r28
    1be4:	df 93       	push	r29
    1be6:	86 9f       	mul	r24, r22
    1be8:	80 01       	movw	r16, r0
    1bea:	87 9f       	mul	r24, r23
    1bec:	10 0d       	add	r17, r0
    1bee:	96 9f       	mul	r25, r22
    1bf0:	10 0d       	add	r17, r0
    1bf2:	11 24       	eor	r1, r1
    1bf4:	c8 01       	movw	r24, r16
    1bf6:	0e 94 0c 0a 	call	0x1418	; 0x1418 <malloc>
    1bfa:	ec 01       	movw	r28, r24
    1bfc:	00 97       	sbiw	r24, 0x00	; 0
    1bfe:	29 f0       	breq	.+10     	; 0x1c0a <calloc+0x2c>
    1c00:	a8 01       	movw	r20, r16
    1c02:	60 e0       	ldi	r22, 0x00	; 0
    1c04:	70 e0       	ldi	r23, 0x00	; 0
    1c06:	0e 94 16 0e 	call	0x1c2c	; 0x1c2c <memset>
    1c0a:	ce 01       	movw	r24, r28
    1c0c:	df 91       	pop	r29
    1c0e:	cf 91       	pop	r28
    1c10:	1f 91       	pop	r17
    1c12:	0f 91       	pop	r16
    1c14:	08 95       	ret

00001c16 <strnlen_P>:
    1c16:	fc 01       	movw	r30, r24
    1c18:	05 90       	lpm	r0, Z+
    1c1a:	61 50       	subi	r22, 0x01	; 1
    1c1c:	70 40       	sbci	r23, 0x00	; 0
    1c1e:	01 10       	cpse	r0, r1
    1c20:	d8 f7       	brcc	.-10     	; 0x1c18 <strnlen_P+0x2>
    1c22:	80 95       	com	r24
    1c24:	90 95       	com	r25
    1c26:	8e 0f       	add	r24, r30
    1c28:	9f 1f       	adc	r25, r31
    1c2a:	08 95       	ret

00001c2c <memset>:
    1c2c:	dc 01       	movw	r26, r24
    1c2e:	01 c0       	rjmp	.+2      	; 0x1c32 <memset+0x6>
    1c30:	6d 93       	st	X+, r22
    1c32:	41 50       	subi	r20, 0x01	; 1
    1c34:	50 40       	sbci	r21, 0x00	; 0
    1c36:	e0 f7       	brcc	.-8      	; 0x1c30 <memset+0x4>
    1c38:	08 95       	ret

00001c3a <strnlen>:
    1c3a:	fc 01       	movw	r30, r24
    1c3c:	61 50       	subi	r22, 0x01	; 1
    1c3e:	70 40       	sbci	r23, 0x00	; 0
    1c40:	01 90       	ld	r0, Z+
    1c42:	01 10       	cpse	r0, r1
    1c44:	d8 f7       	brcc	.-10     	; 0x1c3c <strnlen+0x2>
    1c46:	80 95       	com	r24
    1c48:	90 95       	com	r25
    1c4a:	8e 0f       	add	r24, r30
    1c4c:	9f 1f       	adc	r25, r31
    1c4e:	08 95       	ret

00001c50 <fputc>:
    1c50:	0f 93       	push	r16
    1c52:	1f 93       	push	r17
    1c54:	cf 93       	push	r28
    1c56:	df 93       	push	r29
    1c58:	18 2f       	mov	r17, r24
    1c5a:	09 2f       	mov	r16, r25
    1c5c:	eb 01       	movw	r28, r22
    1c5e:	8b 81       	ldd	r24, Y+3	; 0x03
    1c60:	81 fd       	sbrc	r24, 1
    1c62:	03 c0       	rjmp	.+6      	; 0x1c6a <fputc+0x1a>
    1c64:	8f ef       	ldi	r24, 0xFF	; 255
    1c66:	9f ef       	ldi	r25, 0xFF	; 255
    1c68:	20 c0       	rjmp	.+64     	; 0x1caa <fputc+0x5a>
    1c6a:	82 ff       	sbrs	r24, 2
    1c6c:	10 c0       	rjmp	.+32     	; 0x1c8e <fputc+0x3e>
    1c6e:	4e 81       	ldd	r20, Y+6	; 0x06
    1c70:	5f 81       	ldd	r21, Y+7	; 0x07
    1c72:	2c 81       	ldd	r18, Y+4	; 0x04
    1c74:	3d 81       	ldd	r19, Y+5	; 0x05
    1c76:	42 17       	cp	r20, r18
    1c78:	53 07       	cpc	r21, r19
    1c7a:	7c f4       	brge	.+30     	; 0x1c9a <fputc+0x4a>
    1c7c:	e8 81       	ld	r30, Y
    1c7e:	f9 81       	ldd	r31, Y+1	; 0x01
    1c80:	9f 01       	movw	r18, r30
    1c82:	2f 5f       	subi	r18, 0xFF	; 255
    1c84:	3f 4f       	sbci	r19, 0xFF	; 255
    1c86:	39 83       	std	Y+1, r19	; 0x01
    1c88:	28 83       	st	Y, r18
    1c8a:	10 83       	st	Z, r17
    1c8c:	06 c0       	rjmp	.+12     	; 0x1c9a <fputc+0x4a>
    1c8e:	e8 85       	ldd	r30, Y+8	; 0x08
    1c90:	f9 85       	ldd	r31, Y+9	; 0x09
    1c92:	81 2f       	mov	r24, r17
    1c94:	09 95       	icall
    1c96:	89 2b       	or	r24, r25
    1c98:	29 f7       	brne	.-54     	; 0x1c64 <fputc+0x14>
    1c9a:	2e 81       	ldd	r18, Y+6	; 0x06
    1c9c:	3f 81       	ldd	r19, Y+7	; 0x07
    1c9e:	2f 5f       	subi	r18, 0xFF	; 255
    1ca0:	3f 4f       	sbci	r19, 0xFF	; 255
    1ca2:	3f 83       	std	Y+7, r19	; 0x07
    1ca4:	2e 83       	std	Y+6, r18	; 0x06
    1ca6:	81 2f       	mov	r24, r17
    1ca8:	90 2f       	mov	r25, r16
    1caa:	df 91       	pop	r29
    1cac:	cf 91       	pop	r28
    1cae:	1f 91       	pop	r17
    1cb0:	0f 91       	pop	r16
    1cb2:	08 95       	ret

00001cb4 <__ultoa_invert>:
    1cb4:	fa 01       	movw	r30, r20
    1cb6:	aa 27       	eor	r26, r26
    1cb8:	28 30       	cpi	r18, 0x08	; 8
    1cba:	51 f1       	breq	.+84     	; 0x1d10 <__ultoa_invert+0x5c>
    1cbc:	20 31       	cpi	r18, 0x10	; 16
    1cbe:	81 f1       	breq	.+96     	; 0x1d20 <__ultoa_invert+0x6c>
    1cc0:	e8 94       	clt
    1cc2:	6f 93       	push	r22
    1cc4:	6e 7f       	andi	r22, 0xFE	; 254
    1cc6:	6e 5f       	subi	r22, 0xFE	; 254
    1cc8:	7f 4f       	sbci	r23, 0xFF	; 255
    1cca:	8f 4f       	sbci	r24, 0xFF	; 255
    1ccc:	9f 4f       	sbci	r25, 0xFF	; 255
    1cce:	af 4f       	sbci	r26, 0xFF	; 255
    1cd0:	b1 e0       	ldi	r27, 0x01	; 1
    1cd2:	3e d0       	rcall	.+124    	; 0x1d50 <__ultoa_invert+0x9c>
    1cd4:	b4 e0       	ldi	r27, 0x04	; 4
    1cd6:	3c d0       	rcall	.+120    	; 0x1d50 <__ultoa_invert+0x9c>
    1cd8:	67 0f       	add	r22, r23
    1cda:	78 1f       	adc	r23, r24
    1cdc:	89 1f       	adc	r24, r25
    1cde:	9a 1f       	adc	r25, r26
    1ce0:	a1 1d       	adc	r26, r1
    1ce2:	68 0f       	add	r22, r24
    1ce4:	79 1f       	adc	r23, r25
    1ce6:	8a 1f       	adc	r24, r26
    1ce8:	91 1d       	adc	r25, r1
    1cea:	a1 1d       	adc	r26, r1
    1cec:	6a 0f       	add	r22, r26
    1cee:	71 1d       	adc	r23, r1
    1cf0:	81 1d       	adc	r24, r1
    1cf2:	91 1d       	adc	r25, r1
    1cf4:	a1 1d       	adc	r26, r1
    1cf6:	20 d0       	rcall	.+64     	; 0x1d38 <__ultoa_invert+0x84>
    1cf8:	09 f4       	brne	.+2      	; 0x1cfc <__ultoa_invert+0x48>
    1cfa:	68 94       	set
    1cfc:	3f 91       	pop	r19
    1cfe:	2a e0       	ldi	r18, 0x0A	; 10
    1d00:	26 9f       	mul	r18, r22
    1d02:	11 24       	eor	r1, r1
    1d04:	30 19       	sub	r19, r0
    1d06:	30 5d       	subi	r19, 0xD0	; 208
    1d08:	31 93       	st	Z+, r19
    1d0a:	de f6       	brtc	.-74     	; 0x1cc2 <__ultoa_invert+0xe>
    1d0c:	cf 01       	movw	r24, r30
    1d0e:	08 95       	ret
    1d10:	46 2f       	mov	r20, r22
    1d12:	47 70       	andi	r20, 0x07	; 7
    1d14:	40 5d       	subi	r20, 0xD0	; 208
    1d16:	41 93       	st	Z+, r20
    1d18:	b3 e0       	ldi	r27, 0x03	; 3
    1d1a:	0f d0       	rcall	.+30     	; 0x1d3a <__ultoa_invert+0x86>
    1d1c:	c9 f7       	brne	.-14     	; 0x1d10 <__ultoa_invert+0x5c>
    1d1e:	f6 cf       	rjmp	.-20     	; 0x1d0c <__ultoa_invert+0x58>
    1d20:	46 2f       	mov	r20, r22
    1d22:	4f 70       	andi	r20, 0x0F	; 15
    1d24:	40 5d       	subi	r20, 0xD0	; 208
    1d26:	4a 33       	cpi	r20, 0x3A	; 58
    1d28:	18 f0       	brcs	.+6      	; 0x1d30 <__ultoa_invert+0x7c>
    1d2a:	49 5d       	subi	r20, 0xD9	; 217
    1d2c:	31 fd       	sbrc	r19, 1
    1d2e:	40 52       	subi	r20, 0x20	; 32
    1d30:	41 93       	st	Z+, r20
    1d32:	02 d0       	rcall	.+4      	; 0x1d38 <__ultoa_invert+0x84>
    1d34:	a9 f7       	brne	.-22     	; 0x1d20 <__ultoa_invert+0x6c>
    1d36:	ea cf       	rjmp	.-44     	; 0x1d0c <__ultoa_invert+0x58>
    1d38:	b4 e0       	ldi	r27, 0x04	; 4
    1d3a:	a6 95       	lsr	r26
    1d3c:	97 95       	ror	r25
    1d3e:	87 95       	ror	r24
    1d40:	77 95       	ror	r23
    1d42:	67 95       	ror	r22
    1d44:	ba 95       	dec	r27
    1d46:	c9 f7       	brne	.-14     	; 0x1d3a <__ultoa_invert+0x86>
    1d48:	00 97       	sbiw	r24, 0x00	; 0
    1d4a:	61 05       	cpc	r22, r1
    1d4c:	71 05       	cpc	r23, r1
    1d4e:	08 95       	ret
    1d50:	9b 01       	movw	r18, r22
    1d52:	ac 01       	movw	r20, r24
    1d54:	0a 2e       	mov	r0, r26
    1d56:	06 94       	lsr	r0
    1d58:	57 95       	ror	r21
    1d5a:	47 95       	ror	r20
    1d5c:	37 95       	ror	r19
    1d5e:	27 95       	ror	r18
    1d60:	ba 95       	dec	r27
    1d62:	c9 f7       	brne	.-14     	; 0x1d56 <__ultoa_invert+0xa2>
    1d64:	62 0f       	add	r22, r18
    1d66:	73 1f       	adc	r23, r19
    1d68:	84 1f       	adc	r24, r20
    1d6a:	95 1f       	adc	r25, r21
    1d6c:	a0 1d       	adc	r26, r0
    1d6e:	08 95       	ret

00001d70 <__divmodsi4>:
    1d70:	05 2e       	mov	r0, r21
    1d72:	97 fb       	bst	r25, 7
    1d74:	1e f4       	brtc	.+6      	; 0x1d7c <__divmodsi4+0xc>
    1d76:	00 94       	com	r0
    1d78:	0e 94 cf 0e 	call	0x1d9e	; 0x1d9e <__negsi2>
    1d7c:	57 fd       	sbrc	r21, 7
    1d7e:	07 d0       	rcall	.+14     	; 0x1d8e <__divmodsi4_neg2>
    1d80:	0e 94 21 0f 	call	0x1e42	; 0x1e42 <__udivmodsi4>
    1d84:	07 fc       	sbrc	r0, 7
    1d86:	03 d0       	rcall	.+6      	; 0x1d8e <__divmodsi4_neg2>
    1d88:	4e f4       	brtc	.+18     	; 0x1d9c <__divmodsi4_exit>
    1d8a:	0c 94 cf 0e 	jmp	0x1d9e	; 0x1d9e <__negsi2>

00001d8e <__divmodsi4_neg2>:
    1d8e:	50 95       	com	r21
    1d90:	40 95       	com	r20
    1d92:	30 95       	com	r19
    1d94:	21 95       	neg	r18
    1d96:	3f 4f       	sbci	r19, 0xFF	; 255
    1d98:	4f 4f       	sbci	r20, 0xFF	; 255
    1d9a:	5f 4f       	sbci	r21, 0xFF	; 255

00001d9c <__divmodsi4_exit>:
    1d9c:	08 95       	ret

00001d9e <__negsi2>:
    1d9e:	90 95       	com	r25
    1da0:	80 95       	com	r24
    1da2:	70 95       	com	r23
    1da4:	61 95       	neg	r22
    1da6:	7f 4f       	sbci	r23, 0xFF	; 255
    1da8:	8f 4f       	sbci	r24, 0xFF	; 255
    1daa:	9f 4f       	sbci	r25, 0xFF	; 255
    1dac:	08 95       	ret

00001dae <__muluhisi3>:
    1dae:	0e 94 43 0f 	call	0x1e86	; 0x1e86 <__umulhisi3>
    1db2:	a5 9f       	mul	r26, r21
    1db4:	90 0d       	add	r25, r0
    1db6:	b4 9f       	mul	r27, r20
    1db8:	90 0d       	add	r25, r0
    1dba:	a4 9f       	mul	r26, r20
    1dbc:	80 0d       	add	r24, r0
    1dbe:	91 1d       	adc	r25, r1
    1dc0:	11 24       	eor	r1, r1
    1dc2:	08 95       	ret

00001dc4 <__mulshisi3>:
    1dc4:	b7 ff       	sbrs	r27, 7
    1dc6:	0c 94 d7 0e 	jmp	0x1dae	; 0x1dae <__muluhisi3>

00001dca <__mulohisi3>:
    1dca:	0e 94 d7 0e 	call	0x1dae	; 0x1dae <__muluhisi3>
    1dce:	82 1b       	sub	r24, r18
    1dd0:	93 0b       	sbc	r25, r19
    1dd2:	08 95       	ret

00001dd4 <__prologue_saves__>:
    1dd4:	2f 92       	push	r2
    1dd6:	3f 92       	push	r3
    1dd8:	4f 92       	push	r4
    1dda:	5f 92       	push	r5
    1ddc:	6f 92       	push	r6
    1dde:	7f 92       	push	r7
    1de0:	8f 92       	push	r8
    1de2:	9f 92       	push	r9
    1de4:	af 92       	push	r10
    1de6:	bf 92       	push	r11
    1de8:	cf 92       	push	r12
    1dea:	df 92       	push	r13
    1dec:	ef 92       	push	r14
    1dee:	ff 92       	push	r15
    1df0:	0f 93       	push	r16
    1df2:	1f 93       	push	r17
    1df4:	cf 93       	push	r28
    1df6:	df 93       	push	r29
    1df8:	cd b7       	in	r28, 0x3d	; 61
    1dfa:	de b7       	in	r29, 0x3e	; 62
    1dfc:	ca 1b       	sub	r28, r26
    1dfe:	db 0b       	sbc	r29, r27
    1e00:	0f b6       	in	r0, 0x3f	; 63
    1e02:	f8 94       	cli
    1e04:	de bf       	out	0x3e, r29	; 62
    1e06:	0f be       	out	0x3f, r0	; 63
    1e08:	cd bf       	out	0x3d, r28	; 61
    1e0a:	09 94       	ijmp

00001e0c <__epilogue_restores__>:
    1e0c:	2a 88       	ldd	r2, Y+18	; 0x12
    1e0e:	39 88       	ldd	r3, Y+17	; 0x11
    1e10:	48 88       	ldd	r4, Y+16	; 0x10
    1e12:	5f 84       	ldd	r5, Y+15	; 0x0f
    1e14:	6e 84       	ldd	r6, Y+14	; 0x0e
    1e16:	7d 84       	ldd	r7, Y+13	; 0x0d
    1e18:	8c 84       	ldd	r8, Y+12	; 0x0c
    1e1a:	9b 84       	ldd	r9, Y+11	; 0x0b
    1e1c:	aa 84       	ldd	r10, Y+10	; 0x0a
    1e1e:	b9 84       	ldd	r11, Y+9	; 0x09
    1e20:	c8 84       	ldd	r12, Y+8	; 0x08
    1e22:	df 80       	ldd	r13, Y+7	; 0x07
    1e24:	ee 80       	ldd	r14, Y+6	; 0x06
    1e26:	fd 80       	ldd	r15, Y+5	; 0x05
    1e28:	0c 81       	ldd	r16, Y+4	; 0x04
    1e2a:	1b 81       	ldd	r17, Y+3	; 0x03
    1e2c:	aa 81       	ldd	r26, Y+2	; 0x02
    1e2e:	b9 81       	ldd	r27, Y+1	; 0x01
    1e30:	ce 0f       	add	r28, r30
    1e32:	d1 1d       	adc	r29, r1
    1e34:	0f b6       	in	r0, 0x3f	; 63
    1e36:	f8 94       	cli
    1e38:	de bf       	out	0x3e, r29	; 62
    1e3a:	0f be       	out	0x3f, r0	; 63
    1e3c:	cd bf       	out	0x3d, r28	; 61
    1e3e:	ed 01       	movw	r28, r26
    1e40:	08 95       	ret

00001e42 <__udivmodsi4>:
    1e42:	a1 e2       	ldi	r26, 0x21	; 33
    1e44:	1a 2e       	mov	r1, r26
    1e46:	aa 1b       	sub	r26, r26
    1e48:	bb 1b       	sub	r27, r27
    1e4a:	fd 01       	movw	r30, r26
    1e4c:	0d c0       	rjmp	.+26     	; 0x1e68 <__udivmodsi4_ep>

00001e4e <__udivmodsi4_loop>:
    1e4e:	aa 1f       	adc	r26, r26
    1e50:	bb 1f       	adc	r27, r27
    1e52:	ee 1f       	adc	r30, r30
    1e54:	ff 1f       	adc	r31, r31
    1e56:	a2 17       	cp	r26, r18
    1e58:	b3 07       	cpc	r27, r19
    1e5a:	e4 07       	cpc	r30, r20
    1e5c:	f5 07       	cpc	r31, r21
    1e5e:	20 f0       	brcs	.+8      	; 0x1e68 <__udivmodsi4_ep>
    1e60:	a2 1b       	sub	r26, r18
    1e62:	b3 0b       	sbc	r27, r19
    1e64:	e4 0b       	sbc	r30, r20
    1e66:	f5 0b       	sbc	r31, r21

00001e68 <__udivmodsi4_ep>:
    1e68:	66 1f       	adc	r22, r22
    1e6a:	77 1f       	adc	r23, r23
    1e6c:	88 1f       	adc	r24, r24
    1e6e:	99 1f       	adc	r25, r25
    1e70:	1a 94       	dec	r1
    1e72:	69 f7       	brne	.-38     	; 0x1e4e <__udivmodsi4_loop>
    1e74:	60 95       	com	r22
    1e76:	70 95       	com	r23
    1e78:	80 95       	com	r24
    1e7a:	90 95       	com	r25
    1e7c:	9b 01       	movw	r18, r22
    1e7e:	ac 01       	movw	r20, r24
    1e80:	bd 01       	movw	r22, r26
    1e82:	cf 01       	movw	r24, r30
    1e84:	08 95       	ret

00001e86 <__umulhisi3>:
    1e86:	a2 9f       	mul	r26, r18
    1e88:	b0 01       	movw	r22, r0
    1e8a:	b3 9f       	mul	r27, r19
    1e8c:	c0 01       	movw	r24, r0
    1e8e:	a3 9f       	mul	r26, r19
    1e90:	70 0d       	add	r23, r0
    1e92:	81 1d       	adc	r24, r1
    1e94:	11 24       	eor	r1, r1
    1e96:	91 1d       	adc	r25, r1
    1e98:	b2 9f       	mul	r27, r18
    1e9a:	70 0d       	add	r23, r0
    1e9c:	81 1d       	adc	r24, r1
    1e9e:	11 24       	eor	r1, r1
    1ea0:	91 1d       	adc	r25, r1
    1ea2:	08 95       	ret

00001ea4 <_exit>:
    1ea4:	f8 94       	cli

00001ea6 <__stop_program>:
    1ea6:	ff cf       	rjmp	.-2      	; 0x1ea6 <__stop_program>
