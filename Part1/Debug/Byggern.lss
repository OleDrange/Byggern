
Byggern.elf:     file format elf32-avr

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .data         000002e8  00800100  00002000  00002094  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  1 .text         00002000  00000000  00000000  00000094  2**1
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .bss          00000032  008003e8  008003e8  0000237c  2**0
                  ALLOC
  3 .comment      0000005c  00000000  00000000  0000237c  2**0
                  CONTENTS, READONLY
  4 .debug_aranges 00000340  00000000  00000000  000023d8  2**0
                  CONTENTS, READONLY, DEBUGGING
  5 .debug_info   00003b64  00000000  00000000  00002718  2**0
                  CONTENTS, READONLY, DEBUGGING
  6 .debug_abbrev 000015bc  00000000  00000000  0000627c  2**0
                  CONTENTS, READONLY, DEBUGGING
  7 .debug_line   00001473  00000000  00000000  00007838  2**0
                  CONTENTS, READONLY, DEBUGGING
  8 .debug_frame  00000930  00000000  00000000  00008cac  2**2
                  CONTENTS, READONLY, DEBUGGING
  9 .debug_str    00000adb  00000000  00000000  000095dc  2**0
                  CONTENTS, READONLY, DEBUGGING
 10 .debug_loc    0000259d  00000000  00000000  0000a0b7  2**0
                  CONTENTS, READONLY, DEBUGGING
 11 .debug_ranges 00000310  00000000  00000000  0000c654  2**0
                  CONTENTS, READONLY, DEBUGGING

Disassembly of section .text:

00000000 <__vectors>:
       0:	0c 94 b4 01 	jmp	0x368	; 0x368 <__ctors_end>
       4:	0c 94 87 02 	jmp	0x50e	; 0x50e <__vector_1>
       8:	0c 94 d3 01 	jmp	0x3a6	; 0x3a6 <__vector_2>
       c:	0c 94 d1 01 	jmp	0x3a2	; 0x3a2 <__bad_interrupt>
      10:	0c 94 d1 01 	jmp	0x3a2	; 0x3a2 <__bad_interrupt>
      14:	0c 94 d1 01 	jmp	0x3a2	; 0x3a2 <__bad_interrupt>
      18:	0c 94 d1 01 	jmp	0x3a2	; 0x3a2 <__bad_interrupt>
      1c:	0c 94 d1 01 	jmp	0x3a2	; 0x3a2 <__bad_interrupt>
      20:	0c 94 d1 01 	jmp	0x3a2	; 0x3a2 <__bad_interrupt>
      24:	0c 94 d1 01 	jmp	0x3a2	; 0x3a2 <__bad_interrupt>
      28:	0c 94 d1 01 	jmp	0x3a2	; 0x3a2 <__bad_interrupt>
      2c:	0c 94 d1 01 	jmp	0x3a2	; 0x3a2 <__bad_interrupt>
      30:	0c 94 d1 01 	jmp	0x3a2	; 0x3a2 <__bad_interrupt>
      34:	0c 94 d1 01 	jmp	0x3a2	; 0x3a2 <__bad_interrupt>
      38:	0c 94 d1 01 	jmp	0x3a2	; 0x3a2 <__bad_interrupt>
      3c:	0c 94 d1 01 	jmp	0x3a2	; 0x3a2 <__bad_interrupt>
      40:	0c 94 d1 01 	jmp	0x3a2	; 0x3a2 <__bad_interrupt>
      44:	0c 94 d1 01 	jmp	0x3a2	; 0x3a2 <__bad_interrupt>
      48:	0c 94 d1 01 	jmp	0x3a2	; 0x3a2 <__bad_interrupt>
      4c:	0c 94 d1 01 	jmp	0x3a2	; 0x3a2 <__bad_interrupt>
      50:	0c 94 d1 01 	jmp	0x3a2	; 0x3a2 <__bad_interrupt>
      54:	0c 94 d1 01 	jmp	0x3a2	; 0x3a2 <__bad_interrupt>
      58:	0c 94 d1 01 	jmp	0x3a2	; 0x3a2 <__bad_interrupt>
      5c:	0c 94 d1 01 	jmp	0x3a2	; 0x3a2 <__bad_interrupt>
      60:	0c 94 d1 01 	jmp	0x3a2	; 0x3a2 <__bad_interrupt>
      64:	0c 94 d1 01 	jmp	0x3a2	; 0x3a2 <__bad_interrupt>
      68:	0c 94 d1 01 	jmp	0x3a2	; 0x3a2 <__bad_interrupt>
      6c:	0c 94 d1 01 	jmp	0x3a2	; 0x3a2 <__bad_interrupt>

00000070 <__trampolines_end>:
	...
      78:	00 06       	cpc	r0, r16
      7a:	5f 5f       	subi	r21, 0xFF	; 255
      7c:	06 00       	.word	0x0006	; ????
      7e:	00 00       	nop
      80:	00 07       	cpc	r16, r16
      82:	07 00       	.word	0x0007	; ????
      84:	07 07       	cpc	r16, r23
      86:	00 00       	nop
      88:	14 7f       	andi	r17, 0xF4	; 244
      8a:	7f 14       	cp	r7, r15
      8c:	7f 7f       	andi	r23, 0xFF	; 255
      8e:	14 00       	.word	0x0014	; ????
      90:	24 2e       	mov	r2, r20
      92:	6b 6b       	ori	r22, 0xBB	; 187
      94:	3a 12       	cpse	r3, r26
      96:	00 00       	nop
      98:	46 66       	ori	r20, 0x66	; 102
      9a:	30 18       	sub	r3, r0
      9c:	0c 66       	ori	r16, 0x6C	; 108
      9e:	62 00       	.word	0x0062	; ????
      a0:	30 7a       	andi	r19, 0xA0	; 160
      a2:	4f 5d       	subi	r20, 0xDF	; 223
      a4:	37 7a       	andi	r19, 0xA7	; 167
      a6:	48 00       	.word	0x0048	; ????
      a8:	04 07       	cpc	r16, r20
      aa:	03 00       	.word	0x0003	; ????
      ac:	00 00       	nop
      ae:	00 00       	nop
      b0:	00 1c       	adc	r0, r0
      b2:	3e 63       	ori	r19, 0x3E	; 62
      b4:	41 00       	.word	0x0041	; ????
      b6:	00 00       	nop
      b8:	00 41       	sbci	r16, 0x10	; 16
      ba:	63 3e       	cpi	r22, 0xE3	; 227
      bc:	1c 00       	.word	0x001c	; ????
      be:	00 00       	nop
      c0:	08 2a       	or	r0, r24
      c2:	3e 1c       	adc	r3, r14
      c4:	1c 3e       	cpi	r17, 0xEC	; 236
      c6:	2a 08       	sbc	r2, r10
      c8:	08 08       	sbc	r0, r8
      ca:	3e 3e       	cpi	r19, 0xEE	; 238
      cc:	08 08       	sbc	r0, r8
      ce:	00 00       	nop
      d0:	00 a0       	ldd	r0, Z+32	; 0x20
      d2:	e0 60       	ori	r30, 0x00	; 0
      d4:	00 00       	nop
      d6:	00 00       	nop
      d8:	08 08       	sbc	r0, r8
      da:	08 08       	sbc	r0, r8
      dc:	08 08       	sbc	r0, r8
      de:	00 00       	nop
      e0:	00 00       	nop
      e2:	60 60       	ori	r22, 0x00	; 0
      e4:	00 00       	nop
      e6:	00 00       	nop
      e8:	60 30       	cpi	r22, 0x00	; 0
      ea:	18 0c       	add	r1, r8
      ec:	06 03       	mulsu	r16, r22
      ee:	01 00       	.word	0x0001	; ????
      f0:	3e 7f       	andi	r19, 0xFE	; 254
      f2:	59 4d       	sbci	r21, 0xD9	; 217
      f4:	7f 3e       	cpi	r23, 0xEF	; 239
      f6:	00 00       	nop
      f8:	42 42       	sbci	r20, 0x22	; 34
      fa:	7f 7f       	andi	r23, 0xFF	; 255
      fc:	40 40       	sbci	r20, 0x00	; 0
      fe:	00 00       	nop
     100:	62 73       	andi	r22, 0x32	; 50
     102:	59 49       	sbci	r21, 0x99	; 153
     104:	6f 66       	ori	r22, 0x6F	; 111
     106:	00 00       	nop
     108:	22 63       	ori	r18, 0x32	; 50
     10a:	49 49       	sbci	r20, 0x99	; 153
     10c:	7f 36       	cpi	r23, 0x6F	; 111
     10e:	00 00       	nop
     110:	18 1c       	adc	r1, r8
     112:	16 13       	cpse	r17, r22
     114:	7f 7f       	andi	r23, 0xFF	; 255
     116:	10 00       	.word	0x0010	; ????
     118:	27 67       	ori	r18, 0x77	; 119
     11a:	45 45       	sbci	r20, 0x55	; 85
     11c:	7d 39       	cpi	r23, 0x9D	; 157
     11e:	00 00       	nop
     120:	3c 7e       	andi	r19, 0xEC	; 236
     122:	4b 49       	sbci	r20, 0x9B	; 155
     124:	79 30       	cpi	r23, 0x09	; 9
     126:	00 00       	nop
     128:	03 63       	ori	r16, 0x33	; 51
     12a:	71 19       	sub	r23, r1
     12c:	0f 07       	cpc	r16, r31
     12e:	00 00       	nop
     130:	36 7f       	andi	r19, 0xF6	; 246
     132:	49 49       	sbci	r20, 0x99	; 153
     134:	7f 36       	cpi	r23, 0x6F	; 111
     136:	00 00       	nop
     138:	06 4f       	sbci	r16, 0xF6	; 246
     13a:	49 69       	ori	r20, 0x99	; 153
     13c:	3f 1e       	adc	r3, r31
     13e:	00 00       	nop
     140:	00 00       	nop
     142:	6c 6c       	ori	r22, 0xCC	; 204
     144:	00 00       	nop
     146:	00 00       	nop
     148:	00 a0       	ldd	r0, Z+32	; 0x20
     14a:	ec 6c       	ori	r30, 0xCC	; 204
     14c:	00 00       	nop
     14e:	00 00       	nop
     150:	08 1c       	adc	r0, r8
     152:	36 63       	ori	r19, 0x36	; 54
     154:	41 00       	.word	0x0041	; ????
     156:	00 00       	nop
     158:	14 14       	cp	r1, r4
     15a:	14 14       	cp	r1, r4
     15c:	14 14       	cp	r1, r4
     15e:	00 00       	nop
     160:	00 41       	sbci	r16, 0x10	; 16
     162:	63 36       	cpi	r22, 0x63	; 99
     164:	1c 08       	sbc	r1, r12
     166:	00 00       	nop
     168:	02 03       	mulsu	r16, r18
     16a:	51 59       	subi	r21, 0x91	; 145
     16c:	0f 06       	cpc	r0, r31
     16e:	00 00       	nop
     170:	3e 7f       	andi	r19, 0xFE	; 254
     172:	41 5d       	subi	r20, 0xD1	; 209
     174:	5d 1f       	adc	r21, r29
     176:	1e 00       	.word	0x001e	; ????
     178:	7c 7e       	andi	r23, 0xEC	; 236
     17a:	13 13       	cpse	r17, r19
     17c:	7e 7c       	andi	r23, 0xCE	; 206
     17e:	00 00       	nop
     180:	41 7f       	andi	r20, 0xF1	; 241
     182:	7f 49       	sbci	r23, 0x9F	; 159
     184:	49 7f       	andi	r20, 0xF9	; 249
     186:	36 00       	.word	0x0036	; ????
     188:	1c 3e       	cpi	r17, 0xEC	; 236
     18a:	63 41       	sbci	r22, 0x13	; 19
     18c:	41 63       	ori	r20, 0x31	; 49
     18e:	22 00       	.word	0x0022	; ????
     190:	41 7f       	andi	r20, 0xF1	; 241
     192:	7f 41       	sbci	r23, 0x1F	; 31
     194:	63 7f       	andi	r22, 0xF3	; 243
     196:	1c 00       	.word	0x001c	; ????
     198:	41 7f       	andi	r20, 0xF1	; 241
     19a:	7f 49       	sbci	r23, 0x9F	; 159
     19c:	5d 41       	sbci	r21, 0x1D	; 29
     19e:	63 00       	.word	0x0063	; ????
     1a0:	41 7f       	andi	r20, 0xF1	; 241
     1a2:	7f 49       	sbci	r23, 0x9F	; 159
     1a4:	1d 01       	movw	r2, r26
     1a6:	03 00       	.word	0x0003	; ????
     1a8:	1c 3e       	cpi	r17, 0xEC	; 236
     1aa:	63 41       	sbci	r22, 0x13	; 19
     1ac:	51 73       	andi	r21, 0x31	; 49
     1ae:	72 00       	.word	0x0072	; ????
     1b0:	7f 7f       	andi	r23, 0xFF	; 255
     1b2:	08 08       	sbc	r0, r8
     1b4:	7f 7f       	andi	r23, 0xFF	; 255
     1b6:	00 00       	nop
     1b8:	00 41       	sbci	r16, 0x10	; 16
     1ba:	7f 7f       	andi	r23, 0xFF	; 255
     1bc:	41 00       	.word	0x0041	; ????
     1be:	00 00       	nop
     1c0:	30 70       	andi	r19, 0x00	; 0
     1c2:	40 41       	sbci	r20, 0x10	; 16
     1c4:	7f 3f       	cpi	r23, 0xFF	; 255
     1c6:	01 00       	.word	0x0001	; ????
     1c8:	41 7f       	andi	r20, 0xF1	; 241
     1ca:	7f 08       	sbc	r7, r15
     1cc:	1c 77       	andi	r17, 0x7C	; 124
     1ce:	63 00       	.word	0x0063	; ????
     1d0:	41 7f       	andi	r20, 0xF1	; 241
     1d2:	7f 41       	sbci	r23, 0x1F	; 31
     1d4:	40 60       	ori	r20, 0x00	; 0
     1d6:	70 00       	.word	0x0070	; ????
     1d8:	7f 7f       	andi	r23, 0xFF	; 255
     1da:	06 0c       	add	r0, r6
     1dc:	06 7f       	andi	r16, 0xF6	; 246
     1de:	7f 00       	.word	0x007f	; ????
     1e0:	7f 7f       	andi	r23, 0xFF	; 255
     1e2:	06 0c       	add	r0, r6
     1e4:	18 7f       	andi	r17, 0xF8	; 248
     1e6:	7f 00       	.word	0x007f	; ????
     1e8:	1c 3e       	cpi	r17, 0xEC	; 236
     1ea:	63 41       	sbci	r22, 0x13	; 19
     1ec:	63 3e       	cpi	r22, 0xE3	; 227
     1ee:	1c 00       	.word	0x001c	; ????
     1f0:	41 7f       	andi	r20, 0xF1	; 241
     1f2:	7f 49       	sbci	r23, 0x9F	; 159
     1f4:	09 0f       	add	r16, r25
     1f6:	06 00       	.word	0x0006	; ????
     1f8:	1e 3f       	cpi	r17, 0xFE	; 254
     1fa:	21 71       	andi	r18, 0x11	; 17
     1fc:	7f 5e       	subi	r23, 0xEF	; 239
     1fe:	00 00       	nop
     200:	41 7f       	andi	r20, 0xF1	; 241
     202:	7f 19       	sub	r23, r15
     204:	39 6f       	ori	r19, 0xF9	; 249
     206:	46 00       	.word	0x0046	; ????
     208:	26 67       	ori	r18, 0x76	; 118
     20a:	4d 59       	subi	r20, 0x9D	; 157
     20c:	7b 32       	cpi	r23, 0x2B	; 43
     20e:	00 00       	nop
     210:	03 41       	sbci	r16, 0x13	; 19
     212:	7f 7f       	andi	r23, 0xFF	; 255
     214:	41 03       	mulsu	r20, r17
     216:	00 00       	nop
     218:	7f 7f       	andi	r23, 0xFF	; 255
     21a:	40 40       	sbci	r20, 0x00	; 0
     21c:	7f 7f       	andi	r23, 0xFF	; 255
     21e:	00 00       	nop
     220:	1f 3f       	cpi	r17, 0xFF	; 255
     222:	60 60       	ori	r22, 0x00	; 0
     224:	3f 1f       	adc	r19, r31
     226:	00 00       	nop
     228:	7f 7f       	andi	r23, 0xFF	; 255
     22a:	30 18       	sub	r3, r0
     22c:	30 7f       	andi	r19, 0xF0	; 240
     22e:	7f 00       	.word	0x007f	; ????
     230:	63 77       	andi	r22, 0x73	; 115
     232:	1c 08       	sbc	r1, r12
     234:	1c 77       	andi	r17, 0x7C	; 124
     236:	63 00       	.word	0x0063	; ????
     238:	07 4f       	sbci	r16, 0xF7	; 247
     23a:	78 78       	andi	r23, 0x88	; 136
     23c:	4f 07       	cpc	r20, r31
     23e:	00 00       	nop
     240:	67 73       	andi	r22, 0x37	; 55
     242:	59 4d       	sbci	r21, 0xD9	; 217
     244:	47 63       	ori	r20, 0x37	; 55
     246:	71 00       	.word	0x0071	; ????
     248:	00 7f       	andi	r16, 0xF0	; 240
     24a:	7f 41       	sbci	r23, 0x1F	; 31
     24c:	41 00       	.word	0x0041	; ????
     24e:	00 00       	nop
     250:	01 03       	mulsu	r16, r17
     252:	06 0c       	add	r0, r6
     254:	18 30       	cpi	r17, 0x08	; 8
     256:	60 00       	.word	0x0060	; ????
     258:	00 41       	sbci	r16, 0x10	; 16
     25a:	41 7f       	andi	r20, 0xF1	; 241
     25c:	7f 00       	.word	0x007f	; ????
     25e:	00 00       	nop
     260:	08 0c       	add	r0, r8
     262:	06 03       	mulsu	r16, r22
     264:	06 0c       	add	r0, r6
     266:	08 00       	.word	0x0008	; ????
     268:	80 80       	ld	r8, Z
     26a:	80 80       	ld	r8, Z
     26c:	80 80       	ld	r8, Z
     26e:	80 80       	ld	r8, Z
     270:	00 00       	nop
     272:	03 07       	cpc	r16, r19
     274:	04 00       	.word	0x0004	; ????
     276:	00 00       	nop
     278:	20 74       	andi	r18, 0x40	; 64
     27a:	54 54       	subi	r21, 0x44	; 68
     27c:	3c 78       	andi	r19, 0x8C	; 140
     27e:	40 00       	.word	0x0040	; ????
     280:	41 3f       	cpi	r20, 0xF1	; 241
     282:	7f 44       	sbci	r23, 0x4F	; 79
     284:	44 7c       	andi	r20, 0xC4	; 196
     286:	38 00       	.word	0x0038	; ????
     288:	38 7c       	andi	r19, 0xC8	; 200
     28a:	44 44       	sbci	r20, 0x44	; 68
     28c:	6c 28       	or	r6, r12
     28e:	00 00       	nop
     290:	30 78       	andi	r19, 0x80	; 128
     292:	48 49       	sbci	r20, 0x98	; 152
     294:	3f 7f       	andi	r19, 0xFF	; 255
     296:	40 00       	.word	0x0040	; ????
     298:	38 7c       	andi	r19, 0xC8	; 200
     29a:	54 54       	subi	r21, 0x44	; 68
     29c:	5c 18       	sub	r5, r12
     29e:	00 00       	nop
     2a0:	48 7e       	andi	r20, 0xE8	; 232
     2a2:	7f 49       	sbci	r23, 0x9F	; 159
     2a4:	03 02       	muls	r16, r19
     2a6:	00 00       	nop
     2a8:	98 bc       	out	0x28, r9	; 40
     2aa:	a4 a4       	ldd	r10, Z+44	; 0x2c
     2ac:	f8 7c       	andi	r31, 0xC8	; 200
     2ae:	04 00       	.word	0x0004	; ????
     2b0:	41 7f       	andi	r20, 0xF1	; 241
     2b2:	7f 08       	sbc	r7, r15
     2b4:	04 7c       	andi	r16, 0xC4	; 196
     2b6:	78 00       	.word	0x0078	; ????
     2b8:	00 44       	sbci	r16, 0x40	; 64
     2ba:	7d 7d       	andi	r23, 0xDD	; 221
     2bc:	40 00       	.word	0x0040	; ????
     2be:	00 00       	nop
     2c0:	40 c4       	rjmp	.+2176   	; 0xb42 <JoystickDirection+0x6c>
     2c2:	84 fd       	sbrc	r24, 4
     2c4:	7d 00       	.word	0x007d	; ????
     2c6:	00 00       	nop
     2c8:	41 7f       	andi	r20, 0xF1	; 241
     2ca:	7f 10       	cpse	r7, r15
     2cc:	38 6c       	ori	r19, 0xC8	; 200
     2ce:	44 00       	.word	0x0044	; ????
     2d0:	00 41       	sbci	r16, 0x10	; 16
     2d2:	7f 7f       	andi	r23, 0xFF	; 255
     2d4:	40 00       	.word	0x0040	; ????
     2d6:	00 00       	nop
     2d8:	7c 7c       	andi	r23, 0xCC	; 204
     2da:	0c 18       	sub	r0, r12
     2dc:	0c 7c       	andi	r16, 0xCC	; 204
     2de:	78 00       	.word	0x0078	; ????
     2e0:	7c 7c       	andi	r23, 0xCC	; 204
     2e2:	04 04       	cpc	r0, r4
     2e4:	7c 78       	andi	r23, 0x8C	; 140
     2e6:	00 00       	nop
     2e8:	38 7c       	andi	r19, 0xC8	; 200
     2ea:	44 44       	sbci	r20, 0x44	; 68
     2ec:	7c 38       	cpi	r23, 0x8C	; 140
     2ee:	00 00       	nop
     2f0:	84 fc       	sbrc	r8, 4
     2f2:	f8 a4       	ldd	r15, Y+40	; 0x28
     2f4:	24 3c       	cpi	r18, 0xC4	; 196
     2f6:	18 00       	.word	0x0018	; ????
     2f8:	18 3c       	cpi	r17, 0xC8	; 200
     2fa:	24 a4       	ldd	r2, Z+44	; 0x2c
     2fc:	f8 fc       	.word	0xfcf8	; ????
     2fe:	84 00       	.word	0x0084	; ????
     300:	44 7c       	andi	r20, 0xC4	; 196
     302:	78 44       	sbci	r23, 0x48	; 72
     304:	1c 18       	sub	r1, r12
     306:	00 00       	nop
     308:	48 5c       	subi	r20, 0xC8	; 200
     30a:	54 54       	subi	r21, 0x44	; 68
     30c:	74 24       	eor	r7, r4
     30e:	00 00       	nop
     310:	00 04       	cpc	r0, r0
     312:	3e 7f       	andi	r19, 0xFE	; 254
     314:	44 24       	eor	r4, r4
     316:	00 00       	nop
     318:	3c 7c       	andi	r19, 0xCC	; 204
     31a:	40 40       	sbci	r20, 0x00	; 0
     31c:	3c 7c       	andi	r19, 0xCC	; 204
     31e:	40 00       	.word	0x0040	; ????
     320:	1c 3c       	cpi	r17, 0xCC	; 204
     322:	60 60       	ori	r22, 0x00	; 0
     324:	3c 1c       	adc	r3, r12
     326:	00 00       	nop
     328:	3c 7c       	andi	r19, 0xCC	; 204
     32a:	60 30       	cpi	r22, 0x00	; 0
     32c:	60 7c       	andi	r22, 0xC0	; 192
     32e:	3c 00       	.word	0x003c	; ????
     330:	44 6c       	ori	r20, 0xC4	; 196
     332:	38 10       	cpse	r3, r8
     334:	38 6c       	ori	r19, 0xC8	; 200
     336:	44 00       	.word	0x0044	; ????
     338:	9c bc       	out	0x2c, r9	; 44
     33a:	a0 a0       	ldd	r10, Z+32	; 0x20
     33c:	fc 7c       	andi	r31, 0xCC	; 204
     33e:	00 00       	nop
     340:	4c 64       	ori	r20, 0x4C	; 76
     342:	74 5c       	subi	r23, 0xC4	; 196
     344:	4c 64       	ori	r20, 0x4C	; 76
     346:	00 00       	nop
     348:	08 08       	sbc	r0, r8
     34a:	3e 77       	andi	r19, 0x7E	; 126
     34c:	41 41       	sbci	r20, 0x11	; 17
     34e:	00 00       	nop
     350:	00 00       	nop
     352:	00 77       	andi	r16, 0x70	; 112
     354:	77 00       	.word	0x0077	; ????
     356:	00 00       	nop
     358:	41 41       	sbci	r20, 0x11	; 17
     35a:	77 3e       	cpi	r23, 0xE7	; 231
     35c:	08 08       	sbc	r0, r8
     35e:	00 00       	nop
     360:	02 03       	mulsu	r16, r18
     362:	01 03       	mulsu	r16, r17
     364:	02 03       	mulsu	r16, r18
     366:	01 00       	.word	0x0001	; ????

00000368 <__ctors_end>:
     368:	11 24       	eor	r1, r1
     36a:	1f be       	out	0x3f, r1	; 63
     36c:	cf ef       	ldi	r28, 0xFF	; 255
     36e:	d4 e0       	ldi	r29, 0x04	; 4
     370:	de bf       	out	0x3e, r29	; 62
     372:	cd bf       	out	0x3d, r28	; 61

00000374 <__do_copy_data>:
     374:	13 e0       	ldi	r17, 0x03	; 3
     376:	a0 e0       	ldi	r26, 0x00	; 0
     378:	b1 e0       	ldi	r27, 0x01	; 1
     37a:	e0 e0       	ldi	r30, 0x00	; 0
     37c:	f0 e2       	ldi	r31, 0x20	; 32
     37e:	02 c0       	rjmp	.+4      	; 0x384 <__do_copy_data+0x10>
     380:	05 90       	lpm	r0, Z+
     382:	0d 92       	st	X+, r0
     384:	a8 3e       	cpi	r26, 0xE8	; 232
     386:	b1 07       	cpc	r27, r17
     388:	d9 f7       	brne	.-10     	; 0x380 <__do_copy_data+0xc>

0000038a <__do_clear_bss>:
     38a:	24 e0       	ldi	r18, 0x04	; 4
     38c:	a8 ee       	ldi	r26, 0xE8	; 232
     38e:	b3 e0       	ldi	r27, 0x03	; 3
     390:	01 c0       	rjmp	.+2      	; 0x394 <.do_clear_bss_start>

00000392 <.do_clear_bss_loop>:
     392:	1d 92       	st	X+, r1

00000394 <.do_clear_bss_start>:
     394:	aa 31       	cpi	r26, 0x1A	; 26
     396:	b2 07       	cpc	r27, r18
     398:	e1 f7       	brne	.-8      	; 0x392 <.do_clear_bss_loop>
     39a:	0e 94 1d 02 	call	0x43a	; 0x43a <main>
     39e:	0c 94 fe 0f 	jmp	0x1ffc	; 0x1ffc <_exit>

000003a2 <__bad_interrupt>:
     3a2:	0c 94 00 00 	jmp	0	; 0x0 <__vectors>

000003a6 <__vector_2>:
#endif

volatile char* ext_adc = ADC_ADDRESS;
volatile char ADC_data;

ISR(INT1_vect){
     3a6:	1f 92       	push	r1
     3a8:	0f 92       	push	r0
     3aa:	0f b6       	in	r0, 0x3f	; 63
     3ac:	0f 92       	push	r0
     3ae:	11 24       	eor	r1, r1
     3b0:	8f 93       	push	r24
     3b2:	ef 93       	push	r30
     3b4:	ff 93       	push	r31
	
	ADC_data = ext_adc[0x00];
     3b6:	e0 91 06 01 	lds	r30, 0x0106
     3ba:	f0 91 07 01 	lds	r31, 0x0107
     3be:	80 81       	ld	r24, Z
     3c0:	80 93 f8 03 	sts	0x03F8, r24
}
     3c4:	ff 91       	pop	r31
     3c6:	ef 91       	pop	r30
     3c8:	8f 91       	pop	r24
     3ca:	0f 90       	pop	r0
     3cc:	0f be       	out	0x3f, r0	; 63
     3ce:	0f 90       	pop	r0
     3d0:	1f 90       	pop	r1
     3d2:	18 95       	reti

000003d4 <ADC_init>:

void ADC_init(void){
	

	clear_bit(DDRD, PD3);
     3d4:	8b 98       	cbi	0x11, 3	; 17
	set_bit(PORTD, PD3);	
     3d6:	93 9a       	sbi	0x12, 3	; 18
	
	cli();
     3d8:	f8 94       	cli
	
	set_bit(MCUCR, ISC11);
     3da:	85 b7       	in	r24, 0x35	; 53
     3dc:	88 60       	ori	r24, 0x08	; 8
     3de:	85 bf       	out	0x35, r24	; 53
	clear_bit(MCUCR, ISC10);
     3e0:	85 b7       	in	r24, 0x35	; 53
     3e2:	8b 7f       	andi	r24, 0xFB	; 251
     3e4:	85 bf       	out	0x35, r24	; 53
	
	set_bit(GICR,INT1);
     3e6:	8b b7       	in	r24, 0x3b	; 59
     3e8:	80 68       	ori	r24, 0x80	; 128
     3ea:	8b bf       	out	0x3b, r24	; 59

	sei();
     3ec:	78 94       	sei
     3ee:	08 95       	ret

000003f0 <get_ADC_data>:
}

char get_ADC_data(void){
	return ext_adc[0x00]; 
     3f0:	e0 91 06 01 	lds	r30, 0x0106
     3f4:	f0 91 07 01 	lds	r31, 0x0107
     3f8:	80 81       	ld	r24, Z
}
     3fa:	08 95       	ret

000003fc <ADC_start_read>:

void ADC_start_read(ADC_channel channel){
	
	char data = 0x00;
	switch (channel) {
     3fc:	81 30       	cpi	r24, 0x01	; 1
     3fe:	b1 f0       	breq	.+44     	; 0x42c <ADC_start_read+0x30>
     400:	28 f0       	brcs	.+10     	; 0x40c <ADC_start_read+0x10>
     402:	82 30       	cpi	r24, 0x02	; 2
     404:	29 f0       	breq	.+10     	; 0x410 <ADC_start_read+0x14>
     406:	83 30       	cpi	r24, 0x03	; 3
     408:	29 f0       	breq	.+10     	; 0x414 <ADC_start_read+0x18>
     40a:	06 c0       	rjmp	.+12     	; 0x418 <ADC_start_read+0x1c>
		case CHANNEL1 :
		data = 0x04;
     40c:	84 e0       	ldi	r24, 0x04	; 4
     40e:	0f c0       	rjmp	.+30     	; 0x42e <ADC_start_read+0x32>
		break;
		case CHANNEL2 :
		data = 0x05;
		break;
		case CHANNEL3 :
		data = 0x06;
     410:	86 e0       	ldi	r24, 0x06	; 6
		break;
     412:	0d c0       	rjmp	.+26     	; 0x42e <ADC_start_read+0x32>
		case CHANNEL4 :
		data = 0x07;
     414:	87 e0       	ldi	r24, 0x07	; 7
		break;
     416:	0b c0       	rjmp	.+22     	; 0x42e <ADC_start_read+0x32>
		default:
		printf("Not valid channel");
     418:	83 e4       	ldi	r24, 0x43	; 67
     41a:	91 e0       	ldi	r25, 0x01	; 1
     41c:	9f 93       	push	r25
     41e:	8f 93       	push	r24
     420:	0e 94 eb 0c 	call	0x19d6	; 0x19d6 <printf>
     424:	0f 90       	pop	r0
     426:	0f 90       	pop	r0
	return ext_adc[0x00]; 
}

void ADC_start_read(ADC_channel channel){
	
	char data = 0x00;
     428:	80 e0       	ldi	r24, 0x00	; 0
     42a:	01 c0       	rjmp	.+2      	; 0x42e <ADC_start_read+0x32>
	switch (channel) {
		case CHANNEL1 :
		data = 0x04;
		break;
		case CHANNEL2 :
		data = 0x05;
     42c:	85 e0       	ldi	r24, 0x05	; 5
		break;
		default:
		printf("Not valid channel");
	}
	
	ext_adc[0] = data;
     42e:	e0 91 06 01 	lds	r30, 0x0106
     432:	f0 91 07 01 	lds	r31, 0x0107
     436:	80 83       	st	Z, r24
     438:	08 95       	ret

0000043a <main>:

		}
		return 0;
}
int main( )
{
     43a:	cf 93       	push	r28
     43c:	df 93       	push	r29
     43e:	00 d0       	rcall	.+0      	; 0x440 <main+0x6>
     440:	00 d0       	rcall	.+0      	; 0x442 <main+0x8>
     442:	1f 92       	push	r1
     444:	cd b7       	in	r28, 0x3d	; 61
     446:	de b7       	in	r29, 0x3e	; 62
	My_serial_Init ( MYUBRR );
     448:	8f e1       	ldi	r24, 0x1F	; 31
     44a:	90 e0       	ldi	r25, 0x00	; 0
     44c:	0e 94 a1 04 	call	0x942	; 0x942 <My_serial_Init>
	#else
		//round up by default
		__ticks_dc = (uint32_t)(ceil(fabs(__tmp)));
	#endif

	__builtin_avr_delay_cycles(__ticks_dc);
     450:	2f ef       	ldi	r18, 0xFF	; 255
     452:	8f ef       	ldi	r24, 0xFF	; 255
     454:	9e e0       	ldi	r25, 0x0E	; 14
     456:	21 50       	subi	r18, 0x01	; 1
     458:	80 40       	sbci	r24, 0x00	; 0
     45a:	90 40       	sbci	r25, 0x00	; 0
     45c:	e1 f7       	brne	.-8      	; 0x456 <main+0x1c>
     45e:	00 c0       	rjmp	.+0      	; 0x460 <main+0x26>
     460:	00 00       	nop
	_delay_ms(1000);
	ADC_init();
     462:	0e 94 ea 01 	call	0x3d4	; 0x3d4 <ADC_init>
	Joystick_calibrate();
     466:	0e 94 54 05 	call	0xaa8	; 0xaa8 <Joystick_calibrate>
	oled_init();
     46a:	0e 94 b5 08 	call	0x116a	; 0x116a <oled_init>
	menu* mymenu = oled_menu_init();
     46e:	0e 94 d5 09 	call	0x13aa	; 0x13aa <oled_menu_init>
	Joystick myjoystick;
	gamevars mygame;
	gamevars mygameold;
	menu_option lastOption;
	int updatescore = 0;
	oled_menu_select(0);
     472:	80 e0       	ldi	r24, 0x00	; 0
     474:	90 e0       	ldi	r25, 0x00	; 0
     476:	0e 94 60 0a 	call	0x14c0	; 0x14c0 <oled_menu_select>
	can_init(MODE_NORMAL);
     47a:	80 e0       	ldi	r24, 0x00	; 0
     47c:	0e 94 9b 02 	call	0x536	; 0x536 <can_init>
	printf("NEW START!!!!");
     480:	85 e8       	ldi	r24, 0x85	; 133
     482:	92 e0       	ldi	r25, 0x02	; 2
     484:	9f 93       	push	r25
     486:	8f 93       	push	r24
     488:	0e 94 eb 0c 	call	0x19d6	; 0x19d6 <printf>
     48c:	0f 90       	pop	r0
     48e:	0f 90       	pop	r0
	int joystickFlag =0;
     490:	00 e0       	ldi	r16, 0x00	; 0
     492:	10 e0       	ldi	r17, 0x00	; 0
	menu* mymenu = oled_menu_init();
	Joystick myjoystick;
	gamevars mygame;
	gamevars mygameold;
	menu_option lastOption;
	int updatescore = 0;
     494:	e1 2c       	mov	r14, r1
     496:	f1 2c       	mov	r15, r1
	int joystickFlag =0;
	while(1)
	{
		mygame = getInfo();
		if(mygame.enemypoints != mygameold.enemypoints || mygame.mypoints != mygameold.mypoints){
			updatescore = 1;
     498:	33 24       	eor	r3, r3
     49a:	33 94       	inc	r3
     49c:	81 2c       	mov	r8, r1
		myjoystick= joystickPos();
		
		joystickFlag++;
		if(joystickFlag > 100){
			
			joystickFlag = 0;
     49e:	21 2c       	mov	r2, r1
	can_init(MODE_NORMAL);
	printf("NEW START!!!!");
	int joystickFlag =0;
	while(1)
	{
		mygame = getInfo();
     4a0:	0e 94 fd 04 	call	0x9fa	; 0x9fa <getInfo>
     4a4:	2b 01       	movw	r4, r22
     4a6:	3c 01       	movw	r6, r24
		if(mygame.enemypoints != mygameold.enemypoints || mygame.mypoints != mygameold.mypoints){
     4a8:	c6 14       	cp	r12, r6
     4aa:	d7 04       	cpc	r13, r7
     4ac:	21 f4       	brne	.+8      	; 0x4b6 <main+0x7c>
     4ae:	a6 16       	cp	r10, r22
     4b0:	b7 06       	cpc	r11, r23
     4b2:	21 f4       	brne	.+8      	; 0x4bc <main+0x82>
     4b4:	05 c0       	rjmp	.+10     	; 0x4c0 <main+0x86>
			updatescore = 1;
     4b6:	e3 2c       	mov	r14, r3
     4b8:	f8 2c       	mov	r15, r8
     4ba:	02 c0       	rjmp	.+4      	; 0x4c0 <main+0x86>
     4bc:	e3 2c       	mov	r14, r3
     4be:	f8 2c       	mov	r15, r8
		}
		
		myjoystick= joystickPos();
     4c0:	0e 94 b1 05 	call	0xb62	; 0xb62 <joystickPos>
		
		joystickFlag++;
     4c4:	0f 5f       	subi	r16, 0xFF	; 255
     4c6:	1f 4f       	sbci	r17, 0xFF	; 255
		if(joystickFlag > 100){
     4c8:	05 36       	cpi	r16, 0x65	; 101
     4ca:	11 05       	cpc	r17, r1
     4cc:	14 f0       	brlt	.+4      	; 0x4d2 <main+0x98>
			
			joystickFlag = 0;
     4ce:	02 2d       	mov	r16, r2
     4d0:	10 e0       	ldi	r17, 0x00	; 0
		}

		if(myjoystick.Dir == LEFT){
     4d2:	66 23       	and	r22, r22
     4d4:	21 f0       	breq	.+8      	; 0x4de <main+0xa4>
			lastOption = NONE;
		}
		if(myjoystick.Dir != NEUTRAL && lastOption == NONE)
     4d6:	64 30       	cpi	r22, 0x04	; 4
     4d8:	51 f0       	breq	.+20     	; 0x4ee <main+0xb4>
     4da:	91 10       	cpse	r9, r1
     4dc:	08 c0       	rjmp	.+16     	; 0x4ee <main+0xb4>
		{
			lastOption = printgame(oled_menu_select(),mygame);
     4de:	0e 94 60 0a 	call	0x14c0	; 0x14c0 <oled_menu_select>
     4e2:	b3 01       	movw	r22, r6
     4e4:	a2 01       	movw	r20, r4
     4e6:	0e 94 65 06 	call	0xcca	; 0xcca <printgame>
     4ea:	98 2e       	mov	r9, r24
     4ec:	0a c0       	rjmp	.+20     	; 0x502 <__stack+0x3>
		}
		else if(updatescore){
     4ee:	e1 14       	cp	r14, r1
     4f0:	f1 04       	cpc	r15, r1
     4f2:	39 f0       	breq	.+14     	; 0x502 <__stack+0x3>
			printgame(lastOption,mygame);
     4f4:	b3 01       	movw	r22, r6
     4f6:	a2 01       	movw	r20, r4
     4f8:	89 2d       	mov	r24, r9
     4fa:	0e 94 65 06 	call	0xcca	; 0xcca <printgame>
			updatescore = 0;
     4fe:	e2 2c       	mov	r14, r2
     500:	f1 2c       	mov	r15, r1
		}
		
		mygameold = mygame;
		sendInfo(lastOption);
     502:	89 2d       	mov	r24, r9
     504:	0e 94 b4 04 	call	0x968	; 0x968 <sendInfo>
		else if(updatescore){
			printgame(lastOption,mygame);
			updatescore = 0;
		}
		
		mygameold = mygame;
     508:	52 01       	movw	r10, r4
     50a:	63 01       	movw	r12, r6
		sendInfo(lastOption);
		//_delay_ms(200);
	}
     50c:	c9 cf       	rjmp	.-110    	; 0x4a0 <main+0x66>

0000050e <__vector_1>:
#include <avr/delay.h>

volatile int flag = 0;


ISR(INT0_vect){
     50e:	1f 92       	push	r1
     510:	0f 92       	push	r0
     512:	0f b6       	in	r0, 0x3f	; 63
     514:	0f 92       	push	r0
     516:	11 24       	eor	r1, r1
     518:	8f 93       	push	r24
     51a:	9f 93       	push	r25
	flag = 1;
     51c:	81 e0       	ldi	r24, 0x01	; 1
     51e:	90 e0       	ldi	r25, 0x00	; 0
     520:	90 93 eb 03 	sts	0x03EB, r25
     524:	80 93 ea 03 	sts	0x03EA, r24
	//printf("\r\n INTERUPT\r\n");
}
     528:	9f 91       	pop	r25
     52a:	8f 91       	pop	r24
     52c:	0f 90       	pop	r0
     52e:	0f be       	out	0x3f, r0	; 63
     530:	0f 90       	pop	r0
     532:	1f 90       	pop	r1
     534:	18 95       	reti

00000536 <can_init>:

void can_init(uint8_t mode){

	mcp_2515_init(mode);
     536:	0e 94 3c 04 	call	0x878	; 0x878 <mcp_2515_init>
	
	
	mcp_2515_write(MCP_CANINTE, MCP_RX_INT);
     53a:	63 e0       	ldi	r22, 0x03	; 3
     53c:	8b e2       	ldi	r24, 0x2B	; 43
     53e:	0e 94 23 04 	call	0x846	; 0x846 <mcp_2515_write>
	
	// Disable global interrupts
	cli();
     542:	f8 94       	cli
	// Interrupt on falling edge PD2
	set_bit(MCUCR, ISC01);
     544:	85 b7       	in	r24, 0x35	; 53
     546:	82 60       	ori	r24, 0x02	; 2
     548:	85 bf       	out	0x35, r24	; 53
	clear_bit(MCUCR, ISC00);
     54a:	85 b7       	in	r24, 0x35	; 53
     54c:	8e 7f       	andi	r24, 0xFE	; 254
     54e:	85 bf       	out	0x35, r24	; 53
	// Enable interrupt on PD2
	set_bit(GICR,INT0);
     550:	8b b7       	in	r24, 0x3b	; 59
     552:	80 64       	ori	r24, 0x40	; 64
     554:	8b bf       	out	0x3b, r24	; 59
	// Enable global interrupts
	sei();
     556:	78 94       	sei
     558:	08 95       	ret

0000055a <can_interrupt>:
	 
	
}

uint8_t can_interrupt(){
	if (flag){	
     55a:	80 91 ea 03 	lds	r24, 0x03EA
     55e:	90 91 eb 03 	lds	r25, 0x03EB
     562:	89 2b       	or	r24, r25
     564:	31 f0       	breq	.+12     	; 0x572 <can_interrupt+0x18>
		flag = 0;
     566:	10 92 eb 03 	sts	0x03EB, r1
     56a:	10 92 ea 03 	sts	0x03EA, r1
		return 1;
     56e:	81 e0       	ldi	r24, 0x01	; 1
     570:	08 95       	ret
	}
	return 0;
     572:	80 e0       	ldi	r24, 0x00	; 0
}
     574:	08 95       	ret

00000576 <can_transmit_complete>:
	mcp_2515_request_to_send(MCP_RTS_TX0 + buffer_number);
	//printf("buffer nr. %d\n\r",buffer_number);
	
}

int can_transmit_complete(int buffer_number){
     576:	cf 93       	push	r28
     578:	df 93       	push	r29
     57a:	ec 01       	movw	r28, r24
	uint8_t transmit_flag = mcp_2515_read(MCP_CANINTF);
     57c:	8c e2       	ldi	r24, 0x2C	; 44
     57e:	0e 94 11 04 	call	0x822	; 0x822 <mcp_2515_read>
	uint8_t interrupt_bits = (transmit_flag & (MCP_TX0IF + buffer_number*2));
     582:	9e 01       	movw	r18, r28
     584:	2e 5f       	subi	r18, 0xFE	; 254
     586:	3f 4f       	sbci	r19, 0xFF	; 255
     588:	42 2f       	mov	r20, r18
     58a:	44 0f       	add	r20, r20
     58c:	84 23       	and	r24, r20

	if(interrupt_bits == (MCP_TX0IF + buffer_number*2)){
     58e:	48 2f       	mov	r20, r24
     590:	50 e0       	ldi	r21, 0x00	; 0
     592:	22 0f       	add	r18, r18
     594:	33 1f       	adc	r19, r19
     596:	81 e0       	ldi	r24, 0x01	; 1
     598:	90 e0       	ldi	r25, 0x00	; 0
     59a:	42 17       	cp	r20, r18
     59c:	53 07       	cpc	r21, r19
     59e:	11 f4       	brne	.+4      	; 0x5a4 <can_transmit_complete+0x2e>
     5a0:	80 e0       	ldi	r24, 0x00	; 0
     5a2:	90 e0       	ldi	r25, 0x00	; 0
			return 0;
	}
	return 1;
}
     5a4:	df 91       	pop	r29
     5a6:	cf 91       	pop	r28
     5a8:	08 95       	ret

000005aa <can_message_send>:
	}
	
	return message1;
}

void can_message_send(can_message* message){
     5aa:	ef 92       	push	r14
     5ac:	ff 92       	push	r15
     5ae:	0f 93       	push	r16
     5b0:	1f 93       	push	r17
     5b2:	cf 93       	push	r28
     5b4:	df 93       	push	r29
     5b6:	ec 01       	movw	r28, r24
	
	static int buffer_number = 0;
	
	while (!can_transmit_complete(buffer_number)){
     5b8:	11 c0       	rjmp	.+34     	; 0x5dc <can_message_send+0x32>
		buffer_number +=1;
     5ba:	20 91 e8 03 	lds	r18, 0x03E8
     5be:	30 91 e9 03 	lds	r19, 0x03E9
     5c2:	2f 5f       	subi	r18, 0xFF	; 255
     5c4:	3f 4f       	sbci	r19, 0xFF	; 255
     5c6:	30 93 e9 03 	sts	0x03E9, r19
     5ca:	20 93 e8 03 	sts	0x03E8, r18
		if (buffer_number > 2) {
     5ce:	23 30       	cpi	r18, 0x03	; 3
     5d0:	31 05       	cpc	r19, r1
     5d2:	24 f0       	brlt	.+8      	; 0x5dc <can_message_send+0x32>
			buffer_number = 0;
     5d4:	10 92 e9 03 	sts	0x03E9, r1
     5d8:	10 92 e8 03 	sts	0x03E8, r1

void can_message_send(can_message* message){
	
	static int buffer_number = 0;
	
	while (!can_transmit_complete(buffer_number)){
     5dc:	80 91 e8 03 	lds	r24, 0x03E8
     5e0:	90 91 e9 03 	lds	r25, 0x03E9
     5e4:	0e 94 bb 02 	call	0x576	; 0x576 <can_transmit_complete>
     5e8:	89 2b       	or	r24, r25
     5ea:	39 f3       	breq	.-50     	; 0x5ba <can_message_send+0x10>
			buffer_number = 0;
		}
	}
	
	// Arbitration field identifier ID = 1337;    id high = 167  id low = 0
	unsigned int ID = message->id;
     5ec:	88 81       	ld	r24, Y
     5ee:	99 81       	ldd	r25, Y+1	; 0x01
	char id_high = ID / 8;
	char id_low = ID % 8;
     5f0:	28 2f       	mov	r18, r24
     5f2:	27 70       	andi	r18, 0x07	; 7
     5f4:	f2 2e       	mov	r15, r18
		}
	}
	
	// Arbitration field identifier ID = 1337;    id high = 167  id low = 0
	unsigned int ID = message->id;
	char id_high = ID / 8;
     5f6:	bc 01       	movw	r22, r24
     5f8:	76 95       	lsr	r23
     5fa:	67 95       	ror	r22
     5fc:	76 95       	lsr	r23
     5fe:	67 95       	ror	r22
     600:	76 95       	lsr	r23
     602:	67 95       	ror	r22
	char id_low = ID % 8;
	id_low = id_low*0b100000;
	mcp_2515_write(MCP_TXB0SIDH + 16 * buffer_number, id_high);
     604:	08 ee       	ldi	r16, 0xE8	; 232
     606:	13 e0       	ldi	r17, 0x03	; 3
     608:	f8 01       	movw	r30, r16
     60a:	80 81       	ld	r24, Z
     60c:	82 95       	swap	r24
     60e:	80 7f       	andi	r24, 0xF0	; 240
     610:	8f 5c       	subi	r24, 0xCF	; 207
     612:	0e 94 23 04 	call	0x846	; 0x846 <mcp_2515_write>
	
	// Arbitration field identifier ID = 1337;    id high = 167  id low = 0
	unsigned int ID = message->id;
	char id_high = ID / 8;
	char id_low = ID % 8;
	id_low = id_low*0b100000;
     616:	6f 2d       	mov	r22, r15
     618:	62 95       	swap	r22
     61a:	66 0f       	add	r22, r22
     61c:	60 7e       	andi	r22, 0xE0	; 224
	mcp_2515_write(MCP_TXB0SIDH + 16 * buffer_number, id_high);
	mcp_2515_write(MCP_TXB0SIDL + 16 * buffer_number, id_low);
     61e:	f8 01       	movw	r30, r16
     620:	80 81       	ld	r24, Z
     622:	82 95       	swap	r24
     624:	80 7f       	andi	r24, 0xF0	; 240
     626:	8e 5c       	subi	r24, 0xCE	; 206
     628:	0e 94 23 04 	call	0x846	; 0x846 <mcp_2515_write>
	
	// Define data length of message
	uint8_t data_length = message->length;
     62c:	ea 80       	ldd	r14, Y+2	; 0x02
	mcp_2515_write(MCP_TXB0DLC + 16 * buffer_number, data_length);
     62e:	f8 01       	movw	r30, r16
     630:	80 81       	ld	r24, Z
     632:	82 95       	swap	r24
     634:	80 7f       	andi	r24, 0xF0	; 240
     636:	6e 2d       	mov	r22, r14
     638:	8b 5c       	subi	r24, 0xCB	; 203
     63a:	0e 94 23 04 	call	0x846	; 0x846 <mcp_2515_write>
	
	// Write data bytes to transmit buffer
	char* data_bytes = message->data;
     63e:	23 96       	adiw	r28, 0x03	; 3
	for (uint8_t byte = 0; byte < data_length; byte++) {
     640:	ee 20       	and	r14, r14
     642:	81 f0       	breq	.+32     	; 0x664 <can_message_send+0xba>
     644:	f1 2c       	mov	r15, r1
		mcp_2515_write(MCP_TXB0Dm + byte + 16 * buffer_number, data_bytes[byte]);
     646:	69 91       	ld	r22, Y+
     648:	f8 01       	movw	r30, r16
     64a:	80 81       	ld	r24, Z
     64c:	2f 2d       	mov	r18, r15
     64e:	f0 e1       	ldi	r31, 0x10	; 16
     650:	8f 9f       	mul	r24, r31
     652:	20 0d       	add	r18, r0
     654:	11 24       	eor	r1, r1
     656:	82 2f       	mov	r24, r18
     658:	8a 5c       	subi	r24, 0xCA	; 202
     65a:	0e 94 23 04 	call	0x846	; 0x846 <mcp_2515_write>
	uint8_t data_length = message->length;
	mcp_2515_write(MCP_TXB0DLC + 16 * buffer_number, data_length);
	
	// Write data bytes to transmit buffer
	char* data_bytes = message->data;
	for (uint8_t byte = 0; byte < data_length; byte++) {
     65e:	f3 94       	inc	r15
     660:	fe 10       	cpse	r15, r14
     662:	f1 cf       	rjmp	.-30     	; 0x646 <can_message_send+0x9c>
		mcp_2515_write(MCP_TXB0Dm + byte + 16 * buffer_number, data_bytes[byte]);
	}
	
	// Request to send message, send if successful
	mcp_2515_request_to_send(MCP_RTS_TX0 + buffer_number);
     664:	80 91 e8 03 	lds	r24, 0x03E8
     668:	8f 57       	subi	r24, 0x7F	; 127
     66a:	0e 94 74 04 	call	0x8e8	; 0x8e8 <mcp_2515_request_to_send>
	//printf("buffer nr. %d\n\r",buffer_number);
	
}
     66e:	df 91       	pop	r29
     670:	cf 91       	pop	r28
     672:	1f 91       	pop	r17
     674:	0f 91       	pop	r16
     676:	ff 90       	pop	r15
     678:	ef 90       	pop	r14
     67a:	08 95       	ret

0000067c <can_message_receive>:
			return 0;
	}
	return 1;
}

void can_message_receive(int rec_buff_num, can_message* received_message){
     67c:	0f 93       	push	r16
     67e:	1f 93       	push	r17
     680:	cf 93       	push	r28
     682:	df 93       	push	r29
     684:	eb 01       	movw	r28, r22
	uint8_t id_high = mcp_2515_read(MCP_RXB0SIDH + 16 * rec_buff_num);
     686:	18 2f       	mov	r17, r24
     688:	12 95       	swap	r17
     68a:	10 7f       	andi	r17, 0xF0	; 240
     68c:	81 e6       	ldi	r24, 0x61	; 97
     68e:	81 0f       	add	r24, r17
     690:	0e 94 11 04 	call	0x822	; 0x822 <mcp_2515_read>
     694:	08 2f       	mov	r16, r24
	uint8_t id_low = mcp_2515_read(MCP_RXB0SIDL + 16 * rec_buff_num);
     696:	82 e6       	ldi	r24, 0x62	; 98
     698:	81 0f       	add	r24, r17
     69a:	0e 94 11 04 	call	0x822	; 0x822 <mcp_2515_read>
	uint8_t mask = 0b11100000;
	id_low = (id_low & mask);
	received_message->id = 0b1000*id_high + id_low/0b100000;
     69e:	20 2f       	mov	r18, r16
     6a0:	30 e0       	ldi	r19, 0x00	; 0
     6a2:	22 0f       	add	r18, r18
     6a4:	33 1f       	adc	r19, r19
     6a6:	22 0f       	add	r18, r18
     6a8:	33 1f       	adc	r19, r19
     6aa:	22 0f       	add	r18, r18
     6ac:	33 1f       	adc	r19, r19
     6ae:	82 95       	swap	r24
     6b0:	86 95       	lsr	r24
     6b2:	87 70       	andi	r24, 0x07	; 7
     6b4:	28 0f       	add	r18, r24
     6b6:	31 1d       	adc	r19, r1
     6b8:	39 83       	std	Y+1, r19	; 0x01
     6ba:	28 83       	st	Y, r18
	
	uint8_t data_length = mcp_2515_read(MCP_RXB0DLC + 16 * rec_buff_num);
     6bc:	85 e6       	ldi	r24, 0x65	; 101
     6be:	81 0f       	add	r24, r17
     6c0:	0e 94 11 04 	call	0x822	; 0x822 <mcp_2515_read>
	mask = 0b1111;
	received_message->length = (data_length & mask);
     6c4:	98 2f       	mov	r25, r24
     6c6:	9f 70       	andi	r25, 0x0F	; 15
     6c8:	9a 83       	std	Y+2, r25	; 0x02
	
	for (uint8_t byte = 0; byte < data_length; byte++) {
     6ca:	88 23       	and	r24, r24
     6cc:	59 f0       	breq	.+22     	; 0x6e4 <can_message_receive+0x68>
     6ce:	1a 59       	subi	r17, 0x9A	; 154
     6d0:	23 96       	adiw	r28, 0x03	; 3
     6d2:	08 2f       	mov	r16, r24
     6d4:	01 0f       	add	r16, r17
		received_message->data[byte] = mcp_2515_read(MCP_RXB0DM + byte + 16 * rec_buff_num);
     6d6:	81 2f       	mov	r24, r17
     6d8:	0e 94 11 04 	call	0x822	; 0x822 <mcp_2515_read>
     6dc:	89 93       	st	Y+, r24
     6de:	1f 5f       	subi	r17, 0xFF	; 255
	
	uint8_t data_length = mcp_2515_read(MCP_RXB0DLC + 16 * rec_buff_num);
	mask = 0b1111;
	received_message->length = (data_length & mask);
	
	for (uint8_t byte = 0; byte < data_length; byte++) {
     6e0:	10 13       	cpse	r17, r16
     6e2:	f9 cf       	rjmp	.-14     	; 0x6d6 <can_message_receive+0x5a>
		received_message->data[byte] = mcp_2515_read(MCP_RXB0DM + byte + 16 * rec_buff_num);
	}
	
}
     6e4:	df 91       	pop	r29
     6e6:	cf 91       	pop	r28
     6e8:	1f 91       	pop	r17
     6ea:	0f 91       	pop	r16
     6ec:	08 95       	ret

000006ee <can_int_vect>:

void can_int_vect(int* v) { 
     6ee:	cf 93       	push	r28
     6f0:	df 93       	push	r29
     6f2:	ec 01       	movw	r28, r24
	uint8_t int_flag = mcp_2515_read(MCP_CANINTF);
     6f4:	8c e2       	ldi	r24, 0x2C	; 44
     6f6:	0e 94 11 04 	call	0x822	; 0x822 <mcp_2515_read>
	v[0] = (int_flag & MCP_RX0IF);
     6fa:	98 2f       	mov	r25, r24
     6fc:	91 70       	andi	r25, 0x01	; 1
     6fe:	98 83       	st	Y, r25
     700:	19 82       	std	Y+1, r1	; 0x01
	v[1] = (int_flag & MCP_RX1IF);
     702:	82 70       	andi	r24, 0x02	; 2
     704:	90 e0       	ldi	r25, 0x00	; 0
     706:	9b 83       	std	Y+3, r25	; 0x03
     708:	8a 83       	std	Y+2, r24	; 0x02
}
     70a:	df 91       	pop	r29
     70c:	cf 91       	pop	r28
     70e:	08 95       	ret

00000710 <can_handle_messages>:
		return 1;
	}
	return 0;
}

can_message can_handle_messages(){
     710:	0f 93       	push	r16
     712:	1f 93       	push	r17
     714:	cf 93       	push	r28
     716:	df 93       	push	r29
     718:	cd b7       	in	r28, 0x3d	; 61
     71a:	de b7       	in	r29, 0x3e	; 62
     71c:	68 97       	sbiw	r28, 0x18	; 24
     71e:	0f b6       	in	r0, 0x3f	; 63
     720:	f8 94       	cli
     722:	de bf       	out	0x3e, r29	; 62
     724:	0f be       	out	0x3f, r0	; 63
     726:	cd bf       	out	0x3d, r28	; 61
     728:	8c 01       	movw	r16, r24
	uint8_t v[2] = {0};
     72a:	1a 82       	std	Y+2, r1	; 0x02
     72c:	19 82       	std	Y+1, r1	; 0x01

	can_int_vect(v);
     72e:	ce 01       	movw	r24, r28
     730:	01 96       	adiw	r24, 0x01	; 1
     732:	0e 94 77 03 	call	0x6ee	; 0x6ee <can_int_vect>

	can_message message1;
	if (v[0]){
     736:	89 81       	ldd	r24, Y+1	; 0x01
     738:	88 23       	and	r24, r24
     73a:	29 f1       	breq	.+74     	; 0x786 <can_handle_messages+0x76>
		can_message_receive(0, &message1);
     73c:	be 01       	movw	r22, r28
     73e:	6d 5f       	subi	r22, 0xFD	; 253
     740:	7f 4f       	sbci	r23, 0xFF	; 255
     742:	80 e0       	ldi	r24, 0x00	; 0
     744:	90 e0       	ldi	r25, 0x00	; 0
     746:	0e 94 3e 03 	call	0x67c	; 0x67c <can_message_receive>
		//mcp_2515_write(MCP_CANINTF,0);
		mcp_2515_bit_modify(MCP_CANINTF, 1, 0);
     74a:	40 e0       	ldi	r20, 0x00	; 0
     74c:	61 e0       	ldi	r22, 0x01	; 1
     74e:	8c e2       	ldi	r24, 0x2C	; 44
     750:	0e 94 7f 04 	call	0x8fe	; 0x8fe <mcp_2515_bit_modify>
		mcp_2515_bit_modify(MCP_CANINTF, 1, 0);
     754:	40 e0       	ldi	r20, 0x00	; 0
     756:	61 e0       	ldi	r22, 0x01	; 1
     758:	8c e2       	ldi	r24, 0x2C	; 44
     75a:	0e 94 7f 04 	call	0x8fe	; 0x8fe <mcp_2515_bit_modify>
		can_int_vect(v);
     75e:	ce 01       	movw	r24, r28
     760:	01 96       	adiw	r24, 0x01	; 1
     762:	0e 94 77 03 	call	0x6ee	; 0x6ee <can_int_vect>
		if (!v[1]){
     766:	8a 81       	ldd	r24, Y+2	; 0x02
     768:	81 11       	cpse	r24, r1
     76a:	04 c0       	rjmp	.+8      	; 0x774 <can_handle_messages+0x64>
			flag = 0;
     76c:	10 92 eb 03 	sts	0x03EB, r1
     770:	10 92 ea 03 	sts	0x03EA, r1
		}
		return message1;
     774:	8b e0       	ldi	r24, 0x0B	; 11
     776:	fe 01       	movw	r30, r28
     778:	33 96       	adiw	r30, 0x03	; 3
     77a:	d8 01       	movw	r26, r16
     77c:	01 90       	ld	r0, Z+
     77e:	0d 92       	st	X+, r0
     780:	8a 95       	dec	r24
     782:	e1 f7       	brne	.-8      	; 0x77c <can_handle_messages+0x6c>
     784:	30 c0       	rjmp	.+96     	; 0x7e6 <can_handle_messages+0xd6>
	}
	
	can_message message2;
	
	if (v[1]){
     786:	8a 81       	ldd	r24, Y+2	; 0x02
     788:	88 23       	and	r24, r24
     78a:	29 f1       	breq	.+74     	; 0x7d6 <can_handle_messages+0xc6>
		can_message_receive(1, &message2);
     78c:	be 01       	movw	r22, r28
     78e:	62 5f       	subi	r22, 0xF2	; 242
     790:	7f 4f       	sbci	r23, 0xFF	; 255
     792:	81 e0       	ldi	r24, 0x01	; 1
     794:	90 e0       	ldi	r25, 0x00	; 0
     796:	0e 94 3e 03 	call	0x67c	; 0x67c <can_message_receive>
		//mcp_2515_write(MCP_CANINTF,0);
		mcp_2515_bit_modify(MCP_CANINTF, 2, 0);
     79a:	40 e0       	ldi	r20, 0x00	; 0
     79c:	62 e0       	ldi	r22, 0x02	; 2
     79e:	8c e2       	ldi	r24, 0x2C	; 44
     7a0:	0e 94 7f 04 	call	0x8fe	; 0x8fe <mcp_2515_bit_modify>
		mcp_2515_bit_modify(MCP_CANINTF, 2, 0);
     7a4:	40 e0       	ldi	r20, 0x00	; 0
     7a6:	62 e0       	ldi	r22, 0x02	; 2
     7a8:	8c e2       	ldi	r24, 0x2C	; 44
     7aa:	0e 94 7f 04 	call	0x8fe	; 0x8fe <mcp_2515_bit_modify>
		can_int_vect(v);
     7ae:	ce 01       	movw	r24, r28
     7b0:	01 96       	adiw	r24, 0x01	; 1
     7b2:	0e 94 77 03 	call	0x6ee	; 0x6ee <can_int_vect>
		if (!v[0]){
     7b6:	89 81       	ldd	r24, Y+1	; 0x01
     7b8:	81 11       	cpse	r24, r1
     7ba:	04 c0       	rjmp	.+8      	; 0x7c4 <can_handle_messages+0xb4>
			flag = 0;
     7bc:	10 92 eb 03 	sts	0x03EB, r1
     7c0:	10 92 ea 03 	sts	0x03EA, r1
		}
		return message2;
     7c4:	8b e0       	ldi	r24, 0x0B	; 11
     7c6:	fe 01       	movw	r30, r28
     7c8:	3e 96       	adiw	r30, 0x0e	; 14
     7ca:	d8 01       	movw	r26, r16
     7cc:	01 90       	ld	r0, Z+
     7ce:	0d 92       	st	X+, r0
     7d0:	8a 95       	dec	r24
     7d2:	e1 f7       	brne	.-8      	; 0x7cc <can_handle_messages+0xbc>
     7d4:	08 c0       	rjmp	.+16     	; 0x7e6 <can_handle_messages+0xd6>
	}
	
	return message1;
     7d6:	8b e0       	ldi	r24, 0x0B	; 11
     7d8:	fe 01       	movw	r30, r28
     7da:	33 96       	adiw	r30, 0x03	; 3
     7dc:	d8 01       	movw	r26, r16
     7de:	01 90       	ld	r0, Z+
     7e0:	0d 92       	st	X+, r0
     7e2:	8a 95       	dec	r24
     7e4:	e1 f7       	brne	.-8      	; 0x7de <can_handle_messages+0xce>
}
     7e6:	c8 01       	movw	r24, r16
     7e8:	68 96       	adiw	r28, 0x18	; 24
     7ea:	0f b6       	in	r0, 0x3f	; 63
     7ec:	f8 94       	cli
     7ee:	de bf       	out	0x3e, r29	; 62
     7f0:	0f be       	out	0x3f, r0	; 63
     7f2:	cd bf       	out	0x3d, r28	; 61
     7f4:	df 91       	pop	r29
     7f6:	cf 91       	pop	r28
     7f8:	1f 91       	pop	r17
     7fa:	0f 91       	pop	r16
     7fc:	08 95       	ret

000007fe <activate_slave>:
#include <avr/io.h>
#include <avr/delay.h>

void activate_slave(){
	/* Activate Slave Select */
	clear_bit(PORTB, PB4);
     7fe:	c4 98       	cbi	0x18, 4	; 24
     800:	08 95       	ret

00000802 <deactivate_slave>:
}

void deactivate_slave(){
	/* Deactivate Slave Select */
	set_bit(PORTB, PB4);
     802:	c4 9a       	sbi	0x18, 4	; 24
     804:	08 95       	ret

00000806 <mcp_2515_reset>:
	
	return 0;
}

void mcp_2515_reset(){
	activate_slave();
     806:	0e 94 ff 03 	call	0x7fe	; 0x7fe <activate_slave>
	SPI_write(MCP_RESET);
     80a:	80 ec       	ldi	r24, 0xC0	; 192
     80c:	0e 94 48 0b 	call	0x1690	; 0x1690 <SPI_write>
	deactivate_slave();
     810:	0e 94 01 04 	call	0x802	; 0x802 <deactivate_slave>
     814:	83 ec       	ldi	r24, 0xC3	; 195
     816:	99 e0       	ldi	r25, 0x09	; 9
     818:	01 97       	sbiw	r24, 0x01	; 1
     81a:	f1 f7       	brne	.-4      	; 0x818 <mcp_2515_reset+0x12>
     81c:	00 c0       	rjmp	.+0      	; 0x81e <mcp_2515_reset+0x18>
     81e:	00 00       	nop
     820:	08 95       	ret

00000822 <mcp_2515_read>:
	_delay_ms(10);	//a small delay after mcp reset
}

uint8_t mcp_2515_read(uint8_t address){
     822:	cf 93       	push	r28
     824:	c8 2f       	mov	r28, r24
	activate_slave();
     826:	0e 94 ff 03 	call	0x7fe	; 0x7fe <activate_slave>
	
	uint8_t data;
	
	SPI_write(MCP_READ);
     82a:	83 e0       	ldi	r24, 0x03	; 3
     82c:	0e 94 48 0b 	call	0x1690	; 0x1690 <SPI_write>
	SPI_write(address);
     830:	8c 2f       	mov	r24, r28
     832:	0e 94 48 0b 	call	0x1690	; 0x1690 <SPI_write>
	data = SPI_read();
     836:	0e 94 4c 0b 	call	0x1698	; 0x1698 <SPI_read>
     83a:	c8 2f       	mov	r28, r24
	
	deactivate_slave();
     83c:	0e 94 01 04 	call	0x802	; 0x802 <deactivate_slave>
	
	return data;
}
     840:	8c 2f       	mov	r24, r28
     842:	cf 91       	pop	r28
     844:	08 95       	ret

00000846 <mcp_2515_write>:


void mcp_2515_write(uint8_t address, uint8_t data) {
     846:	cf 93       	push	r28
     848:	df 93       	push	r29
     84a:	d8 2f       	mov	r29, r24
     84c:	c6 2f       	mov	r28, r22
	activate_slave();
     84e:	0e 94 ff 03 	call	0x7fe	; 0x7fe <activate_slave>
	
	SPI_write(MCP_WRITE);
     852:	82 e0       	ldi	r24, 0x02	; 2
     854:	0e 94 48 0b 	call	0x1690	; 0x1690 <SPI_write>
	SPI_write(address);
     858:	8d 2f       	mov	r24, r29
     85a:	0e 94 48 0b 	call	0x1690	; 0x1690 <SPI_write>
	SPI_write(data);
     85e:	8c 2f       	mov	r24, r28
     860:	0e 94 48 0b 	call	0x1690	; 0x1690 <SPI_write>
	
	deactivate_slave();
     864:	0e 94 01 04 	call	0x802	; 0x802 <deactivate_slave>
}
     868:	df 91       	pop	r29
     86a:	cf 91       	pop	r28
     86c:	08 95       	ret

0000086e <mcp_2515_set_mode>:
	/* Deactivate Slave Select */
	set_bit(PORTB, PB4);
}

void mcp_2515_set_mode(uint8_t mode){
	mcp_2515_write(MCP_CANCTRL, mode);
     86e:	68 2f       	mov	r22, r24
     870:	8f e0       	ldi	r24, 0x0F	; 15
     872:	0e 94 23 04 	call	0x846	; 0x846 <mcp_2515_write>
     876:	08 95       	ret

00000878 <mcp_2515_init>:
}

uint8_t mcp_2515_init(uint8_t mode){
     878:	cf 93       	push	r28
     87a:	c8 2f       	mov	r28, r24
	
	uint8_t val;
	SPI_init();
     87c:	0e 94 42 0b 	call	0x1684	; 0x1684 <SPI_init>
	
	mcp_2515_reset();
     880:	0e 94 03 04 	call	0x806	; 0x806 <mcp_2515_reset>
	
	val = mcp_2515_read(MCP_CANSTAT);
     884:	8e e0       	ldi	r24, 0x0E	; 14
     886:	0e 94 11 04 	call	0x822	; 0x822 <mcp_2515_read>
	//printf("val : %d ",val);
	uint8_t mode_bits = (val & MODE_MASK);
     88a:	80 7e       	andi	r24, 0xE0	; 224
	if(mode_bits != MODE_CONFIG){
     88c:	80 38       	cpi	r24, 0x80	; 128
     88e:	71 f0       	breq	.+28     	; 0x8ac <mcp_2515_init+0x34>
		printf("MCP2515 is NOT in Configuration mode after reset! Its config bits are %x\n", mode_bits);
     890:	1f 92       	push	r1
     892:	8f 93       	push	r24
     894:	83 e9       	ldi	r24, 0x93	; 147
     896:	92 e0       	ldi	r25, 0x02	; 2
     898:	9f 93       	push	r25
     89a:	8f 93       	push	r24
     89c:	0e 94 eb 0c 	call	0x19d6	; 0x19d6 <printf>
		return 1;
     8a0:	0f 90       	pop	r0
     8a2:	0f 90       	pop	r0
     8a4:	0f 90       	pop	r0
     8a6:	0f 90       	pop	r0
     8a8:	81 e0       	ldi	r24, 0x01	; 1
     8aa:	1c c0       	rjmp	.+56     	; 0x8e4 <mcp_2515_init+0x6c>
	}
	
	mcp_2515_set_mode(mode);
     8ac:	8c 2f       	mov	r24, r28
     8ae:	0e 94 37 04 	call	0x86e	; 0x86e <mcp_2515_set_mode>
	
	val = mcp_2515_read(MCP_CANSTAT);
     8b2:	8e e0       	ldi	r24, 0x0E	; 14
     8b4:	0e 94 11 04 	call	0x822	; 0x822 <mcp_2515_read>
	//printf("val : %d  and  MCP %d   AND MASK %d",val, MCP_CANSTAT, MODE_MASK);
	mode_bits = (val & MODE_MASK);
     8b8:	80 7e       	andi	r24, 0xE0	; 224
	
	if(mode_bits != mode){
     8ba:	8c 17       	cp	r24, r28
     8bc:	91 f0       	breq	.+36     	; 0x8e2 <mcp_2515_init+0x6a>
		
		printf("MCP2515 is NOT in correct mode after reset! Its config bits are %x\n", mode_bits);
     8be:	1f 92       	push	r1
     8c0:	8f 93       	push	r24
     8c2:	8d ed       	ldi	r24, 0xDD	; 221
     8c4:	92 e0       	ldi	r25, 0x02	; 2
     8c6:	9f 93       	push	r25
     8c8:	8f 93       	push	r24
     8ca:	0e 94 eb 0c 	call	0x19d6	; 0x19d6 <printf>
		printf("\n!\n");
     8ce:	81 e2       	ldi	r24, 0x21	; 33
     8d0:	93 e0       	ldi	r25, 0x03	; 3
     8d2:	0e 94 ff 0c 	call	0x19fe	; 0x19fe <puts>
		return 1;
     8d6:	0f 90       	pop	r0
     8d8:	0f 90       	pop	r0
     8da:	0f 90       	pop	r0
     8dc:	0f 90       	pop	r0
     8de:	81 e0       	ldi	r24, 0x01	; 1
     8e0:	01 c0       	rjmp	.+2      	; 0x8e4 <mcp_2515_init+0x6c>
	}
	
	
	return 0;
     8e2:	80 e0       	ldi	r24, 0x00	; 0
}
     8e4:	cf 91       	pop	r28
     8e6:	08 95       	ret

000008e8 <mcp_2515_request_to_send>:
	SPI_write(data);
	
	deactivate_slave();
}

void mcp_2515_request_to_send(char buffer) {
     8e8:	cf 93       	push	r28
     8ea:	c8 2f       	mov	r28, r24
	activate_slave();
     8ec:	0e 94 ff 03 	call	0x7fe	; 0x7fe <activate_slave>
	
	SPI_write(buffer);
     8f0:	8c 2f       	mov	r24, r28
     8f2:	0e 94 48 0b 	call	0x1690	; 0x1690 <SPI_write>
	
	deactivate_slave();
     8f6:	0e 94 01 04 	call	0x802	; 0x802 <deactivate_slave>
}
     8fa:	cf 91       	pop	r28
     8fc:	08 95       	ret

000008fe <mcp_2515_bit_modify>:

void mcp_2515_bit_modify(uint8_t adress, uint8_t mask, uint8_t data) {
     8fe:	1f 93       	push	r17
     900:	cf 93       	push	r28
     902:	df 93       	push	r29
     904:	18 2f       	mov	r17, r24
     906:	d6 2f       	mov	r29, r22
     908:	c4 2f       	mov	r28, r20
	activate_slave();
     90a:	0e 94 ff 03 	call	0x7fe	; 0x7fe <activate_slave>
	
	SPI_write(MCP_BITMOD);
     90e:	85 e0       	ldi	r24, 0x05	; 5
     910:	0e 94 48 0b 	call	0x1690	; 0x1690 <SPI_write>
	SPI_write(adress);
     914:	81 2f       	mov	r24, r17
     916:	0e 94 48 0b 	call	0x1690	; 0x1690 <SPI_write>
	SPI_write(mask);
     91a:	8d 2f       	mov	r24, r29
     91c:	0e 94 48 0b 	call	0x1690	; 0x1690 <SPI_write>
	SPI_write(data);
     920:	8c 2f       	mov	r24, r28
     922:	0e 94 48 0b 	call	0x1690	; 0x1690 <SPI_write>
	
	deactivate_slave();
     926:	0e 94 01 04 	call	0x802	; 0x802 <deactivate_slave>
}
     92a:	df 91       	pop	r29
     92c:	cf 91       	pop	r28
     92e:	1f 91       	pop	r17
     930:	08 95       	ret

00000932 <My_serial_Transmit>:
}

void My_serial_Transmit( unsigned char data )
{
	/* Wait for empty transmit buffer */
	while ( !( UCSR0A & (1<<UDRE0)) )
     932:	5d 9b       	sbis	0x0b, 5	; 11
     934:	fe cf       	rjmp	.-4      	; 0x932 <My_serial_Transmit>
	;
	/* Put data into buffer, sends the data */
	UDR0 = data;
     936:	8c b9       	out	0x0c, r24	; 12
     938:	08 95       	ret

0000093a <My_serial_Receive>:
}

unsigned char My_serial_Receive( void )
{
	/* Wait for data to be received */
	while ( !(UCSR0A & (1<<RXC0)) );
     93a:	5f 9b       	sbis	0x0b, 7	; 11
     93c:	fe cf       	rjmp	.-4      	; 0x93a <My_serial_Receive>
	/* Get and return received data from buffer */
	return UDR0;
     93e:	8c b1       	in	r24, 0x0c	; 12
     940:	08 95       	ret

00000942 <My_serial_Init>:
#include "DriverATmega162.h"

void My_serial_Init( unsigned int ubrr )
{
	
	MCUCR |= (1 << SRE);
     942:	25 b7       	in	r18, 0x35	; 53
     944:	20 68       	ori	r18, 0x80	; 128
     946:	25 bf       	out	0x35, r18	; 53
	SFIOR |= (1 << XMM2);
     948:	20 b7       	in	r18, 0x30	; 48
     94a:	20 62       	ori	r18, 0x20	; 32
     94c:	20 bf       	out	0x30, r18	; 48
	
	/* Set baud rate */
	UBRR0H = (unsigned char)(ubrr>>8);
     94e:	90 bd       	out	0x20, r25	; 32
	UBRR0L = (unsigned char)ubrr;
     950:	89 b9       	out	0x09, r24	; 9
	/* Enable receiver and transmitter */
	UCSR0B = (1<<RXEN0)|(1<<TXEN0);
     952:	88 e1       	ldi	r24, 0x18	; 24
     954:	8a b9       	out	0x0a, r24	; 10
	/* Set frame format: 8data, 2stop bit */
	UCSR0C = (1<<URSEL0)|(1<<USBS0)|(3<<UCSZ00);
     956:	8e e8       	ldi	r24, 0x8E	; 142
     958:	80 bd       	out	0x20, r24	; 32
	
	fdevopen(My_serial_Transmit, My_serial_Receive);
     95a:	6d e9       	ldi	r22, 0x9D	; 157
     95c:	74 e0       	ldi	r23, 0x04	; 4
     95e:	89 e9       	ldi	r24, 0x99	; 153
     960:	94 e0       	ldi	r25, 0x04	; 4
     962:	0e 94 a0 0c 	call	0x1940	; 0x1940 <fdevopen>
     966:	08 95       	ret

00000968 <sendInfo>:
#include "GameInfo.h"
gamevars game = {.enemypoints = 0,.mypoints=0};
can_message newmessage;
int sendinfoFlag =0;

void sendInfo(menu_option lastOption){
     968:	ff 92       	push	r15
     96a:	0f 93       	push	r16
     96c:	1f 93       	push	r17
     96e:	cf 93       	push	r28
     970:	df 93       	push	r29
     972:	cd b7       	in	r28, 0x3d	; 61
     974:	de b7       	in	r29, 0x3e	; 62
     976:	60 97       	sbiw	r28, 0x10	; 16
     978:	0f b6       	in	r0, 0x3f	; 63
     97a:	f8 94       	cli
     97c:	de bf       	out	0x3e, r29	; 62
     97e:	0f be       	out	0x3f, r0	; 63
     980:	cd bf       	out	0x3d, r28	; 61
     982:	18 2f       	mov	r17, r24
	sendinfoFlag++;
     984:	20 91 ec 03 	lds	r18, 0x03EC
     988:	30 91 ed 03 	lds	r19, 0x03ED
     98c:	2f 5f       	subi	r18, 0xFF	; 255
     98e:	3f 4f       	sbci	r19, 0xFF	; 255
     990:	30 93 ed 03 	sts	0x03ED, r19
     994:	20 93 ec 03 	sts	0x03EC, r18
	if(sendinfoFlag> 1){
     998:	22 30       	cpi	r18, 0x02	; 2
     99a:	31 05       	cpc	r19, r1
     99c:	14 f1       	brlt	.+68     	; 0x9e2 <sendInfo+0x7a>
		slider_str slider = slider_position();
     99e:	0e 94 1f 0b 	call	0x163e	; 0x163e <slider_position>
     9a2:	f8 2e       	mov	r15, r24
     9a4:	09 2f       	mov	r16, r25
		
		Joystick minJoystick = joystickPos();
     9a6:	0e 94 b1 05 	call	0xb62	; 0xb62 <joystickPos>
     9aa:	68 8b       	std	Y+16, r22	; 0x10
		
		can_message canMessage;
		canMessage.data[0] = slider.L;
     9ac:	fc 82       	std	Y+4, r15	; 0x04
		canMessage.data[1] = slider.R;
     9ae:	0d 83       	std	Y+5, r16	; 0x05
		canMessage.data[2] = slider_left_button();
     9b0:	0e 94 3c 0b 	call	0x1678	; 0x1678 <slider_left_button>
     9b4:	8e 83       	std	Y+6, r24	; 0x06
		canMessage.data[3] = slider_right_button();
     9b6:	0e 94 37 0b 	call	0x166e	; 0x166e <slider_right_button>
     9ba:	8f 83       	std	Y+7, r24	; 0x07
		canMessage.data[4] = lastOption;
     9bc:	18 87       	std	Y+8, r17	; 0x08
		if(minJoystick.Dir == LEFT){
     9be:	88 89       	ldd	r24, Y+16	; 0x10
     9c0:	81 11       	cpse	r24, r1
     9c2:	05 c0       	rjmp	.+10     	; 0x9ce <sendInfo+0x66>
			canMessage.data[5] = 'R';
     9c4:	82 e5       	ldi	r24, 0x52	; 82
     9c6:	89 87       	std	Y+9, r24	; 0x09
			canMessage.length = 6;
     9c8:	86 e0       	ldi	r24, 0x06	; 6
     9ca:	8b 83       	std	Y+3, r24	; 0x03
     9cc:	02 c0       	rjmp	.+4      	; 0x9d2 <sendInfo+0x6a>
		}
		else
		{
			canMessage.length = 5;
     9ce:	85 e0       	ldi	r24, 0x05	; 5
     9d0:	8b 83       	std	Y+3, r24	; 0x03
		
		//canMessage.data[3] = map(IOBORDBUTTONR,-100,100,0,200);
		//canMessage.data[4] = map(minJoystick.xPos,-100,100,0,200);
		
		
		can_message_send(&canMessage);
     9d2:	ce 01       	movw	r24, r28
     9d4:	01 96       	adiw	r24, 0x01	; 1
     9d6:	0e 94 d5 02 	call	0x5aa	; 0x5aa <can_message_send>
		sendinfoFlag = 0;
     9da:	10 92 ed 03 	sts	0x03ED, r1
     9de:	10 92 ec 03 	sts	0x03EC, r1
	}
	
	
}
     9e2:	60 96       	adiw	r28, 0x10	; 16
     9e4:	0f b6       	in	r0, 0x3f	; 63
     9e6:	f8 94       	cli
     9e8:	de bf       	out	0x3e, r29	; 62
     9ea:	0f be       	out	0x3f, r0	; 63
     9ec:	cd bf       	out	0x3d, r28	; 61
     9ee:	df 91       	pop	r29
     9f0:	cf 91       	pop	r28
     9f2:	1f 91       	pop	r17
     9f4:	0f 91       	pop	r16
     9f6:	ff 90       	pop	r15
     9f8:	08 95       	ret

000009fa <getInfo>:
gamevars getInfo(){
     9fa:	cf 93       	push	r28
     9fc:	df 93       	push	r29
     9fe:	cd b7       	in	r28, 0x3d	; 61
     a00:	de b7       	in	r29, 0x3e	; 62
     a02:	2b 97       	sbiw	r28, 0x0b	; 11
     a04:	0f b6       	in	r0, 0x3f	; 63
     a06:	f8 94       	cli
     a08:	de bf       	out	0x3e, r29	; 62
     a0a:	0f be       	out	0x3f, r0	; 63
     a0c:	cd bf       	out	0x3d, r28	; 61
	if(can_interrupt()){
     a0e:	0e 94 ad 02 	call	0x55a	; 0x55a <can_interrupt>
     a12:	88 23       	and	r24, r24
     a14:	d9 f0       	breq	.+54     	; 0xa4c <getInfo+0x52>
		newmessage = can_handle_messages();
     a16:	ce 01       	movw	r24, r28
     a18:	01 96       	adiw	r24, 0x01	; 1
     a1a:	0e 94 88 03 	call	0x710	; 0x710 <can_handle_messages>
     a1e:	8b e0       	ldi	r24, 0x0B	; 11
     a20:	fe 01       	movw	r30, r28
     a22:	31 96       	adiw	r30, 0x01	; 1
     a24:	a9 ef       	ldi	r26, 0xF9	; 249
     a26:	b3 e0       	ldi	r27, 0x03	; 3
     a28:	01 90       	ld	r0, Z+
     a2a:	0d 92       	st	X+, r0
     a2c:	8a 95       	dec	r24
     a2e:	e1 f7       	brne	.-8      	; 0xa28 <getInfo+0x2e>
		game.enemypoints = newmessage.data[0];
     a30:	80 91 fc 03 	lds	r24, 0x03FC
     a34:	90 e0       	ldi	r25, 0x00	; 0
     a36:	90 93 f1 03 	sts	0x03F1, r25
     a3a:	80 93 f0 03 	sts	0x03F0, r24
		game.mypoints = newmessage.data[1];
     a3e:	80 91 fd 03 	lds	r24, 0x03FD
     a42:	90 e0       	ldi	r25, 0x00	; 0
     a44:	90 93 ef 03 	sts	0x03EF, r25
     a48:	80 93 ee 03 	sts	0x03EE, r24
		}
	printf("ENEMYPOINTS    %d  ",game.enemypoints);
     a4c:	e0 ef       	ldi	r30, 0xF0	; 240
     a4e:	f3 e0       	ldi	r31, 0x03	; 3
     a50:	81 81       	ldd	r24, Z+1	; 0x01
     a52:	8f 93       	push	r24
     a54:	80 81       	ld	r24, Z
     a56:	8f 93       	push	r24
     a58:	84 e2       	ldi	r24, 0x24	; 36
     a5a:	93 e0       	ldi	r25, 0x03	; 3
     a5c:	9f 93       	push	r25
     a5e:	8f 93       	push	r24
     a60:	0e 94 eb 0c 	call	0x19d6	; 0x19d6 <printf>
	printf("MY POINTS    %d \r\n",game.mypoints);
     a64:	ee ee       	ldi	r30, 0xEE	; 238
     a66:	f3 e0       	ldi	r31, 0x03	; 3
     a68:	81 81       	ldd	r24, Z+1	; 0x01
     a6a:	8f 93       	push	r24
     a6c:	80 81       	ld	r24, Z
     a6e:	8f 93       	push	r24
     a70:	88 e3       	ldi	r24, 0x38	; 56
     a72:	93 e0       	ldi	r25, 0x03	; 3
     a74:	9f 93       	push	r25
     a76:	8f 93       	push	r24
     a78:	0e 94 eb 0c 	call	0x19d6	; 0x19d6 <printf>
	
	return game;
     a7c:	60 91 ee 03 	lds	r22, 0x03EE
     a80:	70 91 ef 03 	lds	r23, 0x03EF
     a84:	80 91 f0 03 	lds	r24, 0x03F0
     a88:	90 91 f1 03 	lds	r25, 0x03F1
     a8c:	0f b6       	in	r0, 0x3f	; 63
     a8e:	f8 94       	cli
     a90:	de bf       	out	0x3e, r29	; 62
     a92:	0f be       	out	0x3f, r0	; 63
     a94:	cd bf       	out	0x3d, r28	; 61
     a96:	2b 96       	adiw	r28, 0x0b	; 11
     a98:	0f b6       	in	r0, 0x3f	; 63
     a9a:	f8 94       	cli
     a9c:	de bf       	out	0x3e, r29	; 62
     a9e:	0f be       	out	0x3f, r0	; 63
     aa0:	cd bf       	out	0x3d, r28	; 61
     aa2:	df 91       	pop	r29
     aa4:	cf 91       	pop	r28
     aa6:	08 95       	ret

00000aa8 <Joystick_calibrate>:

uint8_t center_x , center_y;

void Joystick_calibrate(void){
	
	ADC_start_read(CHANNEL1);
     aa8:	80 e0       	ldi	r24, 0x00	; 0
     aaa:	0e 94 fe 01 	call	0x3fc	; 0x3fc <ADC_start_read>
	#else
		//round up by default
		__ticks_dc = (uint32_t)(ceil(fabs(__tmp)));
	#endif

	__builtin_avr_delay_cycles(__ticks_dc);
     aae:	82 e4       	ldi	r24, 0x42	; 66
     ab0:	8a 95       	dec	r24
     ab2:	f1 f7       	brne	.-4      	; 0xab0 <Joystick_calibrate+0x8>
     ab4:	00 c0       	rjmp	.+0      	; 0xab6 <Joystick_calibrate+0xe>
	_delay_us(200);
	center_x = get_ADC_data();
     ab6:	0e 94 f8 01 	call	0x3f0	; 0x3f0 <get_ADC_data>
     aba:	80 93 04 04 	sts	0x0404, r24
	ADC_start_read(CHANNEL2);
     abe:	81 e0       	ldi	r24, 0x01	; 1
     ac0:	0e 94 fe 01 	call	0x3fc	; 0x3fc <ADC_start_read>
     ac4:	82 e4       	ldi	r24, 0x42	; 66
     ac6:	8a 95       	dec	r24
     ac8:	f1 f7       	brne	.-4      	; 0xac6 <Joystick_calibrate+0x1e>
     aca:	00 c0       	rjmp	.+0      	; 0xacc <Joystick_calibrate+0x24>
	_delay_us(200);
	center_y = get_ADC_data();
     acc:	0e 94 f8 01 	call	0x3f0	; 0x3f0 <get_ADC_data>
     ad0:	80 93 05 04 	sts	0x0405, r24
     ad4:	08 95       	ret

00000ad6 <JoystickDirection>:
	return position; 
	
	
}

Joystick JoystickDirection(Joystick position){
     ad6:	cf 93       	push	r28
     ad8:	df 93       	push	r29
     ada:	cd b7       	in	r28, 0x3d	; 61
     adc:	de b7       	in	r29, 0x3e	; 62
     ade:	2a 97       	sbiw	r28, 0x0a	; 10
     ae0:	0f b6       	in	r0, 0x3f	; 63
     ae2:	f8 94       	cli
     ae4:	de bf       	out	0x3e, r29	; 62
     ae6:	0f be       	out	0x3f, r0	; 63
     ae8:	cd bf       	out	0x3d, r28	; 61
     aea:	4e 83       	std	Y+6, r20	; 0x06
     aec:	5f 83       	std	Y+7, r21	; 0x07
     aee:	68 87       	std	Y+8, r22	; 0x08
     af0:	79 87       	std	Y+9, r23	; 0x09
     af2:	8e 81       	ldd	r24, Y+6	; 0x06
     af4:	9f 81       	ldd	r25, Y+7	; 0x07
     af6:	28 85       	ldd	r18, Y+8	; 0x08
     af8:	39 85       	ldd	r19, Y+9	; 0x09
	position.Dir = NEUTRAL;
	if(position.xPos < -60 ){
     afa:	84 3c       	cpi	r24, 0xC4	; 196
     afc:	4f ef       	ldi	r20, 0xFF	; 255
     afe:	94 07       	cpc	r25, r20
     b00:	2c f0       	brlt	.+10     	; 0xb0c <JoystickDirection+0x36>
		position.Dir = LEFT; 
	} else if (position.xPos > 50 ){
     b02:	83 33       	cpi	r24, 0x33	; 51
     b04:	91 05       	cpc	r25, r1
     b06:	24 f4       	brge	.+8      	; 0xb10 <JoystickDirection+0x3a>
	
	
}

Joystick JoystickDirection(Joystick position){
	position.Dir = NEUTRAL;
     b08:	64 e0       	ldi	r22, 0x04	; 4
     b0a:	03 c0       	rjmp	.+6      	; 0xb12 <JoystickDirection+0x3c>
	if(position.xPos < -60 ){
		position.Dir = LEFT; 
     b0c:	60 e0       	ldi	r22, 0x00	; 0
     b0e:	01 c0       	rjmp	.+2      	; 0xb12 <JoystickDirection+0x3c>
	} else if (position.xPos > 50 ){
		position.Dir = RIGHT;
     b10:	61 e0       	ldi	r22, 0x01	; 1
	}
	if(position.yPos < -50){
     b12:	2e 3c       	cpi	r18, 0xCE	; 206
     b14:	4f ef       	ldi	r20, 0xFF	; 255
     b16:	34 07       	cpc	r19, r20
     b18:	24 f0       	brlt	.+8      	; 0xb22 <JoystickDirection+0x4c>
		position.Dir = DOWN; 
	} else if (position.yPos > 50){
     b1a:	23 33       	cpi	r18, 0x33	; 51
     b1c:	31 05       	cpc	r19, r1
     b1e:	1c f4       	brge	.+6      	; 0xb26 <JoystickDirection+0x50>
     b20:	03 c0       	rjmp	.+6      	; 0xb28 <JoystickDirection+0x52>
		position.Dir = LEFT; 
	} else if (position.xPos > 50 ){
		position.Dir = RIGHT;
	}
	if(position.yPos < -50){
		position.Dir = DOWN; 
     b22:	63 e0       	ldi	r22, 0x03	; 3
     b24:	01 c0       	rjmp	.+2      	; 0xb28 <JoystickDirection+0x52>
	} else if (position.yPos > 50){
		position.Dir = UP; 
     b26:	62 e0       	ldi	r22, 0x02	; 2
	}
	if(position.xPos == 0 && position.yPos == 0){
     b28:	00 97       	sbiw	r24, 0x00	; 0
     b2a:	21 f4       	brne	.+8      	; 0xb34 <JoystickDirection+0x5e>
     b2c:	21 15       	cp	r18, r1
     b2e:	31 05       	cpc	r19, r1
     b30:	09 f4       	brne	.+2      	; 0xb34 <JoystickDirection+0x5e>
		position.Dir = NEUTRAL; 
     b32:	64 e0       	ldi	r22, 0x04	; 4
	}
	if(position.Dir > 4){
		position.Dir = 4;
	}
	
	return position;
     b34:	9a 83       	std	Y+2, r25	; 0x02
     b36:	89 83       	std	Y+1, r24	; 0x01
     b38:	3c 83       	std	Y+4, r19	; 0x04
     b3a:	2b 83       	std	Y+3, r18	; 0x03
     b3c:	65 30       	cpi	r22, 0x05	; 5
     b3e:	08 f0       	brcs	.+2      	; 0xb42 <JoystickDirection+0x6c>
     b40:	64 e0       	ldi	r22, 0x04	; 4
     b42:	29 81       	ldd	r18, Y+1	; 0x01
     b44:	3a 81       	ldd	r19, Y+2	; 0x02
     b46:	4b 81       	ldd	r20, Y+3	; 0x03
     b48:	5c 81       	ldd	r21, Y+4	; 0x04
}
     b4a:	70 e0       	ldi	r23, 0x00	; 0
     b4c:	80 e0       	ldi	r24, 0x00	; 0
     b4e:	90 e0       	ldi	r25, 0x00	; 0
     b50:	2a 96       	adiw	r28, 0x0a	; 10
     b52:	0f b6       	in	r0, 0x3f	; 63
     b54:	f8 94       	cli
     b56:	de bf       	out	0x3e, r29	; 62
     b58:	0f be       	out	0x3f, r0	; 63
     b5a:	cd bf       	out	0x3d, r28	; 61
     b5c:	df 91       	pop	r29
     b5e:	cf 91       	pop	r28
     b60:	08 95       	ret

00000b62 <joystickPos>:
	_delay_us(200);
	center_y = get_ADC_data();
	 
}

Joystick joystickPos(void){
     b62:	0f 93       	push	r16
     b64:	1f 93       	push	r17
     b66:	cf 93       	push	r28
     b68:	df 93       	push	r29
     b6a:	cd b7       	in	r28, 0x3d	; 61
     b6c:	de b7       	in	r29, 0x3e	; 62
     b6e:	2a 97       	sbiw	r28, 0x0a	; 10
     b70:	0f b6       	in	r0, 0x3f	; 63
     b72:	f8 94       	cli
     b74:	de bf       	out	0x3e, r29	; 62
     b76:	0f be       	out	0x3f, r0	; 63
     b78:	cd bf       	out	0x3d, r28	; 61
	uint8_t x, y; 
	Joystick position;
	position.xPos = 0;
	position.yPos = 0;
	
	ADC_start_read(CHANNEL1);
     b7a:	80 e0       	ldi	r24, 0x00	; 0
     b7c:	0e 94 fe 01 	call	0x3fc	; 0x3fc <ADC_start_read>
     b80:	82 e4       	ldi	r24, 0x42	; 66
     b82:	8a 95       	dec	r24
     b84:	f1 f7       	brne	.-4      	; 0xb82 <joystickPos+0x20>
     b86:	00 c0       	rjmp	.+0      	; 0xb88 <joystickPos+0x26>
	_delay_us(200);
	x = get_ADC_data();
     b88:	0e 94 f8 01 	call	0x3f0	; 0x3f0 <get_ADC_data>
	
	if(x > center_x){
     b8c:	20 91 04 04 	lds	r18, 0x0404
     b90:	28 17       	cp	r18, r24
     b92:	a0 f4       	brcc	.+40     	; 0xbbc <joystickPos+0x5a>
		position.xPos = 100 * (x - center_x) / (0xFF - center_x);
     b94:	30 e0       	ldi	r19, 0x00	; 0
     b96:	99 27       	eor	r25, r25
     b98:	ac 01       	movw	r20, r24
     b9a:	42 1b       	sub	r20, r18
     b9c:	53 0b       	sbc	r21, r19
     b9e:	64 e6       	ldi	r22, 0x64	; 100
     ba0:	64 9f       	mul	r22, r20
     ba2:	c0 01       	movw	r24, r0
     ba4:	65 9f       	mul	r22, r21
     ba6:	90 0d       	add	r25, r0
     ba8:	11 24       	eor	r1, r1
     baa:	6f ef       	ldi	r22, 0xFF	; 255
     bac:	70 e0       	ldi	r23, 0x00	; 0
     bae:	62 1b       	sub	r22, r18
     bb0:	73 0b       	sbc	r23, r19
     bb2:	0e 94 51 0b 	call	0x16a2	; 0x16a2 <__divmodhi4>
     bb6:	16 2f       	mov	r17, r22
     bb8:	07 2f       	mov	r16, r23
     bba:	15 c0       	rjmp	.+42     	; 0xbe6 <joystickPos+0x84>
	} else if (x < center_x){
     bbc:	82 17       	cp	r24, r18
     bbe:	88 f4       	brcc	.+34     	; 0xbe2 <joystickPos+0x80>
		position.xPos = 100 * (x - center_x) / (center_x - 0);
     bc0:	62 2f       	mov	r22, r18
     bc2:	70 e0       	ldi	r23, 0x00	; 0
     bc4:	99 27       	eor	r25, r25
     bc6:	9c 01       	movw	r18, r24
     bc8:	26 1b       	sub	r18, r22
     bca:	37 0b       	sbc	r19, r23
     bcc:	44 e6       	ldi	r20, 0x64	; 100
     bce:	42 9f       	mul	r20, r18
     bd0:	c0 01       	movw	r24, r0
     bd2:	43 9f       	mul	r20, r19
     bd4:	90 0d       	add	r25, r0
     bd6:	11 24       	eor	r1, r1
     bd8:	0e 94 51 0b 	call	0x16a2	; 0x16a2 <__divmodhi4>
     bdc:	16 2f       	mov	r17, r22
     bde:	07 2f       	mov	r16, r23
     be0:	02 c0       	rjmp	.+4      	; 0xbe6 <joystickPos+0x84>
	} else {
		position.xPos = 0;
     be2:	10 e0       	ldi	r17, 0x00	; 0
     be4:	00 e0       	ldi	r16, 0x00	; 0
	}
	ADC_start_read(CHANNEL2);
     be6:	81 e0       	ldi	r24, 0x01	; 1
     be8:	0e 94 fe 01 	call	0x3fc	; 0x3fc <ADC_start_read>
     bec:	82 e4       	ldi	r24, 0x42	; 66
     bee:	8a 95       	dec	r24
     bf0:	f1 f7       	brne	.-4      	; 0xbee <joystickPos+0x8c>
     bf2:	00 c0       	rjmp	.+0      	; 0xbf4 <joystickPos+0x92>
	_delay_us(200);
	y = get_ADC_data();
     bf4:	0e 94 f8 01 	call	0x3f0	; 0x3f0 <get_ADC_data>
	if(y > center_y){
     bf8:	20 91 05 04 	lds	r18, 0x0405
     bfc:	28 17       	cp	r18, r24
     bfe:	a0 f4       	brcc	.+40     	; 0xc28 <joystickPos+0xc6>
		position.yPos = 100 * (y - center_y) / (0xFF - center_y);
     c00:	30 e0       	ldi	r19, 0x00	; 0
     c02:	99 27       	eor	r25, r25
     c04:	ac 01       	movw	r20, r24
     c06:	42 1b       	sub	r20, r18
     c08:	53 0b       	sbc	r21, r19
     c0a:	64 e6       	ldi	r22, 0x64	; 100
     c0c:	64 9f       	mul	r22, r20
     c0e:	c0 01       	movw	r24, r0
     c10:	65 9f       	mul	r22, r21
     c12:	90 0d       	add	r25, r0
     c14:	11 24       	eor	r1, r1
     c16:	4f ef       	ldi	r20, 0xFF	; 255
     c18:	50 e0       	ldi	r21, 0x00	; 0
     c1a:	ba 01       	movw	r22, r20
     c1c:	62 1b       	sub	r22, r18
     c1e:	73 0b       	sbc	r23, r19
     c20:	0e 94 51 0b 	call	0x16a2	; 0x16a2 <__divmodhi4>
     c24:	86 2f       	mov	r24, r22
     c26:	14 c0       	rjmp	.+40     	; 0xc50 <joystickPos+0xee>
		} else if (y < center_y){
     c28:	82 17       	cp	r24, r18
     c2a:	80 f4       	brcc	.+32     	; 0xc4c <joystickPos+0xea>
		position.yPos = 100 * (y - center_y) / (center_y - 0);
     c2c:	30 e0       	ldi	r19, 0x00	; 0
     c2e:	99 27       	eor	r25, r25
     c30:	ac 01       	movw	r20, r24
     c32:	42 1b       	sub	r20, r18
     c34:	53 0b       	sbc	r21, r19
     c36:	64 e6       	ldi	r22, 0x64	; 100
     c38:	64 9f       	mul	r22, r20
     c3a:	c0 01       	movw	r24, r0
     c3c:	65 9f       	mul	r22, r21
     c3e:	90 0d       	add	r25, r0
     c40:	11 24       	eor	r1, r1
     c42:	b9 01       	movw	r22, r18
     c44:	0e 94 51 0b 	call	0x16a2	; 0x16a2 <__divmodhi4>
     c48:	86 2f       	mov	r24, r22
     c4a:	02 c0       	rjmp	.+4      	; 0xc50 <joystickPos+0xee>
		} else {
		position.yPos = 0;
     c4c:	80 e0       	ldi	r24, 0x00	; 0
     c4e:	70 e0       	ldi	r23, 0x00	; 0
	}
	position = JoystickDirection(position);
     c50:	41 2f       	mov	r20, r17
     c52:	68 2f       	mov	r22, r24
     c54:	50 2f       	mov	r21, r16
     c56:	8a 85       	ldd	r24, Y+10	; 0x0a
     c58:	0e 94 6b 05 	call	0xad6	; 0xad6 <JoystickDirection>
     c5c:	2e 83       	std	Y+6, r18	; 0x06
     c5e:	3f 83       	std	Y+7, r19	; 0x07
     c60:	48 87       	std	Y+8, r20	; 0x08
     c62:	59 87       	std	Y+9, r21	; 0x09
     c64:	6a 87       	std	Y+10, r22	; 0x0a
	return position; 
     c66:	85 e0       	ldi	r24, 0x05	; 5
     c68:	fe 01       	movw	r30, r28
     c6a:	36 96       	adiw	r30, 0x06	; 6
     c6c:	de 01       	movw	r26, r28
     c6e:	11 96       	adiw	r26, 0x01	; 1
     c70:	01 90       	ld	r0, Z+
     c72:	0d 92       	st	X+, r0
     c74:	8a 95       	dec	r24
     c76:	e1 f7       	brne	.-8      	; 0xc70 <joystickPos+0x10e>
     c78:	29 81       	ldd	r18, Y+1	; 0x01
     c7a:	3a 81       	ldd	r19, Y+2	; 0x02
     c7c:	4b 81       	ldd	r20, Y+3	; 0x03
     c7e:	5c 81       	ldd	r21, Y+4	; 0x04
     c80:	6d 81       	ldd	r22, Y+5	; 0x05
	
	
}
     c82:	70 e0       	ldi	r23, 0x00	; 0
     c84:	80 e0       	ldi	r24, 0x00	; 0
     c86:	90 e0       	ldi	r25, 0x00	; 0
     c88:	2a 96       	adiw	r28, 0x0a	; 10
     c8a:	0f b6       	in	r0, 0x3f	; 63
     c8c:	f8 94       	cli
     c8e:	de bf       	out	0x3e, r29	; 62
     c90:	0f be       	out	0x3f, r0	; 63
     c92:	cd bf       	out	0x3d, r28	; 61
     c94:	df 91       	pop	r29
     c96:	cf 91       	pop	r28
     c98:	1f 91       	pop	r17
     c9a:	0f 91       	pop	r16
     c9c:	08 95       	ret

00000c9e <score>:
			highscorelistupdate(i,array);
			break;
		}
	}
}
int score(char*array){
     c9e:	fc 01       	movw	r30, r24
	int num = (int)array[3]-48;
     ca0:	23 81       	ldd	r18, Z+3	; 0x03
     ca2:	30 e0       	ldi	r19, 0x00	; 0
     ca4:	20 53       	subi	r18, 0x30	; 48
     ca6:	31 09       	sbc	r19, r1
	num *= 10;
     ca8:	c9 01       	movw	r24, r18
     caa:	88 0f       	add	r24, r24
     cac:	99 1f       	adc	r25, r25
     cae:	22 0f       	add	r18, r18
     cb0:	33 1f       	adc	r19, r19
     cb2:	22 0f       	add	r18, r18
     cb4:	33 1f       	adc	r19, r19
     cb6:	22 0f       	add	r18, r18
     cb8:	33 1f       	adc	r19, r19
     cba:	28 0f       	add	r18, r24
     cbc:	39 1f       	adc	r19, r25
	num += (int)array[4]-48;
     cbe:	84 81       	ldd	r24, Z+4	; 0x04
     cc0:	90 e0       	ldi	r25, 0x00	; 0
     cc2:	c0 97       	sbiw	r24, 0x30	; 48
	return num;
}
     cc4:	82 0f       	add	r24, r18
     cc6:	93 1f       	adc	r25, r19
     cc8:	08 95       	ret

00000cca <printgame>:
int NewHighscore = 0;
char name[3] = "AAA";
int slider;
int chosenLetters = 0;
menu_option printgame(menu_option choice,gamevars game)
{
     cca:	9f 92       	push	r9
     ccc:	af 92       	push	r10
     cce:	bf 92       	push	r11
     cd0:	cf 92       	push	r12
     cd2:	df 92       	push	r13
     cd4:	ef 92       	push	r14
     cd6:	ff 92       	push	r15
     cd8:	0f 93       	push	r16
     cda:	1f 93       	push	r17
     cdc:	cf 93       	push	r28
     cde:	df 93       	push	r29
     ce0:	00 d0       	rcall	.+0      	; 0xce2 <printgame+0x18>
     ce2:	00 d0       	rcall	.+0      	; 0xce4 <printgame+0x1a>
     ce4:	00 d0       	rcall	.+0      	; 0xce6 <printgame+0x1c>
     ce6:	cd b7       	in	r28, 0x3d	; 61
     ce8:	de b7       	in	r29, 0x3e	; 62
     cea:	98 2e       	mov	r9, r24
     cec:	7a 01       	movw	r14, r20
     cee:	8b 01       	movw	r16, r22
			//NewHighscore = 0;
		//}
		//
		//return choice;
	//}
	switch(choice){ 
     cf0:	82 e0       	ldi	r24, 0x02	; 2
     cf2:	98 16       	cp	r9, r24
     cf4:	09 f4       	brne	.+2      	; 0xcf8 <printgame+0x2e>
     cf6:	75 c0       	rjmp	.+234    	; 0xde2 <printgame+0x118>
     cf8:	93 e0       	ldi	r25, 0x03	; 3
     cfa:	99 16       	cp	r9, r25
     cfc:	09 f4       	brne	.+2      	; 0xd00 <printgame+0x36>
     cfe:	a7 c0       	rjmp	.+334    	; 0xe4e <printgame+0x184>
     d00:	81 e0       	ldi	r24, 0x01	; 1
     d02:	98 12       	cpse	r9, r24
     d04:	de c0       	rjmp	.+444    	; 0xec2 <printgame+0x1f8>
		case SinglePlayer:
			oled_reset();
     d06:	0e 94 a5 08 	call	0x114a	; 0x114a <oled_reset>
			oled_printf("Your score :");
     d0a:	8b e4       	ldi	r24, 0x4B	; 75
     d0c:	93 e0       	ldi	r25, 0x03	; 3
     d0e:	9f 93       	push	r25
     d10:	8f 93       	push	r24
     d12:	0e 94 0e 08 	call	0x101c	; 0x101c <oled_printf>
			oled_pos(1,0);
     d16:	60 e0       	ldi	r22, 0x00	; 0
     d18:	70 e0       	ldi	r23, 0x00	; 0
     d1a:	81 e0       	ldi	r24, 0x01	; 1
     d1c:	90 e0       	ldi	r25, 0x00	; 0
     d1e:	0e 94 7a 08 	call	0x10f4	; 0x10f4 <oled_pos>
			pointarray[0] = (game.mypoints%100-game.mypoints%10)/10 + '0';
     d22:	0f 2e       	mov	r0, r31
     d24:	fa e0       	ldi	r31, 0x0A	; 10
     d26:	cf 2e       	mov	r12, r31
     d28:	d1 2c       	mov	r13, r1
     d2a:	f0 2d       	mov	r31, r0
     d2c:	c7 01       	movw	r24, r14
     d2e:	b6 01       	movw	r22, r12
     d30:	0e 94 51 0b 	call	0x16a2	; 0x16a2 <__divmodhi4>
     d34:	9c 01       	movw	r18, r24
     d36:	e4 ef       	ldi	r30, 0xF4	; 244
     d38:	f3 e0       	ldi	r31, 0x03	; 3
     d3a:	c7 01       	movw	r24, r14
     d3c:	64 e6       	ldi	r22, 0x64	; 100
     d3e:	70 e0       	ldi	r23, 0x00	; 0
     d40:	0e 94 51 0b 	call	0x16a2	; 0x16a2 <__divmodhi4>
     d44:	82 1b       	sub	r24, r18
     d46:	93 0b       	sbc	r25, r19
     d48:	b6 01       	movw	r22, r12
     d4a:	0e 94 51 0b 	call	0x16a2	; 0x16a2 <__divmodhi4>
     d4e:	60 5d       	subi	r22, 0xD0	; 208
     d50:	60 83       	st	Z, r22
			pointarray[1] = game.mypoints%10 + '0';
     d52:	20 5d       	subi	r18, 0xD0	; 208
     d54:	20 93 f5 03 	sts	0x03F5, r18
			oled_printf(pointarray);
     d58:	ff 93       	push	r31
     d5a:	ef 93       	push	r30
     d5c:	0e 94 0e 08 	call	0x101c	; 0x101c <oled_printf>
			if(game.enemypoints > 0)
     d60:	0f 90       	pop	r0
     d62:	0f 90       	pop	r0
     d64:	0f 90       	pop	r0
     d66:	0f 90       	pop	r0
     d68:	10 16       	cp	r1, r16
     d6a:	11 06       	cpc	r1, r17
     d6c:	0c f0       	brlt	.+2      	; 0xd70 <printgame+0xa6>
     d6e:	a9 c0       	rjmp	.+338    	; 0xec2 <printgame+0x1f8>
			{	
				oled_pos(2,0);
     d70:	60 e0       	ldi	r22, 0x00	; 0
     d72:	70 e0       	ldi	r23, 0x00	; 0
     d74:	82 e0       	ldi	r24, 0x02	; 2
     d76:	90 e0       	ldi	r25, 0x00	; 0
     d78:	0e 94 7a 08 	call	0x10f4	; 0x10f4 <oled_pos>
				oled_printf("GAME OVER");
     d7c:	88 e5       	ldi	r24, 0x58	; 88
     d7e:	93 e0       	ldi	r25, 0x03	; 3
     d80:	9f 93       	push	r25
     d82:	8f 93       	push	r24
     d84:	0e 94 0e 08 	call	0x101c	; 0x101c <oled_printf>
				oled_pos(3,0);
     d88:	60 e0       	ldi	r22, 0x00	; 0
     d8a:	70 e0       	ldi	r23, 0x00	; 0
     d8c:	83 e0       	ldi	r24, 0x03	; 3
     d8e:	90 e0       	ldi	r25, 0x00	; 0
     d90:	0e 94 7a 08 	call	0x10f4	; 0x10f4 <oled_pos>
				if(game.mypoints > score(highscorelist[4])){
     d94:	8c e1       	ldi	r24, 0x1C	; 28
     d96:	91 e0       	ldi	r25, 0x01	; 1
     d98:	0e 94 4f 06 	call	0xc9e	; 0xc9e <score>
     d9c:	0f 90       	pop	r0
     d9e:	0f 90       	pop	r0
     da0:	8e 15       	cp	r24, r14
     da2:	9f 05       	cpc	r25, r15
     da4:	0c f0       	brlt	.+2      	; 0xda8 <printgame+0xde>
     da6:	8d c0       	rjmp	.+282    	; 0xec2 <printgame+0x1f8>
					oled_printf("NEW HIGHSCORE!!");
     da8:	82 e6       	ldi	r24, 0x62	; 98
     daa:	93 e0       	ldi	r25, 0x03	; 3
     dac:	9f 93       	push	r25
     dae:	8f 93       	push	r24
     db0:	0e 94 0e 08 	call	0x101c	; 0x101c <oled_printf>
					oled_pos(4,0);
     db4:	60 e0       	ldi	r22, 0x00	; 0
     db6:	70 e0       	ldi	r23, 0x00	; 0
     db8:	84 e0       	ldi	r24, 0x04	; 4
     dba:	90 e0       	ldi	r25, 0x00	; 0
     dbc:	0e 94 7a 08 	call	0x10f4	; 0x10f4 <oled_pos>
					oled_printf(pointarray);
     dc0:	84 ef       	ldi	r24, 0xF4	; 244
     dc2:	93 e0       	ldi	r25, 0x03	; 3
     dc4:	9f 93       	push	r25
     dc6:	8f 93       	push	r24
     dc8:	0e 94 0e 08 	call	0x101c	; 0x101c <oled_printf>
					NewHighscore = 1;
     dcc:	81 e0       	ldi	r24, 0x01	; 1
     dce:	90 e0       	ldi	r25, 0x00	; 0
     dd0:	90 93 f3 03 	sts	0x03F3, r25
     dd4:	80 93 f2 03 	sts	0x03F2, r24
     dd8:	0f 90       	pop	r0
     dda:	0f 90       	pop	r0
     ddc:	0f 90       	pop	r0
     dde:	0f 90       	pop	r0
     de0:	70 c0       	rjmp	.+224    	; 0xec2 <printgame+0x1f8>
				}
			}
		break;
		case Multiplayer:
			oled_reset();
     de2:	0e 94 a5 08 	call	0x114a	; 0x114a <oled_reset>
			oled_printf("Opponents score :");
     de6:	82 e7       	ldi	r24, 0x72	; 114
     de8:	93 e0       	ldi	r25, 0x03	; 3
     dea:	9f 93       	push	r25
     dec:	8f 93       	push	r24
     dee:	0e 94 0e 08 	call	0x101c	; 0x101c <oled_printf>
			oled_pos(1,0);
     df2:	60 e0       	ldi	r22, 0x00	; 0
     df4:	70 e0       	ldi	r23, 0x00	; 0
     df6:	81 e0       	ldi	r24, 0x01	; 1
     df8:	90 e0       	ldi	r25, 0x00	; 0
     dfa:	0e 94 7a 08 	call	0x10f4	; 0x10f4 <oled_pos>
			pointarray[4] = "";
     dfe:	8d e3       	ldi	r24, 0x3D	; 61
     e00:	92 e0       	ldi	r25, 0x02	; 2
     e02:	80 93 f8 03 	sts	0x03F8, r24
			pointarray[0] = (game.enemypoints%100-game.enemypoints%10)/10 + '0';
     e06:	0f 2e       	mov	r0, r31
     e08:	fa e0       	ldi	r31, 0x0A	; 10
     e0a:	ef 2e       	mov	r14, r31
     e0c:	f1 2c       	mov	r15, r1
     e0e:	f0 2d       	mov	r31, r0
     e10:	c8 01       	movw	r24, r16
     e12:	b7 01       	movw	r22, r14
     e14:	0e 94 51 0b 	call	0x16a2	; 0x16a2 <__divmodhi4>
     e18:	9c 01       	movw	r18, r24
     e1a:	e4 ef       	ldi	r30, 0xF4	; 244
     e1c:	f3 e0       	ldi	r31, 0x03	; 3
     e1e:	c8 01       	movw	r24, r16
     e20:	64 e6       	ldi	r22, 0x64	; 100
     e22:	70 e0       	ldi	r23, 0x00	; 0
     e24:	0e 94 51 0b 	call	0x16a2	; 0x16a2 <__divmodhi4>
     e28:	82 1b       	sub	r24, r18
     e2a:	93 0b       	sbc	r25, r19
     e2c:	b7 01       	movw	r22, r14
     e2e:	0e 94 51 0b 	call	0x16a2	; 0x16a2 <__divmodhi4>
     e32:	60 5d       	subi	r22, 0xD0	; 208
     e34:	60 83       	st	Z, r22
			pointarray[1] = game.enemypoints%10 + '0';
     e36:	20 5d       	subi	r18, 0xD0	; 208
     e38:	20 93 f5 03 	sts	0x03F5, r18
			oled_printf(pointarray);
     e3c:	ff 93       	push	r31
     e3e:	ef 93       	push	r30
     e40:	0e 94 0e 08 	call	0x101c	; 0x101c <oled_printf>
		break;
     e44:	0f 90       	pop	r0
     e46:	0f 90       	pop	r0
     e48:	0f 90       	pop	r0
     e4a:	0f 90       	pop	r0
     e4c:	3a c0       	rjmp	.+116    	; 0xec2 <printgame+0x1f8>
		
		case Highscore:
			oled_reset();
     e4e:	0e 94 a5 08 	call	0x114a	; 0x114a <oled_reset>
			oled_printf("HIGHSCORES: ");
     e52:	84 e8       	ldi	r24, 0x84	; 132
     e54:	93 e0       	ldi	r25, 0x03	; 3
     e56:	9f 93       	push	r25
     e58:	8f 93       	push	r24
     e5a:	0e 94 0e 08 	call	0x101c	; 0x101c <oled_printf>
     e5e:	0f 2e       	mov	r0, r31
     e60:	f8 e0       	ldi	r31, 0x08	; 8
     e62:	af 2e       	mov	r10, r31
     e64:	f1 e0       	ldi	r31, 0x01	; 1
     e66:	bf 2e       	mov	r11, r31
     e68:	f0 2d       	mov	r31, r0
     e6a:	0f 90       	pop	r0
     e6c:	0f 90       	pop	r0
			for(int i = 0; i < 5; i++){
     e6e:	e1 2c       	mov	r14, r1
     e70:	f1 2c       	mov	r15, r1
     e72:	ce 01       	movw	r24, r28
     e74:	01 96       	adiw	r24, 0x01	; 1
     e76:	6c 01       	movw	r12, r24
     e78:	8e 01       	movw	r16, r28
     e7a:	0a 5f       	subi	r16, 0xFA	; 250
     e7c:	1f 4f       	sbci	r17, 0xFF	; 255
				oled_pos(i+1,0);
     e7e:	9f ef       	ldi	r25, 0xFF	; 255
     e80:	e9 1a       	sub	r14, r25
     e82:	f9 0a       	sbc	r15, r25
     e84:	60 e0       	ldi	r22, 0x00	; 0
     e86:	70 e0       	ldi	r23, 0x00	; 0
     e88:	c7 01       	movw	r24, r14
     e8a:	0e 94 7a 08 	call	0x10f4	; 0x10f4 <oled_pos>
				char hold[6] = "";
     e8e:	19 82       	std	Y+1, r1	; 0x01
     e90:	1a 82       	std	Y+2, r1	; 0x02
     e92:	1b 82       	std	Y+3, r1	; 0x03
     e94:	1c 82       	std	Y+4, r1	; 0x04
     e96:	1e 82       	std	Y+6, r1	; 0x06
     e98:	1d 82       	std	Y+5, r1	; 0x05
     e9a:	f6 01       	movw	r30, r12
     e9c:	d5 01       	movw	r26, r10
				for(int j = 0; j < 5; j++){
					hold[j] = highscorelist[i][j];
     e9e:	8d 91       	ld	r24, X+
     ea0:	81 93       	st	Z+, r24
			oled_reset();
			oled_printf("HIGHSCORES: ");
			for(int i = 0; i < 5; i++){
				oled_pos(i+1,0);
				char hold[6] = "";
				for(int j = 0; j < 5; j++){
     ea2:	e0 17       	cp	r30, r16
     ea4:	f1 07       	cpc	r31, r17
     ea6:	d9 f7       	brne	.-10     	; 0xe9e <printgame+0x1d4>
					hold[j] = highscorelist[i][j];
				}
				oled_printf(hold);
     ea8:	df 92       	push	r13
     eaa:	cf 92       	push	r12
     eac:	0e 94 0e 08 	call	0x101c	; 0x101c <oled_printf>
     eb0:	85 e0       	ldi	r24, 0x05	; 5
     eb2:	a8 0e       	add	r10, r24
     eb4:	b1 1c       	adc	r11, r1
		break;
		
		case Highscore:
			oled_reset();
			oled_printf("HIGHSCORES: ");
			for(int i = 0; i < 5; i++){
     eb6:	0f 90       	pop	r0
     eb8:	0f 90       	pop	r0
     eba:	95 e0       	ldi	r25, 0x05	; 5
     ebc:	e9 16       	cp	r14, r25
     ebe:	f1 04       	cpc	r15, r1
     ec0:	f1 f6       	brne	.-68     	; 0xe7e <printgame+0x1b4>
				oled_printf(hold);
			}
		break;
	}
	return choice;
}
     ec2:	89 2d       	mov	r24, r9
     ec4:	26 96       	adiw	r28, 0x06	; 6
     ec6:	0f b6       	in	r0, 0x3f	; 63
     ec8:	f8 94       	cli
     eca:	de bf       	out	0x3e, r29	; 62
     ecc:	0f be       	out	0x3f, r0	; 63
     ece:	cd bf       	out	0x3d, r28	; 61
     ed0:	df 91       	pop	r29
     ed2:	cf 91       	pop	r28
     ed4:	1f 91       	pop	r17
     ed6:	0f 91       	pop	r16
     ed8:	ff 90       	pop	r15
     eda:	ef 90       	pop	r14
     edc:	df 90       	pop	r13
     ede:	cf 90       	pop	r12
     ee0:	bf 90       	pop	r11
     ee2:	af 90       	pop	r10
     ee4:	9f 90       	pop	r9
     ee6:	08 95       	ret

00000ee8 <oled_is_out_of_bounds>:
volatile oled_position_t position;

const fontSize = 8;

void oled_is_out_of_bounds() {
	if (position.col > 127) {
     ee8:	80 91 08 04 	lds	r24, 0x0408
     eec:	90 91 09 04 	lds	r25, 0x0409
     ef0:	80 38       	cpi	r24, 0x80	; 128
     ef2:	91 05       	cpc	r25, r1
     ef4:	bc f0       	brlt	.+46     	; 0xf24 <oled_is_out_of_bounds+0x3c>
		position.col -= 128;
     ef6:	e8 e0       	ldi	r30, 0x08	; 8
     ef8:	f4 e0       	ldi	r31, 0x04	; 4
     efa:	80 81       	ld	r24, Z
     efc:	91 81       	ldd	r25, Z+1	; 0x01
     efe:	80 58       	subi	r24, 0x80	; 128
     f00:	91 09       	sbc	r25, r1
     f02:	91 83       	std	Z+1, r25	; 0x01
     f04:	80 83       	st	Z, r24
		position.row += 1;
     f06:	e6 e0       	ldi	r30, 0x06	; 6
     f08:	f4 e0       	ldi	r31, 0x04	; 4
     f0a:	80 81       	ld	r24, Z
     f0c:	91 81       	ldd	r25, Z+1	; 0x01
     f0e:	01 96       	adiw	r24, 0x01	; 1
     f10:	91 83       	std	Z+1, r25	; 0x01
     f12:	80 83       	st	Z, r24
		if (position.row > 7) {
     f14:	80 81       	ld	r24, Z
     f16:	91 81       	ldd	r25, Z+1	; 0x01
     f18:	08 97       	sbiw	r24, 0x08	; 8
     f1a:	24 f0       	brlt	.+8      	; 0xf24 <oled_is_out_of_bounds+0x3c>
			position.row = 0;
     f1c:	10 92 07 04 	sts	0x0407, r1
     f20:	10 92 06 04 	sts	0x0406, r1
     f24:	08 95       	ret

00000f26 <oled_put_char>:

void write_data(uint8_t data){
	ext_oled_data[0] = data;
}

int oled_put_char(unsigned char c){
     f26:	ef 92       	push	r14
     f28:	ff 92       	push	r15
     f2a:	0f 93       	push	r16
     f2c:	1f 93       	push	r17
     f2e:	cf 93       	push	r28
     f30:	df 93       	push	r29
	uint8_t printChar = c-32;
     f32:	80 52       	subi	r24, 0x20	; 32
     f34:	e8 2e       	mov	r14, r24
     f36:	f1 2c       	mov	r15, r1
     f38:	c7 01       	movw	r24, r14
     f3a:	88 0f       	add	r24, r24
     f3c:	99 1f       	adc	r25, r25
     f3e:	88 0f       	add	r24, r24
     f40:	99 1f       	adc	r25, r25
     f42:	88 0f       	add	r24, r24
     f44:	99 1f       	adc	r25, r25
	
	for (int i=0; i < fontSize; i++) {
     f46:	c0 e0       	ldi	r28, 0x00	; 0
     f48:	d0 e0       	ldi	r29, 0x00	; 0
     f4a:	9c 01       	movw	r18, r24
     f4c:	20 59       	subi	r18, 0x90	; 144
     f4e:	3f 4f       	sbci	r19, 0xFF	; 255
     f50:	79 01       	movw	r14, r18
		write_data(pgm_read_word(&font_8x8[printChar][i]));
		position.col += fontSize;
     f52:	08 e0       	ldi	r16, 0x08	; 8
     f54:	14 e0       	ldi	r17, 0x04	; 4
     f56:	f7 01       	movw	r30, r14
     f58:	ec 0f       	add	r30, r28
     f5a:	fd 1f       	adc	r31, r29

int oled_put_char(unsigned char c){
	uint8_t printChar = c-32;
	
	for (int i=0; i < fontSize; i++) {
		write_data(pgm_read_word(&font_8x8[printChar][i]));
     f5c:	85 91       	lpm	r24, Z+
     f5e:	94 91       	lpm	r25, Z
void write_command(uint8_t command){
	ext_oled_cmd[0] = command;
}

void write_data(uint8_t data){
	ext_oled_data[0] = data;
     f60:	e0 91 21 01 	lds	r30, 0x0121
     f64:	f0 91 22 01 	lds	r31, 0x0122
     f68:	80 83       	st	Z, r24
int oled_put_char(unsigned char c){
	uint8_t printChar = c-32;
	
	for (int i=0; i < fontSize; i++) {
		write_data(pgm_read_word(&font_8x8[printChar][i]));
		position.col += fontSize;
     f6a:	f8 01       	movw	r30, r16
     f6c:	80 81       	ld	r24, Z
     f6e:	91 81       	ldd	r25, Z+1	; 0x01
     f70:	08 96       	adiw	r24, 0x08	; 8
     f72:	91 83       	std	Z+1, r25	; 0x01
     f74:	80 83       	st	Z, r24
		oled_is_out_of_bounds();
     f76:	0e 94 74 07 	call	0xee8	; 0xee8 <oled_is_out_of_bounds>
}

int oled_put_char(unsigned char c){
	uint8_t printChar = c-32;
	
	for (int i=0; i < fontSize; i++) {
     f7a:	21 96       	adiw	r28, 0x01	; 1
     f7c:	c8 30       	cpi	r28, 0x08	; 8
     f7e:	d1 05       	cpc	r29, r1
     f80:	51 f7       	brne	.-44     	; 0xf56 <oled_put_char+0x30>
		position.col += fontSize;
		oled_is_out_of_bounds();
	}
	
	return 0;
}
     f82:	80 e0       	ldi	r24, 0x00	; 0
     f84:	90 e0       	ldi	r25, 0x00	; 0
     f86:	df 91       	pop	r29
     f88:	cf 91       	pop	r28
     f8a:	1f 91       	pop	r17
     f8c:	0f 91       	pop	r16
     f8e:	ff 90       	pop	r15
     f90:	ef 90       	pop	r14
     f92:	08 95       	ret

00000f94 <oled_inv_put_char>:

int oled_inv_put_char(unsigned char c){
     f94:	ef 92       	push	r14
     f96:	ff 92       	push	r15
     f98:	0f 93       	push	r16
     f9a:	1f 93       	push	r17
     f9c:	cf 93       	push	r28
     f9e:	df 93       	push	r29
	uint8_t printChar = c-32;
     fa0:	80 52       	subi	r24, 0x20	; 32
     fa2:	e8 2e       	mov	r14, r24
     fa4:	f1 2c       	mov	r15, r1
     fa6:	c7 01       	movw	r24, r14
     fa8:	88 0f       	add	r24, r24
     faa:	99 1f       	adc	r25, r25
     fac:	88 0f       	add	r24, r24
     fae:	99 1f       	adc	r25, r25
     fb0:	88 0f       	add	r24, r24
     fb2:	99 1f       	adc	r25, r25
	
	for (int i=0; i < fontSize; i++) {
     fb4:	c0 e0       	ldi	r28, 0x00	; 0
     fb6:	d0 e0       	ldi	r29, 0x00	; 0
     fb8:	9c 01       	movw	r18, r24
     fba:	20 59       	subi	r18, 0x90	; 144
     fbc:	3f 4f       	sbci	r19, 0xFF	; 255
     fbe:	79 01       	movw	r14, r18
		write_data(~pgm_read_word(&font_8x8[printChar][i]));
		position.col += fontSize;
     fc0:	08 e0       	ldi	r16, 0x08	; 8
     fc2:	14 e0       	ldi	r17, 0x04	; 4
     fc4:	f7 01       	movw	r30, r14
     fc6:	ec 0f       	add	r30, r28
     fc8:	fd 1f       	adc	r31, r29

int oled_inv_put_char(unsigned char c){
	uint8_t printChar = c-32;
	
	for (int i=0; i < fontSize; i++) {
		write_data(~pgm_read_word(&font_8x8[printChar][i]));
     fca:	85 91       	lpm	r24, Z+
     fcc:	94 91       	lpm	r25, Z
     fce:	80 95       	com	r24
void write_command(uint8_t command){
	ext_oled_cmd[0] = command;
}

void write_data(uint8_t data){
	ext_oled_data[0] = data;
     fd0:	e0 91 21 01 	lds	r30, 0x0121
     fd4:	f0 91 22 01 	lds	r31, 0x0122
     fd8:	80 83       	st	Z, r24
int oled_inv_put_char(unsigned char c){
	uint8_t printChar = c-32;
	
	for (int i=0; i < fontSize; i++) {
		write_data(~pgm_read_word(&font_8x8[printChar][i]));
		position.col += fontSize;
     fda:	f8 01       	movw	r30, r16
     fdc:	80 81       	ld	r24, Z
     fde:	91 81       	ldd	r25, Z+1	; 0x01
     fe0:	08 96       	adiw	r24, 0x08	; 8
     fe2:	91 83       	std	Z+1, r25	; 0x01
     fe4:	80 83       	st	Z, r24
		oled_is_out_of_bounds();
     fe6:	0e 94 74 07 	call	0xee8	; 0xee8 <oled_is_out_of_bounds>
}

int oled_inv_put_char(unsigned char c){
	uint8_t printChar = c-32;
	
	for (int i=0; i < fontSize; i++) {
     fea:	21 96       	adiw	r28, 0x01	; 1
     fec:	c8 30       	cpi	r28, 0x08	; 8
     fee:	d1 05       	cpc	r29, r1
     ff0:	49 f7       	brne	.-46     	; 0xfc4 <oled_inv_put_char+0x30>
		position.col += fontSize;
		oled_is_out_of_bounds();
	}
	
	return 0;
}
     ff2:	80 e0       	ldi	r24, 0x00	; 0
     ff4:	90 e0       	ldi	r25, 0x00	; 0
     ff6:	df 91       	pop	r29
     ff8:	cf 91       	pop	r28
     ffa:	1f 91       	pop	r17
     ffc:	0f 91       	pop	r16
     ffe:	ff 90       	pop	r15
    1000:	ef 90       	pop	r14
    1002:	08 95       	ret

00001004 <oled_set_adressing_mode>:
		}
	}
}

void write_command(uint8_t command){
	ext_oled_cmd[0] = command;
    1004:	e0 91 23 01 	lds	r30, 0x0123
    1008:	f0 91 24 01 	lds	r31, 0x0124
    100c:	90 e2       	ldi	r25, 0x20	; 32
    100e:	90 83       	st	Z, r25
    1010:	e0 91 23 01 	lds	r30, 0x0123
    1014:	f0 91 24 01 	lds	r31, 0x0124
    1018:	80 83       	st	Z, r24
    101a:	08 95       	ret

0000101c <oled_printf>:
	write_command(mode);
}

// ------------------ functions declared in header below this line---------------------

void oled_printf(char* data, ...){
    101c:	cf 93       	push	r28
    101e:	df 93       	push	r29
    1020:	cd b7       	in	r28, 0x3d	; 61
    1022:	de b7       	in	r29, 0x3e	; 62
    1024:	fe 01       	movw	r30, r28
    1026:	35 96       	adiw	r30, 0x05	; 5
    1028:	61 91       	ld	r22, Z+
    102a:	71 91       	ld	r23, Z+
	va_list args;
	va_start(args, data);
	vfprintf(&mystdout, data, args);
    102c:	af 01       	movw	r20, r30
    102e:	83 e3       	ldi	r24, 0x33	; 51
    1030:	91 e0       	ldi	r25, 0x01	; 1
    1032:	0e 94 2c 0d 	call	0x1a58	; 0x1a58 <vfprintf>
	va_end(args);
	
}
    1036:	df 91       	pop	r29
    1038:	cf 91       	pop	r28
    103a:	08 95       	ret

0000103c <oled_inv_printf>:

void oled_inv_printf(char* data, ...){
    103c:	cf 93       	push	r28
    103e:	df 93       	push	r29
    1040:	cd b7       	in	r28, 0x3d	; 61
    1042:	de b7       	in	r29, 0x3e	; 62
    1044:	fe 01       	movw	r30, r28
    1046:	35 96       	adiw	r30, 0x05	; 5
    1048:	61 91       	ld	r22, Z+
    104a:	71 91       	ld	r23, Z+
	va_list args;
	va_start(args, data);
	vfprintf(&myinvstdout, data, args);
    104c:	af 01       	movw	r20, r30
    104e:	85 e2       	ldi	r24, 0x25	; 37
    1050:	91 e0       	ldi	r25, 0x01	; 1
    1052:	0e 94 2c 0d 	call	0x1a58	; 0x1a58 <vfprintf>
	va_end(args);
	
}
    1056:	df 91       	pop	r29
    1058:	cf 91       	pop	r28
    105a:	08 95       	ret

0000105c <oled_goto_line>:

void oled_home(){
	oled_pos(0,0);
}

void oled_goto_line(int line){
    105c:	cf 93       	push	r28
    105e:	df 93       	push	r29
    1060:	ec 01       	movw	r28, r24
	if (line > 7 || line < 0) {
    1062:	88 30       	cpi	r24, 0x08	; 8
    1064:	91 05       	cpc	r25, r1
    1066:	80 f4       	brcc	.+32     	; 0x1088 <oled_goto_line+0x2c>
		return 0;
	}
	else {
		position.row = line;
    1068:	90 93 07 04 	sts	0x0407, r25
    106c:	80 93 06 04 	sts	0x0406, r24
		oled_set_adressing_mode(PAGE_MODE);
    1070:	82 e0       	ldi	r24, 0x02	; 2
    1072:	0e 94 02 08 	call	0x1004	; 0x1004 <oled_set_adressing_mode>
		write_command(0xB0 + line);
    1076:	c0 55       	subi	r28, 0x50	; 80
		}
	}
}

void write_command(uint8_t command){
	ext_oled_cmd[0] = command;
    1078:	e0 91 23 01 	lds	r30, 0x0123
    107c:	f0 91 24 01 	lds	r31, 0x0124
    1080:	c0 83       	st	Z, r28
	}
	else {
		position.row = line;
		oled_set_adressing_mode(PAGE_MODE);
		write_command(0xB0 + line);
		oled_set_adressing_mode(HORIZONTAL_MODE);
    1082:	80 e0       	ldi	r24, 0x00	; 0
    1084:	0e 94 02 08 	call	0x1004	; 0x1004 <oled_set_adressing_mode>
	}
}
    1088:	df 91       	pop	r29
    108a:	cf 91       	pop	r28
    108c:	08 95       	ret

0000108e <oled_goto_column>:

void oled_goto_column(int column){
    108e:	cf 93       	push	r28
    1090:	df 93       	push	r29
    1092:	ec 01       	movw	r28, r24
	if (column > 127 || column < 0) {
    1094:	80 38       	cpi	r24, 0x80	; 128
    1096:	91 05       	cpc	r25, r1
    1098:	50 f5       	brcc	.+84     	; 0x10ee <oled_goto_column+0x60>
		return 0;
	}
	else {
		position.col = column;
    109a:	90 93 09 04 	sts	0x0409, r25
    109e:	80 93 08 04 	sts	0x0408, r24
		oled_set_adressing_mode(PAGE_MODE);
    10a2:	82 e0       	ldi	r24, 0x02	; 2
    10a4:	0e 94 02 08 	call	0x1004	; 0x1004 <oled_set_adressing_mode>
		
		int numLow = column % 16;
    10a8:	ce 01       	movw	r24, r28
    10aa:	8f 70       	andi	r24, 0x0F	; 15
    10ac:	90 78       	andi	r25, 0x80	; 128
    10ae:	99 23       	and	r25, r25
    10b0:	24 f4       	brge	.+8      	; 0x10ba <oled_goto_column+0x2c>
    10b2:	01 97       	sbiw	r24, 0x01	; 1
    10b4:	80 6f       	ori	r24, 0xF0	; 240
    10b6:	9f 6f       	ori	r25, 0xFF	; 255
    10b8:	01 96       	adiw	r24, 0x01	; 1
		}
	}
}

void write_command(uint8_t command){
	ext_oled_cmd[0] = command;
    10ba:	e0 91 23 01 	lds	r30, 0x0123
    10be:	f0 91 24 01 	lds	r31, 0x0124
    10c2:	80 83       	st	Z, r24
	else {
		position.col = column;
		oled_set_adressing_mode(PAGE_MODE);
		
		int numLow = column % 16;
		int numHigh = column / 16;
    10c4:	ce 01       	movw	r24, r28
    10c6:	dd 23       	and	r29, r29
    10c8:	0c f4       	brge	.+2      	; 0x10cc <oled_goto_column+0x3e>
    10ca:	0f 96       	adiw	r24, 0x0f	; 15
    10cc:	95 95       	asr	r25
    10ce:	87 95       	ror	r24
    10d0:	95 95       	asr	r25
    10d2:	87 95       	ror	r24
    10d4:	95 95       	asr	r25
    10d6:	87 95       	ror	r24
    10d8:	95 95       	asr	r25
    10da:	87 95       	ror	r24
		
		write_command(numLow);
		write_command(16 + numHigh);
    10dc:	80 5f       	subi	r24, 0xF0	; 240
		}
	}
}

void write_command(uint8_t command){
	ext_oled_cmd[0] = command;
    10de:	e0 91 23 01 	lds	r30, 0x0123
    10e2:	f0 91 24 01 	lds	r31, 0x0124
    10e6:	80 83       	st	Z, r24
		int numLow = column % 16;
		int numHigh = column / 16;
		
		write_command(numLow);
		write_command(16 + numHigh);
		oled_set_adressing_mode(HORIZONTAL_MODE);
    10e8:	80 e0       	ldi	r24, 0x00	; 0
    10ea:	0e 94 02 08 	call	0x1004	; 0x1004 <oled_set_adressing_mode>
	}
	
}
    10ee:	df 91       	pop	r29
    10f0:	cf 91       	pop	r28
    10f2:	08 95       	ret

000010f4 <oled_pos>:
		write_data(~0b00000000);
	}
	oled_goto_line(line);
}

void oled_pos(int row, int column){
    10f4:	cf 93       	push	r28
    10f6:	df 93       	push	r29
    10f8:	eb 01       	movw	r28, r22
	oled_goto_line(row);
    10fa:	0e 94 2e 08 	call	0x105c	; 0x105c <oled_goto_line>
	oled_goto_column(column);
    10fe:	ce 01       	movw	r24, r28
    1100:	0e 94 47 08 	call	0x108e	; 0x108e <oled_goto_column>
}
    1104:	df 91       	pop	r29
    1106:	cf 91       	pop	r28
    1108:	08 95       	ret

0000110a <oled_home>:
	}
	oled_home();
}

void oled_home(){
	oled_pos(0,0);
    110a:	60 e0       	ldi	r22, 0x00	; 0
    110c:	70 e0       	ldi	r23, 0x00	; 0
    110e:	80 e0       	ldi	r24, 0x00	; 0
    1110:	90 e0       	ldi	r25, 0x00	; 0
    1112:	0e 94 7a 08 	call	0x10f4	; 0x10f4 <oled_pos>
    1116:	08 95       	ret

00001118 <oled_clear_line>:
		write_command(16 + numHigh);
		oled_set_adressing_mode(HORIZONTAL_MODE);
	}
	
}
void oled_clear_line(int line){
    1118:	cf 93       	push	r28
    111a:	df 93       	push	r29
    111c:	ec 01       	movw	r28, r24
	oled_pos(line, 0);
    111e:	60 e0       	ldi	r22, 0x00	; 0
    1120:	70 e0       	ldi	r23, 0x00	; 0
    1122:	0e 94 7a 08 	call	0x10f4	; 0x10f4 <oled_pos>
    1126:	20 e8       	ldi	r18, 0x80	; 128
    1128:	30 e0       	ldi	r19, 0x00	; 0
void write_command(uint8_t command){
	ext_oled_cmd[0] = command;
}

void write_data(uint8_t data){
	ext_oled_data[0] = data;
    112a:	e0 91 21 01 	lds	r30, 0x0121
    112e:	f0 91 22 01 	lds	r31, 0x0122
    1132:	10 82       	st	Z, r1
    1134:	21 50       	subi	r18, 0x01	; 1
    1136:	31 09       	sbc	r19, r1
	
}
void oled_clear_line(int line){
	oled_pos(line, 0);
	
	for (int col = 0; col < 128; col++) {
    1138:	21 15       	cp	r18, r1
    113a:	31 05       	cpc	r19, r1
    113c:	b1 f7       	brne	.-20     	; 0x112a <oled_clear_line+0x12>
		write_data(0b00000000);
	}
	oled_goto_line(line);
    113e:	ce 01       	movw	r24, r28
    1140:	0e 94 2e 08 	call	0x105c	; 0x105c <oled_goto_line>
}
    1144:	df 91       	pop	r29
    1146:	cf 91       	pop	r28
    1148:	08 95       	ret

0000114a <oled_reset>:
	write_command(0xaf); // display on
	oled_reset();
	
}

void oled_reset(){
    114a:	cf 93       	push	r28
    114c:	df 93       	push	r29
	
	for (int line = 0; line < 8; line++) {
    114e:	c0 e0       	ldi	r28, 0x00	; 0
    1150:	d0 e0       	ldi	r29, 0x00	; 0
		oled_clear_line(line);
    1152:	ce 01       	movw	r24, r28
    1154:	0e 94 8c 08 	call	0x1118	; 0x1118 <oled_clear_line>
	
}

void oled_reset(){
	
	for (int line = 0; line < 8; line++) {
    1158:	21 96       	adiw	r28, 0x01	; 1
    115a:	c8 30       	cpi	r28, 0x08	; 8
    115c:	d1 05       	cpc	r29, r1
    115e:	c9 f7       	brne	.-14     	; 0x1152 <oled_reset+0x8>
		oled_clear_line(line);
	}
	oled_home();
    1160:	0e 94 85 08 	call	0x110a	; 0x110a <oled_home>
}
    1164:	df 91       	pop	r29
    1166:	cf 91       	pop	r28
    1168:	08 95       	ret

0000116a <oled_init>:
		}
	}
}

void write_command(uint8_t command){
	ext_oled_cmd[0] = command;
    116a:	e0 91 23 01 	lds	r30, 0x0123
    116e:	f0 91 24 01 	lds	r31, 0x0124
    1172:	8e ea       	ldi	r24, 0xAE	; 174
    1174:	80 83       	st	Z, r24
    1176:	e0 91 23 01 	lds	r30, 0x0123
    117a:	f0 91 24 01 	lds	r31, 0x0124
    117e:	81 ea       	ldi	r24, 0xA1	; 161
    1180:	80 83       	st	Z, r24
    1182:	e0 91 23 01 	lds	r30, 0x0123
    1186:	f0 91 24 01 	lds	r31, 0x0124
    118a:	8a ed       	ldi	r24, 0xDA	; 218
    118c:	80 83       	st	Z, r24
    118e:	e0 91 23 01 	lds	r30, 0x0123
    1192:	f0 91 24 01 	lds	r31, 0x0124
    1196:	82 e1       	ldi	r24, 0x12	; 18
    1198:	80 83       	st	Z, r24
    119a:	e0 91 23 01 	lds	r30, 0x0123
    119e:	f0 91 24 01 	lds	r31, 0x0124
    11a2:	88 ec       	ldi	r24, 0xC8	; 200
    11a4:	80 83       	st	Z, r24
    11a6:	e0 91 23 01 	lds	r30, 0x0123
    11aa:	f0 91 24 01 	lds	r31, 0x0124
    11ae:	88 ea       	ldi	r24, 0xA8	; 168
    11b0:	80 83       	st	Z, r24
    11b2:	e0 91 23 01 	lds	r30, 0x0123
    11b6:	f0 91 24 01 	lds	r31, 0x0124
    11ba:	8f e3       	ldi	r24, 0x3F	; 63
    11bc:	80 83       	st	Z, r24
    11be:	e0 91 23 01 	lds	r30, 0x0123
    11c2:	f0 91 24 01 	lds	r31, 0x0124
    11c6:	85 ed       	ldi	r24, 0xD5	; 213
    11c8:	80 83       	st	Z, r24
    11ca:	e0 91 23 01 	lds	r30, 0x0123
    11ce:	f0 91 24 01 	lds	r31, 0x0124
    11d2:	80 e8       	ldi	r24, 0x80	; 128
    11d4:	80 83       	st	Z, r24
    11d6:	e0 91 23 01 	lds	r30, 0x0123
    11da:	f0 91 24 01 	lds	r31, 0x0124
    11de:	81 e8       	ldi	r24, 0x81	; 129
    11e0:	80 83       	st	Z, r24
    11e2:	e0 91 23 01 	lds	r30, 0x0123
    11e6:	f0 91 24 01 	lds	r31, 0x0124
    11ea:	80 e5       	ldi	r24, 0x50	; 80
    11ec:	80 83       	st	Z, r24
    11ee:	e0 91 23 01 	lds	r30, 0x0123
    11f2:	f0 91 24 01 	lds	r31, 0x0124
    11f6:	89 ed       	ldi	r24, 0xD9	; 217
    11f8:	80 83       	st	Z, r24
    11fa:	e0 91 23 01 	lds	r30, 0x0123
    11fe:	f0 91 24 01 	lds	r31, 0x0124
    1202:	81 e2       	ldi	r24, 0x21	; 33
    1204:	80 83       	st	Z, r24
	write_command(0x81); //contrast control
	write_command(0x50);
	write_command(0xd9); //set pre-charge period
	write_command(0x21);
	
	oled_set_adressing_mode(HORIZONTAL_MODE);
    1206:	80 e0       	ldi	r24, 0x00	; 0
    1208:	0e 94 02 08 	call	0x1004	; 0x1004 <oled_set_adressing_mode>
		}
	}
}

void write_command(uint8_t command){
	ext_oled_cmd[0] = command;
    120c:	e0 91 23 01 	lds	r30, 0x0123
    1210:	f0 91 24 01 	lds	r31, 0x0124
    1214:	8b ed       	ldi	r24, 0xDB	; 219
    1216:	80 83       	st	Z, r24
    1218:	e0 91 23 01 	lds	r30, 0x0123
    121c:	f0 91 24 01 	lds	r31, 0x0124
    1220:	80 e3       	ldi	r24, 0x30	; 48
    1222:	80 83       	st	Z, r24
    1224:	e0 91 23 01 	lds	r30, 0x0123
    1228:	f0 91 24 01 	lds	r31, 0x0124
    122c:	8d ea       	ldi	r24, 0xAD	; 173
    122e:	80 83       	st	Z, r24
    1230:	e0 91 23 01 	lds	r30, 0x0123
    1234:	f0 91 24 01 	lds	r31, 0x0124
    1238:	10 82       	st	Z, r1
    123a:	e0 91 23 01 	lds	r30, 0x0123
    123e:	f0 91 24 01 	lds	r31, 0x0124
    1242:	84 ea       	ldi	r24, 0xA4	; 164
    1244:	80 83       	st	Z, r24
    1246:	e0 91 23 01 	lds	r30, 0x0123
    124a:	f0 91 24 01 	lds	r31, 0x0124
    124e:	86 ea       	ldi	r24, 0xA6	; 166
    1250:	80 83       	st	Z, r24
    1252:	e0 91 23 01 	lds	r30, 0x0123
    1256:	f0 91 24 01 	lds	r31, 0x0124
    125a:	8f ea       	ldi	r24, 0xAF	; 175
    125c:	80 83       	st	Z, r24
	write_command(0xad); //master configuration
	write_command(0x00);
	write_command(0xa4); //out follows RAM content
	write_command(0xa6); //set normal display
	write_command(0xaf); // display on
	oled_reset();
    125e:	0e 94 a5 08 	call	0x114a	; 0x114a <oled_reset>
    1262:	08 95       	ret

00001264 <new_menu>:
void set_first_child(menu* mymenu, menu* first_child) {
	mymenu->first_child = first_child;
}


menu* new_menu(char* name, menu* parent) {
    1264:	0f 93       	push	r16
    1266:	1f 93       	push	r17
    1268:	cf 93       	push	r28
    126a:	df 93       	push	r29
    126c:	8c 01       	movw	r16, r24
    126e:	eb 01       	movw	r28, r22
	menu* nextmenu = malloc(sizeof(menu));
    1270:	89 e0       	ldi	r24, 0x09	; 9
    1272:	90 e0       	ldi	r25, 0x00	; 0
    1274:	0e 94 79 0b 	call	0x16f2	; 0x16f2 <malloc>
    1278:	fc 01       	movw	r30, r24
 	nextmenu->title = name;
    127a:	11 83       	std	Z+1, r17	; 0x01
    127c:	00 83       	st	Z, r16
	nextmenu->parent = parent;
    127e:	d4 83       	std	Z+4, r29	; 0x04
    1280:	c3 83       	std	Z+3, r28	; 0x03
 	nextmenu->right_sibling = NULL;
    1282:	10 86       	std	Z+8, r1	; 0x08
    1284:	17 82       	std	Z+7, r1	; 0x07
	nextmenu->first_child = NULL;
    1286:	16 82       	std	Z+6, r1	; 0x06
    1288:	15 82       	std	Z+5, r1	; 0x05
	return nextmenu;
}
    128a:	df 91       	pop	r29
    128c:	cf 91       	pop	r28
    128e:	1f 91       	pop	r17
    1290:	0f 91       	pop	r16
    1292:	08 95       	ret

00001294 <size_of_menu>:

int size_of_menu(menu* mymenu) {
	
	int menu_size = 0;
	
	mymenu = mymenu->first_child;
    1294:	dc 01       	movw	r26, r24
    1296:	15 96       	adiw	r26, 0x05	; 5
    1298:	ed 91       	ld	r30, X+
    129a:	fc 91       	ld	r31, X
    129c:	16 97       	sbiw	r26, 0x06	; 6
	if (mymenu == NULL) {
    129e:	30 97       	sbiw	r30, 0x00	; 0
    12a0:	79 f0       	breq	.+30     	; 0x12c0 <size_of_menu+0x2c>
		return menu_size;
	}
	menu_size ++;
	while (mymenu->right_sibling != NULL) {
    12a2:	07 80       	ldd	r0, Z+7	; 0x07
    12a4:	f0 85       	ldd	r31, Z+8	; 0x08
    12a6:	e0 2d       	mov	r30, r0
    12a8:	30 97       	sbiw	r30, 0x00	; 0
    12aa:	69 f0       	breq	.+26     	; 0x12c6 <size_of_menu+0x32>
    12ac:	21 e0       	ldi	r18, 0x01	; 1
    12ae:	30 e0       	ldi	r19, 0x00	; 0
		mymenu = mymenu->right_sibling;
		menu_size++;
    12b0:	2f 5f       	subi	r18, 0xFF	; 255
    12b2:	3f 4f       	sbci	r19, 0xFF	; 255
	mymenu = mymenu->first_child;
	if (mymenu == NULL) {
		return menu_size;
	}
	menu_size ++;
	while (mymenu->right_sibling != NULL) {
    12b4:	07 80       	ldd	r0, Z+7	; 0x07
    12b6:	f0 85       	ldd	r31, Z+8	; 0x08
    12b8:	e0 2d       	mov	r30, r0
    12ba:	30 97       	sbiw	r30, 0x00	; 0
    12bc:	c9 f7       	brne	.-14     	; 0x12b0 <size_of_menu+0x1c>
    12be:	06 c0       	rjmp	.+12     	; 0x12cc <size_of_menu+0x38>
	
	int menu_size = 0;
	
	mymenu = mymenu->first_child;
	if (mymenu == NULL) {
		return menu_size;
    12c0:	80 e0       	ldi	r24, 0x00	; 0
    12c2:	90 e0       	ldi	r25, 0x00	; 0
    12c4:	08 95       	ret
	}
	menu_size ++;
	while (mymenu->right_sibling != NULL) {
    12c6:	81 e0       	ldi	r24, 0x01	; 1
    12c8:	90 e0       	ldi	r25, 0x00	; 0
    12ca:	08 95       	ret
		mymenu = mymenu->right_sibling;
		menu_size++;
    12cc:	82 2f       	mov	r24, r18
    12ce:	93 2f       	mov	r25, r19
	}
	return menu_size;
}
    12d0:	08 95       	ret

000012d2 <goto_menu>:
	return NONE;
}

void goto_menu() {
	int i = 0;
	menu* selected_menu = current_menu;
    12d2:	e0 91 0c 04 	lds	r30, 0x040C
    12d6:	f0 91 0d 04 	lds	r31, 0x040D
	if(current_menu->first_child != NULL){
    12da:	85 81       	ldd	r24, Z+5	; 0x05
    12dc:	96 81       	ldd	r25, Z+6	; 0x06
    12de:	89 2b       	or	r24, r25
    12e0:	b9 f0       	breq	.+46     	; 0x1310 <goto_menu+0x3e>
		
		selected_menu = current_menu->first_child;
    12e2:	05 80       	ldd	r0, Z+5	; 0x05
    12e4:	f6 81       	ldd	r31, Z+6	; 0x06
    12e6:	e0 2d       	mov	r30, r0
		for (i; i < current_line; i++)
    12e8:	80 91 41 01 	lds	r24, 0x0141
    12ec:	90 91 42 01 	lds	r25, 0x0142
    12f0:	18 16       	cp	r1, r24
    12f2:	19 06       	cpc	r1, r25
    12f4:	6c f4       	brge	.+26     	; 0x1310 <goto_menu+0x3e>
	oled_menu_print(current_menu);
	return NONE;
}

void goto_menu() {
	int i = 0;
    12f6:	80 e0       	ldi	r24, 0x00	; 0
    12f8:	90 e0       	ldi	r25, 0x00	; 0
	if(current_menu->first_child != NULL){
		
		selected_menu = current_menu->first_child;
		for (i; i < current_line; i++)
		{
			selected_menu = selected_menu->right_sibling;
    12fa:	07 80       	ldd	r0, Z+7	; 0x07
    12fc:	f0 85       	ldd	r31, Z+8	; 0x08
    12fe:	e0 2d       	mov	r30, r0
	int i = 0;
	menu* selected_menu = current_menu;
	if(current_menu->first_child != NULL){
		
		selected_menu = current_menu->first_child;
		for (i; i < current_line; i++)
    1300:	01 96       	adiw	r24, 0x01	; 1
    1302:	20 91 41 01 	lds	r18, 0x0141
    1306:	30 91 42 01 	lds	r19, 0x0142
    130a:	82 17       	cp	r24, r18
    130c:	93 07       	cpc	r25, r19
    130e:	ac f3       	brlt	.-22     	; 0x12fa <goto_menu+0x28>
		{
			selected_menu = selected_menu->right_sibling;
		}
	}
	current_menu = selected_menu;
    1310:	f0 93 0d 04 	sts	0x040D, r31
    1314:	e0 93 0c 04 	sts	0x040C, r30
    1318:	08 95       	ret

0000131a <oled_menu_print>:
}
void oled_menu_print(menu* mymenu){
    131a:	0f 93       	push	r16
    131c:	1f 93       	push	r17
    131e:	cf 93       	push	r28
    1320:	df 93       	push	r29
    1322:	ec 01       	movw	r28, r24
	oled_reset(); 
    1324:	0e 94 a5 08 	call	0x114a	; 0x114a <oled_reset>
	
	current_menu_size = size_of_menu(mymenu);
    1328:	ce 01       	movw	r24, r28
    132a:	0e 94 4a 09 	call	0x1294	; 0x1294 <size_of_menu>
    132e:	90 93 0f 04 	sts	0x040F, r25
    1332:	80 93 0e 04 	sts	0x040E, r24
	mymenu = mymenu->first_child;
    1336:	0d 81       	ldd	r16, Y+5	; 0x05
    1338:	1e 81       	ldd	r17, Y+6	; 0x06
	for(int i = 0; i < current_menu_size; i++){
    133a:	80 91 0e 04 	lds	r24, 0x040E
    133e:	90 91 0f 04 	lds	r25, 0x040F
    1342:	18 16       	cp	r1, r24
    1344:	19 06       	cpc	r1, r25
    1346:	64 f5       	brge	.+88     	; 0x13a0 <oled_menu_print+0x86>
    1348:	c0 e0       	ldi	r28, 0x00	; 0
    134a:	d0 e0       	ldi	r29, 0x00	; 0
		oled_pos(i,0);
    134c:	60 e0       	ldi	r22, 0x00	; 0
    134e:	70 e0       	ldi	r23, 0x00	; 0
    1350:	ce 01       	movw	r24, r28
    1352:	0e 94 7a 08 	call	0x10f4	; 0x10f4 <oled_pos>
		if(current_line == i){
    1356:	80 91 41 01 	lds	r24, 0x0141
    135a:	90 91 42 01 	lds	r25, 0x0142
    135e:	8c 17       	cp	r24, r28
    1360:	9d 07       	cpc	r25, r29
    1362:	51 f4       	brne	.+20     	; 0x1378 <oled_menu_print+0x5e>
			oled_inv_printf(mymenu->title);
    1364:	f8 01       	movw	r30, r16
    1366:	81 81       	ldd	r24, Z+1	; 0x01
    1368:	8f 93       	push	r24
    136a:	80 81       	ld	r24, Z
    136c:	8f 93       	push	r24
    136e:	0e 94 1e 08 	call	0x103c	; 0x103c <oled_inv_printf>
    1372:	0f 90       	pop	r0
    1374:	0f 90       	pop	r0
    1376:	09 c0       	rjmp	.+18     	; 0x138a <oled_menu_print+0x70>
		}
		else{
			oled_printf(mymenu->title);
    1378:	f8 01       	movw	r30, r16
    137a:	81 81       	ldd	r24, Z+1	; 0x01
    137c:	8f 93       	push	r24
    137e:	80 81       	ld	r24, Z
    1380:	8f 93       	push	r24
    1382:	0e 94 0e 08 	call	0x101c	; 0x101c <oled_printf>
    1386:	0f 90       	pop	r0
    1388:	0f 90       	pop	r0
		}
		mymenu = mymenu->right_sibling;
    138a:	f8 01       	movw	r30, r16
    138c:	07 81       	ldd	r16, Z+7	; 0x07
    138e:	10 85       	ldd	r17, Z+8	; 0x08
void oled_menu_print(menu* mymenu){
	oled_reset(); 
	
	current_menu_size = size_of_menu(mymenu);
	mymenu = mymenu->first_child;
	for(int i = 0; i < current_menu_size; i++){
    1390:	21 96       	adiw	r28, 0x01	; 1
    1392:	80 91 0e 04 	lds	r24, 0x040E
    1396:	90 91 0f 04 	lds	r25, 0x040F
    139a:	c8 17       	cp	r28, r24
    139c:	d9 07       	cpc	r29, r25
    139e:	b4 f2       	brlt	.-84     	; 0x134c <oled_menu_print+0x32>
		}
		mymenu = mymenu->right_sibling;
	}
	mymenu = mymenu->parent;
	
    13a0:	df 91       	pop	r29
    13a2:	cf 91       	pop	r28
    13a4:	1f 91       	pop	r17
    13a6:	0f 91       	pop	r16
    13a8:	08 95       	ret

000013aa <oled_menu_init>:
		menu_size++;
	}
	return menu_size;
}

menu* oled_menu_init(void) {
    13aa:	2f 92       	push	r2
    13ac:	3f 92       	push	r3
    13ae:	4f 92       	push	r4
    13b0:	5f 92       	push	r5
    13b2:	6f 92       	push	r6
    13b4:	7f 92       	push	r7
    13b6:	8f 92       	push	r8
    13b8:	9f 92       	push	r9
    13ba:	af 92       	push	r10
    13bc:	bf 92       	push	r11
    13be:	cf 92       	push	r12
    13c0:	df 92       	push	r13
    13c2:	ef 92       	push	r14
    13c4:	ff 92       	push	r15
    13c6:	0f 93       	push	r16
    13c8:	1f 93       	push	r17
    13ca:	cf 93       	push	r28
    13cc:	df 93       	push	r29
	print = 1;
    13ce:	81 e0       	ldi	r24, 0x01	; 1
    13d0:	90 e0       	ldi	r25, 0x00	; 0
    13d2:	90 93 0b 04 	sts	0x040B, r25
    13d6:	80 93 0a 04 	sts	0x040A, r24
	menu* main_menu = new_menu("Main Menu", NULL);
    13da:	60 e0       	ldi	r22, 0x00	; 0
    13dc:	70 e0       	ldi	r23, 0x00	; 0
    13de:	81 e9       	ldi	r24, 0x91	; 145
    13e0:	93 e0       	ldi	r25, 0x03	; 3
    13e2:	0e 94 32 09 	call	0x1264	; 0x1264 <new_menu>
    13e6:	ec 01       	movw	r28, r24
	menu* play_game = new_menu("Play Game", main_menu);
    13e8:	bc 01       	movw	r22, r24
    13ea:	8b e9       	ldi	r24, 0x9B	; 155
    13ec:	93 e0       	ldi	r25, 0x03	; 3
    13ee:	0e 94 32 09 	call	0x1264	; 0x1264 <new_menu>
    13f2:	7c 01       	movw	r14, r24
	menu* highscores = new_menu("Highscores", main_menu);
    13f4:	be 01       	movw	r22, r28
    13f6:	85 ea       	ldi	r24, 0xA5	; 165
    13f8:	93 e0       	ldi	r25, 0x03	; 3
    13fa:	0e 94 32 09 	call	0x1264	; 0x1264 <new_menu>
    13fe:	4c 01       	movw	r8, r24
	menu* singelP = new_menu("Singel Player", play_game);
    1400:	b7 01       	movw	r22, r14
    1402:	80 eb       	ldi	r24, 0xB0	; 176
    1404:	93 e0       	ldi	r25, 0x03	; 3
    1406:	0e 94 32 09 	call	0x1264	; 0x1264 <new_menu>
    140a:	5c 01       	movw	r10, r24
	menu* multiP = new_menu("Multi Player", play_game);
    140c:	b7 01       	movw	r22, r14
    140e:	8e eb       	ldi	r24, 0xBE	; 190
    1410:	93 e0       	ldi	r25, 0x03	; 3
    1412:	0e 94 32 09 	call	0x1264	; 0x1264 <new_menu>
    1416:	2c 01       	movw	r4, r24
	menu* difficulty = new_menu("Difficulty", main_menu);
    1418:	be 01       	movw	r22, r28
    141a:	8b ec       	ldi	r24, 0xCB	; 203
    141c:	93 e0       	ldi	r25, 0x03	; 3
    141e:	0e 94 32 09 	call	0x1264	; 0x1264 <new_menu>
    1422:	8c 01       	movw	r16, r24
	menu* d_easy = new_menu("Easy", difficulty);
    1424:	bc 01       	movw	r22, r24
    1426:	86 ed       	ldi	r24, 0xD6	; 214
    1428:	93 e0       	ldi	r25, 0x03	; 3
    142a:	0e 94 32 09 	call	0x1264	; 0x1264 <new_menu>
    142e:	6c 01       	movw	r12, r24
	menu* d_medium = new_menu("Medium", difficulty);
    1430:	b8 01       	movw	r22, r16
    1432:	8b ed       	ldi	r24, 0xDB	; 219
    1434:	93 e0       	ldi	r25, 0x03	; 3
    1436:	0e 94 32 09 	call	0x1264	; 0x1264 <new_menu>
    143a:	3c 01       	movw	r6, r24
	menu* d_hard = new_menu("Hard", difficulty);
    143c:	b8 01       	movw	r22, r16
    143e:	82 ee       	ldi	r24, 0xE2	; 226
    1440:	93 e0       	ldi	r25, 0x03	; 3
    1442:	0e 94 32 09 	call	0x1264	; 0x1264 <new_menu>
    1446:	1c 01       	movw	r2, r24
	
	
	current_menu = main_menu;
    1448:	d0 93 0d 04 	sts	0x040D, r29
    144c:	c0 93 0c 04 	sts	0x040C, r28
	current_menu_size = size_of_menu(current_menu);
    1450:	ce 01       	movw	r24, r28
    1452:	0e 94 4a 09 	call	0x1294	; 0x1294 <size_of_menu>
    1456:	90 93 0f 04 	sts	0x040F, r25
    145a:	80 93 0e 04 	sts	0x040E, r24
	oled_menu_print(current_menu);
    145e:	ce 01       	movw	r24, r28
    1460:	0e 94 8d 09 	call	0x131a	; 0x131a <oled_menu_print>
	mymenu->right_sibling = right_sibling;
}


void set_first_child(menu* mymenu, menu* first_child) {
	mymenu->first_child = first_child;
    1464:	fe 82       	std	Y+6, r15	; 0x06
    1466:	ed 82       	std	Y+5, r14	; 0x05
volatile int current_menu_size;
volatile int print;


void set_right_sibling(menu* mymenu, menu* right_sibling) {
	mymenu->right_sibling = right_sibling;
    1468:	f7 01       	movw	r30, r14
    146a:	90 86       	std	Z+8, r9	; 0x08
    146c:	87 82       	std	Z+7, r8	; 0x07
    146e:	f4 01       	movw	r30, r8
    1470:	10 87       	std	Z+8, r17	; 0x08
    1472:	07 83       	std	Z+7, r16	; 0x07
}


void set_first_child(menu* mymenu, menu* first_child) {
	mymenu->first_child = first_child;
    1474:	f7 01       	movw	r30, r14
    1476:	b6 82       	std	Z+6, r11	; 0x06
    1478:	a5 82       	std	Z+5, r10	; 0x05
volatile int current_menu_size;
volatile int print;


void set_right_sibling(menu* mymenu, menu* right_sibling) {
	mymenu->right_sibling = right_sibling;
    147a:	f5 01       	movw	r30, r10
    147c:	50 86       	std	Z+8, r5	; 0x08
    147e:	47 82       	std	Z+7, r4	; 0x07
}


void set_first_child(menu* mymenu, menu* first_child) {
	mymenu->first_child = first_child;
    1480:	f8 01       	movw	r30, r16
    1482:	d6 82       	std	Z+6, r13	; 0x06
    1484:	c5 82       	std	Z+5, r12	; 0x05
volatile int current_menu_size;
volatile int print;


void set_right_sibling(menu* mymenu, menu* right_sibling) {
	mymenu->right_sibling = right_sibling;
    1486:	f6 01       	movw	r30, r12
    1488:	70 86       	std	Z+8, r7	; 0x08
    148a:	67 82       	std	Z+7, r6	; 0x07
    148c:	f3 01       	movw	r30, r6
    148e:	30 86       	std	Z+8, r3	; 0x08
    1490:	27 82       	std	Z+7, r2	; 0x07
	set_first_child(difficulty, d_easy);
	set_right_sibling(d_easy, d_medium);
	set_right_sibling(d_medium, d_hard);

	return current_menu;
}
    1492:	80 91 0c 04 	lds	r24, 0x040C
    1496:	90 91 0d 04 	lds	r25, 0x040D
    149a:	df 91       	pop	r29
    149c:	cf 91       	pop	r28
    149e:	1f 91       	pop	r17
    14a0:	0f 91       	pop	r16
    14a2:	ff 90       	pop	r15
    14a4:	ef 90       	pop	r14
    14a6:	df 90       	pop	r13
    14a8:	cf 90       	pop	r12
    14aa:	bf 90       	pop	r11
    14ac:	af 90       	pop	r10
    14ae:	9f 90       	pop	r9
    14b0:	8f 90       	pop	r8
    14b2:	7f 90       	pop	r7
    14b4:	6f 90       	pop	r6
    14b6:	5f 90       	pop	r5
    14b8:	4f 90       	pop	r4
    14ba:	3f 90       	pop	r3
    14bc:	2f 90       	pop	r2
    14be:	08 95       	ret

000014c0 <oled_menu_select>:


menu_option oled_menu_select(){
    14c0:	1f 93       	push	r17
    14c2:	cf 93       	push	r28
    14c4:	df 93       	push	r29
    14c6:	00 d0       	rcall	.+0      	; 0x14c8 <oled_menu_select+0x8>
    14c8:	00 d0       	rcall	.+0      	; 0x14ca <oled_menu_select+0xa>
    14ca:	1f 92       	push	r1
    14cc:	cd b7       	in	r28, 0x3d	; 61
    14ce:	de b7       	in	r29, 0x3e	; 62
	
	JoystickDir direction = joystickPos().Dir;
    14d0:	0e 94 b1 05 	call	0xb62	; 0xb62 <joystickPos>
    14d4:	29 83       	std	Y+1, r18	; 0x01
    14d6:	3a 83       	std	Y+2, r19	; 0x02
    14d8:	4b 83       	std	Y+3, r20	; 0x03
    14da:	5c 83       	std	Y+4, r21	; 0x04
    14dc:	6d 83       	std	Y+5, r22	; 0x05
    14de:	16 2f       	mov	r17, r22
	current_menu_size = size_of_menu(current_menu);
    14e0:	80 91 0c 04 	lds	r24, 0x040C
    14e4:	90 91 0d 04 	lds	r25, 0x040D
    14e8:	0e 94 4a 09 	call	0x1294	; 0x1294 <size_of_menu>
    14ec:	90 93 0f 04 	sts	0x040F, r25
    14f0:	80 93 0e 04 	sts	0x040E, r24
	
	if(direction == UP){
    14f4:	12 30       	cpi	r17, 0x02	; 2
    14f6:	51 f4       	brne	.+20     	; 0x150c <oled_menu_select+0x4c>
		current_line--;
    14f8:	80 91 41 01 	lds	r24, 0x0141
    14fc:	90 91 42 01 	lds	r25, 0x0142
    1500:	01 97       	sbiw	r24, 0x01	; 1
    1502:	90 93 42 01 	sts	0x0142, r25
    1506:	80 93 41 01 	sts	0x0141, r24
    150a:	0b c0       	rjmp	.+22     	; 0x1522 <oled_menu_select+0x62>
	}
	if(direction == DOWN){
    150c:	13 30       	cpi	r17, 0x03	; 3
    150e:	49 f4       	brne	.+18     	; 0x1522 <oled_menu_select+0x62>
		current_line++;
    1510:	80 91 41 01 	lds	r24, 0x0141
    1514:	90 91 42 01 	lds	r25, 0x0142
    1518:	01 96       	adiw	r24, 0x01	; 1
    151a:	90 93 42 01 	sts	0x0142, r25
    151e:	80 93 41 01 	sts	0x0141, r24
	}
	if(current_line > current_menu_size-1){
    1522:	20 91 0e 04 	lds	r18, 0x040E
    1526:	30 91 0f 04 	lds	r19, 0x040F
    152a:	80 91 41 01 	lds	r24, 0x0141
    152e:	90 91 42 01 	lds	r25, 0x0142
    1532:	21 50       	subi	r18, 0x01	; 1
    1534:	31 09       	sbc	r19, r1
    1536:	28 17       	cp	r18, r24
    1538:	39 07       	cpc	r19, r25
    153a:	4c f4       	brge	.+18     	; 0x154e <oled_menu_select+0x8e>
		current_line = current_menu_size-1;
    153c:	80 91 0e 04 	lds	r24, 0x040E
    1540:	90 91 0f 04 	lds	r25, 0x040F
    1544:	01 97       	sbiw	r24, 0x01	; 1
    1546:	90 93 42 01 	sts	0x0142, r25
    154a:	80 93 41 01 	sts	0x0141, r24
	}
	if(current_line < 0){
    154e:	80 91 41 01 	lds	r24, 0x0141
    1552:	90 91 42 01 	lds	r25, 0x0142
    1556:	99 23       	and	r25, r25
    1558:	24 f4       	brge	.+8      	; 0x1562 <oled_menu_select+0xa2>
		current_line = 0;
    155a:	10 92 42 01 	sts	0x0142, r1
    155e:	10 92 41 01 	sts	0x0141, r1
	}
	if (direction == RIGHT) {
    1562:	11 30       	cpi	r17, 0x01	; 1
    1564:	09 f0       	breq	.+2      	; 0x1568 <oled_menu_select+0xa8>
    1566:	45 c0       	rjmp	.+138    	; 0x15f2 <oled_menu_select+0x132>
		goto_menu();
    1568:	0e 94 69 09 	call	0x12d2	; 0x12d2 <goto_menu>
		if (current_menu->title == "Singel Player"){
    156c:	e0 91 0c 04 	lds	r30, 0x040C
    1570:	f0 91 0d 04 	lds	r31, 0x040D
    1574:	80 81       	ld	r24, Z
    1576:	91 81       	ldd	r25, Z+1	; 0x01
    1578:	80 5b       	subi	r24, 0xB0	; 176
    157a:	93 40       	sbci	r25, 0x03	; 3
    157c:	09 f4       	brne	.+2      	; 0x1580 <oled_menu_select+0xc0>
    157e:	51 c0       	rjmp	.+162    	; 0x1622 <oled_menu_select+0x162>
			return SinglePlayer;
		}
		else if (current_menu->title == "Highscores"){
    1580:	80 81       	ld	r24, Z
    1582:	91 81       	ldd	r25, Z+1	; 0x01
    1584:	85 5a       	subi	r24, 0xA5	; 165
    1586:	93 40       	sbci	r25, 0x03	; 3
    1588:	09 f4       	brne	.+2      	; 0x158c <oled_menu_select+0xcc>
    158a:	4d c0       	rjmp	.+154    	; 0x1626 <oled_menu_select+0x166>
			return Highscore;
		}
		else if (current_menu->title == "Multi Player"){
    158c:	80 81       	ld	r24, Z
    158e:	91 81       	ldd	r25, Z+1	; 0x01
    1590:	8e 5b       	subi	r24, 0xBE	; 190
    1592:	93 40       	sbci	r25, 0x03	; 3
    1594:	09 f4       	brne	.+2      	; 0x1598 <oled_menu_select+0xd8>
    1596:	49 c0       	rjmp	.+146    	; 0x162a <oled_menu_select+0x16a>
			return Multiplayer;
		}
		else if (current_menu->title == "Easy"){
    1598:	80 81       	ld	r24, Z
    159a:	91 81       	ldd	r25, Z+1	; 0x01
    159c:	86 5d       	subi	r24, 0xD6	; 214
    159e:	93 40       	sbci	r25, 0x03	; 3
    15a0:	51 f4       	brne	.+20     	; 0x15b6 <oled_menu_select+0xf6>
			current_menu = current_menu->parent;
    15a2:	03 80       	ldd	r0, Z+3	; 0x03
    15a4:	f4 81       	ldd	r31, Z+4	; 0x04
    15a6:	e0 2d       	mov	r30, r0
			current_menu = current_menu->parent;
    15a8:	83 81       	ldd	r24, Z+3	; 0x03
    15aa:	94 81       	ldd	r25, Z+4	; 0x04
    15ac:	90 93 0d 04 	sts	0x040D, r25
    15b0:	80 93 0c 04 	sts	0x040C, r24
    15b4:	2e c0       	rjmp	.+92     	; 0x1612 <oled_menu_select+0x152>
		}
		else if (current_menu->title == "Medium"){
    15b6:	80 81       	ld	r24, Z
    15b8:	91 81       	ldd	r25, Z+1	; 0x01
    15ba:	8b 5d       	subi	r24, 0xDB	; 219
    15bc:	93 40       	sbci	r25, 0x03	; 3
    15be:	51 f4       	brne	.+20     	; 0x15d4 <oled_menu_select+0x114>
			current_menu = current_menu->parent;
    15c0:	03 80       	ldd	r0, Z+3	; 0x03
    15c2:	f4 81       	ldd	r31, Z+4	; 0x04
    15c4:	e0 2d       	mov	r30, r0
			current_menu = current_menu->parent;
    15c6:	83 81       	ldd	r24, Z+3	; 0x03
    15c8:	94 81       	ldd	r25, Z+4	; 0x04
    15ca:	90 93 0d 04 	sts	0x040D, r25
    15ce:	80 93 0c 04 	sts	0x040C, r24
    15d2:	1f c0       	rjmp	.+62     	; 0x1612 <oled_menu_select+0x152>
		}
		else if (current_menu->title == "Hard"){
    15d4:	80 81       	ld	r24, Z
    15d6:	91 81       	ldd	r25, Z+1	; 0x01
    15d8:	82 5e       	subi	r24, 0xE2	; 226
    15da:	93 40       	sbci	r25, 0x03	; 3
    15dc:	d1 f4       	brne	.+52     	; 0x1612 <oled_menu_select+0x152>
			current_menu = current_menu->parent;
    15de:	03 80       	ldd	r0, Z+3	; 0x03
    15e0:	f4 81       	ldd	r31, Z+4	; 0x04
    15e2:	e0 2d       	mov	r30, r0
			current_menu = current_menu->parent;
    15e4:	83 81       	ldd	r24, Z+3	; 0x03
    15e6:	94 81       	ldd	r25, Z+4	; 0x04
    15e8:	90 93 0d 04 	sts	0x040D, r25
    15ec:	80 93 0c 04 	sts	0x040C, r24
    15f0:	10 c0       	rjmp	.+32     	; 0x1612 <oled_menu_select+0x152>
		}
	}
	
	if (direction == LEFT) {
    15f2:	11 11       	cpse	r17, r1
    15f4:	0e c0       	rjmp	.+28     	; 0x1612 <oled_menu_select+0x152>
		if(current_menu->parent != NULL){
    15f6:	e0 91 0c 04 	lds	r30, 0x040C
    15fa:	f0 91 0d 04 	lds	r31, 0x040D
    15fe:	83 81       	ldd	r24, Z+3	; 0x03
    1600:	94 81       	ldd	r25, Z+4	; 0x04
    1602:	89 2b       	or	r24, r25
    1604:	31 f0       	breq	.+12     	; 0x1612 <oled_menu_select+0x152>
		current_menu = current_menu->parent;
    1606:	83 81       	ldd	r24, Z+3	; 0x03
    1608:	94 81       	ldd	r25, Z+4	; 0x04
    160a:	90 93 0d 04 	sts	0x040D, r25
    160e:	80 93 0c 04 	sts	0x040C, r24
		}
	}
	oled_menu_print(current_menu);
    1612:	80 91 0c 04 	lds	r24, 0x040C
    1616:	90 91 0d 04 	lds	r25, 0x040D
    161a:	0e 94 8d 09 	call	0x131a	; 0x131a <oled_menu_print>
	return NONE;
    161e:	80 e0       	ldi	r24, 0x00	; 0
    1620:	05 c0       	rjmp	.+10     	; 0x162c <oled_menu_select+0x16c>
		current_line = 0;
	}
	if (direction == RIGHT) {
		goto_menu();
		if (current_menu->title == "Singel Player"){
			return SinglePlayer;
    1622:	81 e0       	ldi	r24, 0x01	; 1
    1624:	03 c0       	rjmp	.+6      	; 0x162c <oled_menu_select+0x16c>
		}
		else if (current_menu->title == "Highscores"){
			return Highscore;
    1626:	83 e0       	ldi	r24, 0x03	; 3
    1628:	01 c0       	rjmp	.+2      	; 0x162c <oled_menu_select+0x16c>
		}
		else if (current_menu->title == "Multi Player"){
			return Multiplayer;
    162a:	82 e0       	ldi	r24, 0x02	; 2
		current_menu = current_menu->parent;
		}
	}
	oled_menu_print(current_menu);
	return NONE;
}
    162c:	0f 90       	pop	r0
    162e:	0f 90       	pop	r0
    1630:	0f 90       	pop	r0
    1632:	0f 90       	pop	r0
    1634:	0f 90       	pop	r0
    1636:	df 91       	pop	r29
    1638:	cf 91       	pop	r28
    163a:	1f 91       	pop	r17
    163c:	08 95       	ret

0000163e <slider_position>:
 *  Author: juliessk
 */ 
#include "slider.h"


slider_str slider_position(void){
    163e:	cf 93       	push	r28
	slider_str sliderposition;
	ADC_start_read(CHANNEL3);
    1640:	82 e0       	ldi	r24, 0x02	; 2
    1642:	0e 94 fe 01 	call	0x3fc	; 0x3fc <ADC_start_read>
    1646:	82 e4       	ldi	r24, 0x42	; 66
    1648:	8a 95       	dec	r24
    164a:	f1 f7       	brne	.-4      	; 0x1648 <slider_position+0xa>
    164c:	00 c0       	rjmp	.+0      	; 0x164e <slider_position+0x10>
	_delay_us(200);
	sliderposition.L = get_ADC_data();
    164e:	0e 94 f8 01 	call	0x3f0	; 0x3f0 <get_ADC_data>
    1652:	c8 2f       	mov	r28, r24
	ADC_start_read(CHANNEL4);
    1654:	83 e0       	ldi	r24, 0x03	; 3
    1656:	0e 94 fe 01 	call	0x3fc	; 0x3fc <ADC_start_read>
    165a:	82 e4       	ldi	r24, 0x42	; 66
    165c:	8a 95       	dec	r24
    165e:	f1 f7       	brne	.-4      	; 0x165c <slider_position+0x1e>
    1660:	00 c0       	rjmp	.+0      	; 0x1662 <slider_position+0x24>
	_delay_us(200);
	sliderposition.R =  get_ADC_data();
    1662:	0e 94 f8 01 	call	0x3f0	; 0x3f0 <get_ADC_data>
    1666:	98 2f       	mov	r25, r24
	
	return sliderposition;
}
    1668:	8c 2f       	mov	r24, r28
    166a:	cf 91       	pop	r28
    166c:	08 95       	ret

0000166e <slider_right_button>:

int slider_right_button(void){
	if((PINB & 0b00000010) != 0){ //PB1
    166e:	86 b3       	in	r24, 0x16	; 22
		return 1;
	}
	return 0;
}
    1670:	86 95       	lsr	r24
    1672:	81 70       	andi	r24, 0x01	; 1
    1674:	90 e0       	ldi	r25, 0x00	; 0
    1676:	08 95       	ret

00001678 <slider_left_button>:

int slider_left_button(void){
	if((PINB & 0b00000100) != 0){ //PB2
    1678:	86 b3       	in	r24, 0x16	; 22
		return 1;
	}
	return 0;
}
    167a:	82 fb       	bst	r24, 2
    167c:	88 27       	eor	r24, r24
    167e:	80 f9       	bld	r24, 0
    1680:	90 e0       	ldi	r25, 0x00	; 0
    1682:	08 95       	ret

00001684 <SPI_init>:
#include "bit_macros.h"
#include <avr/delay.h>
void SPI_init(){
	
	// Set SS, MOSI and SCK output
	DDRB = (1<<PB4)|(1<<PB5)|(1<<PB7);
    1684:	80 eb       	ldi	r24, 0xB0	; 176
    1686:	87 bb       	out	0x17, r24	; 23
	// Enable SPI, Master, set clock rate fck/16
	SPCR = (1<<SPE)|(1<<MSTR)|(1<<SPR0);
    1688:	81 e5       	ldi	r24, 0x51	; 81
    168a:	8d b9       	out	0x0d, r24	; 13
	
	/* Set SS-pin high */
	set_bit(PORTB, PB4);
    168c:	c4 9a       	sbi	0x18, 4	; 24
    168e:	08 95       	ret

00001690 <SPI_write>:

void SPI_write(char cData) {
	
	
	/* Start transmission */
	SPDR = cData;
    1690:	8f b9       	out	0x0f, r24	; 15
	
	/* Wait for transmission complete */
	loop_until_bit_is_set(SPSR, SPIF);
    1692:	77 9b       	sbis	0x0e, 7	; 14
    1694:	fe cf       	rjmp	.-4      	; 0x1692 <SPI_write+0x2>
	
}
    1696:	08 95       	ret

00001698 <SPI_read>:

char SPI_read() {
	
	/* Start shifting registers by putting a char in the register */
	SPDR = 0x00;
    1698:	1f b8       	out	0x0f, r1	; 15
	//_delay_ms(10);
	/* Wait for receive complete */ 
	loop_until_bit_is_set(SPSR,SPIF);
    169a:	77 9b       	sbis	0x0e, 7	; 14
    169c:	fe cf       	rjmp	.-4      	; 0x169a <SPI_read+0x2>
	
	return SPDR;
    169e:	8f b1       	in	r24, 0x0f	; 15
}
    16a0:	08 95       	ret

000016a2 <__divmodhi4>:
    16a2:	97 fb       	bst	r25, 7
    16a4:	07 2e       	mov	r0, r23
    16a6:	16 f4       	brtc	.+4      	; 0x16ac <__divmodhi4+0xa>
    16a8:	00 94       	com	r0
    16aa:	07 d0       	rcall	.+14     	; 0x16ba <__divmodhi4_neg1>
    16ac:	77 fd       	sbrc	r23, 7
    16ae:	09 d0       	rcall	.+18     	; 0x16c2 <__divmodhi4_neg2>
    16b0:	0e 94 65 0b 	call	0x16ca	; 0x16ca <__udivmodhi4>
    16b4:	07 fc       	sbrc	r0, 7
    16b6:	05 d0       	rcall	.+10     	; 0x16c2 <__divmodhi4_neg2>
    16b8:	3e f4       	brtc	.+14     	; 0x16c8 <__divmodhi4_exit>

000016ba <__divmodhi4_neg1>:
    16ba:	90 95       	com	r25
    16bc:	81 95       	neg	r24
    16be:	9f 4f       	sbci	r25, 0xFF	; 255
    16c0:	08 95       	ret

000016c2 <__divmodhi4_neg2>:
    16c2:	70 95       	com	r23
    16c4:	61 95       	neg	r22
    16c6:	7f 4f       	sbci	r23, 0xFF	; 255

000016c8 <__divmodhi4_exit>:
    16c8:	08 95       	ret

000016ca <__udivmodhi4>:
    16ca:	aa 1b       	sub	r26, r26
    16cc:	bb 1b       	sub	r27, r27
    16ce:	51 e1       	ldi	r21, 0x11	; 17
    16d0:	07 c0       	rjmp	.+14     	; 0x16e0 <__udivmodhi4_ep>

000016d2 <__udivmodhi4_loop>:
    16d2:	aa 1f       	adc	r26, r26
    16d4:	bb 1f       	adc	r27, r27
    16d6:	a6 17       	cp	r26, r22
    16d8:	b7 07       	cpc	r27, r23
    16da:	10 f0       	brcs	.+4      	; 0x16e0 <__udivmodhi4_ep>
    16dc:	a6 1b       	sub	r26, r22
    16de:	b7 0b       	sbc	r27, r23

000016e0 <__udivmodhi4_ep>:
    16e0:	88 1f       	adc	r24, r24
    16e2:	99 1f       	adc	r25, r25
    16e4:	5a 95       	dec	r21
    16e6:	a9 f7       	brne	.-22     	; 0x16d2 <__udivmodhi4_loop>
    16e8:	80 95       	com	r24
    16ea:	90 95       	com	r25
    16ec:	bc 01       	movw	r22, r24
    16ee:	cd 01       	movw	r24, r26
    16f0:	08 95       	ret

000016f2 <malloc>:
    16f2:	cf 93       	push	r28
    16f4:	df 93       	push	r29
    16f6:	82 30       	cpi	r24, 0x02	; 2
    16f8:	91 05       	cpc	r25, r1
    16fa:	10 f4       	brcc	.+4      	; 0x1700 <malloc+0xe>
    16fc:	82 e0       	ldi	r24, 0x02	; 2
    16fe:	90 e0       	ldi	r25, 0x00	; 0
    1700:	e0 91 12 04 	lds	r30, 0x0412
    1704:	f0 91 13 04 	lds	r31, 0x0413
    1708:	20 e0       	ldi	r18, 0x00	; 0
    170a:	30 e0       	ldi	r19, 0x00	; 0
    170c:	a0 e0       	ldi	r26, 0x00	; 0
    170e:	b0 e0       	ldi	r27, 0x00	; 0
    1710:	30 97       	sbiw	r30, 0x00	; 0
    1712:	39 f1       	breq	.+78     	; 0x1762 <malloc+0x70>
    1714:	40 81       	ld	r20, Z
    1716:	51 81       	ldd	r21, Z+1	; 0x01
    1718:	48 17       	cp	r20, r24
    171a:	59 07       	cpc	r21, r25
    171c:	b8 f0       	brcs	.+46     	; 0x174c <malloc+0x5a>
    171e:	48 17       	cp	r20, r24
    1720:	59 07       	cpc	r21, r25
    1722:	71 f4       	brne	.+28     	; 0x1740 <malloc+0x4e>
    1724:	82 81       	ldd	r24, Z+2	; 0x02
    1726:	93 81       	ldd	r25, Z+3	; 0x03
    1728:	10 97       	sbiw	r26, 0x00	; 0
    172a:	29 f0       	breq	.+10     	; 0x1736 <malloc+0x44>
    172c:	13 96       	adiw	r26, 0x03	; 3
    172e:	9c 93       	st	X, r25
    1730:	8e 93       	st	-X, r24
    1732:	12 97       	sbiw	r26, 0x02	; 2
    1734:	2c c0       	rjmp	.+88     	; 0x178e <malloc+0x9c>
    1736:	90 93 13 04 	sts	0x0413, r25
    173a:	80 93 12 04 	sts	0x0412, r24
    173e:	27 c0       	rjmp	.+78     	; 0x178e <malloc+0x9c>
    1740:	21 15       	cp	r18, r1
    1742:	31 05       	cpc	r19, r1
    1744:	31 f0       	breq	.+12     	; 0x1752 <malloc+0x60>
    1746:	42 17       	cp	r20, r18
    1748:	53 07       	cpc	r21, r19
    174a:	18 f0       	brcs	.+6      	; 0x1752 <malloc+0x60>
    174c:	a9 01       	movw	r20, r18
    174e:	db 01       	movw	r26, r22
    1750:	01 c0       	rjmp	.+2      	; 0x1754 <malloc+0x62>
    1752:	ef 01       	movw	r28, r30
    1754:	9a 01       	movw	r18, r20
    1756:	bd 01       	movw	r22, r26
    1758:	df 01       	movw	r26, r30
    175a:	02 80       	ldd	r0, Z+2	; 0x02
    175c:	f3 81       	ldd	r31, Z+3	; 0x03
    175e:	e0 2d       	mov	r30, r0
    1760:	d7 cf       	rjmp	.-82     	; 0x1710 <malloc+0x1e>
    1762:	21 15       	cp	r18, r1
    1764:	31 05       	cpc	r19, r1
    1766:	f9 f0       	breq	.+62     	; 0x17a6 <malloc+0xb4>
    1768:	28 1b       	sub	r18, r24
    176a:	39 0b       	sbc	r19, r25
    176c:	24 30       	cpi	r18, 0x04	; 4
    176e:	31 05       	cpc	r19, r1
    1770:	80 f4       	brcc	.+32     	; 0x1792 <malloc+0xa0>
    1772:	8a 81       	ldd	r24, Y+2	; 0x02
    1774:	9b 81       	ldd	r25, Y+3	; 0x03
    1776:	61 15       	cp	r22, r1
    1778:	71 05       	cpc	r23, r1
    177a:	21 f0       	breq	.+8      	; 0x1784 <malloc+0x92>
    177c:	fb 01       	movw	r30, r22
    177e:	93 83       	std	Z+3, r25	; 0x03
    1780:	82 83       	std	Z+2, r24	; 0x02
    1782:	04 c0       	rjmp	.+8      	; 0x178c <malloc+0x9a>
    1784:	90 93 13 04 	sts	0x0413, r25
    1788:	80 93 12 04 	sts	0x0412, r24
    178c:	fe 01       	movw	r30, r28
    178e:	32 96       	adiw	r30, 0x02	; 2
    1790:	44 c0       	rjmp	.+136    	; 0x181a <malloc+0x128>
    1792:	fe 01       	movw	r30, r28
    1794:	e2 0f       	add	r30, r18
    1796:	f3 1f       	adc	r31, r19
    1798:	81 93       	st	Z+, r24
    179a:	91 93       	st	Z+, r25
    179c:	22 50       	subi	r18, 0x02	; 2
    179e:	31 09       	sbc	r19, r1
    17a0:	39 83       	std	Y+1, r19	; 0x01
    17a2:	28 83       	st	Y, r18
    17a4:	3a c0       	rjmp	.+116    	; 0x181a <malloc+0x128>
    17a6:	20 91 10 04 	lds	r18, 0x0410
    17aa:	30 91 11 04 	lds	r19, 0x0411
    17ae:	23 2b       	or	r18, r19
    17b0:	41 f4       	brne	.+16     	; 0x17c2 <malloc+0xd0>
    17b2:	20 91 02 01 	lds	r18, 0x0102
    17b6:	30 91 03 01 	lds	r19, 0x0103
    17ba:	30 93 11 04 	sts	0x0411, r19
    17be:	20 93 10 04 	sts	0x0410, r18
    17c2:	20 91 00 01 	lds	r18, 0x0100
    17c6:	30 91 01 01 	lds	r19, 0x0101
    17ca:	21 15       	cp	r18, r1
    17cc:	31 05       	cpc	r19, r1
    17ce:	41 f4       	brne	.+16     	; 0x17e0 <malloc+0xee>
    17d0:	2d b7       	in	r18, 0x3d	; 61
    17d2:	3e b7       	in	r19, 0x3e	; 62
    17d4:	40 91 04 01 	lds	r20, 0x0104
    17d8:	50 91 05 01 	lds	r21, 0x0105
    17dc:	24 1b       	sub	r18, r20
    17de:	35 0b       	sbc	r19, r21
    17e0:	e0 91 10 04 	lds	r30, 0x0410
    17e4:	f0 91 11 04 	lds	r31, 0x0411
    17e8:	e2 17       	cp	r30, r18
    17ea:	f3 07       	cpc	r31, r19
    17ec:	a0 f4       	brcc	.+40     	; 0x1816 <malloc+0x124>
    17ee:	2e 1b       	sub	r18, r30
    17f0:	3f 0b       	sbc	r19, r31
    17f2:	28 17       	cp	r18, r24
    17f4:	39 07       	cpc	r19, r25
    17f6:	78 f0       	brcs	.+30     	; 0x1816 <malloc+0x124>
    17f8:	ac 01       	movw	r20, r24
    17fa:	4e 5f       	subi	r20, 0xFE	; 254
    17fc:	5f 4f       	sbci	r21, 0xFF	; 255
    17fe:	24 17       	cp	r18, r20
    1800:	35 07       	cpc	r19, r21
    1802:	48 f0       	brcs	.+18     	; 0x1816 <malloc+0x124>
    1804:	4e 0f       	add	r20, r30
    1806:	5f 1f       	adc	r21, r31
    1808:	50 93 11 04 	sts	0x0411, r21
    180c:	40 93 10 04 	sts	0x0410, r20
    1810:	81 93       	st	Z+, r24
    1812:	91 93       	st	Z+, r25
    1814:	02 c0       	rjmp	.+4      	; 0x181a <malloc+0x128>
    1816:	e0 e0       	ldi	r30, 0x00	; 0
    1818:	f0 e0       	ldi	r31, 0x00	; 0
    181a:	cf 01       	movw	r24, r30
    181c:	df 91       	pop	r29
    181e:	cf 91       	pop	r28
    1820:	08 95       	ret

00001822 <free>:
    1822:	cf 93       	push	r28
    1824:	df 93       	push	r29
    1826:	00 97       	sbiw	r24, 0x00	; 0
    1828:	09 f4       	brne	.+2      	; 0x182c <free+0xa>
    182a:	87 c0       	rjmp	.+270    	; 0x193a <free+0x118>
    182c:	fc 01       	movw	r30, r24
    182e:	32 97       	sbiw	r30, 0x02	; 2
    1830:	13 82       	std	Z+3, r1	; 0x03
    1832:	12 82       	std	Z+2, r1	; 0x02
    1834:	c0 91 12 04 	lds	r28, 0x0412
    1838:	d0 91 13 04 	lds	r29, 0x0413
    183c:	20 97       	sbiw	r28, 0x00	; 0
    183e:	81 f4       	brne	.+32     	; 0x1860 <free+0x3e>
    1840:	20 81       	ld	r18, Z
    1842:	31 81       	ldd	r19, Z+1	; 0x01
    1844:	28 0f       	add	r18, r24
    1846:	39 1f       	adc	r19, r25
    1848:	80 91 10 04 	lds	r24, 0x0410
    184c:	90 91 11 04 	lds	r25, 0x0411
    1850:	82 17       	cp	r24, r18
    1852:	93 07       	cpc	r25, r19
    1854:	79 f5       	brne	.+94     	; 0x18b4 <free+0x92>
    1856:	f0 93 11 04 	sts	0x0411, r31
    185a:	e0 93 10 04 	sts	0x0410, r30
    185e:	6d c0       	rjmp	.+218    	; 0x193a <free+0x118>
    1860:	de 01       	movw	r26, r28
    1862:	20 e0       	ldi	r18, 0x00	; 0
    1864:	30 e0       	ldi	r19, 0x00	; 0
    1866:	ae 17       	cp	r26, r30
    1868:	bf 07       	cpc	r27, r31
    186a:	50 f4       	brcc	.+20     	; 0x1880 <free+0x5e>
    186c:	12 96       	adiw	r26, 0x02	; 2
    186e:	4d 91       	ld	r20, X+
    1870:	5c 91       	ld	r21, X
    1872:	13 97       	sbiw	r26, 0x03	; 3
    1874:	9d 01       	movw	r18, r26
    1876:	41 15       	cp	r20, r1
    1878:	51 05       	cpc	r21, r1
    187a:	09 f1       	breq	.+66     	; 0x18be <free+0x9c>
    187c:	da 01       	movw	r26, r20
    187e:	f3 cf       	rjmp	.-26     	; 0x1866 <free+0x44>
    1880:	b3 83       	std	Z+3, r27	; 0x03
    1882:	a2 83       	std	Z+2, r26	; 0x02
    1884:	40 81       	ld	r20, Z
    1886:	51 81       	ldd	r21, Z+1	; 0x01
    1888:	84 0f       	add	r24, r20
    188a:	95 1f       	adc	r25, r21
    188c:	8a 17       	cp	r24, r26
    188e:	9b 07       	cpc	r25, r27
    1890:	71 f4       	brne	.+28     	; 0x18ae <free+0x8c>
    1892:	8d 91       	ld	r24, X+
    1894:	9c 91       	ld	r25, X
    1896:	11 97       	sbiw	r26, 0x01	; 1
    1898:	84 0f       	add	r24, r20
    189a:	95 1f       	adc	r25, r21
    189c:	02 96       	adiw	r24, 0x02	; 2
    189e:	91 83       	std	Z+1, r25	; 0x01
    18a0:	80 83       	st	Z, r24
    18a2:	12 96       	adiw	r26, 0x02	; 2
    18a4:	8d 91       	ld	r24, X+
    18a6:	9c 91       	ld	r25, X
    18a8:	13 97       	sbiw	r26, 0x03	; 3
    18aa:	93 83       	std	Z+3, r25	; 0x03
    18ac:	82 83       	std	Z+2, r24	; 0x02
    18ae:	21 15       	cp	r18, r1
    18b0:	31 05       	cpc	r19, r1
    18b2:	29 f4       	brne	.+10     	; 0x18be <free+0x9c>
    18b4:	f0 93 13 04 	sts	0x0413, r31
    18b8:	e0 93 12 04 	sts	0x0412, r30
    18bc:	3e c0       	rjmp	.+124    	; 0x193a <free+0x118>
    18be:	d9 01       	movw	r26, r18
    18c0:	13 96       	adiw	r26, 0x03	; 3
    18c2:	fc 93       	st	X, r31
    18c4:	ee 93       	st	-X, r30
    18c6:	12 97       	sbiw	r26, 0x02	; 2
    18c8:	4d 91       	ld	r20, X+
    18ca:	5d 91       	ld	r21, X+
    18cc:	a4 0f       	add	r26, r20
    18ce:	b5 1f       	adc	r27, r21
    18d0:	ea 17       	cp	r30, r26
    18d2:	fb 07       	cpc	r31, r27
    18d4:	79 f4       	brne	.+30     	; 0x18f4 <free+0xd2>
    18d6:	80 81       	ld	r24, Z
    18d8:	91 81       	ldd	r25, Z+1	; 0x01
    18da:	84 0f       	add	r24, r20
    18dc:	95 1f       	adc	r25, r21
    18de:	02 96       	adiw	r24, 0x02	; 2
    18e0:	d9 01       	movw	r26, r18
    18e2:	11 96       	adiw	r26, 0x01	; 1
    18e4:	9c 93       	st	X, r25
    18e6:	8e 93       	st	-X, r24
    18e8:	82 81       	ldd	r24, Z+2	; 0x02
    18ea:	93 81       	ldd	r25, Z+3	; 0x03
    18ec:	13 96       	adiw	r26, 0x03	; 3
    18ee:	9c 93       	st	X, r25
    18f0:	8e 93       	st	-X, r24
    18f2:	12 97       	sbiw	r26, 0x02	; 2
    18f4:	e0 e0       	ldi	r30, 0x00	; 0
    18f6:	f0 e0       	ldi	r31, 0x00	; 0
    18f8:	8a 81       	ldd	r24, Y+2	; 0x02
    18fa:	9b 81       	ldd	r25, Y+3	; 0x03
    18fc:	00 97       	sbiw	r24, 0x00	; 0
    18fe:	19 f0       	breq	.+6      	; 0x1906 <free+0xe4>
    1900:	fe 01       	movw	r30, r28
    1902:	ec 01       	movw	r28, r24
    1904:	f9 cf       	rjmp	.-14     	; 0x18f8 <free+0xd6>
    1906:	ce 01       	movw	r24, r28
    1908:	02 96       	adiw	r24, 0x02	; 2
    190a:	28 81       	ld	r18, Y
    190c:	39 81       	ldd	r19, Y+1	; 0x01
    190e:	82 0f       	add	r24, r18
    1910:	93 1f       	adc	r25, r19
    1912:	20 91 10 04 	lds	r18, 0x0410
    1916:	30 91 11 04 	lds	r19, 0x0411
    191a:	28 17       	cp	r18, r24
    191c:	39 07       	cpc	r19, r25
    191e:	69 f4       	brne	.+26     	; 0x193a <free+0x118>
    1920:	30 97       	sbiw	r30, 0x00	; 0
    1922:	29 f4       	brne	.+10     	; 0x192e <free+0x10c>
    1924:	10 92 13 04 	sts	0x0413, r1
    1928:	10 92 12 04 	sts	0x0412, r1
    192c:	02 c0       	rjmp	.+4      	; 0x1932 <free+0x110>
    192e:	13 82       	std	Z+3, r1	; 0x03
    1930:	12 82       	std	Z+2, r1	; 0x02
    1932:	d0 93 11 04 	sts	0x0411, r29
    1936:	c0 93 10 04 	sts	0x0410, r28
    193a:	df 91       	pop	r29
    193c:	cf 91       	pop	r28
    193e:	08 95       	ret

00001940 <fdevopen>:
    1940:	0f 93       	push	r16
    1942:	1f 93       	push	r17
    1944:	cf 93       	push	r28
    1946:	df 93       	push	r29
    1948:	ec 01       	movw	r28, r24
    194a:	8b 01       	movw	r16, r22
    194c:	00 97       	sbiw	r24, 0x00	; 0
    194e:	31 f4       	brne	.+12     	; 0x195c <fdevopen+0x1c>
    1950:	61 15       	cp	r22, r1
    1952:	71 05       	cpc	r23, r1
    1954:	19 f4       	brne	.+6      	; 0x195c <fdevopen+0x1c>
    1956:	80 e0       	ldi	r24, 0x00	; 0
    1958:	90 e0       	ldi	r25, 0x00	; 0
    195a:	38 c0       	rjmp	.+112    	; 0x19cc <fdevopen+0x8c>
    195c:	6e e0       	ldi	r22, 0x0E	; 14
    195e:	70 e0       	ldi	r23, 0x00	; 0
    1960:	81 e0       	ldi	r24, 0x01	; 1
    1962:	90 e0       	ldi	r25, 0x00	; 0
    1964:	0e 94 fe 0e 	call	0x1dfc	; 0x1dfc <calloc>
    1968:	fc 01       	movw	r30, r24
    196a:	00 97       	sbiw	r24, 0x00	; 0
    196c:	a1 f3       	breq	.-24     	; 0x1956 <fdevopen+0x16>
    196e:	80 e8       	ldi	r24, 0x80	; 128
    1970:	83 83       	std	Z+3, r24	; 0x03
    1972:	01 15       	cp	r16, r1
    1974:	11 05       	cpc	r17, r1
    1976:	71 f0       	breq	.+28     	; 0x1994 <fdevopen+0x54>
    1978:	13 87       	std	Z+11, r17	; 0x0b
    197a:	02 87       	std	Z+10, r16	; 0x0a
    197c:	81 e8       	ldi	r24, 0x81	; 129
    197e:	83 83       	std	Z+3, r24	; 0x03
    1980:	80 91 14 04 	lds	r24, 0x0414
    1984:	90 91 15 04 	lds	r25, 0x0415
    1988:	89 2b       	or	r24, r25
    198a:	21 f4       	brne	.+8      	; 0x1994 <fdevopen+0x54>
    198c:	f0 93 15 04 	sts	0x0415, r31
    1990:	e0 93 14 04 	sts	0x0414, r30
    1994:	20 97       	sbiw	r28, 0x00	; 0
    1996:	c9 f0       	breq	.+50     	; 0x19ca <fdevopen+0x8a>
    1998:	d1 87       	std	Z+9, r29	; 0x09
    199a:	c0 87       	std	Z+8, r28	; 0x08
    199c:	83 81       	ldd	r24, Z+3	; 0x03
    199e:	82 60       	ori	r24, 0x02	; 2
    19a0:	83 83       	std	Z+3, r24	; 0x03
    19a2:	80 91 16 04 	lds	r24, 0x0416
    19a6:	90 91 17 04 	lds	r25, 0x0417
    19aa:	89 2b       	or	r24, r25
    19ac:	71 f4       	brne	.+28     	; 0x19ca <fdevopen+0x8a>
    19ae:	f0 93 17 04 	sts	0x0417, r31
    19b2:	e0 93 16 04 	sts	0x0416, r30
    19b6:	80 91 18 04 	lds	r24, 0x0418
    19ba:	90 91 19 04 	lds	r25, 0x0419
    19be:	89 2b       	or	r24, r25
    19c0:	21 f4       	brne	.+8      	; 0x19ca <fdevopen+0x8a>
    19c2:	f0 93 19 04 	sts	0x0419, r31
    19c6:	e0 93 18 04 	sts	0x0418, r30
    19ca:	cf 01       	movw	r24, r30
    19cc:	df 91       	pop	r29
    19ce:	cf 91       	pop	r28
    19d0:	1f 91       	pop	r17
    19d2:	0f 91       	pop	r16
    19d4:	08 95       	ret

000019d6 <printf>:
    19d6:	a0 e0       	ldi	r26, 0x00	; 0
    19d8:	b0 e0       	ldi	r27, 0x00	; 0
    19da:	e1 ef       	ldi	r30, 0xF1	; 241
    19dc:	fc e0       	ldi	r31, 0x0C	; 12
    19de:	0c 94 d7 0f 	jmp	0x1fae	; 0x1fae <__prologue_saves__+0x20>
    19e2:	fe 01       	movw	r30, r28
    19e4:	35 96       	adiw	r30, 0x05	; 5
    19e6:	61 91       	ld	r22, Z+
    19e8:	71 91       	ld	r23, Z+
    19ea:	af 01       	movw	r20, r30
    19ec:	80 91 16 04 	lds	r24, 0x0416
    19f0:	90 91 17 04 	lds	r25, 0x0417
    19f4:	0e 94 2c 0d 	call	0x1a58	; 0x1a58 <vfprintf>
    19f8:	e2 e0       	ldi	r30, 0x02	; 2
    19fa:	0c 94 f3 0f 	jmp	0x1fe6	; 0x1fe6 <__epilogue_restores__+0x20>

000019fe <puts>:
    19fe:	0f 93       	push	r16
    1a00:	1f 93       	push	r17
    1a02:	cf 93       	push	r28
    1a04:	df 93       	push	r29
    1a06:	e0 91 16 04 	lds	r30, 0x0416
    1a0a:	f0 91 17 04 	lds	r31, 0x0417
    1a0e:	23 81       	ldd	r18, Z+3	; 0x03
    1a10:	21 ff       	sbrs	r18, 1
    1a12:	1b c0       	rjmp	.+54     	; 0x1a4a <puts+0x4c>
    1a14:	ec 01       	movw	r28, r24
    1a16:	00 e0       	ldi	r16, 0x00	; 0
    1a18:	10 e0       	ldi	r17, 0x00	; 0
    1a1a:	89 91       	ld	r24, Y+
    1a1c:	60 91 16 04 	lds	r22, 0x0416
    1a20:	70 91 17 04 	lds	r23, 0x0417
    1a24:	db 01       	movw	r26, r22
    1a26:	18 96       	adiw	r26, 0x08	; 8
    1a28:	ed 91       	ld	r30, X+
    1a2a:	fc 91       	ld	r31, X
    1a2c:	19 97       	sbiw	r26, 0x09	; 9
    1a2e:	88 23       	and	r24, r24
    1a30:	31 f0       	breq	.+12     	; 0x1a3e <puts+0x40>
    1a32:	09 95       	icall
    1a34:	89 2b       	or	r24, r25
    1a36:	89 f3       	breq	.-30     	; 0x1a1a <puts+0x1c>
    1a38:	0f ef       	ldi	r16, 0xFF	; 255
    1a3a:	1f ef       	ldi	r17, 0xFF	; 255
    1a3c:	ee cf       	rjmp	.-36     	; 0x1a1a <puts+0x1c>
    1a3e:	8a e0       	ldi	r24, 0x0A	; 10
    1a40:	09 95       	icall
    1a42:	89 2b       	or	r24, r25
    1a44:	11 f4       	brne	.+4      	; 0x1a4a <puts+0x4c>
    1a46:	c8 01       	movw	r24, r16
    1a48:	02 c0       	rjmp	.+4      	; 0x1a4e <puts+0x50>
    1a4a:	8f ef       	ldi	r24, 0xFF	; 255
    1a4c:	9f ef       	ldi	r25, 0xFF	; 255
    1a4e:	df 91       	pop	r29
    1a50:	cf 91       	pop	r28
    1a52:	1f 91       	pop	r17
    1a54:	0f 91       	pop	r16
    1a56:	08 95       	ret

00001a58 <vfprintf>:
    1a58:	ac e0       	ldi	r26, 0x0C	; 12
    1a5a:	b0 e0       	ldi	r27, 0x00	; 0
    1a5c:	e2 e3       	ldi	r30, 0x32	; 50
    1a5e:	fd e0       	ldi	r31, 0x0D	; 13
    1a60:	0c 94 c7 0f 	jmp	0x1f8e	; 0x1f8e <__prologue_saves__>
    1a64:	7c 01       	movw	r14, r24
    1a66:	6b 01       	movw	r12, r22
    1a68:	8a 01       	movw	r16, r20
    1a6a:	fc 01       	movw	r30, r24
    1a6c:	17 82       	std	Z+7, r1	; 0x07
    1a6e:	16 82       	std	Z+6, r1	; 0x06
    1a70:	83 81       	ldd	r24, Z+3	; 0x03
    1a72:	81 ff       	sbrs	r24, 1
    1a74:	bd c1       	rjmp	.+890    	; 0x1df0 <vfprintf+0x398>
    1a76:	ce 01       	movw	r24, r28
    1a78:	01 96       	adiw	r24, 0x01	; 1
    1a7a:	4c 01       	movw	r8, r24
    1a7c:	f7 01       	movw	r30, r14
    1a7e:	93 81       	ldd	r25, Z+3	; 0x03
    1a80:	f6 01       	movw	r30, r12
    1a82:	93 fd       	sbrc	r25, 3
    1a84:	85 91       	lpm	r24, Z+
    1a86:	93 ff       	sbrs	r25, 3
    1a88:	81 91       	ld	r24, Z+
    1a8a:	6f 01       	movw	r12, r30
    1a8c:	88 23       	and	r24, r24
    1a8e:	09 f4       	brne	.+2      	; 0x1a92 <vfprintf+0x3a>
    1a90:	ab c1       	rjmp	.+854    	; 0x1de8 <vfprintf+0x390>
    1a92:	85 32       	cpi	r24, 0x25	; 37
    1a94:	39 f4       	brne	.+14     	; 0x1aa4 <vfprintf+0x4c>
    1a96:	93 fd       	sbrc	r25, 3
    1a98:	85 91       	lpm	r24, Z+
    1a9a:	93 ff       	sbrs	r25, 3
    1a9c:	81 91       	ld	r24, Z+
    1a9e:	6f 01       	movw	r12, r30
    1aa0:	85 32       	cpi	r24, 0x25	; 37
    1aa2:	29 f4       	brne	.+10     	; 0x1aae <vfprintf+0x56>
    1aa4:	b7 01       	movw	r22, r14
    1aa6:	90 e0       	ldi	r25, 0x00	; 0
    1aa8:	0e 94 37 0f 	call	0x1e6e	; 0x1e6e <fputc>
    1aac:	e7 cf       	rjmp	.-50     	; 0x1a7c <vfprintf+0x24>
    1aae:	51 2c       	mov	r5, r1
    1ab0:	31 2c       	mov	r3, r1
    1ab2:	20 e0       	ldi	r18, 0x00	; 0
    1ab4:	20 32       	cpi	r18, 0x20	; 32
    1ab6:	a0 f4       	brcc	.+40     	; 0x1ae0 <vfprintf+0x88>
    1ab8:	8b 32       	cpi	r24, 0x2B	; 43
    1aba:	69 f0       	breq	.+26     	; 0x1ad6 <vfprintf+0x7e>
    1abc:	30 f4       	brcc	.+12     	; 0x1aca <vfprintf+0x72>
    1abe:	80 32       	cpi	r24, 0x20	; 32
    1ac0:	59 f0       	breq	.+22     	; 0x1ad8 <vfprintf+0x80>
    1ac2:	83 32       	cpi	r24, 0x23	; 35
    1ac4:	69 f4       	brne	.+26     	; 0x1ae0 <vfprintf+0x88>
    1ac6:	20 61       	ori	r18, 0x10	; 16
    1ac8:	2c c0       	rjmp	.+88     	; 0x1b22 <vfprintf+0xca>
    1aca:	8d 32       	cpi	r24, 0x2D	; 45
    1acc:	39 f0       	breq	.+14     	; 0x1adc <vfprintf+0x84>
    1ace:	80 33       	cpi	r24, 0x30	; 48
    1ad0:	39 f4       	brne	.+14     	; 0x1ae0 <vfprintf+0x88>
    1ad2:	21 60       	ori	r18, 0x01	; 1
    1ad4:	26 c0       	rjmp	.+76     	; 0x1b22 <vfprintf+0xca>
    1ad6:	22 60       	ori	r18, 0x02	; 2
    1ad8:	24 60       	ori	r18, 0x04	; 4
    1ada:	23 c0       	rjmp	.+70     	; 0x1b22 <vfprintf+0xca>
    1adc:	28 60       	ori	r18, 0x08	; 8
    1ade:	21 c0       	rjmp	.+66     	; 0x1b22 <vfprintf+0xca>
    1ae0:	27 fd       	sbrc	r18, 7
    1ae2:	27 c0       	rjmp	.+78     	; 0x1b32 <vfprintf+0xda>
    1ae4:	30 ed       	ldi	r19, 0xD0	; 208
    1ae6:	38 0f       	add	r19, r24
    1ae8:	3a 30       	cpi	r19, 0x0A	; 10
    1aea:	78 f4       	brcc	.+30     	; 0x1b0a <vfprintf+0xb2>
    1aec:	26 ff       	sbrs	r18, 6
    1aee:	06 c0       	rjmp	.+12     	; 0x1afc <vfprintf+0xa4>
    1af0:	fa e0       	ldi	r31, 0x0A	; 10
    1af2:	5f 9e       	mul	r5, r31
    1af4:	30 0d       	add	r19, r0
    1af6:	11 24       	eor	r1, r1
    1af8:	53 2e       	mov	r5, r19
    1afa:	13 c0       	rjmp	.+38     	; 0x1b22 <vfprintf+0xca>
    1afc:	8a e0       	ldi	r24, 0x0A	; 10
    1afe:	38 9e       	mul	r3, r24
    1b00:	30 0d       	add	r19, r0
    1b02:	11 24       	eor	r1, r1
    1b04:	33 2e       	mov	r3, r19
    1b06:	20 62       	ori	r18, 0x20	; 32
    1b08:	0c c0       	rjmp	.+24     	; 0x1b22 <vfprintf+0xca>
    1b0a:	8e 32       	cpi	r24, 0x2E	; 46
    1b0c:	21 f4       	brne	.+8      	; 0x1b16 <vfprintf+0xbe>
    1b0e:	26 fd       	sbrc	r18, 6
    1b10:	6b c1       	rjmp	.+726    	; 0x1de8 <vfprintf+0x390>
    1b12:	20 64       	ori	r18, 0x40	; 64
    1b14:	06 c0       	rjmp	.+12     	; 0x1b22 <vfprintf+0xca>
    1b16:	8c 36       	cpi	r24, 0x6C	; 108
    1b18:	11 f4       	brne	.+4      	; 0x1b1e <vfprintf+0xc6>
    1b1a:	20 68       	ori	r18, 0x80	; 128
    1b1c:	02 c0       	rjmp	.+4      	; 0x1b22 <vfprintf+0xca>
    1b1e:	88 36       	cpi	r24, 0x68	; 104
    1b20:	41 f4       	brne	.+16     	; 0x1b32 <vfprintf+0xda>
    1b22:	f6 01       	movw	r30, r12
    1b24:	93 fd       	sbrc	r25, 3
    1b26:	85 91       	lpm	r24, Z+
    1b28:	93 ff       	sbrs	r25, 3
    1b2a:	81 91       	ld	r24, Z+
    1b2c:	6f 01       	movw	r12, r30
    1b2e:	81 11       	cpse	r24, r1
    1b30:	c1 cf       	rjmp	.-126    	; 0x1ab4 <vfprintf+0x5c>
    1b32:	98 2f       	mov	r25, r24
    1b34:	9f 7d       	andi	r25, 0xDF	; 223
    1b36:	95 54       	subi	r25, 0x45	; 69
    1b38:	93 30       	cpi	r25, 0x03	; 3
    1b3a:	28 f4       	brcc	.+10     	; 0x1b46 <vfprintf+0xee>
    1b3c:	0c 5f       	subi	r16, 0xFC	; 252
    1b3e:	1f 4f       	sbci	r17, 0xFF	; 255
    1b40:	ff e3       	ldi	r31, 0x3F	; 63
    1b42:	f9 83       	std	Y+1, r31	; 0x01
    1b44:	0d c0       	rjmp	.+26     	; 0x1b60 <vfprintf+0x108>
    1b46:	83 36       	cpi	r24, 0x63	; 99
    1b48:	31 f0       	breq	.+12     	; 0x1b56 <vfprintf+0xfe>
    1b4a:	83 37       	cpi	r24, 0x73	; 115
    1b4c:	71 f0       	breq	.+28     	; 0x1b6a <vfprintf+0x112>
    1b4e:	83 35       	cpi	r24, 0x53	; 83
    1b50:	09 f0       	breq	.+2      	; 0x1b54 <vfprintf+0xfc>
    1b52:	5b c0       	rjmp	.+182    	; 0x1c0a <vfprintf+0x1b2>
    1b54:	22 c0       	rjmp	.+68     	; 0x1b9a <vfprintf+0x142>
    1b56:	f8 01       	movw	r30, r16
    1b58:	80 81       	ld	r24, Z
    1b5a:	89 83       	std	Y+1, r24	; 0x01
    1b5c:	0e 5f       	subi	r16, 0xFE	; 254
    1b5e:	1f 4f       	sbci	r17, 0xFF	; 255
    1b60:	44 24       	eor	r4, r4
    1b62:	43 94       	inc	r4
    1b64:	51 2c       	mov	r5, r1
    1b66:	54 01       	movw	r10, r8
    1b68:	15 c0       	rjmp	.+42     	; 0x1b94 <vfprintf+0x13c>
    1b6a:	38 01       	movw	r6, r16
    1b6c:	f2 e0       	ldi	r31, 0x02	; 2
    1b6e:	6f 0e       	add	r6, r31
    1b70:	71 1c       	adc	r7, r1
    1b72:	f8 01       	movw	r30, r16
    1b74:	a0 80       	ld	r10, Z
    1b76:	b1 80       	ldd	r11, Z+1	; 0x01
    1b78:	26 ff       	sbrs	r18, 6
    1b7a:	03 c0       	rjmp	.+6      	; 0x1b82 <vfprintf+0x12a>
    1b7c:	65 2d       	mov	r22, r5
    1b7e:	70 e0       	ldi	r23, 0x00	; 0
    1b80:	02 c0       	rjmp	.+4      	; 0x1b86 <vfprintf+0x12e>
    1b82:	6f ef       	ldi	r22, 0xFF	; 255
    1b84:	7f ef       	ldi	r23, 0xFF	; 255
    1b86:	c5 01       	movw	r24, r10
    1b88:	2c 87       	std	Y+12, r18	; 0x0c
    1b8a:	0e 94 2c 0f 	call	0x1e58	; 0x1e58 <strnlen>
    1b8e:	2c 01       	movw	r4, r24
    1b90:	83 01       	movw	r16, r6
    1b92:	2c 85       	ldd	r18, Y+12	; 0x0c
    1b94:	2f 77       	andi	r18, 0x7F	; 127
    1b96:	22 2e       	mov	r2, r18
    1b98:	17 c0       	rjmp	.+46     	; 0x1bc8 <vfprintf+0x170>
    1b9a:	38 01       	movw	r6, r16
    1b9c:	f2 e0       	ldi	r31, 0x02	; 2
    1b9e:	6f 0e       	add	r6, r31
    1ba0:	71 1c       	adc	r7, r1
    1ba2:	f8 01       	movw	r30, r16
    1ba4:	a0 80       	ld	r10, Z
    1ba6:	b1 80       	ldd	r11, Z+1	; 0x01
    1ba8:	26 ff       	sbrs	r18, 6
    1baa:	03 c0       	rjmp	.+6      	; 0x1bb2 <vfprintf+0x15a>
    1bac:	65 2d       	mov	r22, r5
    1bae:	70 e0       	ldi	r23, 0x00	; 0
    1bb0:	02 c0       	rjmp	.+4      	; 0x1bb6 <vfprintf+0x15e>
    1bb2:	6f ef       	ldi	r22, 0xFF	; 255
    1bb4:	7f ef       	ldi	r23, 0xFF	; 255
    1bb6:	c5 01       	movw	r24, r10
    1bb8:	2c 87       	std	Y+12, r18	; 0x0c
    1bba:	0e 94 1a 0f 	call	0x1e34	; 0x1e34 <strnlen_P>
    1bbe:	2c 01       	movw	r4, r24
    1bc0:	2c 85       	ldd	r18, Y+12	; 0x0c
    1bc2:	20 68       	ori	r18, 0x80	; 128
    1bc4:	22 2e       	mov	r2, r18
    1bc6:	83 01       	movw	r16, r6
    1bc8:	23 fc       	sbrc	r2, 3
    1bca:	1b c0       	rjmp	.+54     	; 0x1c02 <vfprintf+0x1aa>
    1bcc:	83 2d       	mov	r24, r3
    1bce:	90 e0       	ldi	r25, 0x00	; 0
    1bd0:	48 16       	cp	r4, r24
    1bd2:	59 06       	cpc	r5, r25
    1bd4:	b0 f4       	brcc	.+44     	; 0x1c02 <vfprintf+0x1aa>
    1bd6:	b7 01       	movw	r22, r14
    1bd8:	80 e2       	ldi	r24, 0x20	; 32
    1bda:	90 e0       	ldi	r25, 0x00	; 0
    1bdc:	0e 94 37 0f 	call	0x1e6e	; 0x1e6e <fputc>
    1be0:	3a 94       	dec	r3
    1be2:	f4 cf       	rjmp	.-24     	; 0x1bcc <vfprintf+0x174>
    1be4:	f5 01       	movw	r30, r10
    1be6:	27 fc       	sbrc	r2, 7
    1be8:	85 91       	lpm	r24, Z+
    1bea:	27 fe       	sbrs	r2, 7
    1bec:	81 91       	ld	r24, Z+
    1bee:	5f 01       	movw	r10, r30
    1bf0:	b7 01       	movw	r22, r14
    1bf2:	90 e0       	ldi	r25, 0x00	; 0
    1bf4:	0e 94 37 0f 	call	0x1e6e	; 0x1e6e <fputc>
    1bf8:	31 10       	cpse	r3, r1
    1bfa:	3a 94       	dec	r3
    1bfc:	f1 e0       	ldi	r31, 0x01	; 1
    1bfe:	4f 1a       	sub	r4, r31
    1c00:	51 08       	sbc	r5, r1
    1c02:	41 14       	cp	r4, r1
    1c04:	51 04       	cpc	r5, r1
    1c06:	71 f7       	brne	.-36     	; 0x1be4 <vfprintf+0x18c>
    1c08:	e5 c0       	rjmp	.+458    	; 0x1dd4 <vfprintf+0x37c>
    1c0a:	84 36       	cpi	r24, 0x64	; 100
    1c0c:	11 f0       	breq	.+4      	; 0x1c12 <vfprintf+0x1ba>
    1c0e:	89 36       	cpi	r24, 0x69	; 105
    1c10:	39 f5       	brne	.+78     	; 0x1c60 <vfprintf+0x208>
    1c12:	f8 01       	movw	r30, r16
    1c14:	27 ff       	sbrs	r18, 7
    1c16:	07 c0       	rjmp	.+14     	; 0x1c26 <vfprintf+0x1ce>
    1c18:	60 81       	ld	r22, Z
    1c1a:	71 81       	ldd	r23, Z+1	; 0x01
    1c1c:	82 81       	ldd	r24, Z+2	; 0x02
    1c1e:	93 81       	ldd	r25, Z+3	; 0x03
    1c20:	0c 5f       	subi	r16, 0xFC	; 252
    1c22:	1f 4f       	sbci	r17, 0xFF	; 255
    1c24:	08 c0       	rjmp	.+16     	; 0x1c36 <vfprintf+0x1de>
    1c26:	60 81       	ld	r22, Z
    1c28:	71 81       	ldd	r23, Z+1	; 0x01
    1c2a:	88 27       	eor	r24, r24
    1c2c:	77 fd       	sbrc	r23, 7
    1c2e:	80 95       	com	r24
    1c30:	98 2f       	mov	r25, r24
    1c32:	0e 5f       	subi	r16, 0xFE	; 254
    1c34:	1f 4f       	sbci	r17, 0xFF	; 255
    1c36:	2f 76       	andi	r18, 0x6F	; 111
    1c38:	b2 2e       	mov	r11, r18
    1c3a:	97 ff       	sbrs	r25, 7
    1c3c:	09 c0       	rjmp	.+18     	; 0x1c50 <vfprintf+0x1f8>
    1c3e:	90 95       	com	r25
    1c40:	80 95       	com	r24
    1c42:	70 95       	com	r23
    1c44:	61 95       	neg	r22
    1c46:	7f 4f       	sbci	r23, 0xFF	; 255
    1c48:	8f 4f       	sbci	r24, 0xFF	; 255
    1c4a:	9f 4f       	sbci	r25, 0xFF	; 255
    1c4c:	20 68       	ori	r18, 0x80	; 128
    1c4e:	b2 2e       	mov	r11, r18
    1c50:	2a e0       	ldi	r18, 0x0A	; 10
    1c52:	30 e0       	ldi	r19, 0x00	; 0
    1c54:	a4 01       	movw	r20, r8
    1c56:	0e 94 69 0f 	call	0x1ed2	; 0x1ed2 <__ultoa_invert>
    1c5a:	a8 2e       	mov	r10, r24
    1c5c:	a8 18       	sub	r10, r8
    1c5e:	44 c0       	rjmp	.+136    	; 0x1ce8 <vfprintf+0x290>
    1c60:	85 37       	cpi	r24, 0x75	; 117
    1c62:	29 f4       	brne	.+10     	; 0x1c6e <vfprintf+0x216>
    1c64:	2f 7e       	andi	r18, 0xEF	; 239
    1c66:	b2 2e       	mov	r11, r18
    1c68:	2a e0       	ldi	r18, 0x0A	; 10
    1c6a:	30 e0       	ldi	r19, 0x00	; 0
    1c6c:	25 c0       	rjmp	.+74     	; 0x1cb8 <vfprintf+0x260>
    1c6e:	f2 2f       	mov	r31, r18
    1c70:	f9 7f       	andi	r31, 0xF9	; 249
    1c72:	bf 2e       	mov	r11, r31
    1c74:	8f 36       	cpi	r24, 0x6F	; 111
    1c76:	c1 f0       	breq	.+48     	; 0x1ca8 <vfprintf+0x250>
    1c78:	18 f4       	brcc	.+6      	; 0x1c80 <vfprintf+0x228>
    1c7a:	88 35       	cpi	r24, 0x58	; 88
    1c7c:	79 f0       	breq	.+30     	; 0x1c9c <vfprintf+0x244>
    1c7e:	b4 c0       	rjmp	.+360    	; 0x1de8 <vfprintf+0x390>
    1c80:	80 37       	cpi	r24, 0x70	; 112
    1c82:	19 f0       	breq	.+6      	; 0x1c8a <vfprintf+0x232>
    1c84:	88 37       	cpi	r24, 0x78	; 120
    1c86:	21 f0       	breq	.+8      	; 0x1c90 <vfprintf+0x238>
    1c88:	af c0       	rjmp	.+350    	; 0x1de8 <vfprintf+0x390>
    1c8a:	2f 2f       	mov	r18, r31
    1c8c:	20 61       	ori	r18, 0x10	; 16
    1c8e:	b2 2e       	mov	r11, r18
    1c90:	b4 fe       	sbrs	r11, 4
    1c92:	0d c0       	rjmp	.+26     	; 0x1cae <vfprintf+0x256>
    1c94:	8b 2d       	mov	r24, r11
    1c96:	84 60       	ori	r24, 0x04	; 4
    1c98:	b8 2e       	mov	r11, r24
    1c9a:	09 c0       	rjmp	.+18     	; 0x1cae <vfprintf+0x256>
    1c9c:	24 ff       	sbrs	r18, 4
    1c9e:	0a c0       	rjmp	.+20     	; 0x1cb4 <vfprintf+0x25c>
    1ca0:	9f 2f       	mov	r25, r31
    1ca2:	96 60       	ori	r25, 0x06	; 6
    1ca4:	b9 2e       	mov	r11, r25
    1ca6:	06 c0       	rjmp	.+12     	; 0x1cb4 <vfprintf+0x25c>
    1ca8:	28 e0       	ldi	r18, 0x08	; 8
    1caa:	30 e0       	ldi	r19, 0x00	; 0
    1cac:	05 c0       	rjmp	.+10     	; 0x1cb8 <vfprintf+0x260>
    1cae:	20 e1       	ldi	r18, 0x10	; 16
    1cb0:	30 e0       	ldi	r19, 0x00	; 0
    1cb2:	02 c0       	rjmp	.+4      	; 0x1cb8 <vfprintf+0x260>
    1cb4:	20 e1       	ldi	r18, 0x10	; 16
    1cb6:	32 e0       	ldi	r19, 0x02	; 2
    1cb8:	f8 01       	movw	r30, r16
    1cba:	b7 fe       	sbrs	r11, 7
    1cbc:	07 c0       	rjmp	.+14     	; 0x1ccc <vfprintf+0x274>
    1cbe:	60 81       	ld	r22, Z
    1cc0:	71 81       	ldd	r23, Z+1	; 0x01
    1cc2:	82 81       	ldd	r24, Z+2	; 0x02
    1cc4:	93 81       	ldd	r25, Z+3	; 0x03
    1cc6:	0c 5f       	subi	r16, 0xFC	; 252
    1cc8:	1f 4f       	sbci	r17, 0xFF	; 255
    1cca:	06 c0       	rjmp	.+12     	; 0x1cd8 <vfprintf+0x280>
    1ccc:	60 81       	ld	r22, Z
    1cce:	71 81       	ldd	r23, Z+1	; 0x01
    1cd0:	80 e0       	ldi	r24, 0x00	; 0
    1cd2:	90 e0       	ldi	r25, 0x00	; 0
    1cd4:	0e 5f       	subi	r16, 0xFE	; 254
    1cd6:	1f 4f       	sbci	r17, 0xFF	; 255
    1cd8:	a4 01       	movw	r20, r8
    1cda:	0e 94 69 0f 	call	0x1ed2	; 0x1ed2 <__ultoa_invert>
    1cde:	a8 2e       	mov	r10, r24
    1ce0:	a8 18       	sub	r10, r8
    1ce2:	fb 2d       	mov	r31, r11
    1ce4:	ff 77       	andi	r31, 0x7F	; 127
    1ce6:	bf 2e       	mov	r11, r31
    1ce8:	b6 fe       	sbrs	r11, 6
    1cea:	0b c0       	rjmp	.+22     	; 0x1d02 <vfprintf+0x2aa>
    1cec:	2b 2d       	mov	r18, r11
    1cee:	2e 7f       	andi	r18, 0xFE	; 254
    1cf0:	a5 14       	cp	r10, r5
    1cf2:	50 f4       	brcc	.+20     	; 0x1d08 <vfprintf+0x2b0>
    1cf4:	b4 fe       	sbrs	r11, 4
    1cf6:	0a c0       	rjmp	.+20     	; 0x1d0c <vfprintf+0x2b4>
    1cf8:	b2 fc       	sbrc	r11, 2
    1cfa:	08 c0       	rjmp	.+16     	; 0x1d0c <vfprintf+0x2b4>
    1cfc:	2b 2d       	mov	r18, r11
    1cfe:	2e 7e       	andi	r18, 0xEE	; 238
    1d00:	05 c0       	rjmp	.+10     	; 0x1d0c <vfprintf+0x2b4>
    1d02:	7a 2c       	mov	r7, r10
    1d04:	2b 2d       	mov	r18, r11
    1d06:	03 c0       	rjmp	.+6      	; 0x1d0e <vfprintf+0x2b6>
    1d08:	7a 2c       	mov	r7, r10
    1d0a:	01 c0       	rjmp	.+2      	; 0x1d0e <vfprintf+0x2b6>
    1d0c:	75 2c       	mov	r7, r5
    1d0e:	24 ff       	sbrs	r18, 4
    1d10:	0d c0       	rjmp	.+26     	; 0x1d2c <vfprintf+0x2d4>
    1d12:	fe 01       	movw	r30, r28
    1d14:	ea 0d       	add	r30, r10
    1d16:	f1 1d       	adc	r31, r1
    1d18:	80 81       	ld	r24, Z
    1d1a:	80 33       	cpi	r24, 0x30	; 48
    1d1c:	11 f4       	brne	.+4      	; 0x1d22 <vfprintf+0x2ca>
    1d1e:	29 7e       	andi	r18, 0xE9	; 233
    1d20:	09 c0       	rjmp	.+18     	; 0x1d34 <vfprintf+0x2dc>
    1d22:	22 ff       	sbrs	r18, 2
    1d24:	06 c0       	rjmp	.+12     	; 0x1d32 <vfprintf+0x2da>
    1d26:	73 94       	inc	r7
    1d28:	73 94       	inc	r7
    1d2a:	04 c0       	rjmp	.+8      	; 0x1d34 <vfprintf+0x2dc>
    1d2c:	82 2f       	mov	r24, r18
    1d2e:	86 78       	andi	r24, 0x86	; 134
    1d30:	09 f0       	breq	.+2      	; 0x1d34 <vfprintf+0x2dc>
    1d32:	73 94       	inc	r7
    1d34:	23 fd       	sbrc	r18, 3
    1d36:	13 c0       	rjmp	.+38     	; 0x1d5e <vfprintf+0x306>
    1d38:	20 ff       	sbrs	r18, 0
    1d3a:	06 c0       	rjmp	.+12     	; 0x1d48 <vfprintf+0x2f0>
    1d3c:	5a 2c       	mov	r5, r10
    1d3e:	73 14       	cp	r7, r3
    1d40:	18 f4       	brcc	.+6      	; 0x1d48 <vfprintf+0x2f0>
    1d42:	53 0c       	add	r5, r3
    1d44:	57 18       	sub	r5, r7
    1d46:	73 2c       	mov	r7, r3
    1d48:	73 14       	cp	r7, r3
    1d4a:	68 f4       	brcc	.+26     	; 0x1d66 <vfprintf+0x30e>
    1d4c:	b7 01       	movw	r22, r14
    1d4e:	80 e2       	ldi	r24, 0x20	; 32
    1d50:	90 e0       	ldi	r25, 0x00	; 0
    1d52:	2c 87       	std	Y+12, r18	; 0x0c
    1d54:	0e 94 37 0f 	call	0x1e6e	; 0x1e6e <fputc>
    1d58:	73 94       	inc	r7
    1d5a:	2c 85       	ldd	r18, Y+12	; 0x0c
    1d5c:	f5 cf       	rjmp	.-22     	; 0x1d48 <vfprintf+0x2f0>
    1d5e:	73 14       	cp	r7, r3
    1d60:	10 f4       	brcc	.+4      	; 0x1d66 <vfprintf+0x30e>
    1d62:	37 18       	sub	r3, r7
    1d64:	01 c0       	rjmp	.+2      	; 0x1d68 <vfprintf+0x310>
    1d66:	31 2c       	mov	r3, r1
    1d68:	24 ff       	sbrs	r18, 4
    1d6a:	12 c0       	rjmp	.+36     	; 0x1d90 <vfprintf+0x338>
    1d6c:	b7 01       	movw	r22, r14
    1d6e:	80 e3       	ldi	r24, 0x30	; 48
    1d70:	90 e0       	ldi	r25, 0x00	; 0
    1d72:	2c 87       	std	Y+12, r18	; 0x0c
    1d74:	0e 94 37 0f 	call	0x1e6e	; 0x1e6e <fputc>
    1d78:	2c 85       	ldd	r18, Y+12	; 0x0c
    1d7a:	22 ff       	sbrs	r18, 2
    1d7c:	17 c0       	rjmp	.+46     	; 0x1dac <vfprintf+0x354>
    1d7e:	21 ff       	sbrs	r18, 1
    1d80:	03 c0       	rjmp	.+6      	; 0x1d88 <vfprintf+0x330>
    1d82:	88 e5       	ldi	r24, 0x58	; 88
    1d84:	90 e0       	ldi	r25, 0x00	; 0
    1d86:	02 c0       	rjmp	.+4      	; 0x1d8c <vfprintf+0x334>
    1d88:	88 e7       	ldi	r24, 0x78	; 120
    1d8a:	90 e0       	ldi	r25, 0x00	; 0
    1d8c:	b7 01       	movw	r22, r14
    1d8e:	0c c0       	rjmp	.+24     	; 0x1da8 <vfprintf+0x350>
    1d90:	82 2f       	mov	r24, r18
    1d92:	86 78       	andi	r24, 0x86	; 134
    1d94:	59 f0       	breq	.+22     	; 0x1dac <vfprintf+0x354>
    1d96:	21 fd       	sbrc	r18, 1
    1d98:	02 c0       	rjmp	.+4      	; 0x1d9e <vfprintf+0x346>
    1d9a:	80 e2       	ldi	r24, 0x20	; 32
    1d9c:	01 c0       	rjmp	.+2      	; 0x1da0 <vfprintf+0x348>
    1d9e:	8b e2       	ldi	r24, 0x2B	; 43
    1da0:	27 fd       	sbrc	r18, 7
    1da2:	8d e2       	ldi	r24, 0x2D	; 45
    1da4:	b7 01       	movw	r22, r14
    1da6:	90 e0       	ldi	r25, 0x00	; 0
    1da8:	0e 94 37 0f 	call	0x1e6e	; 0x1e6e <fputc>
    1dac:	a5 14       	cp	r10, r5
    1dae:	38 f4       	brcc	.+14     	; 0x1dbe <vfprintf+0x366>
    1db0:	b7 01       	movw	r22, r14
    1db2:	80 e3       	ldi	r24, 0x30	; 48
    1db4:	90 e0       	ldi	r25, 0x00	; 0
    1db6:	0e 94 37 0f 	call	0x1e6e	; 0x1e6e <fputc>
    1dba:	5a 94       	dec	r5
    1dbc:	f7 cf       	rjmp	.-18     	; 0x1dac <vfprintf+0x354>
    1dbe:	aa 94       	dec	r10
    1dc0:	f4 01       	movw	r30, r8
    1dc2:	ea 0d       	add	r30, r10
    1dc4:	f1 1d       	adc	r31, r1
    1dc6:	80 81       	ld	r24, Z
    1dc8:	b7 01       	movw	r22, r14
    1dca:	90 e0       	ldi	r25, 0x00	; 0
    1dcc:	0e 94 37 0f 	call	0x1e6e	; 0x1e6e <fputc>
    1dd0:	a1 10       	cpse	r10, r1
    1dd2:	f5 cf       	rjmp	.-22     	; 0x1dbe <vfprintf+0x366>
    1dd4:	33 20       	and	r3, r3
    1dd6:	09 f4       	brne	.+2      	; 0x1dda <vfprintf+0x382>
    1dd8:	51 ce       	rjmp	.-862    	; 0x1a7c <vfprintf+0x24>
    1dda:	b7 01       	movw	r22, r14
    1ddc:	80 e2       	ldi	r24, 0x20	; 32
    1dde:	90 e0       	ldi	r25, 0x00	; 0
    1de0:	0e 94 37 0f 	call	0x1e6e	; 0x1e6e <fputc>
    1de4:	3a 94       	dec	r3
    1de6:	f6 cf       	rjmp	.-20     	; 0x1dd4 <vfprintf+0x37c>
    1de8:	f7 01       	movw	r30, r14
    1dea:	86 81       	ldd	r24, Z+6	; 0x06
    1dec:	97 81       	ldd	r25, Z+7	; 0x07
    1dee:	02 c0       	rjmp	.+4      	; 0x1df4 <vfprintf+0x39c>
    1df0:	8f ef       	ldi	r24, 0xFF	; 255
    1df2:	9f ef       	ldi	r25, 0xFF	; 255
    1df4:	2c 96       	adiw	r28, 0x0c	; 12
    1df6:	e2 e1       	ldi	r30, 0x12	; 18
    1df8:	0c 94 e3 0f 	jmp	0x1fc6	; 0x1fc6 <__epilogue_restores__>

00001dfc <calloc>:
    1dfc:	0f 93       	push	r16
    1dfe:	1f 93       	push	r17
    1e00:	cf 93       	push	r28
    1e02:	df 93       	push	r29
    1e04:	86 9f       	mul	r24, r22
    1e06:	80 01       	movw	r16, r0
    1e08:	87 9f       	mul	r24, r23
    1e0a:	10 0d       	add	r17, r0
    1e0c:	96 9f       	mul	r25, r22
    1e0e:	10 0d       	add	r17, r0
    1e10:	11 24       	eor	r1, r1
    1e12:	c8 01       	movw	r24, r16
    1e14:	0e 94 79 0b 	call	0x16f2	; 0x16f2 <malloc>
    1e18:	ec 01       	movw	r28, r24
    1e1a:	00 97       	sbiw	r24, 0x00	; 0
    1e1c:	29 f0       	breq	.+10     	; 0x1e28 <calloc+0x2c>
    1e1e:	a8 01       	movw	r20, r16
    1e20:	60 e0       	ldi	r22, 0x00	; 0
    1e22:	70 e0       	ldi	r23, 0x00	; 0
    1e24:	0e 94 25 0f 	call	0x1e4a	; 0x1e4a <memset>
    1e28:	ce 01       	movw	r24, r28
    1e2a:	df 91       	pop	r29
    1e2c:	cf 91       	pop	r28
    1e2e:	1f 91       	pop	r17
    1e30:	0f 91       	pop	r16
    1e32:	08 95       	ret

00001e34 <strnlen_P>:
    1e34:	fc 01       	movw	r30, r24
    1e36:	05 90       	lpm	r0, Z+
    1e38:	61 50       	subi	r22, 0x01	; 1
    1e3a:	70 40       	sbci	r23, 0x00	; 0
    1e3c:	01 10       	cpse	r0, r1
    1e3e:	d8 f7       	brcc	.-10     	; 0x1e36 <strnlen_P+0x2>
    1e40:	80 95       	com	r24
    1e42:	90 95       	com	r25
    1e44:	8e 0f       	add	r24, r30
    1e46:	9f 1f       	adc	r25, r31
    1e48:	08 95       	ret

00001e4a <memset>:
    1e4a:	dc 01       	movw	r26, r24
    1e4c:	01 c0       	rjmp	.+2      	; 0x1e50 <memset+0x6>
    1e4e:	6d 93       	st	X+, r22
    1e50:	41 50       	subi	r20, 0x01	; 1
    1e52:	50 40       	sbci	r21, 0x00	; 0
    1e54:	e0 f7       	brcc	.-8      	; 0x1e4e <memset+0x4>
    1e56:	08 95       	ret

00001e58 <strnlen>:
    1e58:	fc 01       	movw	r30, r24
    1e5a:	61 50       	subi	r22, 0x01	; 1
    1e5c:	70 40       	sbci	r23, 0x00	; 0
    1e5e:	01 90       	ld	r0, Z+
    1e60:	01 10       	cpse	r0, r1
    1e62:	d8 f7       	brcc	.-10     	; 0x1e5a <strnlen+0x2>
    1e64:	80 95       	com	r24
    1e66:	90 95       	com	r25
    1e68:	8e 0f       	add	r24, r30
    1e6a:	9f 1f       	adc	r25, r31
    1e6c:	08 95       	ret

00001e6e <fputc>:
    1e6e:	0f 93       	push	r16
    1e70:	1f 93       	push	r17
    1e72:	cf 93       	push	r28
    1e74:	df 93       	push	r29
    1e76:	18 2f       	mov	r17, r24
    1e78:	09 2f       	mov	r16, r25
    1e7a:	eb 01       	movw	r28, r22
    1e7c:	8b 81       	ldd	r24, Y+3	; 0x03
    1e7e:	81 fd       	sbrc	r24, 1
    1e80:	03 c0       	rjmp	.+6      	; 0x1e88 <fputc+0x1a>
    1e82:	8f ef       	ldi	r24, 0xFF	; 255
    1e84:	9f ef       	ldi	r25, 0xFF	; 255
    1e86:	20 c0       	rjmp	.+64     	; 0x1ec8 <fputc+0x5a>
    1e88:	82 ff       	sbrs	r24, 2
    1e8a:	10 c0       	rjmp	.+32     	; 0x1eac <fputc+0x3e>
    1e8c:	4e 81       	ldd	r20, Y+6	; 0x06
    1e8e:	5f 81       	ldd	r21, Y+7	; 0x07
    1e90:	2c 81       	ldd	r18, Y+4	; 0x04
    1e92:	3d 81       	ldd	r19, Y+5	; 0x05
    1e94:	42 17       	cp	r20, r18
    1e96:	53 07       	cpc	r21, r19
    1e98:	7c f4       	brge	.+30     	; 0x1eb8 <fputc+0x4a>
    1e9a:	e8 81       	ld	r30, Y
    1e9c:	f9 81       	ldd	r31, Y+1	; 0x01
    1e9e:	9f 01       	movw	r18, r30
    1ea0:	2f 5f       	subi	r18, 0xFF	; 255
    1ea2:	3f 4f       	sbci	r19, 0xFF	; 255
    1ea4:	39 83       	std	Y+1, r19	; 0x01
    1ea6:	28 83       	st	Y, r18
    1ea8:	10 83       	st	Z, r17
    1eaa:	06 c0       	rjmp	.+12     	; 0x1eb8 <fputc+0x4a>
    1eac:	e8 85       	ldd	r30, Y+8	; 0x08
    1eae:	f9 85       	ldd	r31, Y+9	; 0x09
    1eb0:	81 2f       	mov	r24, r17
    1eb2:	09 95       	icall
    1eb4:	89 2b       	or	r24, r25
    1eb6:	29 f7       	brne	.-54     	; 0x1e82 <fputc+0x14>
    1eb8:	2e 81       	ldd	r18, Y+6	; 0x06
    1eba:	3f 81       	ldd	r19, Y+7	; 0x07
    1ebc:	2f 5f       	subi	r18, 0xFF	; 255
    1ebe:	3f 4f       	sbci	r19, 0xFF	; 255
    1ec0:	3f 83       	std	Y+7, r19	; 0x07
    1ec2:	2e 83       	std	Y+6, r18	; 0x06
    1ec4:	81 2f       	mov	r24, r17
    1ec6:	90 2f       	mov	r25, r16
    1ec8:	df 91       	pop	r29
    1eca:	cf 91       	pop	r28
    1ecc:	1f 91       	pop	r17
    1ece:	0f 91       	pop	r16
    1ed0:	08 95       	ret

00001ed2 <__ultoa_invert>:
    1ed2:	fa 01       	movw	r30, r20
    1ed4:	aa 27       	eor	r26, r26
    1ed6:	28 30       	cpi	r18, 0x08	; 8
    1ed8:	51 f1       	breq	.+84     	; 0x1f2e <__ultoa_invert+0x5c>
    1eda:	20 31       	cpi	r18, 0x10	; 16
    1edc:	81 f1       	breq	.+96     	; 0x1f3e <__ultoa_invert+0x6c>
    1ede:	e8 94       	clt
    1ee0:	6f 93       	push	r22
    1ee2:	6e 7f       	andi	r22, 0xFE	; 254
    1ee4:	6e 5f       	subi	r22, 0xFE	; 254
    1ee6:	7f 4f       	sbci	r23, 0xFF	; 255
    1ee8:	8f 4f       	sbci	r24, 0xFF	; 255
    1eea:	9f 4f       	sbci	r25, 0xFF	; 255
    1eec:	af 4f       	sbci	r26, 0xFF	; 255
    1eee:	b1 e0       	ldi	r27, 0x01	; 1
    1ef0:	3e d0       	rcall	.+124    	; 0x1f6e <__ultoa_invert+0x9c>
    1ef2:	b4 e0       	ldi	r27, 0x04	; 4
    1ef4:	3c d0       	rcall	.+120    	; 0x1f6e <__ultoa_invert+0x9c>
    1ef6:	67 0f       	add	r22, r23
    1ef8:	78 1f       	adc	r23, r24
    1efa:	89 1f       	adc	r24, r25
    1efc:	9a 1f       	adc	r25, r26
    1efe:	a1 1d       	adc	r26, r1
    1f00:	68 0f       	add	r22, r24
    1f02:	79 1f       	adc	r23, r25
    1f04:	8a 1f       	adc	r24, r26
    1f06:	91 1d       	adc	r25, r1
    1f08:	a1 1d       	adc	r26, r1
    1f0a:	6a 0f       	add	r22, r26
    1f0c:	71 1d       	adc	r23, r1
    1f0e:	81 1d       	adc	r24, r1
    1f10:	91 1d       	adc	r25, r1
    1f12:	a1 1d       	adc	r26, r1
    1f14:	20 d0       	rcall	.+64     	; 0x1f56 <__ultoa_invert+0x84>
    1f16:	09 f4       	brne	.+2      	; 0x1f1a <__ultoa_invert+0x48>
    1f18:	68 94       	set
    1f1a:	3f 91       	pop	r19
    1f1c:	2a e0       	ldi	r18, 0x0A	; 10
    1f1e:	26 9f       	mul	r18, r22
    1f20:	11 24       	eor	r1, r1
    1f22:	30 19       	sub	r19, r0
    1f24:	30 5d       	subi	r19, 0xD0	; 208
    1f26:	31 93       	st	Z+, r19
    1f28:	de f6       	brtc	.-74     	; 0x1ee0 <__ultoa_invert+0xe>
    1f2a:	cf 01       	movw	r24, r30
    1f2c:	08 95       	ret
    1f2e:	46 2f       	mov	r20, r22
    1f30:	47 70       	andi	r20, 0x07	; 7
    1f32:	40 5d       	subi	r20, 0xD0	; 208
    1f34:	41 93       	st	Z+, r20
    1f36:	b3 e0       	ldi	r27, 0x03	; 3
    1f38:	0f d0       	rcall	.+30     	; 0x1f58 <__ultoa_invert+0x86>
    1f3a:	c9 f7       	brne	.-14     	; 0x1f2e <__ultoa_invert+0x5c>
    1f3c:	f6 cf       	rjmp	.-20     	; 0x1f2a <__ultoa_invert+0x58>
    1f3e:	46 2f       	mov	r20, r22
    1f40:	4f 70       	andi	r20, 0x0F	; 15
    1f42:	40 5d       	subi	r20, 0xD0	; 208
    1f44:	4a 33       	cpi	r20, 0x3A	; 58
    1f46:	18 f0       	brcs	.+6      	; 0x1f4e <__ultoa_invert+0x7c>
    1f48:	49 5d       	subi	r20, 0xD9	; 217
    1f4a:	31 fd       	sbrc	r19, 1
    1f4c:	40 52       	subi	r20, 0x20	; 32
    1f4e:	41 93       	st	Z+, r20
    1f50:	02 d0       	rcall	.+4      	; 0x1f56 <__ultoa_invert+0x84>
    1f52:	a9 f7       	brne	.-22     	; 0x1f3e <__ultoa_invert+0x6c>
    1f54:	ea cf       	rjmp	.-44     	; 0x1f2a <__ultoa_invert+0x58>
    1f56:	b4 e0       	ldi	r27, 0x04	; 4
    1f58:	a6 95       	lsr	r26
    1f5a:	97 95       	ror	r25
    1f5c:	87 95       	ror	r24
    1f5e:	77 95       	ror	r23
    1f60:	67 95       	ror	r22
    1f62:	ba 95       	dec	r27
    1f64:	c9 f7       	brne	.-14     	; 0x1f58 <__ultoa_invert+0x86>
    1f66:	00 97       	sbiw	r24, 0x00	; 0
    1f68:	61 05       	cpc	r22, r1
    1f6a:	71 05       	cpc	r23, r1
    1f6c:	08 95       	ret
    1f6e:	9b 01       	movw	r18, r22
    1f70:	ac 01       	movw	r20, r24
    1f72:	0a 2e       	mov	r0, r26
    1f74:	06 94       	lsr	r0
    1f76:	57 95       	ror	r21
    1f78:	47 95       	ror	r20
    1f7a:	37 95       	ror	r19
    1f7c:	27 95       	ror	r18
    1f7e:	ba 95       	dec	r27
    1f80:	c9 f7       	brne	.-14     	; 0x1f74 <__ultoa_invert+0xa2>
    1f82:	62 0f       	add	r22, r18
    1f84:	73 1f       	adc	r23, r19
    1f86:	84 1f       	adc	r24, r20
    1f88:	95 1f       	adc	r25, r21
    1f8a:	a0 1d       	adc	r26, r0
    1f8c:	08 95       	ret

00001f8e <__prologue_saves__>:
    1f8e:	2f 92       	push	r2
    1f90:	3f 92       	push	r3
    1f92:	4f 92       	push	r4
    1f94:	5f 92       	push	r5
    1f96:	6f 92       	push	r6
    1f98:	7f 92       	push	r7
    1f9a:	8f 92       	push	r8
    1f9c:	9f 92       	push	r9
    1f9e:	af 92       	push	r10
    1fa0:	bf 92       	push	r11
    1fa2:	cf 92       	push	r12
    1fa4:	df 92       	push	r13
    1fa6:	ef 92       	push	r14
    1fa8:	ff 92       	push	r15
    1faa:	0f 93       	push	r16
    1fac:	1f 93       	push	r17
    1fae:	cf 93       	push	r28
    1fb0:	df 93       	push	r29
    1fb2:	cd b7       	in	r28, 0x3d	; 61
    1fb4:	de b7       	in	r29, 0x3e	; 62
    1fb6:	ca 1b       	sub	r28, r26
    1fb8:	db 0b       	sbc	r29, r27
    1fba:	0f b6       	in	r0, 0x3f	; 63
    1fbc:	f8 94       	cli
    1fbe:	de bf       	out	0x3e, r29	; 62
    1fc0:	0f be       	out	0x3f, r0	; 63
    1fc2:	cd bf       	out	0x3d, r28	; 61
    1fc4:	09 94       	ijmp

00001fc6 <__epilogue_restores__>:
    1fc6:	2a 88       	ldd	r2, Y+18	; 0x12
    1fc8:	39 88       	ldd	r3, Y+17	; 0x11
    1fca:	48 88       	ldd	r4, Y+16	; 0x10
    1fcc:	5f 84       	ldd	r5, Y+15	; 0x0f
    1fce:	6e 84       	ldd	r6, Y+14	; 0x0e
    1fd0:	7d 84       	ldd	r7, Y+13	; 0x0d
    1fd2:	8c 84       	ldd	r8, Y+12	; 0x0c
    1fd4:	9b 84       	ldd	r9, Y+11	; 0x0b
    1fd6:	aa 84       	ldd	r10, Y+10	; 0x0a
    1fd8:	b9 84       	ldd	r11, Y+9	; 0x09
    1fda:	c8 84       	ldd	r12, Y+8	; 0x08
    1fdc:	df 80       	ldd	r13, Y+7	; 0x07
    1fde:	ee 80       	ldd	r14, Y+6	; 0x06
    1fe0:	fd 80       	ldd	r15, Y+5	; 0x05
    1fe2:	0c 81       	ldd	r16, Y+4	; 0x04
    1fe4:	1b 81       	ldd	r17, Y+3	; 0x03
    1fe6:	aa 81       	ldd	r26, Y+2	; 0x02
    1fe8:	b9 81       	ldd	r27, Y+1	; 0x01
    1fea:	ce 0f       	add	r28, r30
    1fec:	d1 1d       	adc	r29, r1
    1fee:	0f b6       	in	r0, 0x3f	; 63
    1ff0:	f8 94       	cli
    1ff2:	de bf       	out	0x3e, r29	; 62
    1ff4:	0f be       	out	0x3f, r0	; 63
    1ff6:	cd bf       	out	0x3d, r28	; 61
    1ff8:	ed 01       	movw	r28, r26
    1ffa:	08 95       	ret

00001ffc <_exit>:
    1ffc:	f8 94       	cli

00001ffe <__stop_program>:
    1ffe:	ff cf       	rjmp	.-2      	; 0x1ffe <__stop_program>
