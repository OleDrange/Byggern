
Arduino.elf:     file format elf32-avr

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .data         000000fc  00800200  00001fa8  0000203c  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  1 .text         00001fa8  00000000  00000000  00000094  2**1
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .bss          0000006c  008002fc  008002fc  00002138  2**0
                  ALLOC
  3 .comment      0000005c  00000000  00000000  00002138  2**0
                  CONTENTS, READONLY
  4 .debug_aranges 00000378  00000000  00000000  00002194  2**0
                  CONTENTS, READONLY, DEBUGGING
  5 .debug_info   0000316a  00000000  00000000  0000250c  2**0
                  CONTENTS, READONLY, DEBUGGING
  6 .debug_abbrev 000014b1  00000000  00000000  00005676  2**0
                  CONTENTS, READONLY, DEBUGGING
  7 .debug_line   00001c77  00000000  00000000  00006b27  2**0
                  CONTENTS, READONLY, DEBUGGING
  8 .debug_frame  00000854  00000000  00000000  000087a0  2**2
                  CONTENTS, READONLY, DEBUGGING
  9 .debug_str    000009ed  00000000  00000000  00008ff4  2**0
                  CONTENTS, READONLY, DEBUGGING
 10 .debug_loc    00001b2a  00000000  00000000  000099e1  2**0
                  CONTENTS, READONLY, DEBUGGING
 11 .debug_ranges 00000310  00000000  00000000  0000b50b  2**0
                  CONTENTS, READONLY, DEBUGGING

Disassembly of section .text:

00000000 <__vectors>:
       0:	c2 c0       	rjmp	.+388    	; 0x186 <__ctors_end>
       2:	00 00       	nop
       4:	e0 c0       	rjmp	.+448    	; 0x1c6 <__bad_interrupt>
       6:	00 00       	nop
       8:	de c0       	rjmp	.+444    	; 0x1c6 <__bad_interrupt>
       a:	00 00       	nop
       c:	41 c1       	rjmp	.+642    	; 0x290 <__vector_3>
       e:	00 00       	nop
      10:	da c0       	rjmp	.+436    	; 0x1c6 <__bad_interrupt>
      12:	00 00       	nop
      14:	d8 c0       	rjmp	.+432    	; 0x1c6 <__bad_interrupt>
      16:	00 00       	nop
      18:	d6 c0       	rjmp	.+428    	; 0x1c6 <__bad_interrupt>
      1a:	00 00       	nop
      1c:	d4 c0       	rjmp	.+424    	; 0x1c6 <__bad_interrupt>
      1e:	00 00       	nop
      20:	d2 c0       	rjmp	.+420    	; 0x1c6 <__bad_interrupt>
      22:	00 00       	nop
      24:	d0 c0       	rjmp	.+416    	; 0x1c6 <__bad_interrupt>
      26:	00 00       	nop
      28:	ce c0       	rjmp	.+412    	; 0x1c6 <__bad_interrupt>
      2a:	00 00       	nop
      2c:	cc c0       	rjmp	.+408    	; 0x1c6 <__bad_interrupt>
      2e:	00 00       	nop
      30:	ca c0       	rjmp	.+404    	; 0x1c6 <__bad_interrupt>
      32:	00 00       	nop
      34:	c8 c0       	rjmp	.+400    	; 0x1c6 <__bad_interrupt>
      36:	00 00       	nop
      38:	c6 c0       	rjmp	.+396    	; 0x1c6 <__bad_interrupt>
      3a:	00 00       	nop
      3c:	90 c5       	rjmp	.+2848   	; 0xb5e <__vector_15>
      3e:	00 00       	nop
      40:	c2 c0       	rjmp	.+388    	; 0x1c6 <__bad_interrupt>
      42:	00 00       	nop
      44:	c0 c0       	rjmp	.+384    	; 0x1c6 <__bad_interrupt>
      46:	00 00       	nop
      48:	be c0       	rjmp	.+380    	; 0x1c6 <__bad_interrupt>
      4a:	00 00       	nop
      4c:	bc c0       	rjmp	.+376    	; 0x1c6 <__bad_interrupt>
      4e:	00 00       	nop
      50:	ba c0       	rjmp	.+372    	; 0x1c6 <__bad_interrupt>
      52:	00 00       	nop
      54:	b8 c0       	rjmp	.+368    	; 0x1c6 <__bad_interrupt>
      56:	00 00       	nop
      58:	b6 c0       	rjmp	.+364    	; 0x1c6 <__bad_interrupt>
      5a:	00 00       	nop
      5c:	b4 c0       	rjmp	.+360    	; 0x1c6 <__bad_interrupt>
      5e:	00 00       	nop
      60:	b2 c0       	rjmp	.+356    	; 0x1c6 <__bad_interrupt>
      62:	00 00       	nop
      64:	b0 c0       	rjmp	.+352    	; 0x1c6 <__bad_interrupt>
      66:	00 00       	nop
      68:	ae c0       	rjmp	.+348    	; 0x1c6 <__bad_interrupt>
      6a:	00 00       	nop
      6c:	ac c0       	rjmp	.+344    	; 0x1c6 <__bad_interrupt>
      6e:	00 00       	nop
      70:	aa c0       	rjmp	.+340    	; 0x1c6 <__bad_interrupt>
      72:	00 00       	nop
      74:	a8 c0       	rjmp	.+336    	; 0x1c6 <__bad_interrupt>
      76:	00 00       	nop
      78:	a6 c0       	rjmp	.+332    	; 0x1c6 <__bad_interrupt>
      7a:	00 00       	nop
      7c:	a4 c0       	rjmp	.+328    	; 0x1c6 <__bad_interrupt>
      7e:	00 00       	nop
      80:	a2 c0       	rjmp	.+324    	; 0x1c6 <__bad_interrupt>
      82:	00 00       	nop
      84:	a0 c0       	rjmp	.+320    	; 0x1c6 <__bad_interrupt>
      86:	00 00       	nop
      88:	9e c0       	rjmp	.+316    	; 0x1c6 <__bad_interrupt>
      8a:	00 00       	nop
      8c:	9c c0       	rjmp	.+312    	; 0x1c6 <__bad_interrupt>
      8e:	00 00       	nop
      90:	9a c0       	rjmp	.+308    	; 0x1c6 <__bad_interrupt>
      92:	00 00       	nop
      94:	98 c0       	rjmp	.+304    	; 0x1c6 <__bad_interrupt>
      96:	00 00       	nop
      98:	96 c0       	rjmp	.+300    	; 0x1c6 <__bad_interrupt>
      9a:	00 00       	nop
      9c:	cc c7       	rjmp	.+3992   	; 0x1036 <__vector_39>
      9e:	00 00       	nop
      a0:	92 c0       	rjmp	.+292    	; 0x1c6 <__bad_interrupt>
      a2:	00 00       	nop
      a4:	90 c0       	rjmp	.+288    	; 0x1c6 <__bad_interrupt>
      a6:	00 00       	nop
      a8:	8e c0       	rjmp	.+284    	; 0x1c6 <__bad_interrupt>
      aa:	00 00       	nop
      ac:	8c c0       	rjmp	.+280    	; 0x1c6 <__bad_interrupt>
      ae:	00 00       	nop
      b0:	8a c0       	rjmp	.+276    	; 0x1c6 <__bad_interrupt>
      b2:	00 00       	nop
      b4:	88 c0       	rjmp	.+272    	; 0x1c6 <__bad_interrupt>
      b6:	00 00       	nop
      b8:	86 c0       	rjmp	.+268    	; 0x1c6 <__bad_interrupt>
      ba:	00 00       	nop
      bc:	84 c0       	rjmp	.+264    	; 0x1c6 <__bad_interrupt>
      be:	00 00       	nop
      c0:	82 c0       	rjmp	.+260    	; 0x1c6 <__bad_interrupt>
      c2:	00 00       	nop
      c4:	80 c0       	rjmp	.+256    	; 0x1c6 <__bad_interrupt>
      c6:	00 00       	nop
      c8:	7e c0       	rjmp	.+252    	; 0x1c6 <__bad_interrupt>
      ca:	00 00       	nop
      cc:	7c c0       	rjmp	.+248    	; 0x1c6 <__bad_interrupt>
      ce:	00 00       	nop
      d0:	7a c0       	rjmp	.+244    	; 0x1c6 <__bad_interrupt>
      d2:	00 00       	nop
      d4:	78 c0       	rjmp	.+240    	; 0x1c6 <__bad_interrupt>
      d6:	00 00       	nop
      d8:	76 c0       	rjmp	.+236    	; 0x1c6 <__bad_interrupt>
      da:	00 00       	nop
      dc:	74 c0       	rjmp	.+232    	; 0x1c6 <__bad_interrupt>
      de:	00 00       	nop
      e0:	72 c0       	rjmp	.+228    	; 0x1c6 <__bad_interrupt>
      e2:	00 00       	nop
      e4:	36 08       	sbc	r3, r6
      e6:	88 08       	sbc	r8, r8
      e8:	88 08       	sbc	r8, r8
      ea:	88 08       	sbc	r8, r8
      ec:	88 08       	sbc	r8, r8
      ee:	88 08       	sbc	r8, r8
      f0:	88 08       	sbc	r8, r8
      f2:	88 08       	sbc	r8, r8
      f4:	36 08       	sbc	r3, r6
      f6:	88 08       	sbc	r8, r8
      f8:	88 08       	sbc	r8, r8
      fa:	88 08       	sbc	r8, r8
      fc:	88 08       	sbc	r8, r8
      fe:	88 08       	sbc	r8, r8
     100:	88 08       	sbc	r8, r8
     102:	88 08       	sbc	r8, r8
     104:	38 08       	sbc	r3, r8
     106:	88 08       	sbc	r8, r8
     108:	88 08       	sbc	r8, r8
     10a:	88 08       	sbc	r8, r8
     10c:	88 08       	sbc	r8, r8
     10e:	88 08       	sbc	r8, r8
     110:	88 08       	sbc	r8, r8
     112:	88 08       	sbc	r8, r8
     114:	88 08       	sbc	r8, r8
     116:	88 08       	sbc	r8, r8
     118:	88 08       	sbc	r8, r8
     11a:	88 08       	sbc	r8, r8
     11c:	88 08       	sbc	r8, r8
     11e:	88 08       	sbc	r8, r8
     120:	88 08       	sbc	r8, r8
     122:	88 08       	sbc	r8, r8
     124:	38 08       	sbc	r3, r8
     126:	88 08       	sbc	r8, r8
     128:	88 08       	sbc	r8, r8
     12a:	88 08       	sbc	r8, r8
     12c:	88 08       	sbc	r8, r8
     12e:	88 08       	sbc	r8, r8
     130:	88 08       	sbc	r8, r8
     132:	88 08       	sbc	r8, r8
     134:	88 08       	sbc	r8, r8
     136:	88 08       	sbc	r8, r8
     138:	88 08       	sbc	r8, r8
     13a:	88 08       	sbc	r8, r8
     13c:	88 08       	sbc	r8, r8
     13e:	88 08       	sbc	r8, r8
     140:	88 08       	sbc	r8, r8
     142:	88 08       	sbc	r8, r8
     144:	84 08       	sbc	r8, r4
     146:	88 08       	sbc	r8, r8
     148:	88 08       	sbc	r8, r8
     14a:	88 08       	sbc	r8, r8
     14c:	88 08       	sbc	r8, r8
     14e:	88 08       	sbc	r8, r8
     150:	88 08       	sbc	r8, r8
     152:	88 08       	sbc	r8, r8
     154:	61 08       	sbc	r6, r1
     156:	88 08       	sbc	r8, r8
     158:	88 08       	sbc	r8, r8
     15a:	88 08       	sbc	r8, r8
     15c:	88 08       	sbc	r8, r8
     15e:	88 08       	sbc	r8, r8
     160:	88 08       	sbc	r8, r8
     162:	88 08       	sbc	r8, r8
     164:	88 08       	sbc	r8, r8
     166:	88 08       	sbc	r8, r8
     168:	88 08       	sbc	r8, r8
     16a:	88 08       	sbc	r8, r8
     16c:	88 08       	sbc	r8, r8
     16e:	88 08       	sbc	r8, r8
     170:	88 08       	sbc	r8, r8
     172:	88 08       	sbc	r8, r8
     174:	55 08       	sbc	r5, r5
     176:	88 08       	sbc	r8, r8
     178:	88 08       	sbc	r8, r8
     17a:	88 08       	sbc	r8, r8
     17c:	88 08       	sbc	r8, r8
     17e:	88 08       	sbc	r8, r8
     180:	88 08       	sbc	r8, r8
     182:	88 08       	sbc	r8, r8
     184:	73 08       	sbc	r7, r3

00000186 <__ctors_end>:
     186:	11 24       	eor	r1, r1
     188:	1f be       	out	0x3f, r1	; 63
     18a:	cf ef       	ldi	r28, 0xFF	; 255
     18c:	d1 e2       	ldi	r29, 0x21	; 33
     18e:	de bf       	out	0x3e, r29	; 62
     190:	cd bf       	out	0x3d, r28	; 61
     192:	00 e0       	ldi	r16, 0x00	; 0
     194:	0c bf       	out	0x3c, r16	; 60

00000196 <__do_copy_data>:
     196:	12 e0       	ldi	r17, 0x02	; 2
     198:	a0 e0       	ldi	r26, 0x00	; 0
     19a:	b2 e0       	ldi	r27, 0x02	; 2
     19c:	e8 ea       	ldi	r30, 0xA8	; 168
     19e:	ff e1       	ldi	r31, 0x1F	; 31
     1a0:	00 e0       	ldi	r16, 0x00	; 0
     1a2:	0b bf       	out	0x3b, r16	; 59
     1a4:	02 c0       	rjmp	.+4      	; 0x1aa <__do_copy_data+0x14>
     1a6:	07 90       	elpm	r0, Z+
     1a8:	0d 92       	st	X+, r0
     1aa:	ac 3f       	cpi	r26, 0xFC	; 252
     1ac:	b1 07       	cpc	r27, r17
     1ae:	d9 f7       	brne	.-10     	; 0x1a6 <__do_copy_data+0x10>

000001b0 <__do_clear_bss>:
     1b0:	23 e0       	ldi	r18, 0x03	; 3
     1b2:	ac ef       	ldi	r26, 0xFC	; 252
     1b4:	b2 e0       	ldi	r27, 0x02	; 2
     1b6:	01 c0       	rjmp	.+2      	; 0x1ba <.do_clear_bss_start>

000001b8 <.do_clear_bss_loop>:
     1b8:	1d 92       	st	X+, r1

000001ba <.do_clear_bss_start>:
     1ba:	a8 36       	cpi	r26, 0x68	; 104
     1bc:	b2 07       	cpc	r27, r18
     1be:	e1 f7       	brne	.-8      	; 0x1b8 <.do_clear_bss_loop>
     1c0:	33 d0       	rcall	.+102    	; 0x228 <main>
     1c2:	0c 94 d2 0f 	jmp	0x1fa4	; 0x1fa4 <_exit>

000001c6 <__bad_interrupt>:
     1c6:	1c cf       	rjmp	.-456    	; 0x0 <__vectors>

000001c8 <ADC_read>:

uint16_t ADC_read() {
	
	uint16_t data = 0;
	//Read from ADC2
	set_bit(ADMUX, MUX1);
     1c8:	ec e7       	ldi	r30, 0x7C	; 124
     1ca:	f0 e0       	ldi	r31, 0x00	; 0
     1cc:	80 81       	ld	r24, Z
     1ce:	82 60       	ori	r24, 0x02	; 2
     1d0:	80 83       	st	Z, r24
	// Start conversion
	set_bit(ADCSRA,ADSC);
     1d2:	ea e7       	ldi	r30, 0x7A	; 122
     1d4:	f0 e0       	ldi	r31, 0x00	; 0
     1d6:	80 81       	ld	r24, Z
     1d8:	80 64       	ori	r24, 0x40	; 64
     1da:	80 83       	st	Z, r24
	// Wait for conversion complete
	loop_until_bit_is_set(ADCSRA,ADIF);
     1dc:	80 81       	ld	r24, Z
     1de:	84 ff       	sbrs	r24, 4
     1e0:	fd cf       	rjmp	.-6      	; 0x1dc <ADC_read+0x14>
	// Read data
	uint8_t data_low = ADCL;
     1e2:	20 91 78 00 	lds	r18, 0x0078
	uint16_t data_high = ADCH;
     1e6:	80 91 79 00 	lds	r24, 0x0079
     1ea:	90 e0       	ldi	r25, 0x00	; 0
	data = data_low + data_high*0b100000000;
     1ec:	98 2f       	mov	r25, r24
     1ee:	88 27       	eor	r24, r24
	
	return data;
     1f0:	82 0f       	add	r24, r18
     1f2:	91 1d       	adc	r25, r1
     1f4:	08 95       	ret

000001f6 <ADC_init>:
#include "bit_macros.h"
#include "ADC.h"

void ADC_init() {
	// Set pin A2 to input
	clear_bit(DDRF, PF2);
     1f6:	82 98       	cbi	0x10, 2	; 16
	
	// Enable ADC
	set_bit(ADCSRA, ADEN);
     1f8:	ea e7       	ldi	r30, 0x7A	; 122
     1fa:	f0 e0       	ldi	r31, 0x00	; 0
     1fc:	80 81       	ld	r24, Z
     1fe:	80 68       	ori	r24, 0x80	; 128
     200:	80 83       	st	Z, r24
	// Set prescaler to 128
	set_bit(ADCSRA, ADPS0);
     202:	80 81       	ld	r24, Z
     204:	81 60       	ori	r24, 0x01	; 1
     206:	80 83       	st	Z, r24
	set_bit(ADCSRA, ADPS1);
     208:	80 81       	ld	r24, Z
     20a:	82 60       	ori	r24, 0x02	; 2
     20c:	80 83       	st	Z, r24
	set_bit(ADCSRA, ADPS2);
     20e:	80 81       	ld	r24, Z
     210:	84 60       	ori	r24, 0x04	; 4
     212:	80 83       	st	Z, r24
	// Set voltage reference to 2.56V
	set_bit(ADMUX,REFS1);
     214:	ec e7       	ldi	r30, 0x7C	; 124
     216:	f0 e0       	ldi	r31, 0x00	; 0
     218:	80 81       	ld	r24, Z
     21a:	80 68       	ori	r24, 0x80	; 128
     21c:	80 83       	st	Z, r24
	set_bit(ADMUX,REFS0);
     21e:	80 81       	ld	r24, Z
     220:	80 64       	ori	r24, 0x40	; 64
     222:	80 83       	st	Z, r24
	
	ADC_read();
     224:	d1 cf       	rjmp	.-94     	; 0x1c8 <ADC_read>
     226:	08 95       	ret

00000228 <main>:
	#else
		//round up by default
		__ticks_dc = (uint32_t)(ceil(fabs(__tmp)));
	#endif

	__builtin_avr_delay_cycles(__ticks_dc);
     228:	2f ef       	ldi	r18, 0xFF	; 255
     22a:	89 ef       	ldi	r24, 0xF9	; 249
     22c:	90 e0       	ldi	r25, 0x00	; 0
     22e:	21 50       	subi	r18, 0x01	; 1
     230:	80 40       	sbci	r24, 0x00	; 0
     232:	90 40       	sbci	r25, 0x00	; 0
     234:	e1 f7       	brne	.-8      	; 0x22e <main+0x6>
     236:	00 c0       	rjmp	.+0      	; 0x238 <main+0x10>
     238:	00 00       	nop
}
int main(void)
{
	unsigned long clockspeed = F_CPU;
	_delay_ms(20);
	UART_init(clockspeed);
     23a:	60 e0       	ldi	r22, 0x00	; 0
     23c:	74 e2       	ldi	r23, 0x24	; 36
     23e:	84 ef       	ldi	r24, 0xF4	; 244
     240:	90 e0       	ldi	r25, 0x00	; 0
     242:	8f d7       	rcall	.+3870   	; 0x1162 <UART_init>
	
	can_init(MODE_NORMAL);
     244:	80 e0       	ldi	r24, 0x00	; 0
     246:	38 d0       	rcall	.+112    	; 0x2b8 <can_init>
	PWM_init(0.02, clockspeed);
     248:	20 e0       	ldi	r18, 0x00	; 0
     24a:	34 e2       	ldi	r19, 0x24	; 36
     24c:	44 ef       	ldi	r20, 0xF4	; 244
     24e:	50 e0       	ldi	r21, 0x00	; 0
     250:	6a e0       	ldi	r22, 0x0A	; 10
     252:	77 ed       	ldi	r23, 0xD7	; 215
     254:	83 ea       	ldi	r24, 0xA3	; 163
     256:	9c e3       	ldi	r25, 0x3C	; 60
     258:	29 d6       	rcall	.+3154   	; 0xeac <PWM_init>
	servo_init(clockspeed);
     25a:	60 e0       	ldi	r22, 0x00	; 0
     25c:	74 e2       	ldi	r23, 0x24	; 36
     25e:	84 ef       	ldi	r24, 0xF4	; 244
     260:	90 e0       	ldi	r25, 0x00	; 0
     262:	6c d6       	rcall	.+3288   	; 0xf3c <servo_init>
	IR_init();
     264:	51 d3       	rcall	.+1698   	; 0x908 <IR_init>
	ADC_init();
     266:	c7 df       	rcall	.-114    	; 0x1f6 <ADC_init>
	DAC_init();
     268:	ef d1       	rcall	.+990    	; 0x648 <DAC_init>
	motor_init();
     26a:	46 d4       	rcall	.+2188   	; 0xaf8 <motor_init>
	motor_calibrate();
     26c:	24 d4       	rcall	.+2120   	; 0xab6 <motor_calibrate>
	PID_init();
     26e:	cd d5       	rcall	.+2970   	; 0xe0a <PID_init>
	printf("NY START!!!!!\r\n");
     270:	8b e5       	ldi	r24, 0x5B	; 91
     272:	92 e0       	ldi	r25, 0x02	; 2
     274:	0e 94 c9 0b 	call	0x1792	; 0x1792 <puts>
     278:	2f ef       	ldi	r18, 0xFF	; 255
     27a:	85 ea       	ldi	r24, 0xA5	; 165
     27c:	9e e0       	ldi	r25, 0x0E	; 14
     27e:	21 50       	subi	r18, 0x01	; 1
     280:	80 40       	sbci	r24, 0x00	; 0
     282:	90 40       	sbci	r25, 0x00	; 0
     284:	e1 f7       	brne	.-8      	; 0x27e <main+0x56>
     286:	00 c0       	rjmp	.+0      	; 0x288 <main+0x60>
     288:	00 00       	nop
	_delay_ms(300); //Time to calibrate
	while(1)
	{
		PlayGame();
     28a:	00 d2       	rcall	.+1024   	; 0x68c <PlayGame>
		
		SendInfo();
     28c:	f9 d2       	rcall	.+1522   	; 0x880 <SendInfo>
     28e:	fd cf       	rjmp	.-6      	; 0x28a <main+0x62>

00000290 <__vector_3>:
#include <avr/delay.h>

volatile int flag = 0;
can_message message1;

ISR(INT2_vect){ 
     290:	1f 92       	push	r1
     292:	0f 92       	push	r0
     294:	0f b6       	in	r0, 0x3f	; 63
     296:	0f 92       	push	r0
     298:	11 24       	eor	r1, r1
     29a:	8f 93       	push	r24
     29c:	9f 93       	push	r25
	flag = 1; 
     29e:	81 e0       	ldi	r24, 0x01	; 1
     2a0:	90 e0       	ldi	r25, 0x00	; 0
     2a2:	90 93 ff 02 	sts	0x02FF, r25
     2a6:	80 93 fe 02 	sts	0x02FE, r24
	//printf("\r\n INTERUPT \r \n");
} 
     2aa:	9f 91       	pop	r25
     2ac:	8f 91       	pop	r24
     2ae:	0f 90       	pop	r0
     2b0:	0f be       	out	0x3f, r0	; 63
     2b2:	0f 90       	pop	r0
     2b4:	1f 90       	pop	r1
     2b6:	18 95       	reti

000002b8 <can_init>:

void can_init(uint8_t mode){

	mcp_2515_init(mode);
     2b8:	78 d1       	rcall	.+752    	; 0x5aa <mcp_2515_init>
	
	
	mcp_2515_write(MCP_CANINTE, MCP_RX_INT);
     2ba:	63 e0       	ldi	r22, 0x03	; 3
     2bc:	8b e2       	ldi	r24, 0x2B	; 43
     2be:	62 d1       	rcall	.+708    	; 0x584 <mcp_2515_write>
	
	// Disable global interrupts
	cli();
     2c0:	f8 94       	cli
	// Interrupt on falling edge PD2
	set_bit(EICRA, ISC21);
     2c2:	e9 e6       	ldi	r30, 0x69	; 105
     2c4:	f0 e0       	ldi	r31, 0x00	; 0
     2c6:	80 81       	ld	r24, Z
     2c8:	80 62       	ori	r24, 0x20	; 32
     2ca:	80 83       	st	Z, r24
	clear_bit(EICRA, ISC20);
     2cc:	80 81       	ld	r24, Z
     2ce:	8f 7e       	andi	r24, 0xEF	; 239
     2d0:	80 83       	st	Z, r24
	// Enable interrupt on PD2
	set_bit(EIMSK,INT2);
     2d2:	ea 9a       	sbi	0x1d, 2	; 29
	// Enable global interrupts
	sei();
     2d4:	78 94       	sei
     2d6:	08 95       	ret

000002d8 <can_interrupt>:
}

uint8_t can_interrupt(){
	if (flag){	
     2d8:	80 91 fe 02 	lds	r24, 0x02FE
     2dc:	90 91 ff 02 	lds	r25, 0x02FF
     2e0:	89 2b       	or	r24, r25
     2e2:	31 f0       	breq	.+12     	; 0x2f0 <can_interrupt+0x18>
		flag = 0;
     2e4:	10 92 ff 02 	sts	0x02FF, r1
     2e8:	10 92 fe 02 	sts	0x02FE, r1
		return 1;
     2ec:	81 e0       	ldi	r24, 0x01	; 1
     2ee:	08 95       	ret
	}
	return 0;
     2f0:	80 e0       	ldi	r24, 0x00	; 0
}
     2f2:	08 95       	ret

000002f4 <can_transmit_complete>:
	mcp_2515_request_to_send(MCP_RTS_TX0 + buffer_number);
	//printf("buffer nr. %d\n\r",buffer_number);
	
}

int can_transmit_complete(int buffer_number){
     2f4:	cf 93       	push	r28
     2f6:	df 93       	push	r29
     2f8:	ec 01       	movw	r28, r24
	uint8_t transmit_flag = mcp_2515_read(MCP_CANINTF);
     2fa:	8c e2       	ldi	r24, 0x2C	; 44
     2fc:	36 d1       	rcall	.+620    	; 0x56a <mcp_2515_read>
	uint8_t interrupt_bits = (transmit_flag & (MCP_TX0IF + buffer_number*2));
     2fe:	9e 01       	movw	r18, r28
     300:	2e 5f       	subi	r18, 0xFE	; 254
     302:	3f 4f       	sbci	r19, 0xFF	; 255
     304:	42 2f       	mov	r20, r18
     306:	44 0f       	add	r20, r20
     308:	84 23       	and	r24, r20

	if(interrupt_bits == (MCP_TX0IF + buffer_number*2)){
     30a:	48 2f       	mov	r20, r24
     30c:	50 e0       	ldi	r21, 0x00	; 0
     30e:	22 0f       	add	r18, r18
     310:	33 1f       	adc	r19, r19
     312:	81 e0       	ldi	r24, 0x01	; 1
     314:	90 e0       	ldi	r25, 0x00	; 0
     316:	42 17       	cp	r20, r18
     318:	53 07       	cpc	r21, r19
     31a:	11 f4       	brne	.+4      	; 0x320 <can_transmit_complete+0x2c>
     31c:	80 e0       	ldi	r24, 0x00	; 0
     31e:	90 e0       	ldi	r25, 0x00	; 0
			return 0;
	}
	//printf("\r\nMELDING SENDT\r\n");
	return 1;
}
     320:	df 91       	pop	r29
     322:	cf 91       	pop	r28
     324:	08 95       	ret

00000326 <can_message_send>:
	}
	can_message re;
	return re;
}

void can_message_send(can_message* message){
     326:	ef 92       	push	r14
     328:	ff 92       	push	r15
     32a:	0f 93       	push	r16
     32c:	1f 93       	push	r17
     32e:	cf 93       	push	r28
     330:	df 93       	push	r29
     332:	ec 01       	movw	r28, r24
	
	static int buffer_number = 0;
	
	while (!can_transmit_complete(buffer_number)){
     334:	11 c0       	rjmp	.+34     	; 0x358 <can_message_send+0x32>
		buffer_number +=1;
     336:	20 91 fc 02 	lds	r18, 0x02FC
     33a:	30 91 fd 02 	lds	r19, 0x02FD
     33e:	2f 5f       	subi	r18, 0xFF	; 255
     340:	3f 4f       	sbci	r19, 0xFF	; 255
     342:	30 93 fd 02 	sts	0x02FD, r19
     346:	20 93 fc 02 	sts	0x02FC, r18
		if (buffer_number > 2) {
     34a:	23 30       	cpi	r18, 0x03	; 3
     34c:	31 05       	cpc	r19, r1
     34e:	24 f0       	brlt	.+8      	; 0x358 <can_message_send+0x32>
			buffer_number = 0;
     350:	10 92 fd 02 	sts	0x02FD, r1
     354:	10 92 fc 02 	sts	0x02FC, r1

void can_message_send(can_message* message){
	
	static int buffer_number = 0;
	
	while (!can_transmit_complete(buffer_number)){
     358:	80 91 fc 02 	lds	r24, 0x02FC
     35c:	90 91 fd 02 	lds	r25, 0x02FD
     360:	c9 df       	rcall	.-110    	; 0x2f4 <can_transmit_complete>
     362:	89 2b       	or	r24, r25
     364:	41 f3       	breq	.-48     	; 0x336 <can_message_send+0x10>
			buffer_number = 0;
		}
	}
	
	// Arbitration field identifier ID = 1337;    id high = 167  id low = 0
	unsigned int ID = message->id;
     366:	88 81       	ld	r24, Y
     368:	99 81       	ldd	r25, Y+1	; 0x01
	char id_high = ID / 8;
	char id_low = ID % 8;
     36a:	28 2f       	mov	r18, r24
     36c:	27 70       	andi	r18, 0x07	; 7
     36e:	f2 2e       	mov	r15, r18
		}
	}
	
	// Arbitration field identifier ID = 1337;    id high = 167  id low = 0
	unsigned int ID = message->id;
	char id_high = ID / 8;
     370:	bc 01       	movw	r22, r24
     372:	76 95       	lsr	r23
     374:	67 95       	ror	r22
     376:	76 95       	lsr	r23
     378:	67 95       	ror	r22
     37a:	76 95       	lsr	r23
     37c:	67 95       	ror	r22
	char id_low = ID % 8;
	id_low = id_low*0b100000;
	mcp_2515_write(MCP_TXB0SIDH + 16 * buffer_number, id_high);
     37e:	0c ef       	ldi	r16, 0xFC	; 252
     380:	12 e0       	ldi	r17, 0x02	; 2
     382:	f8 01       	movw	r30, r16
     384:	80 81       	ld	r24, Z
     386:	82 95       	swap	r24
     388:	80 7f       	andi	r24, 0xF0	; 240
     38a:	8f 5c       	subi	r24, 0xCF	; 207
     38c:	fb d0       	rcall	.+502    	; 0x584 <mcp_2515_write>
	
	// Arbitration field identifier ID = 1337;    id high = 167  id low = 0
	unsigned int ID = message->id;
	char id_high = ID / 8;
	char id_low = ID % 8;
	id_low = id_low*0b100000;
     38e:	6f 2d       	mov	r22, r15
     390:	62 95       	swap	r22
     392:	66 0f       	add	r22, r22
     394:	60 7e       	andi	r22, 0xE0	; 224
	mcp_2515_write(MCP_TXB0SIDH + 16 * buffer_number, id_high);
	mcp_2515_write(MCP_TXB0SIDL + 16 * buffer_number, id_low);
     396:	f8 01       	movw	r30, r16
     398:	80 81       	ld	r24, Z
     39a:	82 95       	swap	r24
     39c:	80 7f       	andi	r24, 0xF0	; 240
     39e:	8e 5c       	subi	r24, 0xCE	; 206
     3a0:	f1 d0       	rcall	.+482    	; 0x584 <mcp_2515_write>
	
	// Define data length of message
	uint8_t data_length = message->length;
     3a2:	ea 80       	ldd	r14, Y+2	; 0x02
	mcp_2515_write(MCP_TXB0DLC + 16 * buffer_number, data_length);
     3a4:	f8 01       	movw	r30, r16
     3a6:	80 81       	ld	r24, Z
     3a8:	82 95       	swap	r24
     3aa:	80 7f       	andi	r24, 0xF0	; 240
     3ac:	6e 2d       	mov	r22, r14
     3ae:	8b 5c       	subi	r24, 0xCB	; 203
     3b0:	e9 d0       	rcall	.+466    	; 0x584 <mcp_2515_write>
	
	// Write data bytes to transmit buffer
	char* data_bytes = message->data;
     3b2:	23 96       	adiw	r28, 0x03	; 3
	for (uint8_t byte = 0; byte < data_length; byte++) {
     3b4:	ee 20       	and	r14, r14
     3b6:	79 f0       	breq	.+30     	; 0x3d6 <can_message_send+0xb0>
     3b8:	f1 2c       	mov	r15, r1
		mcp_2515_write(MCP_TXB0Dm + byte + 16 * buffer_number, data_bytes[byte]);
     3ba:	69 91       	ld	r22, Y+
     3bc:	f8 01       	movw	r30, r16
     3be:	80 81       	ld	r24, Z
     3c0:	2f 2d       	mov	r18, r15
     3c2:	f0 e1       	ldi	r31, 0x10	; 16
     3c4:	8f 9f       	mul	r24, r31
     3c6:	20 0d       	add	r18, r0
     3c8:	11 24       	eor	r1, r1
     3ca:	82 2f       	mov	r24, r18
     3cc:	8a 5c       	subi	r24, 0xCA	; 202
     3ce:	da d0       	rcall	.+436    	; 0x584 <mcp_2515_write>
	uint8_t data_length = message->length;
	mcp_2515_write(MCP_TXB0DLC + 16 * buffer_number, data_length);
	
	// Write data bytes to transmit buffer
	char* data_bytes = message->data;
	for (uint8_t byte = 0; byte < data_length; byte++) {
     3d0:	f3 94       	inc	r15
     3d2:	fe 10       	cpse	r15, r14
     3d4:	f2 cf       	rjmp	.-28     	; 0x3ba <can_message_send+0x94>
		mcp_2515_write(MCP_TXB0Dm + byte + 16 * buffer_number, data_bytes[byte]);
	}
	
	// Request to send message, send if successful
	mcp_2515_request_to_send(MCP_RTS_TX0 + buffer_number);
     3d6:	80 91 fc 02 	lds	r24, 0x02FC
     3da:	8f 57       	subi	r24, 0x7F	; 127
     3dc:	19 d1       	rcall	.+562    	; 0x610 <mcp_2515_request_to_send>
	//printf("buffer nr. %d\n\r",buffer_number);
	
}
     3de:	df 91       	pop	r29
     3e0:	cf 91       	pop	r28
     3e2:	1f 91       	pop	r17
     3e4:	0f 91       	pop	r16
     3e6:	ff 90       	pop	r15
     3e8:	ef 90       	pop	r14
     3ea:	08 95       	ret

000003ec <can_message_receive>:
	}
	//printf("\r\nMELDING SENDT\r\n");
	return 1;
}

void can_message_receive(int rec_buff_num, can_message* received_message){
     3ec:	0f 93       	push	r16
     3ee:	1f 93       	push	r17
     3f0:	cf 93       	push	r28
     3f2:	df 93       	push	r29
     3f4:	eb 01       	movw	r28, r22
	uint8_t id_high = mcp_2515_read(MCP_RXB0SIDH + 16 * rec_buff_num);
     3f6:	18 2f       	mov	r17, r24
     3f8:	12 95       	swap	r17
     3fa:	10 7f       	andi	r17, 0xF0	; 240
     3fc:	81 e6       	ldi	r24, 0x61	; 97
     3fe:	81 0f       	add	r24, r17
     400:	b4 d0       	rcall	.+360    	; 0x56a <mcp_2515_read>
     402:	08 2f       	mov	r16, r24
	uint8_t id_low = mcp_2515_read(MCP_RXB0SIDL + 16 * rec_buff_num);
     404:	82 e6       	ldi	r24, 0x62	; 98
     406:	81 0f       	add	r24, r17
     408:	b0 d0       	rcall	.+352    	; 0x56a <mcp_2515_read>
	uint8_t mask = 0b11100000;
	id_low = (id_low & mask);
	received_message->id = 0b1000*id_high + id_low/0b100000;
     40a:	20 2f       	mov	r18, r16
     40c:	30 e0       	ldi	r19, 0x00	; 0
     40e:	22 0f       	add	r18, r18
     410:	33 1f       	adc	r19, r19
     412:	22 0f       	add	r18, r18
     414:	33 1f       	adc	r19, r19
     416:	22 0f       	add	r18, r18
     418:	33 1f       	adc	r19, r19
     41a:	82 95       	swap	r24
     41c:	86 95       	lsr	r24
     41e:	87 70       	andi	r24, 0x07	; 7
     420:	28 0f       	add	r18, r24
     422:	31 1d       	adc	r19, r1
     424:	39 83       	std	Y+1, r19	; 0x01
     426:	28 83       	st	Y, r18
	
	uint8_t data_length = mcp_2515_read(MCP_RXB0DLC + 16 * rec_buff_num);
     428:	85 e6       	ldi	r24, 0x65	; 101
     42a:	81 0f       	add	r24, r17
     42c:	9e d0       	rcall	.+316    	; 0x56a <mcp_2515_read>
	mask = 0b1111;
	received_message->length = (data_length & mask);
     42e:	98 2f       	mov	r25, r24
     430:	9f 70       	andi	r25, 0x0F	; 15
     432:	9a 83       	std	Y+2, r25	; 0x02
	
	for (uint8_t byte = 0; byte < data_length; byte++) {
     434:	88 23       	and	r24, r24
     436:	51 f0       	breq	.+20     	; 0x44c <can_message_receive+0x60>
     438:	1a 59       	subi	r17, 0x9A	; 154
     43a:	23 96       	adiw	r28, 0x03	; 3
     43c:	08 2f       	mov	r16, r24
     43e:	01 0f       	add	r16, r17
		received_message->data[byte] = mcp_2515_read(MCP_RXB0DM + byte + 16 * rec_buff_num);
     440:	81 2f       	mov	r24, r17
     442:	93 d0       	rcall	.+294    	; 0x56a <mcp_2515_read>
     444:	89 93       	st	Y+, r24
     446:	1f 5f       	subi	r17, 0xFF	; 255
	
	uint8_t data_length = mcp_2515_read(MCP_RXB0DLC + 16 * rec_buff_num);
	mask = 0b1111;
	received_message->length = (data_length & mask);
	
	for (uint8_t byte = 0; byte < data_length; byte++) {
     448:	10 13       	cpse	r17, r16
     44a:	fa cf       	rjmp	.-12     	; 0x440 <can_message_receive+0x54>
		received_message->data[byte] = mcp_2515_read(MCP_RXB0DM + byte + 16 * rec_buff_num);
	}
	
}
     44c:	df 91       	pop	r29
     44e:	cf 91       	pop	r28
     450:	1f 91       	pop	r17
     452:	0f 91       	pop	r16
     454:	08 95       	ret

00000456 <can_int_vect>:

void can_int_vect(int* v) { 
     456:	cf 93       	push	r28
     458:	df 93       	push	r29
     45a:	ec 01       	movw	r28, r24
	uint8_t int_flag = mcp_2515_read(MCP_CANINTF);
     45c:	8c e2       	ldi	r24, 0x2C	; 44
     45e:	85 d0       	rcall	.+266    	; 0x56a <mcp_2515_read>
	v[0] = (int_flag & MCP_RX0IF);
     460:	98 2f       	mov	r25, r24
     462:	91 70       	andi	r25, 0x01	; 1
     464:	98 83       	st	Y, r25
     466:	19 82       	std	Y+1, r1	; 0x01
	v[1] = (int_flag & MCP_RX1IF);
     468:	82 70       	andi	r24, 0x02	; 2
     46a:	90 e0       	ldi	r25, 0x00	; 0
     46c:	9b 83       	std	Y+3, r25	; 0x03
     46e:	8a 83       	std	Y+2, r24	; 0x02
}
     470:	df 91       	pop	r29
     472:	cf 91       	pop	r28
     474:	08 95       	ret

00000476 <can_handle_messages>:
		return 1;
	}
	return 0;
}

can_message can_handle_messages(){
     476:	0f 93       	push	r16
     478:	1f 93       	push	r17
     47a:	cf 93       	push	r28
     47c:	df 93       	push	r29
     47e:	cd b7       	in	r28, 0x3d	; 61
     480:	de b7       	in	r29, 0x3e	; 62
     482:	68 97       	sbiw	r28, 0x18	; 24
     484:	0f b6       	in	r0, 0x3f	; 63
     486:	f8 94       	cli
     488:	de bf       	out	0x3e, r29	; 62
     48a:	0f be       	out	0x3f, r0	; 63
     48c:	cd bf       	out	0x3d, r28	; 61
     48e:	8c 01       	movw	r16, r24
	uint8_t v[2] = {0};
     490:	1a 82       	std	Y+2, r1	; 0x02
     492:	19 82       	std	Y+1, r1	; 0x01

	can_int_vect(v);
     494:	ce 01       	movw	r24, r28
     496:	01 96       	adiw	r24, 0x01	; 1
     498:	de df       	rcall	.-68     	; 0x456 <can_int_vect>
	
	
	if (v[0]){
     49a:	89 81       	ldd	r24, Y+1	; 0x01
     49c:	88 23       	and	r24, r24
     49e:	f9 f0       	breq	.+62     	; 0x4de <can_handle_messages+0x68>
		can_message_receive(0, &message1);
     4a0:	60 e2       	ldi	r22, 0x20	; 32
     4a2:	73 e0       	ldi	r23, 0x03	; 3
     4a4:	80 e0       	ldi	r24, 0x00	; 0
     4a6:	90 e0       	ldi	r25, 0x00	; 0
     4a8:	a1 df       	rcall	.-190    	; 0x3ec <can_message_receive>
		//printf("Message id = %d    ",message1.id);
		mcp_2515_write(MCP_CANINTF,0);
     4aa:	60 e0       	ldi	r22, 0x00	; 0
     4ac:	8c e2       	ldi	r24, 0x2C	; 44
     4ae:	6a d0       	rcall	.+212    	; 0x584 <mcp_2515_write>
		mcp_2515_bit_modify(MCP_CANINTF, 1, 0);
     4b0:	40 e0       	ldi	r20, 0x00	; 0
     4b2:	61 e0       	ldi	r22, 0x01	; 1
     4b4:	8c e2       	ldi	r24, 0x2C	; 44
     4b6:	b4 d0       	rcall	.+360    	; 0x620 <mcp_2515_bit_modify>
		//mcp_2515_bit_modify(MCP_CANINTF, 1, 0);
		can_int_vect(v);
     4b8:	ce 01       	movw	r24, r28
     4ba:	01 96       	adiw	r24, 0x01	; 1
     4bc:	cc df       	rcall	.-104    	; 0x456 <can_int_vect>
		if (!v[1]){
     4be:	8a 81       	ldd	r24, Y+2	; 0x02
     4c0:	81 11       	cpse	r24, r1
     4c2:	04 c0       	rjmp	.+8      	; 0x4cc <can_handle_messages+0x56>
			flag = 0;
     4c4:	10 92 ff 02 	sts	0x02FF, r1
     4c8:	10 92 fe 02 	sts	0x02FE, r1
		}
		return message1;
     4cc:	8b e0       	ldi	r24, 0x0B	; 11
     4ce:	e0 e2       	ldi	r30, 0x20	; 32
     4d0:	f3 e0       	ldi	r31, 0x03	; 3
     4d2:	d8 01       	movw	r26, r16
     4d4:	01 90       	ld	r0, Z+
     4d6:	0d 92       	st	X+, r0
     4d8:	8a 95       	dec	r24
     4da:	e1 f7       	brne	.-8      	; 0x4d4 <can_handle_messages+0x5e>
     4dc:	2b c0       	rjmp	.+86     	; 0x534 <can_handle_messages+0xbe>
	}
	
	can_message message2;
	
	if (v[1]){
     4de:	8a 81       	ldd	r24, Y+2	; 0x02
     4e0:	88 23       	and	r24, r24
     4e2:	01 f1       	breq	.+64     	; 0x524 <can_handle_messages+0xae>
		can_message_receive(1, &message2);
     4e4:	be 01       	movw	r22, r28
     4e6:	6d 5f       	subi	r22, 0xFD	; 253
     4e8:	7f 4f       	sbci	r23, 0xFF	; 255
     4ea:	81 e0       	ldi	r24, 0x01	; 1
     4ec:	90 e0       	ldi	r25, 0x00	; 0
     4ee:	7e df       	rcall	.-260    	; 0x3ec <can_message_receive>
		mcp_2515_write(MCP_CANINTF,0);
     4f0:	60 e0       	ldi	r22, 0x00	; 0
     4f2:	8c e2       	ldi	r24, 0x2C	; 44
     4f4:	47 d0       	rcall	.+142    	; 0x584 <mcp_2515_write>
		//mcp_2515_bit_modify(MCP_CANINTF, 2, 0);
		mcp_2515_bit_modify(MCP_CANINTF, 2, 0);
     4f6:	40 e0       	ldi	r20, 0x00	; 0
     4f8:	62 e0       	ldi	r22, 0x02	; 2
     4fa:	8c e2       	ldi	r24, 0x2C	; 44
     4fc:	91 d0       	rcall	.+290    	; 0x620 <mcp_2515_bit_modify>
		can_int_vect(v);
     4fe:	ce 01       	movw	r24, r28
     500:	01 96       	adiw	r24, 0x01	; 1
     502:	a9 df       	rcall	.-174    	; 0x456 <can_int_vect>
		if (!v[0]){
     504:	89 81       	ldd	r24, Y+1	; 0x01
     506:	81 11       	cpse	r24, r1
     508:	04 c0       	rjmp	.+8      	; 0x512 <can_handle_messages+0x9c>
			flag = 0;
     50a:	10 92 ff 02 	sts	0x02FF, r1
     50e:	10 92 fe 02 	sts	0x02FE, r1
		}
		return message2;
     512:	8b e0       	ldi	r24, 0x0B	; 11
     514:	fe 01       	movw	r30, r28
     516:	33 96       	adiw	r30, 0x03	; 3
     518:	d8 01       	movw	r26, r16
     51a:	01 90       	ld	r0, Z+
     51c:	0d 92       	st	X+, r0
     51e:	8a 95       	dec	r24
     520:	e1 f7       	brne	.-8      	; 0x51a <can_handle_messages+0xa4>
     522:	08 c0       	rjmp	.+16     	; 0x534 <can_handle_messages+0xbe>
	}
	can_message re;
	return re;
     524:	8b e0       	ldi	r24, 0x0B	; 11
     526:	fe 01       	movw	r30, r28
     528:	3e 96       	adiw	r30, 0x0e	; 14
     52a:	d8 01       	movw	r26, r16
     52c:	01 90       	ld	r0, Z+
     52e:	0d 92       	st	X+, r0
     530:	8a 95       	dec	r24
     532:	e1 f7       	brne	.-8      	; 0x52c <can_handle_messages+0xb6>
}
     534:	c8 01       	movw	r24, r16
     536:	68 96       	adiw	r28, 0x18	; 24
     538:	0f b6       	in	r0, 0x3f	; 63
     53a:	f8 94       	cli
     53c:	de bf       	out	0x3e, r29	; 62
     53e:	0f be       	out	0x3f, r0	; 63
     540:	cd bf       	out	0x3d, r28	; 61
     542:	df 91       	pop	r29
     544:	cf 91       	pop	r28
     546:	1f 91       	pop	r17
     548:	0f 91       	pop	r16
     54a:	08 95       	ret

0000054c <activate_slave>:

#include <avr/io.h>
#include <avr/delay.h>

void activate_slave(){
	clear_bit(PORTB, PB7);
     54c:	2f 98       	cbi	0x05, 7	; 5
     54e:	08 95       	ret

00000550 <deactivate_slave>:
}

void deactivate_slave(){
	set_bit(PORTB, PB7);
     550:	2f 9a       	sbi	0x05, 7	; 5
     552:	08 95       	ret

00000554 <mcp_2515_reset>:
	
	return 0;
}

void mcp_2515_reset(){
	activate_slave();
     554:	fb df       	rcall	.-10     	; 0x54c <activate_slave>
	SPI_write(MCP_RESET);
     556:	80 ec       	ldi	r24, 0xC0	; 192
     558:	28 d6       	rcall	.+3152   	; 0x11aa <SPI_write>
	deactivate_slave();
     55a:	fa df       	rcall	.-12     	; 0x550 <deactivate_slave>
     55c:	83 ec       	ldi	r24, 0xC3	; 195
     55e:	99 e0       	ldi	r25, 0x09	; 9
     560:	01 97       	sbiw	r24, 0x01	; 1
     562:	f1 f7       	brne	.-4      	; 0x560 <mcp_2515_reset+0xc>
     564:	00 c0       	rjmp	.+0      	; 0x566 <mcp_2515_reset+0x12>
     566:	00 00       	nop
     568:	08 95       	ret

0000056a <mcp_2515_read>:
	_delay_ms(10);	
}

uint8_t mcp_2515_read(uint8_t address){
     56a:	cf 93       	push	r28
     56c:	c8 2f       	mov	r28, r24
	activate_slave();
     56e:	ee df       	rcall	.-36     	; 0x54c <activate_slave>
	
	uint8_t data;
	
	SPI_write(MCP_READ);
     570:	83 e0       	ldi	r24, 0x03	; 3
     572:	1b d6       	rcall	.+3126   	; 0x11aa <SPI_write>
	SPI_write(address);
     574:	8c 2f       	mov	r24, r28
     576:	19 d6       	rcall	.+3122   	; 0x11aa <SPI_write>
	data = SPI_read();
     578:	1d d6       	rcall	.+3130   	; 0x11b4 <SPI_read>
     57a:	c8 2f       	mov	r28, r24
	
	deactivate_slave();
     57c:	e9 df       	rcall	.-46     	; 0x550 <deactivate_slave>
	
	return data;
}
     57e:	8c 2f       	mov	r24, r28
     580:	cf 91       	pop	r28
     582:	08 95       	ret

00000584 <mcp_2515_write>:


void mcp_2515_write(uint8_t address, uint8_t data) {
     584:	cf 93       	push	r28
     586:	df 93       	push	r29
     588:	d8 2f       	mov	r29, r24
     58a:	c6 2f       	mov	r28, r22
	activate_slave();
     58c:	df df       	rcall	.-66     	; 0x54c <activate_slave>
	
	SPI_write(MCP_WRITE);
     58e:	82 e0       	ldi	r24, 0x02	; 2
     590:	0c d6       	rcall	.+3096   	; 0x11aa <SPI_write>
	SPI_write(address);
     592:	8d 2f       	mov	r24, r29
     594:	0a d6       	rcall	.+3092   	; 0x11aa <SPI_write>
	SPI_write(data);
     596:	8c 2f       	mov	r24, r28
     598:	08 d6       	rcall	.+3088   	; 0x11aa <SPI_write>
	
	deactivate_slave();
     59a:	da df       	rcall	.-76     	; 0x550 <deactivate_slave>
}
     59c:	df 91       	pop	r29
     59e:	cf 91       	pop	r28
     5a0:	08 95       	ret

000005a2 <mcp_2515_set_mode>:
void deactivate_slave(){
	set_bit(PORTB, PB7);
}

void mcp_2515_set_mode(uint8_t mode){
	mcp_2515_write(MCP_CANCTRL, mode);
     5a2:	68 2f       	mov	r22, r24
     5a4:	8f e0       	ldi	r24, 0x0F	; 15
     5a6:	ee cf       	rjmp	.-36     	; 0x584 <mcp_2515_write>
     5a8:	08 95       	ret

000005aa <mcp_2515_init>:
}

uint8_t mcp_2515_init(uint8_t mode){
     5aa:	cf 93       	push	r28
     5ac:	c8 2f       	mov	r28, r24
	
	uint8_t val;
	SPI_init();
     5ae:	f7 d5       	rcall	.+3054   	; 0x119e <SPI_init>
	
	mcp_2515_reset();
     5b0:	d1 df       	rcall	.-94     	; 0x554 <mcp_2515_reset>
	
	val = mcp_2515_read(MCP_CANSTAT);
     5b2:	8e e0       	ldi	r24, 0x0E	; 14
     5b4:	da df       	rcall	.-76     	; 0x56a <mcp_2515_read>
	//printf("val : %d ",val);
	uint8_t mode_bits = (val & MODE_MASK);
     5b6:	80 7e       	andi	r24, 0xE0	; 224
	if(mode_bits != MODE_CONFIG){
     5b8:	80 38       	cpi	r24, 0x80	; 128
     5ba:	71 f0       	breq	.+28     	; 0x5d8 <mcp_2515_init+0x2e>
		printf("MCP2515 is NOT in Configuration mode after reset! Its config bits are %x\n", mode_bits);
     5bc:	1f 92       	push	r1
     5be:	8f 93       	push	r24
     5c0:	8a e6       	ldi	r24, 0x6A	; 106
     5c2:	92 e0       	ldi	r25, 0x02	; 2
     5c4:	9f 93       	push	r25
     5c6:	8f 93       	push	r24
     5c8:	0e 94 b8 0b 	call	0x1770	; 0x1770 <printf>
		return 1;
     5cc:	0f 90       	pop	r0
     5ce:	0f 90       	pop	r0
     5d0:	0f 90       	pop	r0
     5d2:	0f 90       	pop	r0
     5d4:	81 e0       	ldi	r24, 0x01	; 1
     5d6:	1a c0       	rjmp	.+52     	; 0x60c <mcp_2515_init+0x62>
	}
	
	mcp_2515_set_mode(mode);
     5d8:	8c 2f       	mov	r24, r28
     5da:	e3 df       	rcall	.-58     	; 0x5a2 <mcp_2515_set_mode>
	
	val = mcp_2515_read(MCP_CANSTAT);
     5dc:	8e e0       	ldi	r24, 0x0E	; 14
     5de:	c5 df       	rcall	.-118    	; 0x56a <mcp_2515_read>
	mode_bits = (val & MODE_MASK);
     5e0:	80 7e       	andi	r24, 0xE0	; 224
	
	if(mode_bits != mode){
     5e2:	8c 17       	cp	r24, r28
     5e4:	91 f0       	breq	.+36     	; 0x60a <mcp_2515_init+0x60>
		
		printf("MCP2515 is NOT in correct mode after reset! Its config bits are %x\n", mode_bits);
     5e6:	1f 92       	push	r1
     5e8:	8f 93       	push	r24
     5ea:	84 eb       	ldi	r24, 0xB4	; 180
     5ec:	92 e0       	ldi	r25, 0x02	; 2
     5ee:	9f 93       	push	r25
     5f0:	8f 93       	push	r24
     5f2:	0e 94 b8 0b 	call	0x1770	; 0x1770 <printf>
		printf("\n!\n");
     5f6:	88 ef       	ldi	r24, 0xF8	; 248
     5f8:	92 e0       	ldi	r25, 0x02	; 2
     5fa:	0e 94 c9 0b 	call	0x1792	; 0x1792 <puts>
		return 1;
     5fe:	0f 90       	pop	r0
     600:	0f 90       	pop	r0
     602:	0f 90       	pop	r0
     604:	0f 90       	pop	r0
     606:	81 e0       	ldi	r24, 0x01	; 1
     608:	01 c0       	rjmp	.+2      	; 0x60c <mcp_2515_init+0x62>
	}
	
	
	return 0;
     60a:	80 e0       	ldi	r24, 0x00	; 0
}
     60c:	cf 91       	pop	r28
     60e:	08 95       	ret

00000610 <mcp_2515_request_to_send>:
	SPI_write(data);
	
	deactivate_slave();
}

void mcp_2515_request_to_send(char buffer) {
     610:	cf 93       	push	r28
     612:	c8 2f       	mov	r28, r24
	activate_slave();
     614:	9b df       	rcall	.-202    	; 0x54c <activate_slave>
	
	SPI_write(buffer);
     616:	8c 2f       	mov	r24, r28
     618:	c8 d5       	rcall	.+2960   	; 0x11aa <SPI_write>
	
	deactivate_slave();
     61a:	9a df       	rcall	.-204    	; 0x550 <deactivate_slave>
}
     61c:	cf 91       	pop	r28
     61e:	08 95       	ret

00000620 <mcp_2515_bit_modify>:

void mcp_2515_bit_modify(uint8_t adress, uint8_t mask, uint8_t data) {
     620:	1f 93       	push	r17
     622:	cf 93       	push	r28
     624:	df 93       	push	r29
     626:	18 2f       	mov	r17, r24
     628:	d6 2f       	mov	r29, r22
     62a:	c4 2f       	mov	r28, r20
	activate_slave();
     62c:	8f df       	rcall	.-226    	; 0x54c <activate_slave>
	
	SPI_write(MCP_BITMOD);
     62e:	85 e0       	ldi	r24, 0x05	; 5
     630:	bc d5       	rcall	.+2936   	; 0x11aa <SPI_write>
	SPI_write(adress);
     632:	81 2f       	mov	r24, r17
     634:	ba d5       	rcall	.+2932   	; 0x11aa <SPI_write>
	SPI_write(mask);
     636:	8d 2f       	mov	r24, r29
     638:	b8 d5       	rcall	.+2928   	; 0x11aa <SPI_write>
	SPI_write(data);
     63a:	8c 2f       	mov	r24, r28
     63c:	b6 d5       	rcall	.+2924   	; 0x11aa <SPI_write>
	
	deactivate_slave();
     63e:	88 df       	rcall	.-240    	; 0x550 <deactivate_slave>
}
     640:	df 91       	pop	r29
     642:	cf 91       	pop	r28
     644:	1f 91       	pop	r17
     646:	08 95       	ret

00000648 <DAC_init>:
     648:	78 94       	sei
     64a:	c9 c4       	rjmp	.+2450   	; 0xfde <TWI_Master_Initialise>
     64c:	08 95       	ret

0000064e <DAC_send>:
     64e:	cf 93       	push	r28
     650:	df 93       	push	r29
     652:	00 d0       	rcall	.+0      	; 0x654 <DAC_send+0x6>
     654:	cd b7       	in	r28, 0x3d	; 61
     656:	de b7       	in	r29, 0x3e	; 62
     658:	90 e5       	ldi	r25, 0x50	; 80
     65a:	99 83       	std	Y+1, r25	; 0x01
     65c:	1a 82       	std	Y+2, r1	; 0x02
     65e:	8b 83       	std	Y+3, r24	; 0x03
     660:	63 e0       	ldi	r22, 0x03	; 3
     662:	ce 01       	movw	r24, r28
     664:	01 96       	adiw	r24, 0x01	; 1
     666:	c5 d4       	rcall	.+2442   	; 0xff2 <TWI_Start_Transceiver_With_Data>
     668:	0f 90       	pop	r0
     66a:	0f 90       	pop	r0
     66c:	0f 90       	pop	r0
     66e:	df 91       	pop	r29
     670:	cf 91       	pop	r28
     672:	08 95       	ret

00000674 <HitBall>:
		}

}
void HitBall(){
	
	PORTB |= (1<<PB6);
     674:	2e 9a       	sbi	0x05, 6	; 5
     676:	2f e3       	ldi	r18, 0x3F	; 63
     678:	8d e0       	ldi	r24, 0x0D	; 13
     67a:	93 e0       	ldi	r25, 0x03	; 3
     67c:	21 50       	subi	r18, 0x01	; 1
     67e:	80 40       	sbci	r24, 0x00	; 0
     680:	90 40       	sbci	r25, 0x00	; 0
     682:	e1 f7       	brne	.-8      	; 0x67c <HitBall+0x8>
     684:	00 c0       	rjmp	.+0      	; 0x686 <HitBall+0x12>
     686:	00 00       	nop
	_delay_ms(1000);
	PORTB &= ~(1<<PB6);
     688:	2e 98       	cbi	0x05, 6	; 5
     68a:	08 95       	ret

0000068c <PlayGame>:
int servo;
int points = 0;
int Reset;
int sendinfoFlag =0;
int menuOption = 0;
void PlayGame(){
     68c:	cf 92       	push	r12
     68e:	df 92       	push	r13
     690:	ef 92       	push	r14
     692:	ff 92       	push	r15
     694:	cf 93       	push	r28
     696:	df 93       	push	r29
     698:	cd b7       	in	r28, 0x3d	; 61
     69a:	de b7       	in	r29, 0x3e	; 62
     69c:	2b 97       	sbiw	r28, 0x0b	; 11
     69e:	0f b6       	in	r0, 0x3f	; 63
     6a0:	f8 94       	cli
     6a2:	de bf       	out	0x3e, r29	; 62
     6a4:	0f be       	out	0x3f, r0	; 63
     6a6:	cd bf       	out	0x3d, r28	; 61
	//printf("PLAY GAME ");
	DDRB |= (1<<PB6);
     6a8:	26 9a       	sbi	0x04, 6	; 4
	if (can_interrupt()){
     6aa:	16 de       	rcall	.-980    	; 0x2d8 <can_interrupt>
     6ac:	88 23       	and	r24, r24
     6ae:	09 f4       	brne	.+2      	; 0x6b2 <PlayGame+0x26>
     6b0:	65 c0       	rjmp	.+202    	; 0x77c <PlayGame+0xf0>
		
		canMessage = can_handle_messages();
     6b2:	ce 01       	movw	r24, r28
     6b4:	01 96       	adiw	r24, 0x01	; 1
     6b6:	df de       	rcall	.-578    	; 0x476 <can_handle_messages>
     6b8:	8b e0       	ldi	r24, 0x0B	; 11
     6ba:	fe 01       	movw	r30, r28
     6bc:	31 96       	adiw	r30, 0x01	; 1
     6be:	af e3       	ldi	r26, 0x3F	; 63
     6c0:	b3 e0       	ldi	r27, 0x03	; 3
     6c2:	01 90       	ld	r0, Z+
     6c4:	0d 92       	st	X+, r0
     6c6:	8a 95       	dec	r24
     6c8:	e1 f7       	brne	.-8      	; 0x6c2 <PlayGame+0x36>
		//printf("ID = %d \r\n",canMessage.id);
		if(canMessage.id == 1){
     6ca:	80 91 3f 03 	lds	r24, 0x033F
     6ce:	90 91 40 03 	lds	r25, 0x0340
     6d2:	81 30       	cpi	r24, 0x01	; 1
     6d4:	91 05       	cpc	r25, r1
     6d6:	69 f5       	brne	.+90     	; 0x732 <PlayGame+0xa6>
			Slider_L = canMessage.data[0];   
     6d8:	80 91 42 03 	lds	r24, 0x0342
     6dc:	90 e0       	ldi	r25, 0x00	; 0
     6de:	a0 e0       	ldi	r26, 0x00	; 0
     6e0:	b0 e0       	ldi	r27, 0x00	; 0
     6e2:	80 93 2f 03 	sts	0x032F, r24
     6e6:	90 93 30 03 	sts	0x0330, r25
     6ea:	a0 93 31 03 	sts	0x0331, r26
     6ee:	b0 93 32 03 	sts	0x0332, r27
			Slider_R = canMessage.data[1];	 
     6f2:	80 91 43 03 	lds	r24, 0x0343
     6f6:	90 e0       	ldi	r25, 0x00	; 0
     6f8:	90 93 3c 03 	sts	0x033C, r25
     6fc:	80 93 3b 03 	sts	0x033B, r24
			LeftButton = canMessage.data[2]; 
     700:	80 91 44 03 	lds	r24, 0x0344
     704:	90 e0       	ldi	r25, 0x00	; 0
     706:	90 93 3e 03 	sts	0x033E, r25
     70a:	80 93 3d 03 	sts	0x033D, r24
			RightButton = canMessage.data[3];
     70e:	80 91 45 03 	lds	r24, 0x0345
     712:	90 e0       	ldi	r25, 0x00	; 0
     714:	90 93 36 03 	sts	0x0336, r25
     718:	80 93 35 03 	sts	0x0335, r24
			menuOption = canMessage.data[4];
     71c:	20 91 46 03 	lds	r18, 0x0346
     720:	30 e0       	ldi	r19, 0x00	; 0
     722:	30 93 01 03 	sts	0x0301, r19
     726:	20 93 00 03 	sts	0x0300, r18
			if(RightButton){
     72a:	89 2b       	or	r24, r25
     72c:	79 f0       	breq	.+30     	; 0x74c <PlayGame+0xc0>
				motor_calibrate();
     72e:	c3 d1       	rcall	.+902    	; 0xab6 <motor_calibrate>
     730:	0d c0       	rjmp	.+26     	; 0x74c <PlayGame+0xc0>
			}
		}
		else if (canMessage.id == 3){
     732:	03 97       	sbiw	r24, 0x03	; 3
     734:	59 f4       	brne	.+22     	; 0x74c <PlayGame+0xc0>
			if (canMessage.data[0] == 0)
     736:	80 91 42 03 	lds	r24, 0x0342
     73a:	81 11       	cpse	r24, r1
     73c:	02 c0       	rjmp	.+4      	; 0x742 <PlayGame+0xb6>
			{
				PID_SET_EASY();
     73e:	77 d3       	rcall	.+1774   	; 0xe2e <PID_SET_EASY>
     740:	05 c0       	rjmp	.+10     	; 0x74c <PlayGame+0xc0>
			}
			else if (canMessage.data[0] == 1)
     742:	81 30       	cpi	r24, 0x01	; 1
     744:	11 f4       	brne	.+4      	; 0x74a <PlayGame+0xbe>
			{
				PID_SET_MEDIUM();
     746:	7a d3       	rcall	.+1780   	; 0xe3c <PID_SET_MEDIUM>
     748:	01 c0       	rjmp	.+2      	; 0x74c <PlayGame+0xc0>
			}
			else
			{
				PID_SET_HARD();
     74a:	7f d3       	rcall	.+1790   	; 0xe4a <PID_SET_HARD>
			}
			
		}
		if(canMessage.id == 2){
     74c:	80 91 3f 03 	lds	r24, 0x033F
     750:	90 91 40 03 	lds	r25, 0x0340
     754:	02 97       	sbiw	r24, 0x02	; 2
     756:	71 f4       	brne	.+28     	; 0x774 <PlayGame+0xe8>
			Reset = 1;
     758:	81 e0       	ldi	r24, 0x01	; 1
     75a:	90 e0       	ldi	r25, 0x00	; 0
     75c:	90 93 38 03 	sts	0x0338, r25
     760:	80 93 37 03 	sts	0x0337, r24
			points = 0;
     764:	10 92 05 03 	sts	0x0305, r1
     768:	10 92 04 03 	sts	0x0304, r1
			setEnemyScore(0);
     76c:	80 e0       	ldi	r24, 0x00	; 0
     76e:	90 e0       	ldi	r25, 0x00	; 0
     770:	50 d1       	rcall	.+672    	; 0xa12 <setEnemyScore>
     772:	04 c0       	rjmp	.+8      	; 0x77c <PlayGame+0xf0>
		}
		else
		{
			Reset = 0;
     774:	10 92 38 03 	sts	0x0338, r1
     778:	10 92 37 03 	sts	0x0337, r1
		}
	}
		if(menuOption == 1 || menuOption == 2 || menuOption == 4){
     77c:	80 91 00 03 	lds	r24, 0x0300
     780:	90 91 01 03 	lds	r25, 0x0301
     784:	9c 01       	movw	r18, r24
     786:	21 50       	subi	r18, 0x01	; 1
     788:	31 09       	sbc	r19, r1
     78a:	22 30       	cpi	r18, 0x02	; 2
     78c:	31 05       	cpc	r19, r1
     78e:	18 f0       	brcs	.+6      	; 0x796 <PlayGame+0x10a>
     790:	04 97       	sbiw	r24, 0x04	; 4
     792:	09 f0       	breq	.+2      	; 0x796 <PlayGame+0x10a>
     794:	68 c0       	rjmp	.+208    	; 0x866 <PlayGame+0x1da>
		
	}
}

long mapslider(int x, int in_min, int in_max, int out_min, int out_max){
	return (long)(x - in_min) * (long)(out_max - out_min) / (long)(in_max - in_min) + out_min;
     796:	20 91 3b 03 	lds	r18, 0x033B
     79a:	30 91 3c 03 	lds	r19, 0x033C
     79e:	a4 e0       	ldi	r26, 0x04	; 4
     7a0:	be ed       	ldi	r27, 0xDE	; 222
     7a2:	81 d7       	rcall	.+3842   	; 0x16a6 <__mulhisi3>
     7a4:	c1 2c       	mov	r12, r1
     7a6:	d1 2c       	mov	r13, r1
     7a8:	76 01       	movw	r14, r12
     7aa:	ca 94       	dec	r12
     7ac:	a7 01       	movw	r20, r14
     7ae:	96 01       	movw	r18, r12
     7b0:	58 d7       	rcall	.+3760   	; 0x1662 <__divmodsi4>
     7b2:	da 01       	movw	r26, r20
     7b4:	c9 01       	movw	r24, r18
     7b6:	88 56       	subi	r24, 0x68	; 104
     7b8:	9e 4d       	sbci	r25, 0xDE	; 222
     7ba:	af 4f       	sbci	r26, 0xFF	; 255
     7bc:	bf 4f       	sbci	r27, 0xFF	; 255
		{
			Reset = 0;
		}
	}
		if(menuOption == 1 || menuOption == 2 || menuOption == 4){
			setpunktmotor = mapslider(Slider_R,0,255,8600,-100);
     7be:	80 93 2b 03 	sts	0x032B, r24
     7c2:	90 93 2c 03 	sts	0x032C, r25
     7c6:	a0 93 2d 03 	sts	0x032D, r26
     7ca:	b0 93 2e 03 	sts	0x032E, r27
			PID_start();
     7ce:	23 d3       	rcall	.+1606   	; 0xe16 <PID_start>
			PID_setpos(setpunktmotor);
     7d0:	80 91 2b 03 	lds	r24, 0x032B
     7d4:	90 91 2c 03 	lds	r25, 0x032C
     7d8:	25 d3       	rcall	.+1610   	; 0xe24 <PID_setpos>
		
	}
}

long mapslider(int x, int in_min, int in_max, int out_min, int out_max){
	return (long)(x - in_min) * (long)(out_max - out_min) / (long)(in_max - in_min) + out_min;
     7da:	a0 91 2f 03 	lds	r26, 0x032F
     7de:	b0 91 30 03 	lds	r27, 0x0330
     7e2:	28 ec       	ldi	r18, 0xC8	; 200
     7e4:	30 e0       	ldi	r19, 0x00	; 0
     7e6:	74 d7       	rcall	.+3816   	; 0x16d0 <__usmulhisi3>
     7e8:	a7 01       	movw	r20, r14
     7ea:	96 01       	movw	r18, r12
     7ec:	3a d7       	rcall	.+3700   	; 0x1662 <__divmodsi4>
     7ee:	da 01       	movw	r26, r20
     7f0:	c9 01       	movw	r24, r18
     7f2:	84 56       	subi	r24, 0x64	; 100
     7f4:	91 09       	sbc	r25, r1
     7f6:	a1 09       	sbc	r26, r1
     7f8:	b1 09       	sbc	r27, r1
		if(menuOption == 1 || menuOption == 2 || menuOption == 4){
			setpunktmotor = mapslider(Slider_R,0,255,8600,-100);
			PID_start();
			PID_setpos(setpunktmotor);
					
			servo = mapslider(Slider_L,0,255,-100,100);
     7fa:	90 93 3a 03 	sts	0x033A, r25
     7fe:	80 93 39 03 	sts	0x0339, r24
					
			set_servo(servo);
     802:	a9 d3       	rcall	.+1874   	; 0xf56 <set_servo>
			if(!solonoidFlag && LeftButton){
     804:	80 91 33 03 	lds	r24, 0x0333
     808:	90 91 34 03 	lds	r25, 0x0334
     80c:	89 2b       	or	r24, r25
     80e:	01 f5       	brne	.+64     	; 0x850 <PlayGame+0x1c4>
     810:	80 91 3d 03 	lds	r24, 0x033D
     814:	90 91 3e 03 	lds	r25, 0x033E
     818:	89 2b       	or	r24, r25
     81a:	d1 f0       	breq	.+52     	; 0x850 <PlayGame+0x1c4>
				solonoidFlag = 1;
     81c:	81 e0       	ldi	r24, 0x01	; 1
     81e:	90 e0       	ldi	r25, 0x00	; 0
     820:	90 93 34 03 	sts	0x0334, r25
     824:	80 93 33 03 	sts	0x0333, r24
				HitBall();
     828:	25 df       	rcall	.-438    	; 0x674 <HitBall>
				if(menuOption == 1 && enemyScore() == 0){
     82a:	80 91 00 03 	lds	r24, 0x0300
     82e:	90 91 01 03 	lds	r25, 0x0301
     832:	01 97       	sbiw	r24, 0x01	; 1
     834:	71 f4       	brne	.+28     	; 0x852 <PlayGame+0x1c6>
     836:	ea d0       	rcall	.+468    	; 0xa0c <enemyScore>
     838:	89 2b       	or	r24, r25
     83a:	59 f4       	brne	.+22     	; 0x852 <PlayGame+0x1c6>
					points++;
     83c:	80 91 04 03 	lds	r24, 0x0304
     840:	90 91 05 03 	lds	r25, 0x0305
     844:	01 96       	adiw	r24, 0x01	; 1
     846:	90 93 05 03 	sts	0x0305, r25
     84a:	80 93 04 03 	sts	0x0304, r24
     84e:	01 c0       	rjmp	.+2      	; 0x852 <PlayGame+0x1c6>
				}
			}
			else{
				PID_stop();
     850:	e6 d2       	rcall	.+1484   	; 0xe1e <PID_stop>
			}
			if(!LeftButton){
     852:	80 91 3d 03 	lds	r24, 0x033D
     856:	90 91 3e 03 	lds	r25, 0x033E
     85a:	89 2b       	or	r24, r25
     85c:	21 f4       	brne	.+8      	; 0x866 <PlayGame+0x1da>
				solonoidFlag = 0;
     85e:	10 92 34 03 	sts	0x0334, r1
     862:	10 92 33 03 	sts	0x0333, r1
			}
		}

}
     866:	2b 96       	adiw	r28, 0x0b	; 11
     868:	0f b6       	in	r0, 0x3f	; 63
     86a:	f8 94       	cli
     86c:	de bf       	out	0x3e, r29	; 62
     86e:	0f be       	out	0x3f, r0	; 63
     870:	cd bf       	out	0x3d, r28	; 61
     872:	df 91       	pop	r29
     874:	cf 91       	pop	r28
     876:	ff 90       	pop	r15
     878:	ef 90       	pop	r14
     87a:	df 90       	pop	r13
     87c:	cf 90       	pop	r12
     87e:	08 95       	ret

00000880 <SendInfo>:
	PORTB |= (1<<PB6);
	_delay_ms(1000);
	PORTB &= ~(1<<PB6);
}

void SendInfo(){
     880:	cf 93       	push	r28
     882:	df 93       	push	r29
     884:	cd b7       	in	r28, 0x3d	; 61
     886:	de b7       	in	r29, 0x3e	; 62
     888:	2b 97       	sbiw	r28, 0x0b	; 11
     88a:	0f b6       	in	r0, 0x3f	; 63
     88c:	f8 94       	cli
     88e:	de bf       	out	0x3e, r29	; 62
     890:	0f be       	out	0x3f, r0	; 63
     892:	cd bf       	out	0x3d, r28	; 61
	if(menuOption == 1 || menuOption == 2 || menuOption == 4 || Reset){
     894:	80 91 00 03 	lds	r24, 0x0300
     898:	90 91 01 03 	lds	r25, 0x0301
     89c:	9c 01       	movw	r18, r24
     89e:	21 50       	subi	r18, 0x01	; 1
     8a0:	31 09       	sbc	r19, r1
     8a2:	22 30       	cpi	r18, 0x02	; 2
     8a4:	31 05       	cpc	r19, r1
     8a6:	40 f0       	brcs	.+16     	; 0x8b8 <SendInfo+0x38>
     8a8:	04 97       	sbiw	r24, 0x04	; 4
     8aa:	31 f0       	breq	.+12     	; 0x8b8 <SendInfo+0x38>
     8ac:	80 91 37 03 	lds	r24, 0x0337
     8b0:	90 91 38 03 	lds	r25, 0x0338
     8b4:	89 2b       	or	r24, r25
     8b6:	f9 f0       	breq	.+62     	; 0x8f6 <SendInfo+0x76>
		sendinfoFlag++;
     8b8:	80 91 02 03 	lds	r24, 0x0302
     8bc:	90 91 03 03 	lds	r25, 0x0303
     8c0:	01 96       	adiw	r24, 0x01	; 1
     8c2:	90 93 03 03 	sts	0x0303, r25
     8c6:	80 93 02 03 	sts	0x0302, r24
		if(sendinfoFlag > 500){ // to not overuse the canbuss
     8ca:	85 3f       	cpi	r24, 0xF5	; 245
     8cc:	91 40       	sbci	r25, 0x01	; 1
     8ce:	9c f0       	brlt	.+38     	; 0x8f6 <SendInfo+0x76>
			IR_game_over();
     8d0:	82 d0       	rcall	.+260    	; 0x9d6 <IR_game_over>
			can_message canMessageOut;
			canMessageOut.data[0] = enemyScore();
     8d2:	9c d0       	rcall	.+312    	; 0xa0c <enemyScore>
     8d4:	8c 83       	std	Y+4, r24	; 0x04
			canMessageOut.data[1] = points;
     8d6:	80 91 04 03 	lds	r24, 0x0304
     8da:	8d 83       	std	Y+5, r24	; 0x05
			canMessageOut.length = 2;
     8dc:	82 e0       	ldi	r24, 0x02	; 2
     8de:	8b 83       	std	Y+3, r24	; 0x03
			canMessageOut.id = 1;
     8e0:	81 e0       	ldi	r24, 0x01	; 1
     8e2:	90 e0       	ldi	r25, 0x00	; 0
     8e4:	9a 83       	std	Y+2, r25	; 0x02
     8e6:	89 83       	std	Y+1, r24	; 0x01
			can_message_send(&canMessageOut);
     8e8:	ce 01       	movw	r24, r28
     8ea:	01 96       	adiw	r24, 0x01	; 1
     8ec:	1c dd       	rcall	.-1480   	; 0x326 <can_message_send>
			sendinfoFlag = 0;
     8ee:	10 92 03 03 	sts	0x0303, r1
     8f2:	10 92 02 03 	sts	0x0302, r1
		}
		
	}
}
     8f6:	2b 96       	adiw	r28, 0x0b	; 11
     8f8:	0f b6       	in	r0, 0x3f	; 63
     8fa:	f8 94       	cli
     8fc:	de bf       	out	0x3e, r29	; 62
     8fe:	0f be       	out	0x3f, r0	; 63
     900:	cd bf       	out	0x3d, r28	; 61
     902:	df 91       	pop	r29
     904:	cf 91       	pop	r28
     906:	08 95       	ret

00000908 <IR_init>:
uint8_t read_index = 0;
uint16_t total = 0;
static uint8_t enemys;
bool hasBeen0 = false;

void IR_init() {
     908:	cf 93       	push	r28
     90a:	df 93       	push	r29
	ADC_init();
     90c:	74 dc       	rcall	.-1816   	; 0x1f6 <ADC_init>
	
	for (uint8_t this_reading = 0; this_reading < num_readings; this_reading++) {
     90e:	90 91 06 02 	lds	r25, 0x0206
     912:	99 23       	and	r25, r25
     914:	41 f0       	breq	.+16     	; 0x926 <IR_init+0x1e>
     916:	ea e4       	ldi	r30, 0x4A	; 74
     918:	f3 e0       	ldi	r31, 0x03	; 3
     91a:	80 e0       	ldi	r24, 0x00	; 0
		readings[this_reading] = 0;
     91c:	11 92       	st	Z+, r1
     91e:	11 92       	st	Z+, r1
bool hasBeen0 = false;

void IR_init() {
	ADC_init();
	
	for (uint8_t this_reading = 0; this_reading < num_readings; this_reading++) {
     920:	8f 5f       	subi	r24, 0xFF	; 255
     922:	89 17       	cp	r24, r25
     924:	d8 f3       	brcs	.-10     	; 0x91c <IR_init+0x14>
		readings[this_reading] = 0;
	}
	
	readings[read_index] = ADC_read();
     926:	c0 91 0a 03 	lds	r28, 0x030A
     92a:	d0 e0       	ldi	r29, 0x00	; 0
     92c:	4d dc       	rcall	.-1894   	; 0x1c8 <ADC_read>
     92e:	cc 0f       	add	r28, r28
     930:	dd 1f       	adc	r29, r29
     932:	c6 5b       	subi	r28, 0xB6	; 182
     934:	dc 4f       	sbci	r29, 0xFC	; 252
     936:	99 83       	std	Y+1, r25	; 0x01
     938:	88 83       	st	Y, r24
	total = readings[read_index];
     93a:	e0 91 0a 03 	lds	r30, 0x030A
     93e:	f0 e0       	ldi	r31, 0x00	; 0
     940:	ee 0f       	add	r30, r30
     942:	ff 1f       	adc	r31, r31
     944:	e6 5b       	subi	r30, 0xB6	; 182
     946:	fc 4f       	sbci	r31, 0xFC	; 252
     948:	80 81       	ld	r24, Z
     94a:	91 81       	ldd	r25, Z+1	; 0x01
     94c:	90 93 09 03 	sts	0x0309, r25
     950:	80 93 08 03 	sts	0x0308, r24
	enemys = 0;
     954:	10 92 07 03 	sts	0x0307, r1
}
     958:	df 91       	pop	r29
     95a:	cf 91       	pop	r28
     95c:	08 95       	ret

0000095e <IR_average_filter>:

uint16_t IR_average_filter() {
     95e:	cf 93       	push	r28
     960:	df 93       	push	r29
	
	total = total - readings[read_index];
     962:	c0 91 0a 03 	lds	r28, 0x030A
     966:	d0 e0       	ldi	r29, 0x00	; 0
     968:	cc 0f       	add	r28, r28
     96a:	dd 1f       	adc	r29, r29
     96c:	c6 5b       	subi	r28, 0xB6	; 182
     96e:	dc 4f       	sbci	r29, 0xFC	; 252
     970:	80 91 08 03 	lds	r24, 0x0308
     974:	90 91 09 03 	lds	r25, 0x0309
     978:	28 81       	ld	r18, Y
     97a:	39 81       	ldd	r19, Y+1	; 0x01
     97c:	82 1b       	sub	r24, r18
     97e:	93 0b       	sbc	r25, r19
     980:	90 93 09 03 	sts	0x0309, r25
     984:	80 93 08 03 	sts	0x0308, r24
	
	readings[read_index] = ADC_read();
     988:	1f dc       	rcall	.-1986   	; 0x1c8 <ADC_read>
     98a:	99 83       	std	Y+1, r25	; 0x01
     98c:	88 83       	st	Y, r24
	
	total = total + readings[read_index];
     98e:	40 91 0a 03 	lds	r20, 0x030A
     992:	e4 2f       	mov	r30, r20
     994:	f0 e0       	ldi	r31, 0x00	; 0
     996:	ee 0f       	add	r30, r30
     998:	ff 1f       	adc	r31, r31
     99a:	e6 5b       	subi	r30, 0xB6	; 182
     99c:	fc 4f       	sbci	r31, 0xFC	; 252
     99e:	20 81       	ld	r18, Z
     9a0:	31 81       	ldd	r19, Z+1	; 0x01
     9a2:	80 91 08 03 	lds	r24, 0x0308
     9a6:	90 91 09 03 	lds	r25, 0x0309
     9aa:	82 0f       	add	r24, r18
     9ac:	93 1f       	adc	r25, r19
     9ae:	90 93 09 03 	sts	0x0309, r25
     9b2:	80 93 08 03 	sts	0x0308, r24
	
	read_index = read_index + 1;
     9b6:	21 e0       	ldi	r18, 0x01	; 1
     9b8:	24 0f       	add	r18, r20
     9ba:	20 93 0a 03 	sts	0x030A, r18
	
	if (read_index >= num_readings) {
     9be:	60 91 06 02 	lds	r22, 0x0206
     9c2:	26 17       	cp	r18, r22
     9c4:	10 f0       	brcs	.+4      	; 0x9ca <IR_average_filter+0x6c>
		read_index = 0;
     9c6:	10 92 0a 03 	sts	0x030A, r1
	}
	
	uint16_t average = total / num_readings;
     9ca:	70 e0       	ldi	r23, 0x00	; 0
     9cc:	14 d6       	rcall	.+3112   	; 0x15f6 <__udivmodhi4>
     9ce:	cb 01       	movw	r24, r22
	return average;
}
     9d0:	df 91       	pop	r29
     9d2:	cf 91       	pop	r28
     9d4:	08 95       	ret

000009d6 <IR_game_over>:

uint16_t IR_game_over() {
	if (IR_average_filter() < 100) {
     9d6:	c3 df       	rcall	.-122    	; 0x95e <IR_average_filter>
     9d8:	84 36       	cpi	r24, 0x64	; 100
     9da:	91 05       	cpc	r25, r1
     9dc:	70 f4       	brcc	.+28     	; 0x9fa <IR_game_over+0x24>
		if(hasBeen0){
     9de:	80 91 06 03 	lds	r24, 0x0306
     9e2:	88 23       	and	r24, r24
     9e4:	81 f0       	breq	.+32     	; 0xa06 <IR_game_over+0x30>
			enemys = enemys + 1;
     9e6:	80 91 07 03 	lds	r24, 0x0307
     9ea:	8f 5f       	subi	r24, 0xFF	; 255
     9ec:	80 93 07 03 	sts	0x0307, r24
			hasBeen0 = false;
     9f0:	10 92 06 03 	sts	0x0306, r1
		}
		return 1;
     9f4:	81 e0       	ldi	r24, 0x01	; 1
     9f6:	90 e0       	ldi	r25, 0x00	; 0
     9f8:	08 95       	ret
	}
	else {
		hasBeen0 = true;
     9fa:	81 e0       	ldi	r24, 0x01	; 1
     9fc:	80 93 06 03 	sts	0x0306, r24
		return 0;
     a00:	80 e0       	ldi	r24, 0x00	; 0
     a02:	90 e0       	ldi	r25, 0x00	; 0
     a04:	08 95       	ret
	if (IR_average_filter() < 100) {
		if(hasBeen0){
			enemys = enemys + 1;
			hasBeen0 = false;
		}
		return 1;
     a06:	81 e0       	ldi	r24, 0x01	; 1
     a08:	90 e0       	ldi	r25, 0x00	; 0
	}
	else {
		hasBeen0 = true;
		return 0;
	}
}
     a0a:	08 95       	ret

00000a0c <enemyScore>:
uint8_t enemyScore(){
	return enemys;
}
     a0c:	80 91 07 03 	lds	r24, 0x0307
     a10:	08 95       	ret

00000a12 <setEnemyScore>:
void setEnemyScore(int score){
	enemys = score;
     a12:	80 93 07 03 	sts	0x0307, r24
     a16:	08 95       	ret

00000a18 <motor_reset_encoder>:
	
	motor_calibrate();
}

void motor_reset_encoder() {
	clear_bit(PORTH, PH6);
     a18:	e2 e0       	ldi	r30, 0x02	; 2
     a1a:	f1 e0       	ldi	r31, 0x01	; 1
     a1c:	80 81       	ld	r24, Z
     a1e:	8f 7b       	andi	r24, 0xBF	; 191
     a20:	80 83       	st	Z, r24
	#else
		//round up by default
		__ticks_dc = (uint32_t)(ceil(fabs(__tmp)));
	#endif

	__builtin_avr_delay_cycles(__ticks_dc);
     a22:	8f e1       	ldi	r24, 0x1F	; 31
     a24:	93 e0       	ldi	r25, 0x03	; 3
     a26:	01 97       	sbiw	r24, 0x01	; 1
     a28:	f1 f7       	brne	.-4      	; 0xa26 <motor_reset_encoder+0xe>
     a2a:	00 c0       	rjmp	.+0      	; 0xa2c <motor_reset_encoder+0x14>
     a2c:	00 00       	nop
	_delay_us(200);
	set_bit(PORTH, PH6);
     a2e:	80 81       	ld	r24, Z
     a30:	80 64       	ori	r24, 0x40	; 64
     a32:	80 83       	st	Z, r24
     a34:	08 95       	ret

00000a36 <motor_set_direction>:
}


void motor_set_direction(motor_direction_t direction){
	switch (direction){
     a36:	88 23       	and	r24, r24
     a38:	19 f0       	breq	.+6      	; 0xa40 <motor_set_direction+0xa>
     a3a:	81 30       	cpi	r24, 0x01	; 1
     a3c:	39 f0       	breq	.+14     	; 0xa4c <motor_set_direction+0x16>
     a3e:	08 95       	ret
		case(LEFT):
			clear_bit(PORTH, PH1);
     a40:	e2 e0       	ldi	r30, 0x02	; 2
     a42:	f1 e0       	ldi	r31, 0x01	; 1
     a44:	80 81       	ld	r24, Z
     a46:	8d 7f       	andi	r24, 0xFD	; 253
     a48:	80 83       	st	Z, r24
			break;
     a4a:	08 95       	ret
		case(RIGHT):
			set_bit(PORTH, PH1);
     a4c:	e2 e0       	ldi	r30, 0x02	; 2
     a4e:	f1 e0       	ldi	r31, 0x01	; 1
     a50:	80 81       	ld	r24, Z
     a52:	82 60       	ori	r24, 0x02	; 2
     a54:	80 83       	st	Z, r24
     a56:	08 95       	ret

00000a58 <motor_set_speed>:
			break;
	}
}

void motor_set_speed(uint8_t speed){
	DAC_send(speed);
     a58:	90 e0       	ldi	r25, 0x00	; 0
     a5a:	f9 cd       	rjmp	.-1038   	; 0x64e <DAC_send>
     a5c:	08 95       	ret

00000a5e <motor_encoder>:
}

int16_t motor_encoder(uint8_t reset_flag){
     a5e:	cf 93       	push	r28
     a60:	df 93       	push	r29
	
	clear_bit(PORTH, PH5);
     a62:	e2 e0       	ldi	r30, 0x02	; 2
     a64:	f1 e0       	ldi	r31, 0x01	; 1
     a66:	90 81       	ld	r25, Z
     a68:	9f 7d       	andi	r25, 0xDF	; 223
     a6a:	90 83       	st	Z, r25
	
	//Set SEL high to get low byte
	set_bit(PORTH, PH3);
     a6c:	90 81       	ld	r25, Z
     a6e:	98 60       	ori	r25, 0x08	; 8
     a70:	90 83       	st	Z, r25
     a72:	ef ee       	ldi	r30, 0xEF	; 239
     a74:	f0 e0       	ldi	r31, 0x00	; 0
     a76:	31 97       	sbiw	r30, 0x01	; 1
     a78:	f1 f7       	brne	.-4      	; 0xa76 <motor_encoder+0x18>
     a7a:	00 c0       	rjmp	.+0      	; 0xa7c <motor_encoder+0x1e>
     a7c:	00 00       	nop
	
	_delay_us(60);
	
	//Read LSB
	uint8_t low = PINK;
     a7e:	d0 91 06 01 	lds	r29, 0x0106
	
	//Set SEL low to get high byte
	clear_bit(PORTH, PH3);
     a82:	e2 e0       	ldi	r30, 0x02	; 2
     a84:	f1 e0       	ldi	r31, 0x01	; 1
     a86:	90 81       	ld	r25, Z
     a88:	97 7f       	andi	r25, 0xF7	; 247
     a8a:	90 83       	st	Z, r25
     a8c:	ef ee       	ldi	r30, 0xEF	; 239
     a8e:	f0 e0       	ldi	r31, 0x00	; 0
     a90:	31 97       	sbiw	r30, 0x01	; 1
     a92:	f1 f7       	brne	.-4      	; 0xa90 <motor_encoder+0x32>
     a94:	00 c0       	rjmp	.+0      	; 0xa96 <motor_encoder+0x38>
     a96:	00 00       	nop
	
	_delay_us(60);
	
	//Read MSB
	uint8_t high = PINK;
     a98:	c0 91 06 01 	lds	r28, 0x0106
	if (reset_flag) {
     a9c:	81 11       	cpse	r24, r1
		motor_reset_encoder();
     a9e:	bc df       	rcall	.-136    	; 0xa18 <motor_reset_encoder>
	}
	//Set !OE high to disable output of encoder
	set_bit(PORTH, PH5);
     aa0:	e2 e0       	ldi	r30, 0x02	; 2
     aa2:	f1 e0       	ldi	r31, 0x01	; 1
     aa4:	80 81       	ld	r24, Z
     aa6:	80 62       	ori	r24, 0x20	; 32
     aa8:	80 83       	st	Z, r24
	
	int16_t rot = (int16_t) ( (high << 8) | low);
     aaa:	8d 2f       	mov	r24, r29
     aac:	90 e0       	ldi	r25, 0x00	; 0
	
	return rot;
}
     aae:	9c 2b       	or	r25, r28
     ab0:	df 91       	pop	r29
     ab2:	cf 91       	pop	r28
     ab4:	08 95       	ret

00000ab6 <motor_calibrate>:

void motor_calibrate() {
     ab6:	cf 93       	push	r28
     ab8:	df 93       	push	r29
	motor_set_direction(RIGHT);
     aba:	81 e0       	ldi	r24, 0x01	; 1
     abc:	bc df       	rcall	.-136    	; 0xa36 <motor_set_direction>
			break;
	}
}

void motor_set_speed(uint8_t speed){
	DAC_send(speed);
     abe:	86 e4       	ldi	r24, 0x46	; 70
     ac0:	90 e0       	ldi	r25, 0x00	; 0
     ac2:	c5 dd       	rcall	.-1142   	; 0x64e <DAC_send>
}

void motor_calibrate() {
	motor_set_direction(RIGHT);
	motor_set_speed(70);
	int16_t cur_rot = motor_encoder(0);
     ac4:	80 e0       	ldi	r24, 0x00	; 0
     ac6:	cb df       	rcall	.-106    	; 0xa5e <motor_encoder>
     ac8:	ec 01       	movw	r28, r24
	#else
		//round up by default
		__ticks_dc = (uint32_t)(ceil(fabs(__tmp)));
	#endif

	__builtin_avr_delay_cycles(__ticks_dc);
     aca:	2f ef       	ldi	r18, 0xFF	; 255
     acc:	83 ef       	ldi	r24, 0xF3	; 243
     ace:	91 e0       	ldi	r25, 0x01	; 1
     ad0:	21 50       	subi	r18, 0x01	; 1
     ad2:	80 40       	sbci	r24, 0x00	; 0
     ad4:	90 40       	sbci	r25, 0x00	; 0
     ad6:	e1 f7       	brne	.-8      	; 0xad0 <motor_calibrate+0x1a>
     ad8:	00 c0       	rjmp	.+0      	; 0xada <motor_calibrate+0x24>
     ada:	00 00       	nop
	int16_t prev_rot = cur_rot+200;
	while(prev_rot != cur_rot) {
		prev_rot = cur_rot;
		_delay_ms(40);
		cur_rot = motor_encoder(0);
     adc:	80 e0       	ldi	r24, 0x00	; 0
     ade:	bf df       	rcall	.-130    	; 0xa5e <motor_encoder>
void motor_calibrate() {
	motor_set_direction(RIGHT);
	motor_set_speed(70);
	int16_t cur_rot = motor_encoder(0);
	int16_t prev_rot = cur_rot+200;
	while(prev_rot != cur_rot) {
     ae0:	8c 17       	cp	r24, r28
     ae2:	9d 07       	cpc	r25, r29
     ae4:	11 f0       	breq	.+4      	; 0xaea <motor_calibrate+0x34>
		prev_rot = cur_rot;
		_delay_ms(40);
		cur_rot = motor_encoder(0);
     ae6:	ec 01       	movw	r28, r24
     ae8:	f0 cf       	rjmp	.-32     	; 0xaca <motor_calibrate+0x14>
	}
	motor_reset_encoder();
     aea:	96 df       	rcall	.-212    	; 0xa18 <motor_reset_encoder>
			break;
	}
}

void motor_set_speed(uint8_t speed){
	DAC_send(speed);
     aec:	80 e0       	ldi	r24, 0x00	; 0
     aee:	90 e0       	ldi	r25, 0x00	; 0
     af0:	ae dd       	rcall	.-1188   	; 0x64e <DAC_send>
		_delay_ms(40);
		cur_rot = motor_encoder(0);
	}
	motor_reset_encoder();
	motor_set_speed(0);
}
     af2:	df 91       	pop	r29
     af4:	cf 91       	pop	r28
     af6:	08 95       	ret

00000af8 <motor_init>:
#include "ADC.h"

void motor_init(){
	
	// Enable motor
	set_bit(DDRH, PH4);
     af8:	e1 e0       	ldi	r30, 0x01	; 1
     afa:	f1 e0       	ldi	r31, 0x01	; 1
     afc:	80 81       	ld	r24, Z
     afe:	80 61       	ori	r24, 0x10	; 16
     b00:	80 83       	st	Z, r24
	set_bit(PORTH, PH4);
     b02:	a2 e0       	ldi	r26, 0x02	; 2
     b04:	b1 e0       	ldi	r27, 0x01	; 1
     b06:	8c 91       	ld	r24, X
     b08:	80 61       	ori	r24, 0x10	; 16
     b0a:	8c 93       	st	X, r24
	
	// Set direction pin to output
	set_bit(DDRH, PH1);
     b0c:	80 81       	ld	r24, Z
     b0e:	82 60       	ori	r24, 0x02	; 2
     b10:	80 83       	st	Z, r24
	
	//--------------------Set encoder pins to output and input mode----------------------
	
	// Output Enable pin (active low): !OE
	set_bit(DDRH, PH5);
     b12:	80 81       	ld	r24, Z
     b14:	80 62       	ori	r24, 0x20	; 32
     b16:	80 83       	st	Z, r24
	
	//Selection pin: SEL
	set_bit(DDRH, PH3);
     b18:	80 81       	ld	r24, Z
     b1a:	88 60       	ori	r24, 0x08	; 8
     b1c:	80 83       	st	Z, r24
	
	// Set Reset pin: RST
	set_bit(DDRH, PH6);
     b1e:	80 81       	ld	r24, Z
     b20:	80 64       	ori	r24, 0x40	; 64
     b22:	80 83       	st	Z, r24
	// Reset encoder
	motor_reset_encoder();
     b24:	79 df       	rcall	.-270    	; 0xa18 <motor_reset_encoder>
	
	// Set data bits to input:
	clear_bit(DDRK, PK0);
     b26:	e7 e0       	ldi	r30, 0x07	; 7
     b28:	f1 e0       	ldi	r31, 0x01	; 1
     b2a:	80 81       	ld	r24, Z
     b2c:	8e 7f       	andi	r24, 0xFE	; 254
     b2e:	80 83       	st	Z, r24
	clear_bit(DDRK, PK1);
     b30:	80 81       	ld	r24, Z
     b32:	8d 7f       	andi	r24, 0xFD	; 253
     b34:	80 83       	st	Z, r24
	clear_bit(DDRK, PK2);
     b36:	80 81       	ld	r24, Z
     b38:	8b 7f       	andi	r24, 0xFB	; 251
     b3a:	80 83       	st	Z, r24
	clear_bit(DDRK, PK3);
     b3c:	80 81       	ld	r24, Z
     b3e:	87 7f       	andi	r24, 0xF7	; 247
     b40:	80 83       	st	Z, r24
	clear_bit(DDRK, PK4);
     b42:	80 81       	ld	r24, Z
     b44:	8f 7e       	andi	r24, 0xEF	; 239
     b46:	80 83       	st	Z, r24
	clear_bit(DDRK, PK5);
     b48:	80 81       	ld	r24, Z
     b4a:	8f 7d       	andi	r24, 0xDF	; 223
     b4c:	80 83       	st	Z, r24
	clear_bit(DDRK, PK6);
     b4e:	80 81       	ld	r24, Z
     b50:	8f 7b       	andi	r24, 0xBF	; 191
     b52:	80 83       	st	Z, r24
	clear_bit(DDRK, PK7);
     b54:	80 81       	ld	r24, Z
     b56:	8f 77       	andi	r24, 0x7F	; 127
     b58:	80 83       	st	Z, r24
	
	motor_calibrate();
     b5a:	ad cf       	rjmp	.-166    	; 0xab6 <motor_calibrate>
     b5c:	08 95       	ret

00000b5e <__vector_15>:
double eprev = 0;
double deriv = 0;
int16_t speed;
int count = 0;
int16_t topspeed = 80;
ISR(TIMER2_OVF_vect){
     b5e:	1f 92       	push	r1
     b60:	0f 92       	push	r0
     b62:	0f b6       	in	r0, 0x3f	; 63
     b64:	0f 92       	push	r0
     b66:	11 24       	eor	r1, r1
     b68:	0b b6       	in	r0, 0x3b	; 59
     b6a:	0f 92       	push	r0
     b6c:	8f 92       	push	r8
     b6e:	9f 92       	push	r9
     b70:	af 92       	push	r10
     b72:	bf 92       	push	r11
     b74:	cf 92       	push	r12
     b76:	df 92       	push	r13
     b78:	ef 92       	push	r14
     b7a:	ff 92       	push	r15
     b7c:	0f 93       	push	r16
     b7e:	1f 93       	push	r17
     b80:	2f 93       	push	r18
     b82:	3f 93       	push	r19
     b84:	4f 93       	push	r20
     b86:	5f 93       	push	r21
     b88:	6f 93       	push	r22
     b8a:	7f 93       	push	r23
     b8c:	8f 93       	push	r24
     b8e:	9f 93       	push	r25
     b90:	af 93       	push	r26
     b92:	bf 93       	push	r27
     b94:	cf 93       	push	r28
     b96:	df 93       	push	r29
     b98:	ef 93       	push	r30
     b9a:	ff 93       	push	r31
	pos = motor_encoder(0);
     b9c:	80 e0       	ldi	r24, 0x00	; 0
     b9e:	90 e0       	ldi	r25, 0x00	; 0
     ba0:	5e df       	rcall	.-324    	; 0xa5e <motor_encoder>
     ba2:	90 93 53 03 	sts	0x0353, r25
     ba6:	80 93 52 03 	sts	0x0352, r24
	e = pos - posd;
     baa:	20 91 54 03 	lds	r18, 0x0354
     bae:	30 91 55 03 	lds	r19, 0x0355
     bb2:	ec 01       	movw	r28, r24
     bb4:	c2 1b       	sub	r28, r18
     bb6:	d3 0b       	sbc	r29, r19
     bb8:	d0 93 59 03 	sts	0x0359, r29
     bbc:	c0 93 58 03 	sts	0x0358, r28
	abse = abs(e);
     bc0:	ce 01       	movw	r24, r28
     bc2:	dd 23       	and	r29, r29
     bc4:	24 f4       	brge	.+8      	; 0xbce <__vector_15+0x70>
     bc6:	88 27       	eor	r24, r24
     bc8:	99 27       	eor	r25, r25
     bca:	8c 1b       	sub	r24, r28
     bcc:	9d 0b       	sbc	r25, r29
     bce:	8c 01       	movw	r16, r24
     bd0:	90 93 5b 03 	sts	0x035B, r25
     bd4:	80 93 5a 03 	sts	0x035A, r24
	integral = integral + e*timestep;
     bd8:	be 01       	movw	r22, r28
     bda:	88 27       	eor	r24, r24
     bdc:	77 fd       	sbrc	r23, 7
     bde:	80 95       	com	r24
     be0:	98 2f       	mov	r25, r24
     be2:	f2 d3       	rcall	.+2020   	; 0x13c8 <__floatsisf>
     be4:	6b 01       	movw	r12, r22
     be6:	7c 01       	movw	r14, r24
     be8:	80 90 15 02 	lds	r8, 0x0215
     bec:	90 90 16 02 	lds	r9, 0x0216
     bf0:	a0 90 17 02 	lds	r10, 0x0217
     bf4:	b0 90 18 02 	lds	r11, 0x0218
     bf8:	a5 01       	movw	r20, r10
     bfa:	94 01       	movw	r18, r8
     bfc:	99 d4       	rcall	.+2354   	; 0x1530 <__mulsf3>
     bfe:	9b 01       	movw	r18, r22
     c00:	ac 01       	movw	r20, r24
     c02:	60 91 13 03 	lds	r22, 0x0313
     c06:	70 91 14 03 	lds	r23, 0x0314
     c0a:	80 91 15 03 	lds	r24, 0x0315
     c0e:	90 91 16 03 	lds	r25, 0x0316
     c12:	d7 d2       	rcall	.+1454   	; 0x11c2 <__addsf3>
     c14:	60 93 13 03 	sts	0x0313, r22
     c18:	70 93 14 03 	sts	0x0314, r23
     c1c:	80 93 15 03 	sts	0x0315, r24
     c20:	90 93 16 03 	sts	0x0316, r25
	deriv = (e-eprev)/timestep;
     c24:	20 91 0f 03 	lds	r18, 0x030F
     c28:	30 91 10 03 	lds	r19, 0x0310
     c2c:	40 91 11 03 	lds	r20, 0x0311
     c30:	50 91 12 03 	lds	r21, 0x0312
     c34:	c7 01       	movw	r24, r14
     c36:	b6 01       	movw	r22, r12
     c38:	c3 d2       	rcall	.+1414   	; 0x11c0 <__subsf3>
     c3a:	a5 01       	movw	r20, r10
     c3c:	94 01       	movw	r18, r8
     c3e:	29 d3       	rcall	.+1618   	; 0x1292 <__divsf3>
     c40:	4b 01       	movw	r8, r22
     c42:	5c 01       	movw	r10, r24
     c44:	60 93 0b 03 	sts	0x030B, r22
     c48:	70 93 0c 03 	sts	0x030C, r23
     c4c:	80 93 0d 03 	sts	0x030D, r24
     c50:	90 93 0e 03 	sts	0x030E, r25
	eprev = e;
     c54:	c0 92 0f 03 	sts	0x030F, r12
     c58:	d0 92 10 03 	sts	0x0310, r13
     c5c:	e0 92 11 03 	sts	0x0311, r14
     c60:	f0 92 12 03 	sts	0x0312, r15
	if(e < 2){
     c64:	c2 30       	cpi	r28, 0x02	; 2
     c66:	d1 05       	cpc	r29, r1
     c68:	44 f4       	brge	.+16     	; 0xc7a <__vector_15+0x11c>
		integral = 0;
     c6a:	10 92 13 03 	sts	0x0313, r1
     c6e:	10 92 14 03 	sts	0x0314, r1
     c72:	10 92 15 03 	sts	0x0315, r1
     c76:	10 92 16 03 	sts	0x0316, r1
	}
	speed = Kp*abse +  Kd * deriv + Ki * integral;
     c7a:	b8 01       	movw	r22, r16
     c7c:	88 27       	eor	r24, r24
     c7e:	77 fd       	sbrc	r23, 7
     c80:	80 95       	com	r24
     c82:	98 2f       	mov	r25, r24
     c84:	a1 d3       	rcall	.+1858   	; 0x13c8 <__floatsisf>
     c86:	20 91 11 02 	lds	r18, 0x0211
     c8a:	30 91 12 02 	lds	r19, 0x0212
     c8e:	40 91 13 02 	lds	r20, 0x0213
     c92:	50 91 14 02 	lds	r21, 0x0214
     c96:	4c d4       	rcall	.+2200   	; 0x1530 <__mulsf3>
     c98:	6b 01       	movw	r12, r22
     c9a:	7c 01       	movw	r14, r24
     c9c:	20 91 09 02 	lds	r18, 0x0209
     ca0:	30 91 0a 02 	lds	r19, 0x020A
     ca4:	40 91 0b 02 	lds	r20, 0x020B
     ca8:	50 91 0c 02 	lds	r21, 0x020C
     cac:	c5 01       	movw	r24, r10
     cae:	b4 01       	movw	r22, r8
     cb0:	3f d4       	rcall	.+2174   	; 0x1530 <__mulsf3>
     cb2:	9b 01       	movw	r18, r22
     cb4:	ac 01       	movw	r20, r24
     cb6:	c7 01       	movw	r24, r14
     cb8:	b6 01       	movw	r22, r12
     cba:	83 d2       	rcall	.+1286   	; 0x11c2 <__addsf3>
     cbc:	6b 01       	movw	r12, r22
     cbe:	7c 01       	movw	r14, r24
     cc0:	20 91 13 03 	lds	r18, 0x0313
     cc4:	30 91 14 03 	lds	r19, 0x0314
     cc8:	40 91 15 03 	lds	r20, 0x0315
     ccc:	50 91 16 03 	lds	r21, 0x0316
     cd0:	60 91 0d 02 	lds	r22, 0x020D
     cd4:	70 91 0e 02 	lds	r23, 0x020E
     cd8:	80 91 0f 02 	lds	r24, 0x020F
     cdc:	90 91 10 02 	lds	r25, 0x0210
     ce0:	27 d4       	rcall	.+2126   	; 0x1530 <__mulsf3>
     ce2:	9b 01       	movw	r18, r22
     ce4:	ac 01       	movw	r20, r24
     ce6:	c7 01       	movw	r24, r14
     ce8:	b6 01       	movw	r22, r12
     cea:	6b d2       	rcall	.+1238   	; 0x11c2 <__addsf3>
     cec:	3a d3       	rcall	.+1652   	; 0x1362 <__fixsfsi>
     cee:	70 93 57 03 	sts	0x0357, r23
     cf2:	60 93 56 03 	sts	0x0356, r22
	if(e > 0) { motor_set_direction(RIGHT);}
     cf6:	1c 16       	cp	r1, r28
     cf8:	1d 06       	cpc	r1, r29
     cfa:	1c f4       	brge	.+6      	; 0xd02 <__vector_15+0x1a4>
     cfc:	81 e0       	ldi	r24, 0x01	; 1
     cfe:	9b de       	rcall	.-714    	; 0xa36 <motor_set_direction>
     d00:	02 c0       	rjmp	.+4      	; 0xd06 <__vector_15+0x1a8>
	else {motor_set_direction(LEFT);}
     d02:	80 e0       	ldi	r24, 0x00	; 0
     d04:	98 de       	rcall	.-720    	; 0xa36 <motor_set_direction>
	uint8_t speedout;
	if(speed > 500){
     d06:	80 91 56 03 	lds	r24, 0x0356
     d0a:	90 91 57 03 	lds	r25, 0x0357
     d0e:	85 3f       	cpi	r24, 0xF5	; 245
     d10:	21 e0       	ldi	r18, 0x01	; 1
     d12:	92 07       	cpc	r25, r18
     d14:	3c f0       	brlt	.+14     	; 0xd24 <__vector_15+0x1c6>
		speed = 500;
     d16:	84 ef       	ldi	r24, 0xF4	; 244
     d18:	91 e0       	ldi	r25, 0x01	; 1
     d1a:	90 93 57 03 	sts	0x0357, r25
     d1e:	80 93 56 03 	sts	0x0356, r24
     d22:	09 c0       	rjmp	.+18     	; 0xd36 <__vector_15+0x1d8>
	}
	if(speed < -500){
     d24:	8c 30       	cpi	r24, 0x0C	; 12
     d26:	9e 4f       	sbci	r25, 0xFE	; 254
     d28:	34 f4       	brge	.+12     	; 0xd36 <__vector_15+0x1d8>
		speed = -500;
     d2a:	8c e0       	ldi	r24, 0x0C	; 12
     d2c:	9e ef       	ldi	r25, 0xFE	; 254
     d2e:	90 93 57 03 	sts	0x0357, r25
     d32:	80 93 56 03 	sts	0x0356, r24
	}
	if (abs(e) > 1800){
     d36:	80 91 58 03 	lds	r24, 0x0358
     d3a:	90 91 59 03 	lds	r25, 0x0359
     d3e:	99 23       	and	r25, r25
     d40:	1c f4       	brge	.+6      	; 0xd48 <__vector_15+0x1ea>
     d42:	91 95       	neg	r25
     d44:	81 95       	neg	r24
     d46:	91 09       	sbc	r25, r1
     d48:	89 30       	cpi	r24, 0x09	; 9
     d4a:	97 40       	sbci	r25, 0x07	; 7
     d4c:	cc f0       	brlt	.+50     	; 0xd80 <__vector_15+0x222>
}


long mapspeed(int16_t x, int16_t in_min, int16_t in_max, int16_t out_min, int16_t out_max)
{
	return (long)(x - in_min) * (long)(out_max - out_min) / (long)(in_max - in_min) + out_min;
     d4e:	20 91 56 03 	lds	r18, 0x0356
     d52:	30 91 57 03 	lds	r19, 0x0357
     d56:	a0 91 07 02 	lds	r26, 0x0207
     d5a:	b0 91 08 02 	lds	r27, 0x0208
     d5e:	54 97       	sbiw	r26, 0x14	; 20
     d60:	a2 d4       	rcall	.+2372   	; 0x16a6 <__mulhisi3>
     d62:	24 ef       	ldi	r18, 0xF4	; 244
     d64:	31 e0       	ldi	r19, 0x01	; 1
     d66:	40 e0       	ldi	r20, 0x00	; 0
     d68:	50 e0       	ldi	r21, 0x00	; 0
     d6a:	7b d4       	rcall	.+2294   	; 0x1662 <__divmodsi4>
     d6c:	da 01       	movw	r26, r20
     d6e:	c9 01       	movw	r24, r18
     d70:	88 96       	adiw	r24, 0x28	; 40
     d72:	a1 1d       	adc	r26, r1
     d74:	b1 1d       	adc	r27, r1
	}
	if(speed < -500){
		speed = -500;
	}
	if (abs(e) > 1800){
		speed = (int16_t)mapspeed(speed,0,500,40,topspeed+20);
     d76:	90 93 57 03 	sts	0x0357, r25
     d7a:	80 93 56 03 	sts	0x0356, r24
     d7e:	18 c0       	rjmp	.+48     	; 0xdb0 <__vector_15+0x252>
}


long mapspeed(int16_t x, int16_t in_min, int16_t in_max, int16_t out_min, int16_t out_max)
{
	return (long)(x - in_min) * (long)(out_max - out_min) / (long)(in_max - in_min) + out_min;
     d80:	20 91 56 03 	lds	r18, 0x0356
     d84:	30 91 57 03 	lds	r19, 0x0357
     d88:	a0 91 07 02 	lds	r26, 0x0207
     d8c:	b0 91 08 02 	lds	r27, 0x0208
     d90:	96 97       	sbiw	r26, 0x26	; 38
     d92:	89 d4       	rcall	.+2322   	; 0x16a6 <__mulhisi3>
     d94:	24 ef       	ldi	r18, 0xF4	; 244
     d96:	31 e0       	ldi	r19, 0x01	; 1
     d98:	40 e0       	ldi	r20, 0x00	; 0
     d9a:	50 e0       	ldi	r21, 0x00	; 0
     d9c:	62 d4       	rcall	.+2244   	; 0x1662 <__divmodsi4>
     d9e:	da 01       	movw	r26, r20
     da0:	c9 01       	movw	r24, r18
     da2:	86 96       	adiw	r24, 0x26	; 38
     da4:	a1 1d       	adc	r26, r1
     da6:	b1 1d       	adc	r27, r1
	if (abs(e) > 1800){
		speed = (int16_t)mapspeed(speed,0,500,40,topspeed+20);
	}
	else
	{
		speed = (int16_t)mapspeed(speed,0,500,38,topspeed);
     da8:	90 93 57 03 	sts	0x0357, r25
     dac:	80 93 56 03 	sts	0x0356, r24
	}
	speed = abs(speed);
     db0:	80 91 56 03 	lds	r24, 0x0356
     db4:	90 91 57 03 	lds	r25, 0x0357
     db8:	99 23       	and	r25, r25
     dba:	1c f4       	brge	.+6      	; 0xdc2 <__vector_15+0x264>
     dbc:	91 95       	neg	r25
     dbe:	81 95       	neg	r24
     dc0:	91 09       	sbc	r25, r1
     dc2:	80 93 56 03 	sts	0x0356, r24
     dc6:	90 93 57 03 	sts	0x0357, r25
	speedout = speed;
	motor_set_speed(speedout);
     dca:	46 de       	rcall	.-884    	; 0xa58 <motor_set_speed>
}
     dcc:	ff 91       	pop	r31
     dce:	ef 91       	pop	r30
     dd0:	df 91       	pop	r29
     dd2:	cf 91       	pop	r28
     dd4:	bf 91       	pop	r27
     dd6:	af 91       	pop	r26
     dd8:	9f 91       	pop	r25
     dda:	8f 91       	pop	r24
     ddc:	7f 91       	pop	r23
     dde:	6f 91       	pop	r22
     de0:	5f 91       	pop	r21
     de2:	4f 91       	pop	r20
     de4:	3f 91       	pop	r19
     de6:	2f 91       	pop	r18
     de8:	1f 91       	pop	r17
     dea:	0f 91       	pop	r16
     dec:	ff 90       	pop	r15
     dee:	ef 90       	pop	r14
     df0:	df 90       	pop	r13
     df2:	cf 90       	pop	r12
     df4:	bf 90       	pop	r11
     df6:	af 90       	pop	r10
     df8:	9f 90       	pop	r9
     dfa:	8f 90       	pop	r8
     dfc:	0f 90       	pop	r0
     dfe:	0b be       	out	0x3b, r0	; 59
     e00:	0f 90       	pop	r0
     e02:	0f be       	out	0x3f, r0	; 63
     e04:	0f 90       	pop	r0
     e06:	1f 90       	pop	r1
     e08:	18 95       	reti

00000e0a <PID_init>:

void PID_init(){
	
	cli();
     e0a:	f8 94       	cli
	// enable timer 2
	TIMSK2 = (1<<TOIE2);
     e0c:	81 e0       	ldi	r24, 0x01	; 1
     e0e:	80 93 70 00 	sts	0x0070, r24
	
	sei();
     e12:	78 94       	sei
     e14:	08 95       	ret

00000e16 <PID_start>:
	
}
void PID_start(){
	//Start timer 2
	TCCR2B = (1<<CS20) | (1<<CS21) | (1<<CS22);
     e16:	87 e0       	ldi	r24, 0x07	; 7
     e18:	80 93 b1 00 	sts	0x00B1, r24
     e1c:	08 95       	ret

00000e1e <PID_stop>:
}
void PID_stop(){
	//Stop timer 2
	TCCR2B = 0;
     e1e:	10 92 b1 00 	sts	0x00B1, r1
     e22:	08 95       	ret

00000e24 <PID_setpos>:
}

void PID_setpos(int16_t SETPUNKT){
	posd = SETPUNKT;
     e24:	90 93 55 03 	sts	0x0355, r25
     e28:	80 93 54 03 	sts	0x0354, r24
     e2c:	08 95       	ret

00000e2e <PID_SET_EASY>:
void PID_SET_EASY(){
	//Kp = 0.08;
	//Ki = 0.2;
	//Kd = 0.0009;
	//printf("TEST EASY");
	topspeed = 120;
     e2e:	88 e7       	ldi	r24, 0x78	; 120
     e30:	90 e0       	ldi	r25, 0x00	; 0
     e32:	90 93 08 02 	sts	0x0208, r25
     e36:	80 93 07 02 	sts	0x0207, r24
     e3a:	08 95       	ret

00000e3c <PID_SET_MEDIUM>:
void PID_SET_MEDIUM(){
	//Kp = 0.1;
	//Ki = 0.25;
	//Kd = 0.0009;
	//printf("TEST MEDIUM");
	topspeed = 80;
     e3c:	80 e5       	ldi	r24, 0x50	; 80
     e3e:	90 e0       	ldi	r25, 0x00	; 0
     e40:	90 93 08 02 	sts	0x0208, r25
     e44:	80 93 07 02 	sts	0x0207, r24
     e48:	08 95       	ret

00000e4a <PID_SET_HARD>:
void PID_SET_HARD(){
	//Kp = 0.15;
	//Ki = 0.5;
	//Kd = 0.00009;
	//printf("TEST HARD");
	topspeed = 170;
     e4a:	8a ea       	ldi	r24, 0xAA	; 170
     e4c:	90 e0       	ldi	r25, 0x00	; 0
     e4e:	90 93 08 02 	sts	0x0208, r25
     e52:	80 93 07 02 	sts	0x0207, r24
     e56:	08 95       	ret

00000e58 <PWM_set_period>:
	PWM_set_period(period_sec);
	// Set PB5 to output mode
	set_bit(DDRB, PB5);
}

void PWM_set_period(float sec){
     e58:	cf 92       	push	r12
     e5a:	df 92       	push	r13
     e5c:	ef 92       	push	r14
     e5e:	ff 92       	push	r15
     e60:	6b 01       	movw	r12, r22
     e62:	7c 01       	movw	r14, r24
	
	// Set prescaler 256
	set_bit(TCCR1B, CS12);
     e64:	e1 e8       	ldi	r30, 0x81	; 129
     e66:	f0 e0       	ldi	r31, 0x00	; 0
     e68:	80 81       	ld	r24, Z
     e6a:	84 60       	ori	r24, 0x04	; 4
     e6c:	80 83       	st	Z, r24
	clear_bit(TCCR1B, CS11);
     e6e:	80 81       	ld	r24, Z
     e70:	8d 7f       	andi	r24, 0xFD	; 253
     e72:	80 83       	st	Z, r24
	clear_bit(TCCR1B, CS10);
     e74:	80 81       	ld	r24, Z
     e76:	8e 7f       	andi	r24, 0xFE	; 254
     e78:	80 83       	st	Z, r24
	// Set period to 20 ms (prescaler 256)
	uint16_t period = pwm_timer_freq*sec - 0.5;
     e7a:	60 91 17 03 	lds	r22, 0x0317
     e7e:	70 91 18 03 	lds	r23, 0x0318
     e82:	80 e0       	ldi	r24, 0x00	; 0
     e84:	90 e0       	ldi	r25, 0x00	; 0
     e86:	9e d2       	rcall	.+1340   	; 0x13c4 <__floatunsisf>
     e88:	a7 01       	movw	r20, r14
     e8a:	96 01       	movw	r18, r12
     e8c:	51 d3       	rcall	.+1698   	; 0x1530 <__mulsf3>
     e8e:	20 e0       	ldi	r18, 0x00	; 0
     e90:	30 e0       	ldi	r19, 0x00	; 0
     e92:	40 e0       	ldi	r20, 0x00	; 0
     e94:	5f e3       	ldi	r21, 0x3F	; 63
     e96:	94 d1       	rcall	.+808    	; 0x11c0 <__subsf3>
     e98:	69 d2       	rcall	.+1234   	; 0x136c <__fixunssfsi>
	ICR1 = period;
     e9a:	70 93 87 00 	sts	0x0087, r23
     e9e:	60 93 86 00 	sts	0x0086, r22
	
}
     ea2:	ff 90       	pop	r15
     ea4:	ef 90       	pop	r14
     ea6:	df 90       	pop	r13
     ea8:	cf 90       	pop	r12
     eaa:	08 95       	ret

00000eac <PWM_init>:
static uint16_t pwm_timer_freq;

uint16_t pulse;


void PWM_init(float period_sec, unsigned long clock_frequency){
     eac:	0f 93       	push	r16
     eae:	1f 93       	push	r17
	
	uint16_t prescaler = 256;
	
	//Fast PWM-MODE (mode 14, table 17-2)
	set_bit(TCCR1B, WGM13);
     eb0:	e1 e8       	ldi	r30, 0x81	; 129
     eb2:	f0 e0       	ldi	r31, 0x00	; 0
     eb4:	a0 81       	ld	r26, Z
     eb6:	a0 61       	ori	r26, 0x10	; 16
     eb8:	a0 83       	st	Z, r26
	set_bit(TCCR1B, WGM12);
     eba:	a0 81       	ld	r26, Z
     ebc:	a8 60       	ori	r26, 0x08	; 8
     ebe:	a0 83       	st	Z, r26
	set_bit(TCCR1A, WGM11);
     ec0:	e0 e8       	ldi	r30, 0x80	; 128
     ec2:	f0 e0       	ldi	r31, 0x00	; 0
     ec4:	a0 81       	ld	r26, Z
     ec6:	a2 60       	ori	r26, 0x02	; 2
     ec8:	a0 83       	st	Z, r26
	clear_bit(TCCR1A, WGM10);
     eca:	a0 81       	ld	r26, Z
     ecc:	ae 7f       	andi	r26, 0xFE	; 254
     ece:	a0 83       	st	Z, r26
	
	//Set compare output on PB5 (OC1A)
	set_bit(TCCR1A, COM1A1);
     ed0:	a0 81       	ld	r26, Z
     ed2:	a0 68       	ori	r26, 0x80	; 128
     ed4:	a0 83       	st	Z, r26
	clear_bit(TCCR1A, COM1A0);
     ed6:	a0 81       	ld	r26, Z
     ed8:	af 7b       	andi	r26, 0xBF	; 191
     eda:	a0 83       	st	Z, r26
	pwm_timer_freq = (uint32_t)clock_frequency/prescaler;
     edc:	03 2f       	mov	r16, r19
     ede:	14 2f       	mov	r17, r20
     ee0:	25 2f       	mov	r18, r21
     ee2:	33 27       	eor	r19, r19
     ee4:	10 93 18 03 	sts	0x0318, r17
     ee8:	00 93 17 03 	sts	0x0317, r16
	PWM_set_period(period_sec);
     eec:	b5 df       	rcall	.-150    	; 0xe58 <PWM_set_period>
	// Set PB5 to output mode
	set_bit(DDRB, PB5);
     eee:	25 9a       	sbi	0x04, 5	; 4
}
     ef0:	1f 91       	pop	r17
     ef2:	0f 91       	pop	r16
     ef4:	08 95       	ret

00000ef6 <PWM_pulse_set>:
	uint16_t period = pwm_timer_freq*sec - 0.5;
	ICR1 = period;
	
}

void PWM_pulse_set(float sec) {
     ef6:	cf 92       	push	r12
     ef8:	df 92       	push	r13
     efa:	ef 92       	push	r14
     efc:	ff 92       	push	r15
     efe:	6b 01       	movw	r12, r22
     f00:	7c 01       	movw	r14, r24
	pulse = pwm_timer_freq*sec - 0.5;
     f02:	60 91 17 03 	lds	r22, 0x0317
     f06:	70 91 18 03 	lds	r23, 0x0318
     f0a:	80 e0       	ldi	r24, 0x00	; 0
     f0c:	90 e0       	ldi	r25, 0x00	; 0
     f0e:	5a d2       	rcall	.+1204   	; 0x13c4 <__floatunsisf>
     f10:	a7 01       	movw	r20, r14
     f12:	96 01       	movw	r18, r12
     f14:	0d d3       	rcall	.+1562   	; 0x1530 <__mulsf3>
     f16:	20 e0       	ldi	r18, 0x00	; 0
     f18:	30 e0       	ldi	r19, 0x00	; 0
     f1a:	40 e0       	ldi	r20, 0x00	; 0
     f1c:	5f e3       	ldi	r21, 0x3F	; 63
     f1e:	50 d1       	rcall	.+672    	; 0x11c0 <__subsf3>
     f20:	25 d2       	rcall	.+1098   	; 0x136c <__fixunssfsi>
     f22:	70 93 5d 03 	sts	0x035D, r23
     f26:	60 93 5c 03 	sts	0x035C, r22
	OCR1A = pulse;
     f2a:	70 93 89 00 	sts	0x0089, r23
     f2e:	60 93 88 00 	sts	0x0088, r22
}
     f32:	ff 90       	pop	r15
     f34:	ef 90       	pop	r14
     f36:	df 90       	pop	r13
     f38:	cf 90       	pop	r12
     f3a:	08 95       	ret

00000f3c <servo_init>:

#include "PWM_servo_driver.h"
#include "PWM_driver.h"
#include <avr/io.h>

void servo_init(unsigned long clock_speed){
     f3c:	9b 01       	movw	r18, r22
     f3e:	ac 01       	movw	r20, r24
	
	float period_sec = 0.02;
	PWM_init(period_sec, clock_speed);
     f40:	6a e0       	ldi	r22, 0x0A	; 10
     f42:	77 ed       	ldi	r23, 0xD7	; 215
     f44:	83 ea       	ldi	r24, 0xA3	; 163
     f46:	9c e3       	ldi	r25, 0x3C	; 60
     f48:	b1 df       	rcall	.-158    	; 0xeac <PWM_init>
	PWM_pulse_set(0.0015);
     f4a:	66 ea       	ldi	r22, 0xA6	; 166
     f4c:	7b e9       	ldi	r23, 0x9B	; 155
     f4e:	84 ec       	ldi	r24, 0xC4	; 196
     f50:	9a e3       	ldi	r25, 0x3A	; 58
     f52:	d1 cf       	rjmp	.-94     	; 0xef6 <PWM_pulse_set>
     f54:	08 95       	ret

00000f56 <set_servo>:
	
}
void set_servo(int servo_dir){
     f56:	cf 92       	push	r12
     f58:	df 92       	push	r13
     f5a:	ef 92       	push	r14
     f5c:	ff 92       	push	r15
	
	float min_pw = 0.0009;
	float max_pw = 0.0021;
	
	float dir = (float)servo_dir;
     f5e:	bc 01       	movw	r22, r24
     f60:	88 27       	eor	r24, r24
     f62:	77 fd       	sbrc	r23, 7
     f64:	80 95       	com	r24
     f66:	98 2f       	mov	r25, r24
     f68:	2f d2       	rcall	.+1118   	; 0x13c8 <__floatsisf>
	
	float servo_pw = dir/200000.0 + 0.0015;
     f6a:	20 e0       	ldi	r18, 0x00	; 0
     f6c:	30 e5       	ldi	r19, 0x50	; 80
     f6e:	43 e4       	ldi	r20, 0x43	; 67
     f70:	58 e4       	ldi	r21, 0x48	; 72
     f72:	8f d1       	rcall	.+798    	; 0x1292 <__divsf3>
     f74:	26 ea       	ldi	r18, 0xA6	; 166
     f76:	3b e9       	ldi	r19, 0x9B	; 155
     f78:	44 ec       	ldi	r20, 0xC4	; 196
     f7a:	5a e3       	ldi	r21, 0x3A	; 58
     f7c:	22 d1       	rcall	.+580    	; 0x11c2 <__addsf3>
     f7e:	6b 01       	movw	r12, r22
     f80:	7c 01       	movw	r14, r24
	
	if (servo_pw < min_pw) {
     f82:	2a ef       	ldi	r18, 0xFA	; 250
     f84:	3d ee       	ldi	r19, 0xED	; 237
     f86:	4b e6       	ldi	r20, 0x6B	; 107
     f88:	5a e3       	ldi	r21, 0x3A	; 58
     f8a:	7f d1       	rcall	.+766    	; 0x128a <__cmpsf2>
     f8c:	88 23       	and	r24, r24
     f8e:	54 f0       	brlt	.+20     	; 0xfa4 <set_servo+0x4e>
		servo_pw = min_pw;
	}
	if (servo_pw > max_pw) {
     f90:	27 e2       	ldi	r18, 0x27	; 39
     f92:	30 ea       	ldi	r19, 0xA0	; 160
     f94:	49 e0       	ldi	r20, 0x09	; 9
     f96:	5b e3       	ldi	r21, 0x3B	; 59
     f98:	c7 01       	movw	r24, r14
     f9a:	b6 01       	movw	r22, r12
     f9c:	c5 d2       	rcall	.+1418   	; 0x1528 <__gesf2>
     f9e:	18 16       	cp	r1, r24
     fa0:	64 f0       	brlt	.+24     	; 0xfba <set_servo+0x64>
     fa2:	15 c0       	rjmp	.+42     	; 0xfce <set_servo+0x78>
	float dir = (float)servo_dir;
	
	float servo_pw = dir/200000.0 + 0.0015;
	
	if (servo_pw < min_pw) {
		servo_pw = min_pw;
     fa4:	0f 2e       	mov	r0, r31
     fa6:	fa ef       	ldi	r31, 0xFA	; 250
     fa8:	cf 2e       	mov	r12, r31
     faa:	fd ee       	ldi	r31, 0xED	; 237
     fac:	df 2e       	mov	r13, r31
     fae:	fb e6       	ldi	r31, 0x6B	; 107
     fb0:	ef 2e       	mov	r14, r31
     fb2:	fa e3       	ldi	r31, 0x3A	; 58
     fb4:	ff 2e       	mov	r15, r31
     fb6:	f0 2d       	mov	r31, r0
     fb8:	0a c0       	rjmp	.+20     	; 0xfce <set_servo+0x78>
	}
	if (servo_pw > max_pw) {
		servo_pw = max_pw;
     fba:	0f 2e       	mov	r0, r31
     fbc:	f7 e2       	ldi	r31, 0x27	; 39
     fbe:	cf 2e       	mov	r12, r31
     fc0:	f0 ea       	ldi	r31, 0xA0	; 160
     fc2:	df 2e       	mov	r13, r31
     fc4:	f9 e0       	ldi	r31, 0x09	; 9
     fc6:	ef 2e       	mov	r14, r31
     fc8:	fb e3       	ldi	r31, 0x3B	; 59
     fca:	ff 2e       	mov	r15, r31
     fcc:	f0 2d       	mov	r31, r0
	}
	PWM_pulse_set(servo_pw);
     fce:	c7 01       	movw	r24, r14
     fd0:	b6 01       	movw	r22, r12
     fd2:	91 df       	rcall	.-222    	; 0xef6 <PWM_pulse_set>
	
     fd4:	ff 90       	pop	r15
     fd6:	ef 90       	pop	r14
     fd8:	df 90       	pop	r13
     fda:	cf 90       	pop	r12
     fdc:	08 95       	ret

00000fde <TWI_Master_Initialise>:
     fde:	8c e0       	ldi	r24, 0x0C	; 12
     fe0:	80 93 b8 00 	sts	0x00B8, r24
     fe4:	8f ef       	ldi	r24, 0xFF	; 255
     fe6:	80 93 bb 00 	sts	0x00BB, r24
     fea:	84 e0       	ldi	r24, 0x04	; 4
     fec:	80 93 bc 00 	sts	0x00BC, r24
     ff0:	08 95       	ret

00000ff2 <TWI_Start_Transceiver_With_Data>:
     ff2:	ec eb       	ldi	r30, 0xBC	; 188
     ff4:	f0 e0       	ldi	r31, 0x00	; 0
     ff6:	20 81       	ld	r18, Z
     ff8:	20 fd       	sbrc	r18, 0
     ffa:	fd cf       	rjmp	.-6      	; 0xff6 <TWI_Start_Transceiver_With_Data+0x4>
     ffc:	60 93 1b 03 	sts	0x031B, r22
    1000:	fc 01       	movw	r30, r24
    1002:	20 81       	ld	r18, Z
    1004:	20 93 1c 03 	sts	0x031C, r18
    1008:	20 fd       	sbrc	r18, 0
    100a:	0c c0       	rjmp	.+24     	; 0x1024 <TWI_Start_Transceiver_With_Data+0x32>
    100c:	62 30       	cpi	r22, 0x02	; 2
    100e:	50 f0       	brcs	.+20     	; 0x1024 <TWI_Start_Transceiver_With_Data+0x32>
    1010:	dc 01       	movw	r26, r24
    1012:	11 96       	adiw	r26, 0x01	; 1
    1014:	ed e1       	ldi	r30, 0x1D	; 29
    1016:	f3 e0       	ldi	r31, 0x03	; 3
    1018:	81 e0       	ldi	r24, 0x01	; 1
    101a:	9d 91       	ld	r25, X+
    101c:	91 93       	st	Z+, r25
    101e:	8f 5f       	subi	r24, 0xFF	; 255
    1020:	86 13       	cpse	r24, r22
    1022:	fb cf       	rjmp	.-10     	; 0x101a <TWI_Start_Transceiver_With_Data+0x28>
    1024:	10 92 1a 03 	sts	0x031A, r1
    1028:	88 ef       	ldi	r24, 0xF8	; 248
    102a:	80 93 19 02 	sts	0x0219, r24
    102e:	85 ea       	ldi	r24, 0xA5	; 165
    1030:	80 93 bc 00 	sts	0x00BC, r24
    1034:	08 95       	ret

00001036 <__vector_39>:
    1036:	1f 92       	push	r1
    1038:	0f 92       	push	r0
    103a:	0f b6       	in	r0, 0x3f	; 63
    103c:	0f 92       	push	r0
    103e:	11 24       	eor	r1, r1
    1040:	0b b6       	in	r0, 0x3b	; 59
    1042:	0f 92       	push	r0
    1044:	2f 93       	push	r18
    1046:	3f 93       	push	r19
    1048:	8f 93       	push	r24
    104a:	9f 93       	push	r25
    104c:	af 93       	push	r26
    104e:	bf 93       	push	r27
    1050:	ef 93       	push	r30
    1052:	ff 93       	push	r31
    1054:	80 91 b9 00 	lds	r24, 0x00B9
    1058:	90 e0       	ldi	r25, 0x00	; 0
    105a:	fc 01       	movw	r30, r24
    105c:	38 97       	sbiw	r30, 0x08	; 8
    105e:	e1 35       	cpi	r30, 0x51	; 81
    1060:	f1 05       	cpc	r31, r1
    1062:	08 f0       	brcs	.+2      	; 0x1066 <__vector_39+0x30>
    1064:	55 c0       	rjmp	.+170    	; 0x1110 <__vector_39+0xda>
    1066:	ee 58       	subi	r30, 0x8E	; 142
    1068:	ff 4f       	sbci	r31, 0xFF	; 255
    106a:	17 c3       	rjmp	.+1582   	; 0x169a <__tablejump2__>
    106c:	10 92 19 03 	sts	0x0319, r1
    1070:	e0 91 19 03 	lds	r30, 0x0319
    1074:	80 91 1b 03 	lds	r24, 0x031B
    1078:	e8 17       	cp	r30, r24
    107a:	70 f4       	brcc	.+28     	; 0x1098 <__vector_39+0x62>
    107c:	81 e0       	ldi	r24, 0x01	; 1
    107e:	8e 0f       	add	r24, r30
    1080:	80 93 19 03 	sts	0x0319, r24
    1084:	f0 e0       	ldi	r31, 0x00	; 0
    1086:	e4 5e       	subi	r30, 0xE4	; 228
    1088:	fc 4f       	sbci	r31, 0xFC	; 252
    108a:	80 81       	ld	r24, Z
    108c:	80 93 bb 00 	sts	0x00BB, r24
    1090:	85 e8       	ldi	r24, 0x85	; 133
    1092:	80 93 bc 00 	sts	0x00BC, r24
    1096:	43 c0       	rjmp	.+134    	; 0x111e <__vector_39+0xe8>
    1098:	80 91 1a 03 	lds	r24, 0x031A
    109c:	81 60       	ori	r24, 0x01	; 1
    109e:	80 93 1a 03 	sts	0x031A, r24
    10a2:	84 e9       	ldi	r24, 0x94	; 148
    10a4:	80 93 bc 00 	sts	0x00BC, r24
    10a8:	3a c0       	rjmp	.+116    	; 0x111e <__vector_39+0xe8>
    10aa:	e0 91 19 03 	lds	r30, 0x0319
    10ae:	81 e0       	ldi	r24, 0x01	; 1
    10b0:	8e 0f       	add	r24, r30
    10b2:	80 93 19 03 	sts	0x0319, r24
    10b6:	80 91 bb 00 	lds	r24, 0x00BB
    10ba:	f0 e0       	ldi	r31, 0x00	; 0
    10bc:	e4 5e       	subi	r30, 0xE4	; 228
    10be:	fc 4f       	sbci	r31, 0xFC	; 252
    10c0:	80 83       	st	Z, r24
    10c2:	20 91 19 03 	lds	r18, 0x0319
    10c6:	30 e0       	ldi	r19, 0x00	; 0
    10c8:	80 91 1b 03 	lds	r24, 0x031B
    10cc:	90 e0       	ldi	r25, 0x00	; 0
    10ce:	01 97       	sbiw	r24, 0x01	; 1
    10d0:	28 17       	cp	r18, r24
    10d2:	39 07       	cpc	r19, r25
    10d4:	24 f4       	brge	.+8      	; 0x10de <__vector_39+0xa8>
    10d6:	85 ec       	ldi	r24, 0xC5	; 197
    10d8:	80 93 bc 00 	sts	0x00BC, r24
    10dc:	20 c0       	rjmp	.+64     	; 0x111e <__vector_39+0xe8>
    10de:	85 e8       	ldi	r24, 0x85	; 133
    10e0:	80 93 bc 00 	sts	0x00BC, r24
    10e4:	1c c0       	rjmp	.+56     	; 0x111e <__vector_39+0xe8>
    10e6:	80 91 bb 00 	lds	r24, 0x00BB
    10ea:	e0 91 19 03 	lds	r30, 0x0319
    10ee:	f0 e0       	ldi	r31, 0x00	; 0
    10f0:	e4 5e       	subi	r30, 0xE4	; 228
    10f2:	fc 4f       	sbci	r31, 0xFC	; 252
    10f4:	80 83       	st	Z, r24
    10f6:	80 91 1a 03 	lds	r24, 0x031A
    10fa:	81 60       	ori	r24, 0x01	; 1
    10fc:	80 93 1a 03 	sts	0x031A, r24
    1100:	84 e9       	ldi	r24, 0x94	; 148
    1102:	80 93 bc 00 	sts	0x00BC, r24
    1106:	0b c0       	rjmp	.+22     	; 0x111e <__vector_39+0xe8>
    1108:	85 ea       	ldi	r24, 0xA5	; 165
    110a:	80 93 bc 00 	sts	0x00BC, r24
    110e:	07 c0       	rjmp	.+14     	; 0x111e <__vector_39+0xe8>
    1110:	80 91 b9 00 	lds	r24, 0x00B9
    1114:	80 93 19 02 	sts	0x0219, r24
    1118:	84 e0       	ldi	r24, 0x04	; 4
    111a:	80 93 bc 00 	sts	0x00BC, r24
    111e:	ff 91       	pop	r31
    1120:	ef 91       	pop	r30
    1122:	bf 91       	pop	r27
    1124:	af 91       	pop	r26
    1126:	9f 91       	pop	r25
    1128:	8f 91       	pop	r24
    112a:	3f 91       	pop	r19
    112c:	2f 91       	pop	r18
    112e:	0f 90       	pop	r0
    1130:	0b be       	out	0x3b, r0	; 59
    1132:	0f 90       	pop	r0
    1134:	0f be       	out	0x3f, r0	; 63
    1136:	0f 90       	pop	r0
    1138:	1f 90       	pop	r1
    113a:	18 95       	reti

0000113c <put_char>:
	fdevopen(put_char, get_char);
	
}

int put_char(unsigned char c){
	loop_until_bit_is_set(UCSR0A, UDRE0);
    113c:	e0 ec       	ldi	r30, 0xC0	; 192
    113e:	f0 e0       	ldi	r31, 0x00	; 0
    1140:	90 81       	ld	r25, Z
    1142:	95 ff       	sbrs	r25, 5
    1144:	fd cf       	rjmp	.-6      	; 0x1140 <put_char+0x4>
	UDR0 = c;
    1146:	80 93 c6 00 	sts	0x00C6, r24
	return 0;
}
    114a:	80 e0       	ldi	r24, 0x00	; 0
    114c:	90 e0       	ldi	r25, 0x00	; 0
    114e:	08 95       	ret

00001150 <get_char>:

int get_char(void){
	loop_until_bit_is_set(UCSR0A, RXC0);
    1150:	e0 ec       	ldi	r30, 0xC0	; 192
    1152:	f0 e0       	ldi	r31, 0x00	; 0
    1154:	80 81       	ld	r24, Z
    1156:	88 23       	and	r24, r24
    1158:	ec f7       	brge	.-6      	; 0x1154 <get_char+0x4>

	return UDR0;
    115a:	80 91 c6 00 	lds	r24, 0x00C6
}
    115e:	90 e0       	ldi	r25, 0x00	; 0
    1160:	08 95       	ret

00001162 <UART_init>:
#define BAUD 9600 //Baud rate = symbols pr second.

void UART_init(unsigned long clock_speed){
	
	unsigned long baud = BAUD;
	unsigned char ubrr = (clock_speed / (baud * 16)) - 1;
    1162:	20 e0       	ldi	r18, 0x00	; 0
    1164:	38 e5       	ldi	r19, 0x58	; 88
    1166:	42 e0       	ldi	r20, 0x02	; 2
    1168:	50 e0       	ldi	r21, 0x00	; 0
    116a:	59 d2       	rcall	.+1202   	; 0x161e <__udivmodsi4>
    116c:	21 50       	subi	r18, 0x01	; 1
	
	/* Set baud rate */
	UBRR0H = ubrr >> 8;			// Save the most significant bits (4 most sign. bits out of 12 bits)
    116e:	10 92 c5 00 	sts	0x00C5, r1
	UBRR0L = ubrr;				// Save the least sign. bits (8 least sign. bits)
    1172:	20 93 c4 00 	sts	0x00C4, r18
	
	/* Set frame format: 8data, 2stop bit */
	UCSR0C = (1<<USBS0);		// USBS: 1 = Use 2 stop bits, not 1												
    1176:	e2 ec       	ldi	r30, 0xC2	; 194
    1178:	f0 e0       	ldi	r31, 0x00	; 0
    117a:	88 e0       	ldi	r24, 0x08	; 8
    117c:	80 83       	st	Z, r24
	UCSR0C = (3<<UCSZ00);		// UCSZ00: 3 - UCSZ0 and UCSZ1 defines 8 bits (11 binary) for each character	
    117e:	86 e0       	ldi	r24, 0x06	; 6
    1180:	80 83       	st	Z, r24
	
	/* Enable receiver and transmitter */
	set_bit(UCSR0B,RXEN0);		//RXEN enables the receiver.
    1182:	e1 ec       	ldi	r30, 0xC1	; 193
    1184:	f0 e0       	ldi	r31, 0x00	; 0
    1186:	80 81       	ld	r24, Z
    1188:	80 61       	ori	r24, 0x10	; 16
    118a:	80 83       	st	Z, r24
	set_bit(UCSR0B,TXEN0);		//TXEN enables the transmitter.
    118c:	80 81       	ld	r24, Z
    118e:	88 60       	ori	r24, 0x08	; 8
    1190:	80 83       	st	Z, r24
	
	fdevopen(put_char, get_char);
    1192:	68 ea       	ldi	r22, 0xA8	; 168
    1194:	78 e0       	ldi	r23, 0x08	; 8
    1196:	8e e9       	ldi	r24, 0x9E	; 158
    1198:	98 e0       	ldi	r25, 0x08	; 8
    119a:	a0 c2       	rjmp	.+1344   	; 0x16dc <fdevopen>
    119c:	08 95       	ret

0000119e <SPI_init>:
#include "bit_macros.h"
#include <avr/delay.h>
void SPI_init(){
	
	/* Set SS, MOSI and SCK output, all others input */
	DDRB = (1<<PB0)|(1<<PB7)|(1<<PB2)|(1<<PB1);
    119e:	87 e8       	ldi	r24, 0x87	; 135
    11a0:	84 b9       	out	0x04, r24	; 4
	/* Enable SPI, Master, set clock rate fck/16 */
	SPCR = (1<<SPE)|(1<<MSTR)|(1<<SPR0);
    11a2:	81 e5       	ldi	r24, 0x51	; 81
    11a4:	8c bd       	out	0x2c, r24	; 44
	
	/* Set SS-pin high */
	set_bit(PORTB, PB7);
    11a6:	2f 9a       	sbi	0x05, 7	; 5
    11a8:	08 95       	ret

000011aa <SPI_write>:

void SPI_write(char cData) {
	
	
	/* Start transmission */
	SPDR = cData;
    11aa:	8e bd       	out	0x2e, r24	; 46
	
	/* Wait for transmission complete */
	loop_until_bit_is_set(SPSR, SPIF);
    11ac:	0d b4       	in	r0, 0x2d	; 45
    11ae:	07 fe       	sbrs	r0, 7
    11b0:	fd cf       	rjmp	.-6      	; 0x11ac <SPI_write+0x2>
	
}
    11b2:	08 95       	ret

000011b4 <SPI_read>:

char SPI_read() {
	
	/* Start shifting registers by putting a char in the register */
	SPDR = 0x00;
    11b4:	1e bc       	out	0x2e, r1	; 46
	/* Wait for receive complete */ 
	loop_until_bit_is_set(SPSR,SPIF);
    11b6:	0d b4       	in	r0, 0x2d	; 45
    11b8:	07 fe       	sbrs	r0, 7
    11ba:	fd cf       	rjmp	.-6      	; 0x11b6 <SPI_read+0x2>
	
	return SPDR;
    11bc:	8e b5       	in	r24, 0x2e	; 46
}
    11be:	08 95       	ret

000011c0 <__subsf3>:
    11c0:	50 58       	subi	r21, 0x80	; 128

000011c2 <__addsf3>:
    11c2:	bb 27       	eor	r27, r27
    11c4:	aa 27       	eor	r26, r26
    11c6:	0e d0       	rcall	.+28     	; 0x11e4 <__addsf3x>
    11c8:	75 c1       	rjmp	.+746    	; 0x14b4 <__fp_round>
    11ca:	66 d1       	rcall	.+716    	; 0x1498 <__fp_pscA>
    11cc:	30 f0       	brcs	.+12     	; 0x11da <__addsf3+0x18>
    11ce:	6b d1       	rcall	.+726    	; 0x14a6 <__fp_pscB>
    11d0:	20 f0       	brcs	.+8      	; 0x11da <__addsf3+0x18>
    11d2:	31 f4       	brne	.+12     	; 0x11e0 <__addsf3+0x1e>
    11d4:	9f 3f       	cpi	r25, 0xFF	; 255
    11d6:	11 f4       	brne	.+4      	; 0x11dc <__addsf3+0x1a>
    11d8:	1e f4       	brtc	.+6      	; 0x11e0 <__addsf3+0x1e>
    11da:	5b c1       	rjmp	.+694    	; 0x1492 <__fp_nan>
    11dc:	0e f4       	brtc	.+2      	; 0x11e0 <__addsf3+0x1e>
    11de:	e0 95       	com	r30
    11e0:	e7 fb       	bst	r30, 7
    11e2:	51 c1       	rjmp	.+674    	; 0x1486 <__fp_inf>

000011e4 <__addsf3x>:
    11e4:	e9 2f       	mov	r30, r25
    11e6:	77 d1       	rcall	.+750    	; 0x14d6 <__fp_split3>
    11e8:	80 f3       	brcs	.-32     	; 0x11ca <__addsf3+0x8>
    11ea:	ba 17       	cp	r27, r26
    11ec:	62 07       	cpc	r22, r18
    11ee:	73 07       	cpc	r23, r19
    11f0:	84 07       	cpc	r24, r20
    11f2:	95 07       	cpc	r25, r21
    11f4:	18 f0       	brcs	.+6      	; 0x11fc <__addsf3x+0x18>
    11f6:	71 f4       	brne	.+28     	; 0x1214 <__addsf3x+0x30>
    11f8:	9e f5       	brtc	.+102    	; 0x1260 <__addsf3x+0x7c>
    11fa:	8f c1       	rjmp	.+798    	; 0x151a <__fp_zero>
    11fc:	0e f4       	brtc	.+2      	; 0x1200 <__addsf3x+0x1c>
    11fe:	e0 95       	com	r30
    1200:	0b 2e       	mov	r0, r27
    1202:	ba 2f       	mov	r27, r26
    1204:	a0 2d       	mov	r26, r0
    1206:	0b 01       	movw	r0, r22
    1208:	b9 01       	movw	r22, r18
    120a:	90 01       	movw	r18, r0
    120c:	0c 01       	movw	r0, r24
    120e:	ca 01       	movw	r24, r20
    1210:	a0 01       	movw	r20, r0
    1212:	11 24       	eor	r1, r1
    1214:	ff 27       	eor	r31, r31
    1216:	59 1b       	sub	r21, r25
    1218:	99 f0       	breq	.+38     	; 0x1240 <__addsf3x+0x5c>
    121a:	59 3f       	cpi	r21, 0xF9	; 249
    121c:	50 f4       	brcc	.+20     	; 0x1232 <__addsf3x+0x4e>
    121e:	50 3e       	cpi	r21, 0xE0	; 224
    1220:	68 f1       	brcs	.+90     	; 0x127c <__addsf3x+0x98>
    1222:	1a 16       	cp	r1, r26
    1224:	f0 40       	sbci	r31, 0x00	; 0
    1226:	a2 2f       	mov	r26, r18
    1228:	23 2f       	mov	r18, r19
    122a:	34 2f       	mov	r19, r20
    122c:	44 27       	eor	r20, r20
    122e:	58 5f       	subi	r21, 0xF8	; 248
    1230:	f3 cf       	rjmp	.-26     	; 0x1218 <__addsf3x+0x34>
    1232:	46 95       	lsr	r20
    1234:	37 95       	ror	r19
    1236:	27 95       	ror	r18
    1238:	a7 95       	ror	r26
    123a:	f0 40       	sbci	r31, 0x00	; 0
    123c:	53 95       	inc	r21
    123e:	c9 f7       	brne	.-14     	; 0x1232 <__addsf3x+0x4e>
    1240:	7e f4       	brtc	.+30     	; 0x1260 <__addsf3x+0x7c>
    1242:	1f 16       	cp	r1, r31
    1244:	ba 0b       	sbc	r27, r26
    1246:	62 0b       	sbc	r22, r18
    1248:	73 0b       	sbc	r23, r19
    124a:	84 0b       	sbc	r24, r20
    124c:	ba f0       	brmi	.+46     	; 0x127c <__addsf3x+0x98>
    124e:	91 50       	subi	r25, 0x01	; 1
    1250:	a1 f0       	breq	.+40     	; 0x127a <__addsf3x+0x96>
    1252:	ff 0f       	add	r31, r31
    1254:	bb 1f       	adc	r27, r27
    1256:	66 1f       	adc	r22, r22
    1258:	77 1f       	adc	r23, r23
    125a:	88 1f       	adc	r24, r24
    125c:	c2 f7       	brpl	.-16     	; 0x124e <__addsf3x+0x6a>
    125e:	0e c0       	rjmp	.+28     	; 0x127c <__addsf3x+0x98>
    1260:	ba 0f       	add	r27, r26
    1262:	62 1f       	adc	r22, r18
    1264:	73 1f       	adc	r23, r19
    1266:	84 1f       	adc	r24, r20
    1268:	48 f4       	brcc	.+18     	; 0x127c <__addsf3x+0x98>
    126a:	87 95       	ror	r24
    126c:	77 95       	ror	r23
    126e:	67 95       	ror	r22
    1270:	b7 95       	ror	r27
    1272:	f7 95       	ror	r31
    1274:	9e 3f       	cpi	r25, 0xFE	; 254
    1276:	08 f0       	brcs	.+2      	; 0x127a <__addsf3x+0x96>
    1278:	b3 cf       	rjmp	.-154    	; 0x11e0 <__addsf3+0x1e>
    127a:	93 95       	inc	r25
    127c:	88 0f       	add	r24, r24
    127e:	08 f0       	brcs	.+2      	; 0x1282 <__addsf3x+0x9e>
    1280:	99 27       	eor	r25, r25
    1282:	ee 0f       	add	r30, r30
    1284:	97 95       	ror	r25
    1286:	87 95       	ror	r24
    1288:	08 95       	ret

0000128a <__cmpsf2>:
    128a:	d9 d0       	rcall	.+434    	; 0x143e <__fp_cmp>
    128c:	08 f4       	brcc	.+2      	; 0x1290 <__cmpsf2+0x6>
    128e:	81 e0       	ldi	r24, 0x01	; 1
    1290:	08 95       	ret

00001292 <__divsf3>:
    1292:	0c d0       	rcall	.+24     	; 0x12ac <__divsf3x>
    1294:	0f c1       	rjmp	.+542    	; 0x14b4 <__fp_round>
    1296:	07 d1       	rcall	.+526    	; 0x14a6 <__fp_pscB>
    1298:	40 f0       	brcs	.+16     	; 0x12aa <__divsf3+0x18>
    129a:	fe d0       	rcall	.+508    	; 0x1498 <__fp_pscA>
    129c:	30 f0       	brcs	.+12     	; 0x12aa <__divsf3+0x18>
    129e:	21 f4       	brne	.+8      	; 0x12a8 <__divsf3+0x16>
    12a0:	5f 3f       	cpi	r21, 0xFF	; 255
    12a2:	19 f0       	breq	.+6      	; 0x12aa <__divsf3+0x18>
    12a4:	f0 c0       	rjmp	.+480    	; 0x1486 <__fp_inf>
    12a6:	51 11       	cpse	r21, r1
    12a8:	39 c1       	rjmp	.+626    	; 0x151c <__fp_szero>
    12aa:	f3 c0       	rjmp	.+486    	; 0x1492 <__fp_nan>

000012ac <__divsf3x>:
    12ac:	14 d1       	rcall	.+552    	; 0x14d6 <__fp_split3>
    12ae:	98 f3       	brcs	.-26     	; 0x1296 <__divsf3+0x4>

000012b0 <__divsf3_pse>:
    12b0:	99 23       	and	r25, r25
    12b2:	c9 f3       	breq	.-14     	; 0x12a6 <__divsf3+0x14>
    12b4:	55 23       	and	r21, r21
    12b6:	b1 f3       	breq	.-20     	; 0x12a4 <__divsf3+0x12>
    12b8:	95 1b       	sub	r25, r21
    12ba:	55 0b       	sbc	r21, r21
    12bc:	bb 27       	eor	r27, r27
    12be:	aa 27       	eor	r26, r26
    12c0:	62 17       	cp	r22, r18
    12c2:	73 07       	cpc	r23, r19
    12c4:	84 07       	cpc	r24, r20
    12c6:	38 f0       	brcs	.+14     	; 0x12d6 <__divsf3_pse+0x26>
    12c8:	9f 5f       	subi	r25, 0xFF	; 255
    12ca:	5f 4f       	sbci	r21, 0xFF	; 255
    12cc:	22 0f       	add	r18, r18
    12ce:	33 1f       	adc	r19, r19
    12d0:	44 1f       	adc	r20, r20
    12d2:	aa 1f       	adc	r26, r26
    12d4:	a9 f3       	breq	.-22     	; 0x12c0 <__divsf3_pse+0x10>
    12d6:	33 d0       	rcall	.+102    	; 0x133e <__divsf3_pse+0x8e>
    12d8:	0e 2e       	mov	r0, r30
    12da:	3a f0       	brmi	.+14     	; 0x12ea <__divsf3_pse+0x3a>
    12dc:	e0 e8       	ldi	r30, 0x80	; 128
    12de:	30 d0       	rcall	.+96     	; 0x1340 <__divsf3_pse+0x90>
    12e0:	91 50       	subi	r25, 0x01	; 1
    12e2:	50 40       	sbci	r21, 0x00	; 0
    12e4:	e6 95       	lsr	r30
    12e6:	00 1c       	adc	r0, r0
    12e8:	ca f7       	brpl	.-14     	; 0x12dc <__divsf3_pse+0x2c>
    12ea:	29 d0       	rcall	.+82     	; 0x133e <__divsf3_pse+0x8e>
    12ec:	fe 2f       	mov	r31, r30
    12ee:	27 d0       	rcall	.+78     	; 0x133e <__divsf3_pse+0x8e>
    12f0:	66 0f       	add	r22, r22
    12f2:	77 1f       	adc	r23, r23
    12f4:	88 1f       	adc	r24, r24
    12f6:	bb 1f       	adc	r27, r27
    12f8:	26 17       	cp	r18, r22
    12fa:	37 07       	cpc	r19, r23
    12fc:	48 07       	cpc	r20, r24
    12fe:	ab 07       	cpc	r26, r27
    1300:	b0 e8       	ldi	r27, 0x80	; 128
    1302:	09 f0       	breq	.+2      	; 0x1306 <__divsf3_pse+0x56>
    1304:	bb 0b       	sbc	r27, r27
    1306:	80 2d       	mov	r24, r0
    1308:	bf 01       	movw	r22, r30
    130a:	ff 27       	eor	r31, r31
    130c:	93 58       	subi	r25, 0x83	; 131
    130e:	5f 4f       	sbci	r21, 0xFF	; 255
    1310:	2a f0       	brmi	.+10     	; 0x131c <__divsf3_pse+0x6c>
    1312:	9e 3f       	cpi	r25, 0xFE	; 254
    1314:	51 05       	cpc	r21, r1
    1316:	68 f0       	brcs	.+26     	; 0x1332 <__divsf3_pse+0x82>
    1318:	b6 c0       	rjmp	.+364    	; 0x1486 <__fp_inf>
    131a:	00 c1       	rjmp	.+512    	; 0x151c <__fp_szero>
    131c:	5f 3f       	cpi	r21, 0xFF	; 255
    131e:	ec f3       	brlt	.-6      	; 0x131a <__divsf3_pse+0x6a>
    1320:	98 3e       	cpi	r25, 0xE8	; 232
    1322:	dc f3       	brlt	.-10     	; 0x131a <__divsf3_pse+0x6a>
    1324:	86 95       	lsr	r24
    1326:	77 95       	ror	r23
    1328:	67 95       	ror	r22
    132a:	b7 95       	ror	r27
    132c:	f7 95       	ror	r31
    132e:	9f 5f       	subi	r25, 0xFF	; 255
    1330:	c9 f7       	brne	.-14     	; 0x1324 <__divsf3_pse+0x74>
    1332:	88 0f       	add	r24, r24
    1334:	91 1d       	adc	r25, r1
    1336:	96 95       	lsr	r25
    1338:	87 95       	ror	r24
    133a:	97 f9       	bld	r25, 7
    133c:	08 95       	ret
    133e:	e1 e0       	ldi	r30, 0x01	; 1
    1340:	66 0f       	add	r22, r22
    1342:	77 1f       	adc	r23, r23
    1344:	88 1f       	adc	r24, r24
    1346:	bb 1f       	adc	r27, r27
    1348:	62 17       	cp	r22, r18
    134a:	73 07       	cpc	r23, r19
    134c:	84 07       	cpc	r24, r20
    134e:	ba 07       	cpc	r27, r26
    1350:	20 f0       	brcs	.+8      	; 0x135a <__divsf3_pse+0xaa>
    1352:	62 1b       	sub	r22, r18
    1354:	73 0b       	sbc	r23, r19
    1356:	84 0b       	sbc	r24, r20
    1358:	ba 0b       	sbc	r27, r26
    135a:	ee 1f       	adc	r30, r30
    135c:	88 f7       	brcc	.-30     	; 0x1340 <__divsf3_pse+0x90>
    135e:	e0 95       	com	r30
    1360:	08 95       	ret

00001362 <__fixsfsi>:
    1362:	04 d0       	rcall	.+8      	; 0x136c <__fixunssfsi>
    1364:	68 94       	set
    1366:	b1 11       	cpse	r27, r1
    1368:	d9 c0       	rjmp	.+434    	; 0x151c <__fp_szero>
    136a:	08 95       	ret

0000136c <__fixunssfsi>:
    136c:	bc d0       	rcall	.+376    	; 0x14e6 <__fp_splitA>
    136e:	88 f0       	brcs	.+34     	; 0x1392 <__fixunssfsi+0x26>
    1370:	9f 57       	subi	r25, 0x7F	; 127
    1372:	90 f0       	brcs	.+36     	; 0x1398 <__fixunssfsi+0x2c>
    1374:	b9 2f       	mov	r27, r25
    1376:	99 27       	eor	r25, r25
    1378:	b7 51       	subi	r27, 0x17	; 23
    137a:	a0 f0       	brcs	.+40     	; 0x13a4 <__fixunssfsi+0x38>
    137c:	d1 f0       	breq	.+52     	; 0x13b2 <__fixunssfsi+0x46>
    137e:	66 0f       	add	r22, r22
    1380:	77 1f       	adc	r23, r23
    1382:	88 1f       	adc	r24, r24
    1384:	99 1f       	adc	r25, r25
    1386:	1a f0       	brmi	.+6      	; 0x138e <__fixunssfsi+0x22>
    1388:	ba 95       	dec	r27
    138a:	c9 f7       	brne	.-14     	; 0x137e <__fixunssfsi+0x12>
    138c:	12 c0       	rjmp	.+36     	; 0x13b2 <__fixunssfsi+0x46>
    138e:	b1 30       	cpi	r27, 0x01	; 1
    1390:	81 f0       	breq	.+32     	; 0x13b2 <__fixunssfsi+0x46>
    1392:	c3 d0       	rcall	.+390    	; 0x151a <__fp_zero>
    1394:	b1 e0       	ldi	r27, 0x01	; 1
    1396:	08 95       	ret
    1398:	c0 c0       	rjmp	.+384    	; 0x151a <__fp_zero>
    139a:	67 2f       	mov	r22, r23
    139c:	78 2f       	mov	r23, r24
    139e:	88 27       	eor	r24, r24
    13a0:	b8 5f       	subi	r27, 0xF8	; 248
    13a2:	39 f0       	breq	.+14     	; 0x13b2 <__fixunssfsi+0x46>
    13a4:	b9 3f       	cpi	r27, 0xF9	; 249
    13a6:	cc f3       	brlt	.-14     	; 0x139a <__fixunssfsi+0x2e>
    13a8:	86 95       	lsr	r24
    13aa:	77 95       	ror	r23
    13ac:	67 95       	ror	r22
    13ae:	b3 95       	inc	r27
    13b0:	d9 f7       	brne	.-10     	; 0x13a8 <__fixunssfsi+0x3c>
    13b2:	3e f4       	brtc	.+14     	; 0x13c2 <__fixunssfsi+0x56>
    13b4:	90 95       	com	r25
    13b6:	80 95       	com	r24
    13b8:	70 95       	com	r23
    13ba:	61 95       	neg	r22
    13bc:	7f 4f       	sbci	r23, 0xFF	; 255
    13be:	8f 4f       	sbci	r24, 0xFF	; 255
    13c0:	9f 4f       	sbci	r25, 0xFF	; 255
    13c2:	08 95       	ret

000013c4 <__floatunsisf>:
    13c4:	e8 94       	clt
    13c6:	09 c0       	rjmp	.+18     	; 0x13da <__floatsisf+0x12>

000013c8 <__floatsisf>:
    13c8:	97 fb       	bst	r25, 7
    13ca:	3e f4       	brtc	.+14     	; 0x13da <__floatsisf+0x12>
    13cc:	90 95       	com	r25
    13ce:	80 95       	com	r24
    13d0:	70 95       	com	r23
    13d2:	61 95       	neg	r22
    13d4:	7f 4f       	sbci	r23, 0xFF	; 255
    13d6:	8f 4f       	sbci	r24, 0xFF	; 255
    13d8:	9f 4f       	sbci	r25, 0xFF	; 255
    13da:	99 23       	and	r25, r25
    13dc:	a9 f0       	breq	.+42     	; 0x1408 <__floatsisf+0x40>
    13de:	f9 2f       	mov	r31, r25
    13e0:	96 e9       	ldi	r25, 0x96	; 150
    13e2:	bb 27       	eor	r27, r27
    13e4:	93 95       	inc	r25
    13e6:	f6 95       	lsr	r31
    13e8:	87 95       	ror	r24
    13ea:	77 95       	ror	r23
    13ec:	67 95       	ror	r22
    13ee:	b7 95       	ror	r27
    13f0:	f1 11       	cpse	r31, r1
    13f2:	f8 cf       	rjmp	.-16     	; 0x13e4 <__floatsisf+0x1c>
    13f4:	fa f4       	brpl	.+62     	; 0x1434 <__floatsisf+0x6c>
    13f6:	bb 0f       	add	r27, r27
    13f8:	11 f4       	brne	.+4      	; 0x13fe <__floatsisf+0x36>
    13fa:	60 ff       	sbrs	r22, 0
    13fc:	1b c0       	rjmp	.+54     	; 0x1434 <__floatsisf+0x6c>
    13fe:	6f 5f       	subi	r22, 0xFF	; 255
    1400:	7f 4f       	sbci	r23, 0xFF	; 255
    1402:	8f 4f       	sbci	r24, 0xFF	; 255
    1404:	9f 4f       	sbci	r25, 0xFF	; 255
    1406:	16 c0       	rjmp	.+44     	; 0x1434 <__floatsisf+0x6c>
    1408:	88 23       	and	r24, r24
    140a:	11 f0       	breq	.+4      	; 0x1410 <__floatsisf+0x48>
    140c:	96 e9       	ldi	r25, 0x96	; 150
    140e:	11 c0       	rjmp	.+34     	; 0x1432 <__floatsisf+0x6a>
    1410:	77 23       	and	r23, r23
    1412:	21 f0       	breq	.+8      	; 0x141c <__floatsisf+0x54>
    1414:	9e e8       	ldi	r25, 0x8E	; 142
    1416:	87 2f       	mov	r24, r23
    1418:	76 2f       	mov	r23, r22
    141a:	05 c0       	rjmp	.+10     	; 0x1426 <__floatsisf+0x5e>
    141c:	66 23       	and	r22, r22
    141e:	71 f0       	breq	.+28     	; 0x143c <__floatsisf+0x74>
    1420:	96 e8       	ldi	r25, 0x86	; 134
    1422:	86 2f       	mov	r24, r22
    1424:	70 e0       	ldi	r23, 0x00	; 0
    1426:	60 e0       	ldi	r22, 0x00	; 0
    1428:	2a f0       	brmi	.+10     	; 0x1434 <__floatsisf+0x6c>
    142a:	9a 95       	dec	r25
    142c:	66 0f       	add	r22, r22
    142e:	77 1f       	adc	r23, r23
    1430:	88 1f       	adc	r24, r24
    1432:	da f7       	brpl	.-10     	; 0x142a <__floatsisf+0x62>
    1434:	88 0f       	add	r24, r24
    1436:	96 95       	lsr	r25
    1438:	87 95       	ror	r24
    143a:	97 f9       	bld	r25, 7
    143c:	08 95       	ret

0000143e <__fp_cmp>:
    143e:	99 0f       	add	r25, r25
    1440:	00 08       	sbc	r0, r0
    1442:	55 0f       	add	r21, r21
    1444:	aa 0b       	sbc	r26, r26
    1446:	e0 e8       	ldi	r30, 0x80	; 128
    1448:	fe ef       	ldi	r31, 0xFE	; 254
    144a:	16 16       	cp	r1, r22
    144c:	17 06       	cpc	r1, r23
    144e:	e8 07       	cpc	r30, r24
    1450:	f9 07       	cpc	r31, r25
    1452:	c0 f0       	brcs	.+48     	; 0x1484 <__fp_cmp+0x46>
    1454:	12 16       	cp	r1, r18
    1456:	13 06       	cpc	r1, r19
    1458:	e4 07       	cpc	r30, r20
    145a:	f5 07       	cpc	r31, r21
    145c:	98 f0       	brcs	.+38     	; 0x1484 <__fp_cmp+0x46>
    145e:	62 1b       	sub	r22, r18
    1460:	73 0b       	sbc	r23, r19
    1462:	84 0b       	sbc	r24, r20
    1464:	95 0b       	sbc	r25, r21
    1466:	39 f4       	brne	.+14     	; 0x1476 <__fp_cmp+0x38>
    1468:	0a 26       	eor	r0, r26
    146a:	61 f0       	breq	.+24     	; 0x1484 <__fp_cmp+0x46>
    146c:	23 2b       	or	r18, r19
    146e:	24 2b       	or	r18, r20
    1470:	25 2b       	or	r18, r21
    1472:	21 f4       	brne	.+8      	; 0x147c <__fp_cmp+0x3e>
    1474:	08 95       	ret
    1476:	0a 26       	eor	r0, r26
    1478:	09 f4       	brne	.+2      	; 0x147c <__fp_cmp+0x3e>
    147a:	a1 40       	sbci	r26, 0x01	; 1
    147c:	a6 95       	lsr	r26
    147e:	8f ef       	ldi	r24, 0xFF	; 255
    1480:	81 1d       	adc	r24, r1
    1482:	81 1d       	adc	r24, r1
    1484:	08 95       	ret

00001486 <__fp_inf>:
    1486:	97 f9       	bld	r25, 7
    1488:	9f 67       	ori	r25, 0x7F	; 127
    148a:	80 e8       	ldi	r24, 0x80	; 128
    148c:	70 e0       	ldi	r23, 0x00	; 0
    148e:	60 e0       	ldi	r22, 0x00	; 0
    1490:	08 95       	ret

00001492 <__fp_nan>:
    1492:	9f ef       	ldi	r25, 0xFF	; 255
    1494:	80 ec       	ldi	r24, 0xC0	; 192
    1496:	08 95       	ret

00001498 <__fp_pscA>:
    1498:	00 24       	eor	r0, r0
    149a:	0a 94       	dec	r0
    149c:	16 16       	cp	r1, r22
    149e:	17 06       	cpc	r1, r23
    14a0:	18 06       	cpc	r1, r24
    14a2:	09 06       	cpc	r0, r25
    14a4:	08 95       	ret

000014a6 <__fp_pscB>:
    14a6:	00 24       	eor	r0, r0
    14a8:	0a 94       	dec	r0
    14aa:	12 16       	cp	r1, r18
    14ac:	13 06       	cpc	r1, r19
    14ae:	14 06       	cpc	r1, r20
    14b0:	05 06       	cpc	r0, r21
    14b2:	08 95       	ret

000014b4 <__fp_round>:
    14b4:	09 2e       	mov	r0, r25
    14b6:	03 94       	inc	r0
    14b8:	00 0c       	add	r0, r0
    14ba:	11 f4       	brne	.+4      	; 0x14c0 <__fp_round+0xc>
    14bc:	88 23       	and	r24, r24
    14be:	52 f0       	brmi	.+20     	; 0x14d4 <__fp_round+0x20>
    14c0:	bb 0f       	add	r27, r27
    14c2:	40 f4       	brcc	.+16     	; 0x14d4 <__fp_round+0x20>
    14c4:	bf 2b       	or	r27, r31
    14c6:	11 f4       	brne	.+4      	; 0x14cc <__fp_round+0x18>
    14c8:	60 ff       	sbrs	r22, 0
    14ca:	04 c0       	rjmp	.+8      	; 0x14d4 <__fp_round+0x20>
    14cc:	6f 5f       	subi	r22, 0xFF	; 255
    14ce:	7f 4f       	sbci	r23, 0xFF	; 255
    14d0:	8f 4f       	sbci	r24, 0xFF	; 255
    14d2:	9f 4f       	sbci	r25, 0xFF	; 255
    14d4:	08 95       	ret

000014d6 <__fp_split3>:
    14d6:	57 fd       	sbrc	r21, 7
    14d8:	90 58       	subi	r25, 0x80	; 128
    14da:	44 0f       	add	r20, r20
    14dc:	55 1f       	adc	r21, r21
    14de:	59 f0       	breq	.+22     	; 0x14f6 <__fp_splitA+0x10>
    14e0:	5f 3f       	cpi	r21, 0xFF	; 255
    14e2:	71 f0       	breq	.+28     	; 0x1500 <__fp_splitA+0x1a>
    14e4:	47 95       	ror	r20

000014e6 <__fp_splitA>:
    14e6:	88 0f       	add	r24, r24
    14e8:	97 fb       	bst	r25, 7
    14ea:	99 1f       	adc	r25, r25
    14ec:	61 f0       	breq	.+24     	; 0x1506 <__fp_splitA+0x20>
    14ee:	9f 3f       	cpi	r25, 0xFF	; 255
    14f0:	79 f0       	breq	.+30     	; 0x1510 <__fp_splitA+0x2a>
    14f2:	87 95       	ror	r24
    14f4:	08 95       	ret
    14f6:	12 16       	cp	r1, r18
    14f8:	13 06       	cpc	r1, r19
    14fa:	14 06       	cpc	r1, r20
    14fc:	55 1f       	adc	r21, r21
    14fe:	f2 cf       	rjmp	.-28     	; 0x14e4 <__fp_split3+0xe>
    1500:	46 95       	lsr	r20
    1502:	f1 df       	rcall	.-30     	; 0x14e6 <__fp_splitA>
    1504:	08 c0       	rjmp	.+16     	; 0x1516 <__fp_splitA+0x30>
    1506:	16 16       	cp	r1, r22
    1508:	17 06       	cpc	r1, r23
    150a:	18 06       	cpc	r1, r24
    150c:	99 1f       	adc	r25, r25
    150e:	f1 cf       	rjmp	.-30     	; 0x14f2 <__fp_splitA+0xc>
    1510:	86 95       	lsr	r24
    1512:	71 05       	cpc	r23, r1
    1514:	61 05       	cpc	r22, r1
    1516:	08 94       	sec
    1518:	08 95       	ret

0000151a <__fp_zero>:
    151a:	e8 94       	clt

0000151c <__fp_szero>:
    151c:	bb 27       	eor	r27, r27
    151e:	66 27       	eor	r22, r22
    1520:	77 27       	eor	r23, r23
    1522:	cb 01       	movw	r24, r22
    1524:	97 f9       	bld	r25, 7
    1526:	08 95       	ret

00001528 <__gesf2>:
    1528:	8a df       	rcall	.-236    	; 0x143e <__fp_cmp>
    152a:	08 f4       	brcc	.+2      	; 0x152e <__gesf2+0x6>
    152c:	8f ef       	ldi	r24, 0xFF	; 255
    152e:	08 95       	ret

00001530 <__mulsf3>:
    1530:	0b d0       	rcall	.+22     	; 0x1548 <__mulsf3x>
    1532:	c0 cf       	rjmp	.-128    	; 0x14b4 <__fp_round>
    1534:	b1 df       	rcall	.-158    	; 0x1498 <__fp_pscA>
    1536:	28 f0       	brcs	.+10     	; 0x1542 <__mulsf3+0x12>
    1538:	b6 df       	rcall	.-148    	; 0x14a6 <__fp_pscB>
    153a:	18 f0       	brcs	.+6      	; 0x1542 <__mulsf3+0x12>
    153c:	95 23       	and	r25, r21
    153e:	09 f0       	breq	.+2      	; 0x1542 <__mulsf3+0x12>
    1540:	a2 cf       	rjmp	.-188    	; 0x1486 <__fp_inf>
    1542:	a7 cf       	rjmp	.-178    	; 0x1492 <__fp_nan>
    1544:	11 24       	eor	r1, r1
    1546:	ea cf       	rjmp	.-44     	; 0x151c <__fp_szero>

00001548 <__mulsf3x>:
    1548:	c6 df       	rcall	.-116    	; 0x14d6 <__fp_split3>
    154a:	a0 f3       	brcs	.-24     	; 0x1534 <__mulsf3+0x4>

0000154c <__mulsf3_pse>:
    154c:	95 9f       	mul	r25, r21
    154e:	d1 f3       	breq	.-12     	; 0x1544 <__mulsf3+0x14>
    1550:	95 0f       	add	r25, r21
    1552:	50 e0       	ldi	r21, 0x00	; 0
    1554:	55 1f       	adc	r21, r21
    1556:	62 9f       	mul	r22, r18
    1558:	f0 01       	movw	r30, r0
    155a:	72 9f       	mul	r23, r18
    155c:	bb 27       	eor	r27, r27
    155e:	f0 0d       	add	r31, r0
    1560:	b1 1d       	adc	r27, r1
    1562:	63 9f       	mul	r22, r19
    1564:	aa 27       	eor	r26, r26
    1566:	f0 0d       	add	r31, r0
    1568:	b1 1d       	adc	r27, r1
    156a:	aa 1f       	adc	r26, r26
    156c:	64 9f       	mul	r22, r20
    156e:	66 27       	eor	r22, r22
    1570:	b0 0d       	add	r27, r0
    1572:	a1 1d       	adc	r26, r1
    1574:	66 1f       	adc	r22, r22
    1576:	82 9f       	mul	r24, r18
    1578:	22 27       	eor	r18, r18
    157a:	b0 0d       	add	r27, r0
    157c:	a1 1d       	adc	r26, r1
    157e:	62 1f       	adc	r22, r18
    1580:	73 9f       	mul	r23, r19
    1582:	b0 0d       	add	r27, r0
    1584:	a1 1d       	adc	r26, r1
    1586:	62 1f       	adc	r22, r18
    1588:	83 9f       	mul	r24, r19
    158a:	a0 0d       	add	r26, r0
    158c:	61 1d       	adc	r22, r1
    158e:	22 1f       	adc	r18, r18
    1590:	74 9f       	mul	r23, r20
    1592:	33 27       	eor	r19, r19
    1594:	a0 0d       	add	r26, r0
    1596:	61 1d       	adc	r22, r1
    1598:	23 1f       	adc	r18, r19
    159a:	84 9f       	mul	r24, r20
    159c:	60 0d       	add	r22, r0
    159e:	21 1d       	adc	r18, r1
    15a0:	82 2f       	mov	r24, r18
    15a2:	76 2f       	mov	r23, r22
    15a4:	6a 2f       	mov	r22, r26
    15a6:	11 24       	eor	r1, r1
    15a8:	9f 57       	subi	r25, 0x7F	; 127
    15aa:	50 40       	sbci	r21, 0x00	; 0
    15ac:	8a f0       	brmi	.+34     	; 0x15d0 <__mulsf3_pse+0x84>
    15ae:	e1 f0       	breq	.+56     	; 0x15e8 <__mulsf3_pse+0x9c>
    15b0:	88 23       	and	r24, r24
    15b2:	4a f0       	brmi	.+18     	; 0x15c6 <__mulsf3_pse+0x7a>
    15b4:	ee 0f       	add	r30, r30
    15b6:	ff 1f       	adc	r31, r31
    15b8:	bb 1f       	adc	r27, r27
    15ba:	66 1f       	adc	r22, r22
    15bc:	77 1f       	adc	r23, r23
    15be:	88 1f       	adc	r24, r24
    15c0:	91 50       	subi	r25, 0x01	; 1
    15c2:	50 40       	sbci	r21, 0x00	; 0
    15c4:	a9 f7       	brne	.-22     	; 0x15b0 <__mulsf3_pse+0x64>
    15c6:	9e 3f       	cpi	r25, 0xFE	; 254
    15c8:	51 05       	cpc	r21, r1
    15ca:	70 f0       	brcs	.+28     	; 0x15e8 <__mulsf3_pse+0x9c>
    15cc:	5c cf       	rjmp	.-328    	; 0x1486 <__fp_inf>
    15ce:	a6 cf       	rjmp	.-180    	; 0x151c <__fp_szero>
    15d0:	5f 3f       	cpi	r21, 0xFF	; 255
    15d2:	ec f3       	brlt	.-6      	; 0x15ce <__mulsf3_pse+0x82>
    15d4:	98 3e       	cpi	r25, 0xE8	; 232
    15d6:	dc f3       	brlt	.-10     	; 0x15ce <__mulsf3_pse+0x82>
    15d8:	86 95       	lsr	r24
    15da:	77 95       	ror	r23
    15dc:	67 95       	ror	r22
    15de:	b7 95       	ror	r27
    15e0:	f7 95       	ror	r31
    15e2:	e7 95       	ror	r30
    15e4:	9f 5f       	subi	r25, 0xFF	; 255
    15e6:	c1 f7       	brne	.-16     	; 0x15d8 <__mulsf3_pse+0x8c>
    15e8:	fe 2b       	or	r31, r30
    15ea:	88 0f       	add	r24, r24
    15ec:	91 1d       	adc	r25, r1
    15ee:	96 95       	lsr	r25
    15f0:	87 95       	ror	r24
    15f2:	97 f9       	bld	r25, 7
    15f4:	08 95       	ret

000015f6 <__udivmodhi4>:
    15f6:	aa 1b       	sub	r26, r26
    15f8:	bb 1b       	sub	r27, r27
    15fa:	51 e1       	ldi	r21, 0x11	; 17
    15fc:	07 c0       	rjmp	.+14     	; 0x160c <__udivmodhi4_ep>

000015fe <__udivmodhi4_loop>:
    15fe:	aa 1f       	adc	r26, r26
    1600:	bb 1f       	adc	r27, r27
    1602:	a6 17       	cp	r26, r22
    1604:	b7 07       	cpc	r27, r23
    1606:	10 f0       	brcs	.+4      	; 0x160c <__udivmodhi4_ep>
    1608:	a6 1b       	sub	r26, r22
    160a:	b7 0b       	sbc	r27, r23

0000160c <__udivmodhi4_ep>:
    160c:	88 1f       	adc	r24, r24
    160e:	99 1f       	adc	r25, r25
    1610:	5a 95       	dec	r21
    1612:	a9 f7       	brne	.-22     	; 0x15fe <__udivmodhi4_loop>
    1614:	80 95       	com	r24
    1616:	90 95       	com	r25
    1618:	bc 01       	movw	r22, r24
    161a:	cd 01       	movw	r24, r26
    161c:	08 95       	ret

0000161e <__udivmodsi4>:
    161e:	a1 e2       	ldi	r26, 0x21	; 33
    1620:	1a 2e       	mov	r1, r26
    1622:	aa 1b       	sub	r26, r26
    1624:	bb 1b       	sub	r27, r27
    1626:	fd 01       	movw	r30, r26
    1628:	0d c0       	rjmp	.+26     	; 0x1644 <__udivmodsi4_ep>

0000162a <__udivmodsi4_loop>:
    162a:	aa 1f       	adc	r26, r26
    162c:	bb 1f       	adc	r27, r27
    162e:	ee 1f       	adc	r30, r30
    1630:	ff 1f       	adc	r31, r31
    1632:	a2 17       	cp	r26, r18
    1634:	b3 07       	cpc	r27, r19
    1636:	e4 07       	cpc	r30, r20
    1638:	f5 07       	cpc	r31, r21
    163a:	20 f0       	brcs	.+8      	; 0x1644 <__udivmodsi4_ep>
    163c:	a2 1b       	sub	r26, r18
    163e:	b3 0b       	sbc	r27, r19
    1640:	e4 0b       	sbc	r30, r20
    1642:	f5 0b       	sbc	r31, r21

00001644 <__udivmodsi4_ep>:
    1644:	66 1f       	adc	r22, r22
    1646:	77 1f       	adc	r23, r23
    1648:	88 1f       	adc	r24, r24
    164a:	99 1f       	adc	r25, r25
    164c:	1a 94       	dec	r1
    164e:	69 f7       	brne	.-38     	; 0x162a <__udivmodsi4_loop>
    1650:	60 95       	com	r22
    1652:	70 95       	com	r23
    1654:	80 95       	com	r24
    1656:	90 95       	com	r25
    1658:	9b 01       	movw	r18, r22
    165a:	ac 01       	movw	r20, r24
    165c:	bd 01       	movw	r22, r26
    165e:	cf 01       	movw	r24, r30
    1660:	08 95       	ret

00001662 <__divmodsi4>:
    1662:	05 2e       	mov	r0, r21
    1664:	97 fb       	bst	r25, 7
    1666:	16 f4       	brtc	.+4      	; 0x166c <__divmodsi4+0xa>
    1668:	00 94       	com	r0
    166a:	0f d0       	rcall	.+30     	; 0x168a <__negsi2>
    166c:	57 fd       	sbrc	r21, 7
    166e:	05 d0       	rcall	.+10     	; 0x167a <__divmodsi4_neg2>
    1670:	d6 df       	rcall	.-84     	; 0x161e <__udivmodsi4>
    1672:	07 fc       	sbrc	r0, 7
    1674:	02 d0       	rcall	.+4      	; 0x167a <__divmodsi4_neg2>
    1676:	46 f4       	brtc	.+16     	; 0x1688 <__divmodsi4_exit>
    1678:	08 c0       	rjmp	.+16     	; 0x168a <__negsi2>

0000167a <__divmodsi4_neg2>:
    167a:	50 95       	com	r21
    167c:	40 95       	com	r20
    167e:	30 95       	com	r19
    1680:	21 95       	neg	r18
    1682:	3f 4f       	sbci	r19, 0xFF	; 255
    1684:	4f 4f       	sbci	r20, 0xFF	; 255
    1686:	5f 4f       	sbci	r21, 0xFF	; 255

00001688 <__divmodsi4_exit>:
    1688:	08 95       	ret

0000168a <__negsi2>:
    168a:	90 95       	com	r25
    168c:	80 95       	com	r24
    168e:	70 95       	com	r23
    1690:	61 95       	neg	r22
    1692:	7f 4f       	sbci	r23, 0xFF	; 255
    1694:	8f 4f       	sbci	r24, 0xFF	; 255
    1696:	9f 4f       	sbci	r25, 0xFF	; 255
    1698:	08 95       	ret

0000169a <__tablejump2__>:
    169a:	ee 0f       	add	r30, r30
    169c:	ff 1f       	adc	r31, r31

0000169e <__tablejump__>:
    169e:	05 90       	lpm	r0, Z+
    16a0:	f4 91       	lpm	r31, Z
    16a2:	e0 2d       	mov	r30, r0
    16a4:	19 94       	eijmp

000016a6 <__mulhisi3>:
    16a6:	05 d0       	rcall	.+10     	; 0x16b2 <__umulhisi3>
    16a8:	33 23       	and	r19, r19
    16aa:	12 f4       	brpl	.+4      	; 0x16b0 <__mulhisi3+0xa>
    16ac:	8a 1b       	sub	r24, r26
    16ae:	9b 0b       	sbc	r25, r27
    16b0:	10 c0       	rjmp	.+32     	; 0x16d2 <__usmulhisi3_tail>

000016b2 <__umulhisi3>:
    16b2:	a2 9f       	mul	r26, r18
    16b4:	b0 01       	movw	r22, r0
    16b6:	b3 9f       	mul	r27, r19
    16b8:	c0 01       	movw	r24, r0
    16ba:	a3 9f       	mul	r26, r19
    16bc:	70 0d       	add	r23, r0
    16be:	81 1d       	adc	r24, r1
    16c0:	11 24       	eor	r1, r1
    16c2:	91 1d       	adc	r25, r1
    16c4:	b2 9f       	mul	r27, r18
    16c6:	70 0d       	add	r23, r0
    16c8:	81 1d       	adc	r24, r1
    16ca:	11 24       	eor	r1, r1
    16cc:	91 1d       	adc	r25, r1
    16ce:	08 95       	ret

000016d0 <__usmulhisi3>:
    16d0:	f0 df       	rcall	.-32     	; 0x16b2 <__umulhisi3>

000016d2 <__usmulhisi3_tail>:
    16d2:	b7 ff       	sbrs	r27, 7
    16d4:	08 95       	ret
    16d6:	82 1b       	sub	r24, r18
    16d8:	93 0b       	sbc	r25, r19
    16da:	08 95       	ret

000016dc <fdevopen>:
    16dc:	0f 93       	push	r16
    16de:	1f 93       	push	r17
    16e0:	cf 93       	push	r28
    16e2:	df 93       	push	r29
    16e4:	ec 01       	movw	r28, r24
    16e6:	8b 01       	movw	r16, r22
    16e8:	00 97       	sbiw	r24, 0x00	; 0
    16ea:	31 f4       	brne	.+12     	; 0x16f8 <fdevopen+0x1c>
    16ec:	61 15       	cp	r22, r1
    16ee:	71 05       	cpc	r23, r1
    16f0:	19 f4       	brne	.+6      	; 0x16f8 <fdevopen+0x1c>
    16f2:	80 e0       	ldi	r24, 0x00	; 0
    16f4:	90 e0       	ldi	r25, 0x00	; 0
    16f6:	37 c0       	rjmp	.+110    	; 0x1766 <fdevopen+0x8a>
    16f8:	6e e0       	ldi	r22, 0x0E	; 14
    16fa:	70 e0       	ldi	r23, 0x00	; 0
    16fc:	81 e0       	ldi	r24, 0x01	; 1
    16fe:	90 e0       	ldi	r25, 0x00	; 0
    1700:	63 d2       	rcall	.+1222   	; 0x1bc8 <calloc>
    1702:	fc 01       	movw	r30, r24
    1704:	00 97       	sbiw	r24, 0x00	; 0
    1706:	a9 f3       	breq	.-22     	; 0x16f2 <fdevopen+0x16>
    1708:	80 e8       	ldi	r24, 0x80	; 128
    170a:	83 83       	std	Z+3, r24	; 0x03
    170c:	01 15       	cp	r16, r1
    170e:	11 05       	cpc	r17, r1
    1710:	71 f0       	breq	.+28     	; 0x172e <fdevopen+0x52>
    1712:	13 87       	std	Z+11, r17	; 0x0b
    1714:	02 87       	std	Z+10, r16	; 0x0a
    1716:	81 e8       	ldi	r24, 0x81	; 129
    1718:	83 83       	std	Z+3, r24	; 0x03
    171a:	80 91 5e 03 	lds	r24, 0x035E
    171e:	90 91 5f 03 	lds	r25, 0x035F
    1722:	89 2b       	or	r24, r25
    1724:	21 f4       	brne	.+8      	; 0x172e <fdevopen+0x52>
    1726:	f0 93 5f 03 	sts	0x035F, r31
    172a:	e0 93 5e 03 	sts	0x035E, r30
    172e:	20 97       	sbiw	r28, 0x00	; 0
    1730:	c9 f0       	breq	.+50     	; 0x1764 <fdevopen+0x88>
    1732:	d1 87       	std	Z+9, r29	; 0x09
    1734:	c0 87       	std	Z+8, r28	; 0x08
    1736:	83 81       	ldd	r24, Z+3	; 0x03
    1738:	82 60       	ori	r24, 0x02	; 2
    173a:	83 83       	std	Z+3, r24	; 0x03
    173c:	80 91 60 03 	lds	r24, 0x0360
    1740:	90 91 61 03 	lds	r25, 0x0361
    1744:	89 2b       	or	r24, r25
    1746:	71 f4       	brne	.+28     	; 0x1764 <fdevopen+0x88>
    1748:	f0 93 61 03 	sts	0x0361, r31
    174c:	e0 93 60 03 	sts	0x0360, r30
    1750:	80 91 62 03 	lds	r24, 0x0362
    1754:	90 91 63 03 	lds	r25, 0x0363
    1758:	89 2b       	or	r24, r25
    175a:	21 f4       	brne	.+8      	; 0x1764 <fdevopen+0x88>
    175c:	f0 93 63 03 	sts	0x0363, r31
    1760:	e0 93 62 03 	sts	0x0362, r30
    1764:	cf 01       	movw	r24, r30
    1766:	df 91       	pop	r29
    1768:	cf 91       	pop	r28
    176a:	1f 91       	pop	r17
    176c:	0f 91       	pop	r16
    176e:	08 95       	ret

00001770 <printf>:
    1770:	cf 93       	push	r28
    1772:	df 93       	push	r29
    1774:	cd b7       	in	r28, 0x3d	; 61
    1776:	de b7       	in	r29, 0x3e	; 62
    1778:	fe 01       	movw	r30, r28
    177a:	36 96       	adiw	r30, 0x06	; 6
    177c:	61 91       	ld	r22, Z+
    177e:	71 91       	ld	r23, Z+
    1780:	af 01       	movw	r20, r30
    1782:	80 91 60 03 	lds	r24, 0x0360
    1786:	90 91 61 03 	lds	r25, 0x0361
    178a:	30 d0       	rcall	.+96     	; 0x17ec <vfprintf>
    178c:	df 91       	pop	r29
    178e:	cf 91       	pop	r28
    1790:	08 95       	ret

00001792 <puts>:
    1792:	0f 93       	push	r16
    1794:	1f 93       	push	r17
    1796:	cf 93       	push	r28
    1798:	df 93       	push	r29
    179a:	e0 91 60 03 	lds	r30, 0x0360
    179e:	f0 91 61 03 	lds	r31, 0x0361
    17a2:	23 81       	ldd	r18, Z+3	; 0x03
    17a4:	21 ff       	sbrs	r18, 1
    17a6:	1b c0       	rjmp	.+54     	; 0x17de <puts+0x4c>
    17a8:	ec 01       	movw	r28, r24
    17aa:	00 e0       	ldi	r16, 0x00	; 0
    17ac:	10 e0       	ldi	r17, 0x00	; 0
    17ae:	89 91       	ld	r24, Y+
    17b0:	60 91 60 03 	lds	r22, 0x0360
    17b4:	70 91 61 03 	lds	r23, 0x0361
    17b8:	db 01       	movw	r26, r22
    17ba:	18 96       	adiw	r26, 0x08	; 8
    17bc:	ed 91       	ld	r30, X+
    17be:	fc 91       	ld	r31, X
    17c0:	19 97       	sbiw	r26, 0x09	; 9
    17c2:	88 23       	and	r24, r24
    17c4:	31 f0       	breq	.+12     	; 0x17d2 <puts+0x40>
    17c6:	19 95       	eicall
    17c8:	89 2b       	or	r24, r25
    17ca:	89 f3       	breq	.-30     	; 0x17ae <puts+0x1c>
    17cc:	0f ef       	ldi	r16, 0xFF	; 255
    17ce:	1f ef       	ldi	r17, 0xFF	; 255
    17d0:	ee cf       	rjmp	.-36     	; 0x17ae <puts+0x1c>
    17d2:	8a e0       	ldi	r24, 0x0A	; 10
    17d4:	19 95       	eicall
    17d6:	89 2b       	or	r24, r25
    17d8:	11 f4       	brne	.+4      	; 0x17de <puts+0x4c>
    17da:	c8 01       	movw	r24, r16
    17dc:	02 c0       	rjmp	.+4      	; 0x17e2 <puts+0x50>
    17de:	8f ef       	ldi	r24, 0xFF	; 255
    17e0:	9f ef       	ldi	r25, 0xFF	; 255
    17e2:	df 91       	pop	r29
    17e4:	cf 91       	pop	r28
    17e6:	1f 91       	pop	r17
    17e8:	0f 91       	pop	r16
    17ea:	08 95       	ret

000017ec <vfprintf>:
    17ec:	2f 92       	push	r2
    17ee:	3f 92       	push	r3
    17f0:	4f 92       	push	r4
    17f2:	5f 92       	push	r5
    17f4:	6f 92       	push	r6
    17f6:	7f 92       	push	r7
    17f8:	8f 92       	push	r8
    17fa:	9f 92       	push	r9
    17fc:	af 92       	push	r10
    17fe:	bf 92       	push	r11
    1800:	cf 92       	push	r12
    1802:	df 92       	push	r13
    1804:	ef 92       	push	r14
    1806:	ff 92       	push	r15
    1808:	0f 93       	push	r16
    180a:	1f 93       	push	r17
    180c:	cf 93       	push	r28
    180e:	df 93       	push	r29
    1810:	cd b7       	in	r28, 0x3d	; 61
    1812:	de b7       	in	r29, 0x3e	; 62
    1814:	2c 97       	sbiw	r28, 0x0c	; 12
    1816:	0f b6       	in	r0, 0x3f	; 63
    1818:	f8 94       	cli
    181a:	de bf       	out	0x3e, r29	; 62
    181c:	0f be       	out	0x3f, r0	; 63
    181e:	cd bf       	out	0x3d, r28	; 61
    1820:	7c 01       	movw	r14, r24
    1822:	6b 01       	movw	r12, r22
    1824:	8a 01       	movw	r16, r20
    1826:	fc 01       	movw	r30, r24
    1828:	17 82       	std	Z+7, r1	; 0x07
    182a:	16 82       	std	Z+6, r1	; 0x06
    182c:	83 81       	ldd	r24, Z+3	; 0x03
    182e:	81 ff       	sbrs	r24, 1
    1830:	b0 c1       	rjmp	.+864    	; 0x1b92 <vfprintf+0x3a6>
    1832:	ce 01       	movw	r24, r28
    1834:	01 96       	adiw	r24, 0x01	; 1
    1836:	4c 01       	movw	r8, r24
    1838:	f7 01       	movw	r30, r14
    183a:	93 81       	ldd	r25, Z+3	; 0x03
    183c:	f6 01       	movw	r30, r12
    183e:	93 fd       	sbrc	r25, 3
    1840:	85 91       	lpm	r24, Z+
    1842:	93 ff       	sbrs	r25, 3
    1844:	81 91       	ld	r24, Z+
    1846:	6f 01       	movw	r12, r30
    1848:	88 23       	and	r24, r24
    184a:	09 f4       	brne	.+2      	; 0x184e <vfprintf+0x62>
    184c:	9e c1       	rjmp	.+828    	; 0x1b8a <vfprintf+0x39e>
    184e:	85 32       	cpi	r24, 0x25	; 37
    1850:	39 f4       	brne	.+14     	; 0x1860 <vfprintf+0x74>
    1852:	93 fd       	sbrc	r25, 3
    1854:	85 91       	lpm	r24, Z+
    1856:	93 ff       	sbrs	r25, 3
    1858:	81 91       	ld	r24, Z+
    185a:	6f 01       	movw	r12, r30
    185c:	85 32       	cpi	r24, 0x25	; 37
    185e:	21 f4       	brne	.+8      	; 0x1868 <vfprintf+0x7c>
    1860:	b7 01       	movw	r22, r14
    1862:	90 e0       	ldi	r25, 0x00	; 0
    1864:	0f d3       	rcall	.+1566   	; 0x1e84 <fputc>
    1866:	e8 cf       	rjmp	.-48     	; 0x1838 <vfprintf+0x4c>
    1868:	51 2c       	mov	r5, r1
    186a:	31 2c       	mov	r3, r1
    186c:	20 e0       	ldi	r18, 0x00	; 0
    186e:	20 32       	cpi	r18, 0x20	; 32
    1870:	a0 f4       	brcc	.+40     	; 0x189a <vfprintf+0xae>
    1872:	8b 32       	cpi	r24, 0x2B	; 43
    1874:	69 f0       	breq	.+26     	; 0x1890 <vfprintf+0xa4>
    1876:	30 f4       	brcc	.+12     	; 0x1884 <vfprintf+0x98>
    1878:	80 32       	cpi	r24, 0x20	; 32
    187a:	59 f0       	breq	.+22     	; 0x1892 <vfprintf+0xa6>
    187c:	83 32       	cpi	r24, 0x23	; 35
    187e:	69 f4       	brne	.+26     	; 0x189a <vfprintf+0xae>
    1880:	20 61       	ori	r18, 0x10	; 16
    1882:	2c c0       	rjmp	.+88     	; 0x18dc <vfprintf+0xf0>
    1884:	8d 32       	cpi	r24, 0x2D	; 45
    1886:	39 f0       	breq	.+14     	; 0x1896 <vfprintf+0xaa>
    1888:	80 33       	cpi	r24, 0x30	; 48
    188a:	39 f4       	brne	.+14     	; 0x189a <vfprintf+0xae>
    188c:	21 60       	ori	r18, 0x01	; 1
    188e:	26 c0       	rjmp	.+76     	; 0x18dc <vfprintf+0xf0>
    1890:	22 60       	ori	r18, 0x02	; 2
    1892:	24 60       	ori	r18, 0x04	; 4
    1894:	23 c0       	rjmp	.+70     	; 0x18dc <vfprintf+0xf0>
    1896:	28 60       	ori	r18, 0x08	; 8
    1898:	21 c0       	rjmp	.+66     	; 0x18dc <vfprintf+0xf0>
    189a:	27 fd       	sbrc	r18, 7
    189c:	27 c0       	rjmp	.+78     	; 0x18ec <vfprintf+0x100>
    189e:	30 ed       	ldi	r19, 0xD0	; 208
    18a0:	38 0f       	add	r19, r24
    18a2:	3a 30       	cpi	r19, 0x0A	; 10
    18a4:	78 f4       	brcc	.+30     	; 0x18c4 <vfprintf+0xd8>
    18a6:	26 ff       	sbrs	r18, 6
    18a8:	06 c0       	rjmp	.+12     	; 0x18b6 <vfprintf+0xca>
    18aa:	fa e0       	ldi	r31, 0x0A	; 10
    18ac:	5f 9e       	mul	r5, r31
    18ae:	30 0d       	add	r19, r0
    18b0:	11 24       	eor	r1, r1
    18b2:	53 2e       	mov	r5, r19
    18b4:	13 c0       	rjmp	.+38     	; 0x18dc <vfprintf+0xf0>
    18b6:	8a e0       	ldi	r24, 0x0A	; 10
    18b8:	38 9e       	mul	r3, r24
    18ba:	30 0d       	add	r19, r0
    18bc:	11 24       	eor	r1, r1
    18be:	33 2e       	mov	r3, r19
    18c0:	20 62       	ori	r18, 0x20	; 32
    18c2:	0c c0       	rjmp	.+24     	; 0x18dc <vfprintf+0xf0>
    18c4:	8e 32       	cpi	r24, 0x2E	; 46
    18c6:	21 f4       	brne	.+8      	; 0x18d0 <vfprintf+0xe4>
    18c8:	26 fd       	sbrc	r18, 6
    18ca:	5f c1       	rjmp	.+702    	; 0x1b8a <vfprintf+0x39e>
    18cc:	20 64       	ori	r18, 0x40	; 64
    18ce:	06 c0       	rjmp	.+12     	; 0x18dc <vfprintf+0xf0>
    18d0:	8c 36       	cpi	r24, 0x6C	; 108
    18d2:	11 f4       	brne	.+4      	; 0x18d8 <vfprintf+0xec>
    18d4:	20 68       	ori	r18, 0x80	; 128
    18d6:	02 c0       	rjmp	.+4      	; 0x18dc <vfprintf+0xf0>
    18d8:	88 36       	cpi	r24, 0x68	; 104
    18da:	41 f4       	brne	.+16     	; 0x18ec <vfprintf+0x100>
    18dc:	f6 01       	movw	r30, r12
    18de:	93 fd       	sbrc	r25, 3
    18e0:	85 91       	lpm	r24, Z+
    18e2:	93 ff       	sbrs	r25, 3
    18e4:	81 91       	ld	r24, Z+
    18e6:	6f 01       	movw	r12, r30
    18e8:	81 11       	cpse	r24, r1
    18ea:	c1 cf       	rjmp	.-126    	; 0x186e <vfprintf+0x82>
    18ec:	98 2f       	mov	r25, r24
    18ee:	9f 7d       	andi	r25, 0xDF	; 223
    18f0:	95 54       	subi	r25, 0x45	; 69
    18f2:	93 30       	cpi	r25, 0x03	; 3
    18f4:	28 f4       	brcc	.+10     	; 0x1900 <vfprintf+0x114>
    18f6:	0c 5f       	subi	r16, 0xFC	; 252
    18f8:	1f 4f       	sbci	r17, 0xFF	; 255
    18fa:	ff e3       	ldi	r31, 0x3F	; 63
    18fc:	f9 83       	std	Y+1, r31	; 0x01
    18fe:	0d c0       	rjmp	.+26     	; 0x191a <vfprintf+0x12e>
    1900:	83 36       	cpi	r24, 0x63	; 99
    1902:	31 f0       	breq	.+12     	; 0x1910 <vfprintf+0x124>
    1904:	83 37       	cpi	r24, 0x73	; 115
    1906:	71 f0       	breq	.+28     	; 0x1924 <vfprintf+0x138>
    1908:	83 35       	cpi	r24, 0x53	; 83
    190a:	09 f0       	breq	.+2      	; 0x190e <vfprintf+0x122>
    190c:	57 c0       	rjmp	.+174    	; 0x19bc <vfprintf+0x1d0>
    190e:	21 c0       	rjmp	.+66     	; 0x1952 <vfprintf+0x166>
    1910:	f8 01       	movw	r30, r16
    1912:	80 81       	ld	r24, Z
    1914:	89 83       	std	Y+1, r24	; 0x01
    1916:	0e 5f       	subi	r16, 0xFE	; 254
    1918:	1f 4f       	sbci	r17, 0xFF	; 255
    191a:	44 24       	eor	r4, r4
    191c:	43 94       	inc	r4
    191e:	51 2c       	mov	r5, r1
    1920:	54 01       	movw	r10, r8
    1922:	14 c0       	rjmp	.+40     	; 0x194c <vfprintf+0x160>
    1924:	38 01       	movw	r6, r16
    1926:	f2 e0       	ldi	r31, 0x02	; 2
    1928:	6f 0e       	add	r6, r31
    192a:	71 1c       	adc	r7, r1
    192c:	f8 01       	movw	r30, r16
    192e:	a0 80       	ld	r10, Z
    1930:	b1 80       	ldd	r11, Z+1	; 0x01
    1932:	26 ff       	sbrs	r18, 6
    1934:	03 c0       	rjmp	.+6      	; 0x193c <vfprintf+0x150>
    1936:	65 2d       	mov	r22, r5
    1938:	70 e0       	ldi	r23, 0x00	; 0
    193a:	02 c0       	rjmp	.+4      	; 0x1940 <vfprintf+0x154>
    193c:	6f ef       	ldi	r22, 0xFF	; 255
    193e:	7f ef       	ldi	r23, 0xFF	; 255
    1940:	c5 01       	movw	r24, r10
    1942:	2c 87       	std	Y+12, r18	; 0x0c
    1944:	94 d2       	rcall	.+1320   	; 0x1e6e <strnlen>
    1946:	2c 01       	movw	r4, r24
    1948:	83 01       	movw	r16, r6
    194a:	2c 85       	ldd	r18, Y+12	; 0x0c
    194c:	2f 77       	andi	r18, 0x7F	; 127
    194e:	22 2e       	mov	r2, r18
    1950:	16 c0       	rjmp	.+44     	; 0x197e <vfprintf+0x192>
    1952:	38 01       	movw	r6, r16
    1954:	f2 e0       	ldi	r31, 0x02	; 2
    1956:	6f 0e       	add	r6, r31
    1958:	71 1c       	adc	r7, r1
    195a:	f8 01       	movw	r30, r16
    195c:	a0 80       	ld	r10, Z
    195e:	b1 80       	ldd	r11, Z+1	; 0x01
    1960:	26 ff       	sbrs	r18, 6
    1962:	03 c0       	rjmp	.+6      	; 0x196a <vfprintf+0x17e>
    1964:	65 2d       	mov	r22, r5
    1966:	70 e0       	ldi	r23, 0x00	; 0
    1968:	02 c0       	rjmp	.+4      	; 0x196e <vfprintf+0x182>
    196a:	6f ef       	ldi	r22, 0xFF	; 255
    196c:	7f ef       	ldi	r23, 0xFF	; 255
    196e:	c5 01       	movw	r24, r10
    1970:	2c 87       	std	Y+12, r18	; 0x0c
    1972:	6b d2       	rcall	.+1238   	; 0x1e4a <strnlen_P>
    1974:	2c 01       	movw	r4, r24
    1976:	2c 85       	ldd	r18, Y+12	; 0x0c
    1978:	20 68       	ori	r18, 0x80	; 128
    197a:	22 2e       	mov	r2, r18
    197c:	83 01       	movw	r16, r6
    197e:	23 fc       	sbrc	r2, 3
    1980:	19 c0       	rjmp	.+50     	; 0x19b4 <vfprintf+0x1c8>
    1982:	83 2d       	mov	r24, r3
    1984:	90 e0       	ldi	r25, 0x00	; 0
    1986:	48 16       	cp	r4, r24
    1988:	59 06       	cpc	r5, r25
    198a:	a0 f4       	brcc	.+40     	; 0x19b4 <vfprintf+0x1c8>
    198c:	b7 01       	movw	r22, r14
    198e:	80 e2       	ldi	r24, 0x20	; 32
    1990:	90 e0       	ldi	r25, 0x00	; 0
    1992:	78 d2       	rcall	.+1264   	; 0x1e84 <fputc>
    1994:	3a 94       	dec	r3
    1996:	f5 cf       	rjmp	.-22     	; 0x1982 <vfprintf+0x196>
    1998:	f5 01       	movw	r30, r10
    199a:	27 fc       	sbrc	r2, 7
    199c:	85 91       	lpm	r24, Z+
    199e:	27 fe       	sbrs	r2, 7
    19a0:	81 91       	ld	r24, Z+
    19a2:	5f 01       	movw	r10, r30
    19a4:	b7 01       	movw	r22, r14
    19a6:	90 e0       	ldi	r25, 0x00	; 0
    19a8:	6d d2       	rcall	.+1242   	; 0x1e84 <fputc>
    19aa:	31 10       	cpse	r3, r1
    19ac:	3a 94       	dec	r3
    19ae:	f1 e0       	ldi	r31, 0x01	; 1
    19b0:	4f 1a       	sub	r4, r31
    19b2:	51 08       	sbc	r5, r1
    19b4:	41 14       	cp	r4, r1
    19b6:	51 04       	cpc	r5, r1
    19b8:	79 f7       	brne	.-34     	; 0x1998 <vfprintf+0x1ac>
    19ba:	de c0       	rjmp	.+444    	; 0x1b78 <vfprintf+0x38c>
    19bc:	84 36       	cpi	r24, 0x64	; 100
    19be:	11 f0       	breq	.+4      	; 0x19c4 <vfprintf+0x1d8>
    19c0:	89 36       	cpi	r24, 0x69	; 105
    19c2:	31 f5       	brne	.+76     	; 0x1a10 <vfprintf+0x224>
    19c4:	f8 01       	movw	r30, r16
    19c6:	27 ff       	sbrs	r18, 7
    19c8:	07 c0       	rjmp	.+14     	; 0x19d8 <vfprintf+0x1ec>
    19ca:	60 81       	ld	r22, Z
    19cc:	71 81       	ldd	r23, Z+1	; 0x01
    19ce:	82 81       	ldd	r24, Z+2	; 0x02
    19d0:	93 81       	ldd	r25, Z+3	; 0x03
    19d2:	0c 5f       	subi	r16, 0xFC	; 252
    19d4:	1f 4f       	sbci	r17, 0xFF	; 255
    19d6:	08 c0       	rjmp	.+16     	; 0x19e8 <vfprintf+0x1fc>
    19d8:	60 81       	ld	r22, Z
    19da:	71 81       	ldd	r23, Z+1	; 0x01
    19dc:	88 27       	eor	r24, r24
    19de:	77 fd       	sbrc	r23, 7
    19e0:	80 95       	com	r24
    19e2:	98 2f       	mov	r25, r24
    19e4:	0e 5f       	subi	r16, 0xFE	; 254
    19e6:	1f 4f       	sbci	r17, 0xFF	; 255
    19e8:	2f 76       	andi	r18, 0x6F	; 111
    19ea:	b2 2e       	mov	r11, r18
    19ec:	97 ff       	sbrs	r25, 7
    19ee:	09 c0       	rjmp	.+18     	; 0x1a02 <vfprintf+0x216>
    19f0:	90 95       	com	r25
    19f2:	80 95       	com	r24
    19f4:	70 95       	com	r23
    19f6:	61 95       	neg	r22
    19f8:	7f 4f       	sbci	r23, 0xFF	; 255
    19fa:	8f 4f       	sbci	r24, 0xFF	; 255
    19fc:	9f 4f       	sbci	r25, 0xFF	; 255
    19fe:	20 68       	ori	r18, 0x80	; 128
    1a00:	b2 2e       	mov	r11, r18
    1a02:	2a e0       	ldi	r18, 0x0A	; 10
    1a04:	30 e0       	ldi	r19, 0x00	; 0
    1a06:	a4 01       	movw	r20, r8
    1a08:	6f d2       	rcall	.+1246   	; 0x1ee8 <__ultoa_invert>
    1a0a:	a8 2e       	mov	r10, r24
    1a0c:	a8 18       	sub	r10, r8
    1a0e:	43 c0       	rjmp	.+134    	; 0x1a96 <vfprintf+0x2aa>
    1a10:	85 37       	cpi	r24, 0x75	; 117
    1a12:	29 f4       	brne	.+10     	; 0x1a1e <vfprintf+0x232>
    1a14:	2f 7e       	andi	r18, 0xEF	; 239
    1a16:	b2 2e       	mov	r11, r18
    1a18:	2a e0       	ldi	r18, 0x0A	; 10
    1a1a:	30 e0       	ldi	r19, 0x00	; 0
    1a1c:	25 c0       	rjmp	.+74     	; 0x1a68 <vfprintf+0x27c>
    1a1e:	f2 2f       	mov	r31, r18
    1a20:	f9 7f       	andi	r31, 0xF9	; 249
    1a22:	bf 2e       	mov	r11, r31
    1a24:	8f 36       	cpi	r24, 0x6F	; 111
    1a26:	c1 f0       	breq	.+48     	; 0x1a58 <vfprintf+0x26c>
    1a28:	18 f4       	brcc	.+6      	; 0x1a30 <vfprintf+0x244>
    1a2a:	88 35       	cpi	r24, 0x58	; 88
    1a2c:	79 f0       	breq	.+30     	; 0x1a4c <vfprintf+0x260>
    1a2e:	ad c0       	rjmp	.+346    	; 0x1b8a <vfprintf+0x39e>
    1a30:	80 37       	cpi	r24, 0x70	; 112
    1a32:	19 f0       	breq	.+6      	; 0x1a3a <vfprintf+0x24e>
    1a34:	88 37       	cpi	r24, 0x78	; 120
    1a36:	21 f0       	breq	.+8      	; 0x1a40 <vfprintf+0x254>
    1a38:	a8 c0       	rjmp	.+336    	; 0x1b8a <vfprintf+0x39e>
    1a3a:	2f 2f       	mov	r18, r31
    1a3c:	20 61       	ori	r18, 0x10	; 16
    1a3e:	b2 2e       	mov	r11, r18
    1a40:	b4 fe       	sbrs	r11, 4
    1a42:	0d c0       	rjmp	.+26     	; 0x1a5e <vfprintf+0x272>
    1a44:	8b 2d       	mov	r24, r11
    1a46:	84 60       	ori	r24, 0x04	; 4
    1a48:	b8 2e       	mov	r11, r24
    1a4a:	09 c0       	rjmp	.+18     	; 0x1a5e <vfprintf+0x272>
    1a4c:	24 ff       	sbrs	r18, 4
    1a4e:	0a c0       	rjmp	.+20     	; 0x1a64 <vfprintf+0x278>
    1a50:	9f 2f       	mov	r25, r31
    1a52:	96 60       	ori	r25, 0x06	; 6
    1a54:	b9 2e       	mov	r11, r25
    1a56:	06 c0       	rjmp	.+12     	; 0x1a64 <vfprintf+0x278>
    1a58:	28 e0       	ldi	r18, 0x08	; 8
    1a5a:	30 e0       	ldi	r19, 0x00	; 0
    1a5c:	05 c0       	rjmp	.+10     	; 0x1a68 <vfprintf+0x27c>
    1a5e:	20 e1       	ldi	r18, 0x10	; 16
    1a60:	30 e0       	ldi	r19, 0x00	; 0
    1a62:	02 c0       	rjmp	.+4      	; 0x1a68 <vfprintf+0x27c>
    1a64:	20 e1       	ldi	r18, 0x10	; 16
    1a66:	32 e0       	ldi	r19, 0x02	; 2
    1a68:	f8 01       	movw	r30, r16
    1a6a:	b7 fe       	sbrs	r11, 7
    1a6c:	07 c0       	rjmp	.+14     	; 0x1a7c <vfprintf+0x290>
    1a6e:	60 81       	ld	r22, Z
    1a70:	71 81       	ldd	r23, Z+1	; 0x01
    1a72:	82 81       	ldd	r24, Z+2	; 0x02
    1a74:	93 81       	ldd	r25, Z+3	; 0x03
    1a76:	0c 5f       	subi	r16, 0xFC	; 252
    1a78:	1f 4f       	sbci	r17, 0xFF	; 255
    1a7a:	06 c0       	rjmp	.+12     	; 0x1a88 <vfprintf+0x29c>
    1a7c:	60 81       	ld	r22, Z
    1a7e:	71 81       	ldd	r23, Z+1	; 0x01
    1a80:	80 e0       	ldi	r24, 0x00	; 0
    1a82:	90 e0       	ldi	r25, 0x00	; 0
    1a84:	0e 5f       	subi	r16, 0xFE	; 254
    1a86:	1f 4f       	sbci	r17, 0xFF	; 255
    1a88:	a4 01       	movw	r20, r8
    1a8a:	2e d2       	rcall	.+1116   	; 0x1ee8 <__ultoa_invert>
    1a8c:	a8 2e       	mov	r10, r24
    1a8e:	a8 18       	sub	r10, r8
    1a90:	fb 2d       	mov	r31, r11
    1a92:	ff 77       	andi	r31, 0x7F	; 127
    1a94:	bf 2e       	mov	r11, r31
    1a96:	b6 fe       	sbrs	r11, 6
    1a98:	0b c0       	rjmp	.+22     	; 0x1ab0 <vfprintf+0x2c4>
    1a9a:	2b 2d       	mov	r18, r11
    1a9c:	2e 7f       	andi	r18, 0xFE	; 254
    1a9e:	a5 14       	cp	r10, r5
    1aa0:	50 f4       	brcc	.+20     	; 0x1ab6 <vfprintf+0x2ca>
    1aa2:	b4 fe       	sbrs	r11, 4
    1aa4:	0a c0       	rjmp	.+20     	; 0x1aba <vfprintf+0x2ce>
    1aa6:	b2 fc       	sbrc	r11, 2
    1aa8:	08 c0       	rjmp	.+16     	; 0x1aba <vfprintf+0x2ce>
    1aaa:	2b 2d       	mov	r18, r11
    1aac:	2e 7e       	andi	r18, 0xEE	; 238
    1aae:	05 c0       	rjmp	.+10     	; 0x1aba <vfprintf+0x2ce>
    1ab0:	7a 2c       	mov	r7, r10
    1ab2:	2b 2d       	mov	r18, r11
    1ab4:	03 c0       	rjmp	.+6      	; 0x1abc <vfprintf+0x2d0>
    1ab6:	7a 2c       	mov	r7, r10
    1ab8:	01 c0       	rjmp	.+2      	; 0x1abc <vfprintf+0x2d0>
    1aba:	75 2c       	mov	r7, r5
    1abc:	24 ff       	sbrs	r18, 4
    1abe:	0d c0       	rjmp	.+26     	; 0x1ada <vfprintf+0x2ee>
    1ac0:	fe 01       	movw	r30, r28
    1ac2:	ea 0d       	add	r30, r10
    1ac4:	f1 1d       	adc	r31, r1
    1ac6:	80 81       	ld	r24, Z
    1ac8:	80 33       	cpi	r24, 0x30	; 48
    1aca:	11 f4       	brne	.+4      	; 0x1ad0 <vfprintf+0x2e4>
    1acc:	29 7e       	andi	r18, 0xE9	; 233
    1ace:	09 c0       	rjmp	.+18     	; 0x1ae2 <vfprintf+0x2f6>
    1ad0:	22 ff       	sbrs	r18, 2
    1ad2:	06 c0       	rjmp	.+12     	; 0x1ae0 <vfprintf+0x2f4>
    1ad4:	73 94       	inc	r7
    1ad6:	73 94       	inc	r7
    1ad8:	04 c0       	rjmp	.+8      	; 0x1ae2 <vfprintf+0x2f6>
    1ada:	82 2f       	mov	r24, r18
    1adc:	86 78       	andi	r24, 0x86	; 134
    1ade:	09 f0       	breq	.+2      	; 0x1ae2 <vfprintf+0x2f6>
    1ae0:	73 94       	inc	r7
    1ae2:	23 fd       	sbrc	r18, 3
    1ae4:	12 c0       	rjmp	.+36     	; 0x1b0a <vfprintf+0x31e>
    1ae6:	20 ff       	sbrs	r18, 0
    1ae8:	06 c0       	rjmp	.+12     	; 0x1af6 <vfprintf+0x30a>
    1aea:	5a 2c       	mov	r5, r10
    1aec:	73 14       	cp	r7, r3
    1aee:	18 f4       	brcc	.+6      	; 0x1af6 <vfprintf+0x30a>
    1af0:	53 0c       	add	r5, r3
    1af2:	57 18       	sub	r5, r7
    1af4:	73 2c       	mov	r7, r3
    1af6:	73 14       	cp	r7, r3
    1af8:	60 f4       	brcc	.+24     	; 0x1b12 <vfprintf+0x326>
    1afa:	b7 01       	movw	r22, r14
    1afc:	80 e2       	ldi	r24, 0x20	; 32
    1afe:	90 e0       	ldi	r25, 0x00	; 0
    1b00:	2c 87       	std	Y+12, r18	; 0x0c
    1b02:	c0 d1       	rcall	.+896    	; 0x1e84 <fputc>
    1b04:	73 94       	inc	r7
    1b06:	2c 85       	ldd	r18, Y+12	; 0x0c
    1b08:	f6 cf       	rjmp	.-20     	; 0x1af6 <vfprintf+0x30a>
    1b0a:	73 14       	cp	r7, r3
    1b0c:	10 f4       	brcc	.+4      	; 0x1b12 <vfprintf+0x326>
    1b0e:	37 18       	sub	r3, r7
    1b10:	01 c0       	rjmp	.+2      	; 0x1b14 <vfprintf+0x328>
    1b12:	31 2c       	mov	r3, r1
    1b14:	24 ff       	sbrs	r18, 4
    1b16:	11 c0       	rjmp	.+34     	; 0x1b3a <vfprintf+0x34e>
    1b18:	b7 01       	movw	r22, r14
    1b1a:	80 e3       	ldi	r24, 0x30	; 48
    1b1c:	90 e0       	ldi	r25, 0x00	; 0
    1b1e:	2c 87       	std	Y+12, r18	; 0x0c
    1b20:	b1 d1       	rcall	.+866    	; 0x1e84 <fputc>
    1b22:	2c 85       	ldd	r18, Y+12	; 0x0c
    1b24:	22 ff       	sbrs	r18, 2
    1b26:	16 c0       	rjmp	.+44     	; 0x1b54 <vfprintf+0x368>
    1b28:	21 ff       	sbrs	r18, 1
    1b2a:	03 c0       	rjmp	.+6      	; 0x1b32 <vfprintf+0x346>
    1b2c:	88 e5       	ldi	r24, 0x58	; 88
    1b2e:	90 e0       	ldi	r25, 0x00	; 0
    1b30:	02 c0       	rjmp	.+4      	; 0x1b36 <vfprintf+0x34a>
    1b32:	88 e7       	ldi	r24, 0x78	; 120
    1b34:	90 e0       	ldi	r25, 0x00	; 0
    1b36:	b7 01       	movw	r22, r14
    1b38:	0c c0       	rjmp	.+24     	; 0x1b52 <vfprintf+0x366>
    1b3a:	82 2f       	mov	r24, r18
    1b3c:	86 78       	andi	r24, 0x86	; 134
    1b3e:	51 f0       	breq	.+20     	; 0x1b54 <vfprintf+0x368>
    1b40:	21 fd       	sbrc	r18, 1
    1b42:	02 c0       	rjmp	.+4      	; 0x1b48 <vfprintf+0x35c>
    1b44:	80 e2       	ldi	r24, 0x20	; 32
    1b46:	01 c0       	rjmp	.+2      	; 0x1b4a <vfprintf+0x35e>
    1b48:	8b e2       	ldi	r24, 0x2B	; 43
    1b4a:	27 fd       	sbrc	r18, 7
    1b4c:	8d e2       	ldi	r24, 0x2D	; 45
    1b4e:	b7 01       	movw	r22, r14
    1b50:	90 e0       	ldi	r25, 0x00	; 0
    1b52:	98 d1       	rcall	.+816    	; 0x1e84 <fputc>
    1b54:	a5 14       	cp	r10, r5
    1b56:	30 f4       	brcc	.+12     	; 0x1b64 <vfprintf+0x378>
    1b58:	b7 01       	movw	r22, r14
    1b5a:	80 e3       	ldi	r24, 0x30	; 48
    1b5c:	90 e0       	ldi	r25, 0x00	; 0
    1b5e:	92 d1       	rcall	.+804    	; 0x1e84 <fputc>
    1b60:	5a 94       	dec	r5
    1b62:	f8 cf       	rjmp	.-16     	; 0x1b54 <vfprintf+0x368>
    1b64:	aa 94       	dec	r10
    1b66:	f4 01       	movw	r30, r8
    1b68:	ea 0d       	add	r30, r10
    1b6a:	f1 1d       	adc	r31, r1
    1b6c:	80 81       	ld	r24, Z
    1b6e:	b7 01       	movw	r22, r14
    1b70:	90 e0       	ldi	r25, 0x00	; 0
    1b72:	88 d1       	rcall	.+784    	; 0x1e84 <fputc>
    1b74:	a1 10       	cpse	r10, r1
    1b76:	f6 cf       	rjmp	.-20     	; 0x1b64 <vfprintf+0x378>
    1b78:	33 20       	and	r3, r3
    1b7a:	09 f4       	brne	.+2      	; 0x1b7e <vfprintf+0x392>
    1b7c:	5d ce       	rjmp	.-838    	; 0x1838 <vfprintf+0x4c>
    1b7e:	b7 01       	movw	r22, r14
    1b80:	80 e2       	ldi	r24, 0x20	; 32
    1b82:	90 e0       	ldi	r25, 0x00	; 0
    1b84:	7f d1       	rcall	.+766    	; 0x1e84 <fputc>
    1b86:	3a 94       	dec	r3
    1b88:	f7 cf       	rjmp	.-18     	; 0x1b78 <vfprintf+0x38c>
    1b8a:	f7 01       	movw	r30, r14
    1b8c:	86 81       	ldd	r24, Z+6	; 0x06
    1b8e:	97 81       	ldd	r25, Z+7	; 0x07
    1b90:	02 c0       	rjmp	.+4      	; 0x1b96 <vfprintf+0x3aa>
    1b92:	8f ef       	ldi	r24, 0xFF	; 255
    1b94:	9f ef       	ldi	r25, 0xFF	; 255
    1b96:	2c 96       	adiw	r28, 0x0c	; 12
    1b98:	0f b6       	in	r0, 0x3f	; 63
    1b9a:	f8 94       	cli
    1b9c:	de bf       	out	0x3e, r29	; 62
    1b9e:	0f be       	out	0x3f, r0	; 63
    1ba0:	cd bf       	out	0x3d, r28	; 61
    1ba2:	df 91       	pop	r29
    1ba4:	cf 91       	pop	r28
    1ba6:	1f 91       	pop	r17
    1ba8:	0f 91       	pop	r16
    1baa:	ff 90       	pop	r15
    1bac:	ef 90       	pop	r14
    1bae:	df 90       	pop	r13
    1bb0:	cf 90       	pop	r12
    1bb2:	bf 90       	pop	r11
    1bb4:	af 90       	pop	r10
    1bb6:	9f 90       	pop	r9
    1bb8:	8f 90       	pop	r8
    1bba:	7f 90       	pop	r7
    1bbc:	6f 90       	pop	r6
    1bbe:	5f 90       	pop	r5
    1bc0:	4f 90       	pop	r4
    1bc2:	3f 90       	pop	r3
    1bc4:	2f 90       	pop	r2
    1bc6:	08 95       	ret

00001bc8 <calloc>:
    1bc8:	0f 93       	push	r16
    1bca:	1f 93       	push	r17
    1bcc:	cf 93       	push	r28
    1bce:	df 93       	push	r29
    1bd0:	86 9f       	mul	r24, r22
    1bd2:	80 01       	movw	r16, r0
    1bd4:	87 9f       	mul	r24, r23
    1bd6:	10 0d       	add	r17, r0
    1bd8:	96 9f       	mul	r25, r22
    1bda:	10 0d       	add	r17, r0
    1bdc:	11 24       	eor	r1, r1
    1bde:	c8 01       	movw	r24, r16
    1be0:	0d d0       	rcall	.+26     	; 0x1bfc <malloc>
    1be2:	ec 01       	movw	r28, r24
    1be4:	00 97       	sbiw	r24, 0x00	; 0
    1be6:	21 f0       	breq	.+8      	; 0x1bf0 <calloc+0x28>
    1be8:	a8 01       	movw	r20, r16
    1bea:	60 e0       	ldi	r22, 0x00	; 0
    1bec:	70 e0       	ldi	r23, 0x00	; 0
    1bee:	38 d1       	rcall	.+624    	; 0x1e60 <memset>
    1bf0:	ce 01       	movw	r24, r28
    1bf2:	df 91       	pop	r29
    1bf4:	cf 91       	pop	r28
    1bf6:	1f 91       	pop	r17
    1bf8:	0f 91       	pop	r16
    1bfa:	08 95       	ret

00001bfc <malloc>:
    1bfc:	cf 93       	push	r28
    1bfe:	df 93       	push	r29
    1c00:	82 30       	cpi	r24, 0x02	; 2
    1c02:	91 05       	cpc	r25, r1
    1c04:	10 f4       	brcc	.+4      	; 0x1c0a <malloc+0xe>
    1c06:	82 e0       	ldi	r24, 0x02	; 2
    1c08:	90 e0       	ldi	r25, 0x00	; 0
    1c0a:	e0 91 66 03 	lds	r30, 0x0366
    1c0e:	f0 91 67 03 	lds	r31, 0x0367
    1c12:	20 e0       	ldi	r18, 0x00	; 0
    1c14:	30 e0       	ldi	r19, 0x00	; 0
    1c16:	a0 e0       	ldi	r26, 0x00	; 0
    1c18:	b0 e0       	ldi	r27, 0x00	; 0
    1c1a:	30 97       	sbiw	r30, 0x00	; 0
    1c1c:	39 f1       	breq	.+78     	; 0x1c6c <malloc+0x70>
    1c1e:	40 81       	ld	r20, Z
    1c20:	51 81       	ldd	r21, Z+1	; 0x01
    1c22:	48 17       	cp	r20, r24
    1c24:	59 07       	cpc	r21, r25
    1c26:	b8 f0       	brcs	.+46     	; 0x1c56 <malloc+0x5a>
    1c28:	48 17       	cp	r20, r24
    1c2a:	59 07       	cpc	r21, r25
    1c2c:	71 f4       	brne	.+28     	; 0x1c4a <malloc+0x4e>
    1c2e:	82 81       	ldd	r24, Z+2	; 0x02
    1c30:	93 81       	ldd	r25, Z+3	; 0x03
    1c32:	10 97       	sbiw	r26, 0x00	; 0
    1c34:	29 f0       	breq	.+10     	; 0x1c40 <malloc+0x44>
    1c36:	13 96       	adiw	r26, 0x03	; 3
    1c38:	9c 93       	st	X, r25
    1c3a:	8e 93       	st	-X, r24
    1c3c:	12 97       	sbiw	r26, 0x02	; 2
    1c3e:	2c c0       	rjmp	.+88     	; 0x1c98 <malloc+0x9c>
    1c40:	90 93 67 03 	sts	0x0367, r25
    1c44:	80 93 66 03 	sts	0x0366, r24
    1c48:	27 c0       	rjmp	.+78     	; 0x1c98 <malloc+0x9c>
    1c4a:	21 15       	cp	r18, r1
    1c4c:	31 05       	cpc	r19, r1
    1c4e:	31 f0       	breq	.+12     	; 0x1c5c <malloc+0x60>
    1c50:	42 17       	cp	r20, r18
    1c52:	53 07       	cpc	r21, r19
    1c54:	18 f0       	brcs	.+6      	; 0x1c5c <malloc+0x60>
    1c56:	a9 01       	movw	r20, r18
    1c58:	db 01       	movw	r26, r22
    1c5a:	01 c0       	rjmp	.+2      	; 0x1c5e <malloc+0x62>
    1c5c:	ef 01       	movw	r28, r30
    1c5e:	9a 01       	movw	r18, r20
    1c60:	bd 01       	movw	r22, r26
    1c62:	df 01       	movw	r26, r30
    1c64:	02 80       	ldd	r0, Z+2	; 0x02
    1c66:	f3 81       	ldd	r31, Z+3	; 0x03
    1c68:	e0 2d       	mov	r30, r0
    1c6a:	d7 cf       	rjmp	.-82     	; 0x1c1a <malloc+0x1e>
    1c6c:	21 15       	cp	r18, r1
    1c6e:	31 05       	cpc	r19, r1
    1c70:	f9 f0       	breq	.+62     	; 0x1cb0 <malloc+0xb4>
    1c72:	28 1b       	sub	r18, r24
    1c74:	39 0b       	sbc	r19, r25
    1c76:	24 30       	cpi	r18, 0x04	; 4
    1c78:	31 05       	cpc	r19, r1
    1c7a:	80 f4       	brcc	.+32     	; 0x1c9c <malloc+0xa0>
    1c7c:	8a 81       	ldd	r24, Y+2	; 0x02
    1c7e:	9b 81       	ldd	r25, Y+3	; 0x03
    1c80:	61 15       	cp	r22, r1
    1c82:	71 05       	cpc	r23, r1
    1c84:	21 f0       	breq	.+8      	; 0x1c8e <malloc+0x92>
    1c86:	fb 01       	movw	r30, r22
    1c88:	93 83       	std	Z+3, r25	; 0x03
    1c8a:	82 83       	std	Z+2, r24	; 0x02
    1c8c:	04 c0       	rjmp	.+8      	; 0x1c96 <malloc+0x9a>
    1c8e:	90 93 67 03 	sts	0x0367, r25
    1c92:	80 93 66 03 	sts	0x0366, r24
    1c96:	fe 01       	movw	r30, r28
    1c98:	32 96       	adiw	r30, 0x02	; 2
    1c9a:	44 c0       	rjmp	.+136    	; 0x1d24 <malloc+0x128>
    1c9c:	fe 01       	movw	r30, r28
    1c9e:	e2 0f       	add	r30, r18
    1ca0:	f3 1f       	adc	r31, r19
    1ca2:	81 93       	st	Z+, r24
    1ca4:	91 93       	st	Z+, r25
    1ca6:	22 50       	subi	r18, 0x02	; 2
    1ca8:	31 09       	sbc	r19, r1
    1caa:	39 83       	std	Y+1, r19	; 0x01
    1cac:	28 83       	st	Y, r18
    1cae:	3a c0       	rjmp	.+116    	; 0x1d24 <malloc+0x128>
    1cb0:	20 91 64 03 	lds	r18, 0x0364
    1cb4:	30 91 65 03 	lds	r19, 0x0365
    1cb8:	23 2b       	or	r18, r19
    1cba:	41 f4       	brne	.+16     	; 0x1ccc <malloc+0xd0>
    1cbc:	20 91 02 02 	lds	r18, 0x0202
    1cc0:	30 91 03 02 	lds	r19, 0x0203
    1cc4:	30 93 65 03 	sts	0x0365, r19
    1cc8:	20 93 64 03 	sts	0x0364, r18
    1ccc:	20 91 00 02 	lds	r18, 0x0200
    1cd0:	30 91 01 02 	lds	r19, 0x0201
    1cd4:	21 15       	cp	r18, r1
    1cd6:	31 05       	cpc	r19, r1
    1cd8:	41 f4       	brne	.+16     	; 0x1cea <malloc+0xee>
    1cda:	2d b7       	in	r18, 0x3d	; 61
    1cdc:	3e b7       	in	r19, 0x3e	; 62
    1cde:	40 91 04 02 	lds	r20, 0x0204
    1ce2:	50 91 05 02 	lds	r21, 0x0205
    1ce6:	24 1b       	sub	r18, r20
    1ce8:	35 0b       	sbc	r19, r21
    1cea:	e0 91 64 03 	lds	r30, 0x0364
    1cee:	f0 91 65 03 	lds	r31, 0x0365
    1cf2:	e2 17       	cp	r30, r18
    1cf4:	f3 07       	cpc	r31, r19
    1cf6:	a0 f4       	brcc	.+40     	; 0x1d20 <malloc+0x124>
    1cf8:	2e 1b       	sub	r18, r30
    1cfa:	3f 0b       	sbc	r19, r31
    1cfc:	28 17       	cp	r18, r24
    1cfe:	39 07       	cpc	r19, r25
    1d00:	78 f0       	brcs	.+30     	; 0x1d20 <malloc+0x124>
    1d02:	ac 01       	movw	r20, r24
    1d04:	4e 5f       	subi	r20, 0xFE	; 254
    1d06:	5f 4f       	sbci	r21, 0xFF	; 255
    1d08:	24 17       	cp	r18, r20
    1d0a:	35 07       	cpc	r19, r21
    1d0c:	48 f0       	brcs	.+18     	; 0x1d20 <malloc+0x124>
    1d0e:	4e 0f       	add	r20, r30
    1d10:	5f 1f       	adc	r21, r31
    1d12:	50 93 65 03 	sts	0x0365, r21
    1d16:	40 93 64 03 	sts	0x0364, r20
    1d1a:	81 93       	st	Z+, r24
    1d1c:	91 93       	st	Z+, r25
    1d1e:	02 c0       	rjmp	.+4      	; 0x1d24 <malloc+0x128>
    1d20:	e0 e0       	ldi	r30, 0x00	; 0
    1d22:	f0 e0       	ldi	r31, 0x00	; 0
    1d24:	cf 01       	movw	r24, r30
    1d26:	df 91       	pop	r29
    1d28:	cf 91       	pop	r28
    1d2a:	08 95       	ret

00001d2c <free>:
    1d2c:	cf 93       	push	r28
    1d2e:	df 93       	push	r29
    1d30:	00 97       	sbiw	r24, 0x00	; 0
    1d32:	09 f4       	brne	.+2      	; 0x1d36 <free+0xa>
    1d34:	87 c0       	rjmp	.+270    	; 0x1e44 <free+0x118>
    1d36:	fc 01       	movw	r30, r24
    1d38:	32 97       	sbiw	r30, 0x02	; 2
    1d3a:	13 82       	std	Z+3, r1	; 0x03
    1d3c:	12 82       	std	Z+2, r1	; 0x02
    1d3e:	c0 91 66 03 	lds	r28, 0x0366
    1d42:	d0 91 67 03 	lds	r29, 0x0367
    1d46:	20 97       	sbiw	r28, 0x00	; 0
    1d48:	81 f4       	brne	.+32     	; 0x1d6a <free+0x3e>
    1d4a:	20 81       	ld	r18, Z
    1d4c:	31 81       	ldd	r19, Z+1	; 0x01
    1d4e:	28 0f       	add	r18, r24
    1d50:	39 1f       	adc	r19, r25
    1d52:	80 91 64 03 	lds	r24, 0x0364
    1d56:	90 91 65 03 	lds	r25, 0x0365
    1d5a:	82 17       	cp	r24, r18
    1d5c:	93 07       	cpc	r25, r19
    1d5e:	79 f5       	brne	.+94     	; 0x1dbe <free+0x92>
    1d60:	f0 93 65 03 	sts	0x0365, r31
    1d64:	e0 93 64 03 	sts	0x0364, r30
    1d68:	6d c0       	rjmp	.+218    	; 0x1e44 <free+0x118>
    1d6a:	de 01       	movw	r26, r28
    1d6c:	20 e0       	ldi	r18, 0x00	; 0
    1d6e:	30 e0       	ldi	r19, 0x00	; 0
    1d70:	ae 17       	cp	r26, r30
    1d72:	bf 07       	cpc	r27, r31
    1d74:	50 f4       	brcc	.+20     	; 0x1d8a <free+0x5e>
    1d76:	12 96       	adiw	r26, 0x02	; 2
    1d78:	4d 91       	ld	r20, X+
    1d7a:	5c 91       	ld	r21, X
    1d7c:	13 97       	sbiw	r26, 0x03	; 3
    1d7e:	9d 01       	movw	r18, r26
    1d80:	41 15       	cp	r20, r1
    1d82:	51 05       	cpc	r21, r1
    1d84:	09 f1       	breq	.+66     	; 0x1dc8 <free+0x9c>
    1d86:	da 01       	movw	r26, r20
    1d88:	f3 cf       	rjmp	.-26     	; 0x1d70 <free+0x44>
    1d8a:	b3 83       	std	Z+3, r27	; 0x03
    1d8c:	a2 83       	std	Z+2, r26	; 0x02
    1d8e:	40 81       	ld	r20, Z
    1d90:	51 81       	ldd	r21, Z+1	; 0x01
    1d92:	84 0f       	add	r24, r20
    1d94:	95 1f       	adc	r25, r21
    1d96:	8a 17       	cp	r24, r26
    1d98:	9b 07       	cpc	r25, r27
    1d9a:	71 f4       	brne	.+28     	; 0x1db8 <free+0x8c>
    1d9c:	8d 91       	ld	r24, X+
    1d9e:	9c 91       	ld	r25, X
    1da0:	11 97       	sbiw	r26, 0x01	; 1
    1da2:	84 0f       	add	r24, r20
    1da4:	95 1f       	adc	r25, r21
    1da6:	02 96       	adiw	r24, 0x02	; 2
    1da8:	91 83       	std	Z+1, r25	; 0x01
    1daa:	80 83       	st	Z, r24
    1dac:	12 96       	adiw	r26, 0x02	; 2
    1dae:	8d 91       	ld	r24, X+
    1db0:	9c 91       	ld	r25, X
    1db2:	13 97       	sbiw	r26, 0x03	; 3
    1db4:	93 83       	std	Z+3, r25	; 0x03
    1db6:	82 83       	std	Z+2, r24	; 0x02
    1db8:	21 15       	cp	r18, r1
    1dba:	31 05       	cpc	r19, r1
    1dbc:	29 f4       	brne	.+10     	; 0x1dc8 <free+0x9c>
    1dbe:	f0 93 67 03 	sts	0x0367, r31
    1dc2:	e0 93 66 03 	sts	0x0366, r30
    1dc6:	3e c0       	rjmp	.+124    	; 0x1e44 <free+0x118>
    1dc8:	d9 01       	movw	r26, r18
    1dca:	13 96       	adiw	r26, 0x03	; 3
    1dcc:	fc 93       	st	X, r31
    1dce:	ee 93       	st	-X, r30
    1dd0:	12 97       	sbiw	r26, 0x02	; 2
    1dd2:	4d 91       	ld	r20, X+
    1dd4:	5d 91       	ld	r21, X+
    1dd6:	a4 0f       	add	r26, r20
    1dd8:	b5 1f       	adc	r27, r21
    1dda:	ea 17       	cp	r30, r26
    1ddc:	fb 07       	cpc	r31, r27
    1dde:	79 f4       	brne	.+30     	; 0x1dfe <free+0xd2>
    1de0:	80 81       	ld	r24, Z
    1de2:	91 81       	ldd	r25, Z+1	; 0x01
    1de4:	84 0f       	add	r24, r20
    1de6:	95 1f       	adc	r25, r21
    1de8:	02 96       	adiw	r24, 0x02	; 2
    1dea:	d9 01       	movw	r26, r18
    1dec:	11 96       	adiw	r26, 0x01	; 1
    1dee:	9c 93       	st	X, r25
    1df0:	8e 93       	st	-X, r24
    1df2:	82 81       	ldd	r24, Z+2	; 0x02
    1df4:	93 81       	ldd	r25, Z+3	; 0x03
    1df6:	13 96       	adiw	r26, 0x03	; 3
    1df8:	9c 93       	st	X, r25
    1dfa:	8e 93       	st	-X, r24
    1dfc:	12 97       	sbiw	r26, 0x02	; 2
    1dfe:	e0 e0       	ldi	r30, 0x00	; 0
    1e00:	f0 e0       	ldi	r31, 0x00	; 0
    1e02:	8a 81       	ldd	r24, Y+2	; 0x02
    1e04:	9b 81       	ldd	r25, Y+3	; 0x03
    1e06:	00 97       	sbiw	r24, 0x00	; 0
    1e08:	19 f0       	breq	.+6      	; 0x1e10 <free+0xe4>
    1e0a:	fe 01       	movw	r30, r28
    1e0c:	ec 01       	movw	r28, r24
    1e0e:	f9 cf       	rjmp	.-14     	; 0x1e02 <free+0xd6>
    1e10:	ce 01       	movw	r24, r28
    1e12:	02 96       	adiw	r24, 0x02	; 2
    1e14:	28 81       	ld	r18, Y
    1e16:	39 81       	ldd	r19, Y+1	; 0x01
    1e18:	82 0f       	add	r24, r18
    1e1a:	93 1f       	adc	r25, r19
    1e1c:	20 91 64 03 	lds	r18, 0x0364
    1e20:	30 91 65 03 	lds	r19, 0x0365
    1e24:	28 17       	cp	r18, r24
    1e26:	39 07       	cpc	r19, r25
    1e28:	69 f4       	brne	.+26     	; 0x1e44 <free+0x118>
    1e2a:	30 97       	sbiw	r30, 0x00	; 0
    1e2c:	29 f4       	brne	.+10     	; 0x1e38 <free+0x10c>
    1e2e:	10 92 67 03 	sts	0x0367, r1
    1e32:	10 92 66 03 	sts	0x0366, r1
    1e36:	02 c0       	rjmp	.+4      	; 0x1e3c <free+0x110>
    1e38:	13 82       	std	Z+3, r1	; 0x03
    1e3a:	12 82       	std	Z+2, r1	; 0x02
    1e3c:	d0 93 65 03 	sts	0x0365, r29
    1e40:	c0 93 64 03 	sts	0x0364, r28
    1e44:	df 91       	pop	r29
    1e46:	cf 91       	pop	r28
    1e48:	08 95       	ret

00001e4a <strnlen_P>:
    1e4a:	fc 01       	movw	r30, r24
    1e4c:	05 90       	lpm	r0, Z+
    1e4e:	61 50       	subi	r22, 0x01	; 1
    1e50:	70 40       	sbci	r23, 0x00	; 0
    1e52:	01 10       	cpse	r0, r1
    1e54:	d8 f7       	brcc	.-10     	; 0x1e4c <strnlen_P+0x2>
    1e56:	80 95       	com	r24
    1e58:	90 95       	com	r25
    1e5a:	8e 0f       	add	r24, r30
    1e5c:	9f 1f       	adc	r25, r31
    1e5e:	08 95       	ret

00001e60 <memset>:
    1e60:	dc 01       	movw	r26, r24
    1e62:	01 c0       	rjmp	.+2      	; 0x1e66 <memset+0x6>
    1e64:	6d 93       	st	X+, r22
    1e66:	41 50       	subi	r20, 0x01	; 1
    1e68:	50 40       	sbci	r21, 0x00	; 0
    1e6a:	e0 f7       	brcc	.-8      	; 0x1e64 <memset+0x4>
    1e6c:	08 95       	ret

00001e6e <strnlen>:
    1e6e:	fc 01       	movw	r30, r24
    1e70:	61 50       	subi	r22, 0x01	; 1
    1e72:	70 40       	sbci	r23, 0x00	; 0
    1e74:	01 90       	ld	r0, Z+
    1e76:	01 10       	cpse	r0, r1
    1e78:	d8 f7       	brcc	.-10     	; 0x1e70 <strnlen+0x2>
    1e7a:	80 95       	com	r24
    1e7c:	90 95       	com	r25
    1e7e:	8e 0f       	add	r24, r30
    1e80:	9f 1f       	adc	r25, r31
    1e82:	08 95       	ret

00001e84 <fputc>:
    1e84:	0f 93       	push	r16
    1e86:	1f 93       	push	r17
    1e88:	cf 93       	push	r28
    1e8a:	df 93       	push	r29
    1e8c:	18 2f       	mov	r17, r24
    1e8e:	09 2f       	mov	r16, r25
    1e90:	eb 01       	movw	r28, r22
    1e92:	8b 81       	ldd	r24, Y+3	; 0x03
    1e94:	81 fd       	sbrc	r24, 1
    1e96:	03 c0       	rjmp	.+6      	; 0x1e9e <fputc+0x1a>
    1e98:	8f ef       	ldi	r24, 0xFF	; 255
    1e9a:	9f ef       	ldi	r25, 0xFF	; 255
    1e9c:	20 c0       	rjmp	.+64     	; 0x1ede <fputc+0x5a>
    1e9e:	82 ff       	sbrs	r24, 2
    1ea0:	10 c0       	rjmp	.+32     	; 0x1ec2 <fputc+0x3e>
    1ea2:	4e 81       	ldd	r20, Y+6	; 0x06
    1ea4:	5f 81       	ldd	r21, Y+7	; 0x07
    1ea6:	2c 81       	ldd	r18, Y+4	; 0x04
    1ea8:	3d 81       	ldd	r19, Y+5	; 0x05
    1eaa:	42 17       	cp	r20, r18
    1eac:	53 07       	cpc	r21, r19
    1eae:	7c f4       	brge	.+30     	; 0x1ece <fputc+0x4a>
    1eb0:	e8 81       	ld	r30, Y
    1eb2:	f9 81       	ldd	r31, Y+1	; 0x01
    1eb4:	9f 01       	movw	r18, r30
    1eb6:	2f 5f       	subi	r18, 0xFF	; 255
    1eb8:	3f 4f       	sbci	r19, 0xFF	; 255
    1eba:	39 83       	std	Y+1, r19	; 0x01
    1ebc:	28 83       	st	Y, r18
    1ebe:	10 83       	st	Z, r17
    1ec0:	06 c0       	rjmp	.+12     	; 0x1ece <fputc+0x4a>
    1ec2:	e8 85       	ldd	r30, Y+8	; 0x08
    1ec4:	f9 85       	ldd	r31, Y+9	; 0x09
    1ec6:	81 2f       	mov	r24, r17
    1ec8:	19 95       	eicall
    1eca:	89 2b       	or	r24, r25
    1ecc:	29 f7       	brne	.-54     	; 0x1e98 <fputc+0x14>
    1ece:	2e 81       	ldd	r18, Y+6	; 0x06
    1ed0:	3f 81       	ldd	r19, Y+7	; 0x07
    1ed2:	2f 5f       	subi	r18, 0xFF	; 255
    1ed4:	3f 4f       	sbci	r19, 0xFF	; 255
    1ed6:	3f 83       	std	Y+7, r19	; 0x07
    1ed8:	2e 83       	std	Y+6, r18	; 0x06
    1eda:	81 2f       	mov	r24, r17
    1edc:	90 2f       	mov	r25, r16
    1ede:	df 91       	pop	r29
    1ee0:	cf 91       	pop	r28
    1ee2:	1f 91       	pop	r17
    1ee4:	0f 91       	pop	r16
    1ee6:	08 95       	ret

00001ee8 <__ultoa_invert>:
    1ee8:	fa 01       	movw	r30, r20
    1eea:	aa 27       	eor	r26, r26
    1eec:	28 30       	cpi	r18, 0x08	; 8
    1eee:	51 f1       	breq	.+84     	; 0x1f44 <__ultoa_invert+0x5c>
    1ef0:	20 31       	cpi	r18, 0x10	; 16
    1ef2:	81 f1       	breq	.+96     	; 0x1f54 <__ultoa_invert+0x6c>
    1ef4:	e8 94       	clt
    1ef6:	6f 93       	push	r22
    1ef8:	6e 7f       	andi	r22, 0xFE	; 254
    1efa:	6e 5f       	subi	r22, 0xFE	; 254
    1efc:	7f 4f       	sbci	r23, 0xFF	; 255
    1efe:	8f 4f       	sbci	r24, 0xFF	; 255
    1f00:	9f 4f       	sbci	r25, 0xFF	; 255
    1f02:	af 4f       	sbci	r26, 0xFF	; 255
    1f04:	b1 e0       	ldi	r27, 0x01	; 1
    1f06:	3e d0       	rcall	.+124    	; 0x1f84 <__ultoa_invert+0x9c>
    1f08:	b4 e0       	ldi	r27, 0x04	; 4
    1f0a:	3c d0       	rcall	.+120    	; 0x1f84 <__ultoa_invert+0x9c>
    1f0c:	67 0f       	add	r22, r23
    1f0e:	78 1f       	adc	r23, r24
    1f10:	89 1f       	adc	r24, r25
    1f12:	9a 1f       	adc	r25, r26
    1f14:	a1 1d       	adc	r26, r1
    1f16:	68 0f       	add	r22, r24
    1f18:	79 1f       	adc	r23, r25
    1f1a:	8a 1f       	adc	r24, r26
    1f1c:	91 1d       	adc	r25, r1
    1f1e:	a1 1d       	adc	r26, r1
    1f20:	6a 0f       	add	r22, r26
    1f22:	71 1d       	adc	r23, r1
    1f24:	81 1d       	adc	r24, r1
    1f26:	91 1d       	adc	r25, r1
    1f28:	a1 1d       	adc	r26, r1
    1f2a:	20 d0       	rcall	.+64     	; 0x1f6c <__ultoa_invert+0x84>
    1f2c:	09 f4       	brne	.+2      	; 0x1f30 <__ultoa_invert+0x48>
    1f2e:	68 94       	set
    1f30:	3f 91       	pop	r19
    1f32:	2a e0       	ldi	r18, 0x0A	; 10
    1f34:	26 9f       	mul	r18, r22
    1f36:	11 24       	eor	r1, r1
    1f38:	30 19       	sub	r19, r0
    1f3a:	30 5d       	subi	r19, 0xD0	; 208
    1f3c:	31 93       	st	Z+, r19
    1f3e:	de f6       	brtc	.-74     	; 0x1ef6 <__ultoa_invert+0xe>
    1f40:	cf 01       	movw	r24, r30
    1f42:	08 95       	ret
    1f44:	46 2f       	mov	r20, r22
    1f46:	47 70       	andi	r20, 0x07	; 7
    1f48:	40 5d       	subi	r20, 0xD0	; 208
    1f4a:	41 93       	st	Z+, r20
    1f4c:	b3 e0       	ldi	r27, 0x03	; 3
    1f4e:	0f d0       	rcall	.+30     	; 0x1f6e <__ultoa_invert+0x86>
    1f50:	c9 f7       	brne	.-14     	; 0x1f44 <__ultoa_invert+0x5c>
    1f52:	f6 cf       	rjmp	.-20     	; 0x1f40 <__ultoa_invert+0x58>
    1f54:	46 2f       	mov	r20, r22
    1f56:	4f 70       	andi	r20, 0x0F	; 15
    1f58:	40 5d       	subi	r20, 0xD0	; 208
    1f5a:	4a 33       	cpi	r20, 0x3A	; 58
    1f5c:	18 f0       	brcs	.+6      	; 0x1f64 <__ultoa_invert+0x7c>
    1f5e:	49 5d       	subi	r20, 0xD9	; 217
    1f60:	31 fd       	sbrc	r19, 1
    1f62:	40 52       	subi	r20, 0x20	; 32
    1f64:	41 93       	st	Z+, r20
    1f66:	02 d0       	rcall	.+4      	; 0x1f6c <__ultoa_invert+0x84>
    1f68:	a9 f7       	brne	.-22     	; 0x1f54 <__ultoa_invert+0x6c>
    1f6a:	ea cf       	rjmp	.-44     	; 0x1f40 <__ultoa_invert+0x58>
    1f6c:	b4 e0       	ldi	r27, 0x04	; 4
    1f6e:	a6 95       	lsr	r26
    1f70:	97 95       	ror	r25
    1f72:	87 95       	ror	r24
    1f74:	77 95       	ror	r23
    1f76:	67 95       	ror	r22
    1f78:	ba 95       	dec	r27
    1f7a:	c9 f7       	brne	.-14     	; 0x1f6e <__ultoa_invert+0x86>
    1f7c:	00 97       	sbiw	r24, 0x00	; 0
    1f7e:	61 05       	cpc	r22, r1
    1f80:	71 05       	cpc	r23, r1
    1f82:	08 95       	ret
    1f84:	9b 01       	movw	r18, r22
    1f86:	ac 01       	movw	r20, r24
    1f88:	0a 2e       	mov	r0, r26
    1f8a:	06 94       	lsr	r0
    1f8c:	57 95       	ror	r21
    1f8e:	47 95       	ror	r20
    1f90:	37 95       	ror	r19
    1f92:	27 95       	ror	r18
    1f94:	ba 95       	dec	r27
    1f96:	c9 f7       	brne	.-14     	; 0x1f8a <__ultoa_invert+0xa2>
    1f98:	62 0f       	add	r22, r18
    1f9a:	73 1f       	adc	r23, r19
    1f9c:	84 1f       	adc	r24, r20
    1f9e:	95 1f       	adc	r25, r21
    1fa0:	a0 1d       	adc	r26, r0
    1fa2:	08 95       	ret

00001fa4 <_exit>:
    1fa4:	f8 94       	cli

00001fa6 <__stop_program>:
    1fa6:	ff cf       	rjmp	.-2      	; 0x1fa6 <__stop_program>
