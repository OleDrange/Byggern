
Arduino.elf:     file format elf32-avr

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .data         000000a0  00800200  00000ee0  00000f74  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  1 .text         00000ee0  00000000  00000000  00000094  2**1
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .bss          0000000e  008002a0  008002a0  00001014  2**0
                  ALLOC
  3 .comment      0000005c  00000000  00000000  00001014  2**0
                  CONTENTS, READONLY
  4 .debug_aranges 00000148  00000000  00000000  00001070  2**0
                  CONTENTS, READONLY, DEBUGGING
  5 .debug_info   0000119f  00000000  00000000  000011b8  2**0
                  CONTENTS, READONLY, DEBUGGING
  6 .debug_abbrev 00000823  00000000  00000000  00002357  2**0
                  CONTENTS, READONLY, DEBUGGING
  7 .debug_line   00000a30  00000000  00000000  00002b7a  2**0
                  CONTENTS, READONLY, DEBUGGING
  8 .debug_frame  000002e8  00000000  00000000  000035ac  2**2
                  CONTENTS, READONLY, DEBUGGING
  9 .debug_str    0000047a  00000000  00000000  00003894  2**0
                  CONTENTS, READONLY, DEBUGGING
 10 .debug_loc    00000958  00000000  00000000  00003d0e  2**0
                  CONTENTS, READONLY, DEBUGGING
 11 .debug_ranges 00000140  00000000  00000000  00004666  2**0
                  CONTENTS, READONLY, DEBUGGING

Disassembly of section .text:

00000000 <__vectors>:
   0:	71 c0       	rjmp	.+226    	; 0xe4 <__ctors_end>
   2:	00 00       	nop
   4:	d7 c0       	rjmp	.+430    	; 0x1b4 <__vector_1>
   6:	00 00       	nop
   8:	8c c0       	rjmp	.+280    	; 0x122 <__bad_interrupt>
   a:	00 00       	nop
   c:	8a c0       	rjmp	.+276    	; 0x122 <__bad_interrupt>
   e:	00 00       	nop
  10:	88 c0       	rjmp	.+272    	; 0x122 <__bad_interrupt>
  12:	00 00       	nop
  14:	86 c0       	rjmp	.+268    	; 0x122 <__bad_interrupt>
  16:	00 00       	nop
  18:	84 c0       	rjmp	.+264    	; 0x122 <__bad_interrupt>
  1a:	00 00       	nop
  1c:	82 c0       	rjmp	.+260    	; 0x122 <__bad_interrupt>
  1e:	00 00       	nop
  20:	80 c0       	rjmp	.+256    	; 0x122 <__bad_interrupt>
  22:	00 00       	nop
  24:	7e c0       	rjmp	.+252    	; 0x122 <__bad_interrupt>
  26:	00 00       	nop
  28:	7c c0       	rjmp	.+248    	; 0x122 <__bad_interrupt>
  2a:	00 00       	nop
  2c:	7a c0       	rjmp	.+244    	; 0x122 <__bad_interrupt>
  2e:	00 00       	nop
  30:	78 c0       	rjmp	.+240    	; 0x122 <__bad_interrupt>
  32:	00 00       	nop
  34:	76 c0       	rjmp	.+236    	; 0x122 <__bad_interrupt>
  36:	00 00       	nop
  38:	74 c0       	rjmp	.+232    	; 0x122 <__bad_interrupt>
  3a:	00 00       	nop
  3c:	72 c0       	rjmp	.+228    	; 0x122 <__bad_interrupt>
  3e:	00 00       	nop
  40:	70 c0       	rjmp	.+224    	; 0x122 <__bad_interrupt>
  42:	00 00       	nop
  44:	6e c0       	rjmp	.+220    	; 0x122 <__bad_interrupt>
  46:	00 00       	nop
  48:	6c c0       	rjmp	.+216    	; 0x122 <__bad_interrupt>
  4a:	00 00       	nop
  4c:	6a c0       	rjmp	.+212    	; 0x122 <__bad_interrupt>
  4e:	00 00       	nop
  50:	68 c0       	rjmp	.+208    	; 0x122 <__bad_interrupt>
  52:	00 00       	nop
  54:	66 c0       	rjmp	.+204    	; 0x122 <__bad_interrupt>
  56:	00 00       	nop
  58:	64 c0       	rjmp	.+200    	; 0x122 <__bad_interrupt>
  5a:	00 00       	nop
  5c:	62 c0       	rjmp	.+196    	; 0x122 <__bad_interrupt>
  5e:	00 00       	nop
  60:	60 c0       	rjmp	.+192    	; 0x122 <__bad_interrupt>
  62:	00 00       	nop
  64:	5e c0       	rjmp	.+188    	; 0x122 <__bad_interrupt>
  66:	00 00       	nop
  68:	5c c0       	rjmp	.+184    	; 0x122 <__bad_interrupt>
  6a:	00 00       	nop
  6c:	5a c0       	rjmp	.+180    	; 0x122 <__bad_interrupt>
  6e:	00 00       	nop
  70:	58 c0       	rjmp	.+176    	; 0x122 <__bad_interrupt>
  72:	00 00       	nop
  74:	56 c0       	rjmp	.+172    	; 0x122 <__bad_interrupt>
  76:	00 00       	nop
  78:	54 c0       	rjmp	.+168    	; 0x122 <__bad_interrupt>
  7a:	00 00       	nop
  7c:	52 c0       	rjmp	.+164    	; 0x122 <__bad_interrupt>
  7e:	00 00       	nop
  80:	50 c0       	rjmp	.+160    	; 0x122 <__bad_interrupt>
  82:	00 00       	nop
  84:	4e c0       	rjmp	.+156    	; 0x122 <__bad_interrupt>
  86:	00 00       	nop
  88:	4c c0       	rjmp	.+152    	; 0x122 <__bad_interrupt>
  8a:	00 00       	nop
  8c:	4a c0       	rjmp	.+148    	; 0x122 <__bad_interrupt>
  8e:	00 00       	nop
  90:	48 c0       	rjmp	.+144    	; 0x122 <__bad_interrupt>
  92:	00 00       	nop
  94:	46 c0       	rjmp	.+140    	; 0x122 <__bad_interrupt>
  96:	00 00       	nop
  98:	44 c0       	rjmp	.+136    	; 0x122 <__bad_interrupt>
  9a:	00 00       	nop
  9c:	42 c0       	rjmp	.+132    	; 0x122 <__bad_interrupt>
  9e:	00 00       	nop
  a0:	40 c0       	rjmp	.+128    	; 0x122 <__bad_interrupt>
  a2:	00 00       	nop
  a4:	3e c0       	rjmp	.+124    	; 0x122 <__bad_interrupt>
  a6:	00 00       	nop
  a8:	3c c0       	rjmp	.+120    	; 0x122 <__bad_interrupt>
  aa:	00 00       	nop
  ac:	3a c0       	rjmp	.+116    	; 0x122 <__bad_interrupt>
  ae:	00 00       	nop
  b0:	38 c0       	rjmp	.+112    	; 0x122 <__bad_interrupt>
  b2:	00 00       	nop
  b4:	36 c0       	rjmp	.+108    	; 0x122 <__bad_interrupt>
  b6:	00 00       	nop
  b8:	34 c0       	rjmp	.+104    	; 0x122 <__bad_interrupt>
  ba:	00 00       	nop
  bc:	32 c0       	rjmp	.+100    	; 0x122 <__bad_interrupt>
  be:	00 00       	nop
  c0:	30 c0       	rjmp	.+96     	; 0x122 <__bad_interrupt>
  c2:	00 00       	nop
  c4:	2e c0       	rjmp	.+92     	; 0x122 <__bad_interrupt>
  c6:	00 00       	nop
  c8:	2c c0       	rjmp	.+88     	; 0x122 <__bad_interrupt>
  ca:	00 00       	nop
  cc:	2a c0       	rjmp	.+84     	; 0x122 <__bad_interrupt>
  ce:	00 00       	nop
  d0:	28 c0       	rjmp	.+80     	; 0x122 <__bad_interrupt>
  d2:	00 00       	nop
  d4:	26 c0       	rjmp	.+76     	; 0x122 <__bad_interrupt>
  d6:	00 00       	nop
  d8:	24 c0       	rjmp	.+72     	; 0x122 <__bad_interrupt>
  da:	00 00       	nop
  dc:	22 c0       	rjmp	.+68     	; 0x122 <__bad_interrupt>
  de:	00 00       	nop
  e0:	20 c0       	rjmp	.+64     	; 0x122 <__bad_interrupt>
	...

000000e4 <__ctors_end>:
  e4:	11 24       	eor	r1, r1
  e6:	1f be       	out	0x3f, r1	; 63
  e8:	cf ef       	ldi	r28, 0xFF	; 255
  ea:	d1 e2       	ldi	r29, 0x21	; 33
  ec:	de bf       	out	0x3e, r29	; 62
  ee:	cd bf       	out	0x3d, r28	; 61
  f0:	00 e0       	ldi	r16, 0x00	; 0
  f2:	0c bf       	out	0x3c, r16	; 60

000000f4 <__do_copy_data>:
  f4:	12 e0       	ldi	r17, 0x02	; 2
  f6:	a0 e0       	ldi	r26, 0x00	; 0
  f8:	b2 e0       	ldi	r27, 0x02	; 2
  fa:	e0 ee       	ldi	r30, 0xE0	; 224
  fc:	fe e0       	ldi	r31, 0x0E	; 14
  fe:	00 e0       	ldi	r16, 0x00	; 0
 100:	0b bf       	out	0x3b, r16	; 59
 102:	02 c0       	rjmp	.+4      	; 0x108 <__do_copy_data+0x14>
 104:	07 90       	elpm	r0, Z+
 106:	0d 92       	st	X+, r0
 108:	a0 3a       	cpi	r26, 0xA0	; 160
 10a:	b1 07       	cpc	r27, r17
 10c:	d9 f7       	brne	.-10     	; 0x104 <__do_copy_data+0x10>

0000010e <__do_clear_bss>:
 10e:	22 e0       	ldi	r18, 0x02	; 2
 110:	a0 ea       	ldi	r26, 0xA0	; 160
 112:	b2 e0       	ldi	r27, 0x02	; 2
 114:	01 c0       	rjmp	.+2      	; 0x118 <.do_clear_bss_start>

00000116 <.do_clear_bss_loop>:
 116:	1d 92       	st	X+, r1

00000118 <.do_clear_bss_start>:
 118:	ae 3a       	cpi	r26, 0xAE	; 174
 11a:	b2 07       	cpc	r27, r18
 11c:	e1 f7       	brne	.-8      	; 0x116 <.do_clear_bss_loop>
 11e:	02 d0       	rcall	.+4      	; 0x124 <main>
 120:	dd c6       	rjmp	.+3514   	; 0xedc <_exit>

00000122 <__bad_interrupt>:
 122:	6e cf       	rjmp	.-292    	; 0x0 <__vectors>

00000124 <main>:
#include "CAN_controller_driver.h"
#include "CAN.h"
#include "MCP2515.h"
#define F_CPU 16000000UL
int main(void)
{
 124:	cf 93       	push	r28
 126:	df 93       	push	r29
 128:	cd b7       	in	r28, 0x3d	; 61
 12a:	de b7       	in	r29, 0x3e	; 62
 12c:	66 97       	sbiw	r28, 0x16	; 22
 12e:	0f b6       	in	r0, 0x3f	; 63
 130:	f8 94       	cli
 132:	de bf       	out	0x3e, r29	; 62
 134:	0f be       	out	0x3f, r0	; 63
 136:	cd bf       	out	0x3d, r28	; 61
	#else
		//round up by default
		__ticks_dc = (uint32_t)(ceil(fabs(__tmp)));
	#endif

	__builtin_avr_delay_cycles(__ticks_dc);
 138:	87 e8       	ldi	r24, 0x87	; 135
 13a:	93 e1       	ldi	r25, 0x13	; 19
 13c:	01 97       	sbiw	r24, 0x01	; 1
 13e:	f1 f7       	brne	.-4      	; 0x13c <main+0x18>
 140:	00 c0       	rjmp	.+0      	; 0x142 <main+0x1e>
 142:	00 00       	nop
	unsigned long clockspeed = F_CPU;
	_delay_ms(20);
	UART_init(clockspeed);
 144:	60 e0       	ldi	r22, 0x00	; 0
 146:	74 e2       	ldi	r23, 0x24	; 36
 148:	84 ef       	ldi	r24, 0xF4	; 244
 14a:	90 e0       	ldi	r25, 0x00	; 0
 14c:	12 d2       	rcall	.+1060   	; 0x572 <UART_init>
	
	can_init(MODE_NORMAL);
 14e:	80 e0       	ldi	r24, 0x00	; 0
 150:	45 d0       	rcall	.+138    	; 0x1dc <can_init>
		can_message_send(&dummy1);
		if ( 1){//can_interrupt()){
			hei = can_handle_messages();
			
			for(int i = 0; i < hei.length ; i++){
				printf(" %c ",hei.data[i]);
 152:	0f 2e       	mov	r0, r31
 154:	f6 e0       	ldi	r31, 0x06	; 6
 156:	ef 2e       	mov	r14, r31
 158:	f2 e0       	ldi	r31, 0x02	; 2
 15a:	ff 2e       	mov	r15, r31
 15c:	f0 2d       	mov	r31, r0
		can_message dummy;
		can_message dummy1;
		
		can_message hei;
		
		can_message_send(&dummy1);
 15e:	ce 01       	movw	r24, r28
 160:	0c 96       	adiw	r24, 0x0c	; 12
 162:	65 d0       	rcall	.+202    	; 0x22e <can_message_send>
		if ( 1){//can_interrupt()){
			hei = can_handle_messages();
 164:	ce 01       	movw	r24, r28
 166:	01 96       	adiw	r24, 0x01	; 1
 168:	0a d1       	rcall	.+532    	; 0x37e <can_handle_messages>
 16a:	8b 81       	ldd	r24, Y+3	; 0x03
			
			for(int i = 0; i < hei.length ; i++){
 16c:	88 23       	and	r24, r24
 16e:	a9 f0       	breq	.+42     	; 0x19a <main+0x76>
 170:	8e 01       	movw	r16, r28
 172:	0c 5f       	subi	r16, 0xFC	; 252
 174:	1f 4f       	sbci	r17, 0xFF	; 255
 176:	68 01       	movw	r12, r16
 178:	c8 0e       	add	r12, r24
 17a:	d1 1c       	adc	r13, r1
				printf(" %c ",hei.data[i]);
 17c:	f8 01       	movw	r30, r16
 17e:	81 91       	ld	r24, Z+
 180:	8f 01       	movw	r16, r30
 182:	1f 92       	push	r1
 184:	8f 93       	push	r24
 186:	ff 92       	push	r15
 188:	ef 92       	push	r14
 18a:	8e d2       	rcall	.+1308   	; 0x6a8 <printf>
		
		can_message_send(&dummy1);
		if ( 1){//can_interrupt()){
			hei = can_handle_messages();
			
			for(int i = 0; i < hei.length ; i++){
 18c:	0f 90       	pop	r0
 18e:	0f 90       	pop	r0
 190:	0f 90       	pop	r0
 192:	0f 90       	pop	r0
 194:	0c 15       	cp	r16, r12
 196:	1d 05       	cpc	r17, r13
 198:	89 f7       	brne	.-30     	; 0x17c <main+0x58>
				printf(" %c ",hei.data[i]);
			}
			printf("\r \n");
 19a:	8b e0       	ldi	r24, 0x0B	; 11
 19c:	92 e0       	ldi	r25, 0x02	; 2
 19e:	95 d2       	rcall	.+1322   	; 0x6ca <puts>
 1a0:	ff e7       	ldi	r31, 0x7F	; 127
 1a2:	24 e8       	ldi	r18, 0x84	; 132
 1a4:	8e e1       	ldi	r24, 0x1E	; 30
 1a6:	f1 50       	subi	r31, 0x01	; 1
 1a8:	20 40       	sbci	r18, 0x00	; 0
 1aa:	80 40       	sbci	r24, 0x00	; 0
 1ac:	e1 f7       	brne	.-8      	; 0x1a6 <main+0x82>
 1ae:	00 c0       	rjmp	.+0      	; 0x1b0 <main+0x8c>
 1b0:	00 00       	nop
		}
	   //printf("test");
	   _delay_ms(10000);
    }
 1b2:	d5 cf       	rjmp	.-86     	; 0x15e <main+0x3a>

000001b4 <__vector_1>:
	if (flag){	
		flag = 0;
		return 1;
	}
	return 0;
}
 1b4:	1f 92       	push	r1
 1b6:	0f 92       	push	r0
 1b8:	0f b6       	in	r0, 0x3f	; 63
 1ba:	0f 92       	push	r0
 1bc:	11 24       	eor	r1, r1
 1be:	8f 93       	push	r24
 1c0:	9f 93       	push	r25
 1c2:	81 e0       	ldi	r24, 0x01	; 1
 1c4:	90 e0       	ldi	r25, 0x00	; 0
 1c6:	90 93 a3 02 	sts	0x02A3, r25
 1ca:	80 93 a2 02 	sts	0x02A2, r24
 1ce:	9f 91       	pop	r25
 1d0:	8f 91       	pop	r24
 1d2:	0f 90       	pop	r0
 1d4:	0f be       	out	0x3f, r0	; 63
 1d6:	0f 90       	pop	r0
 1d8:	1f 90       	pop	r1
 1da:	18 95       	reti

000001dc <can_init>:
 1dc:	6b d1       	rcall	.+726    	; 0x4b4 <mcp_2515_init>
 1de:	63 e0       	ldi	r22, 0x03	; 3
 1e0:	8b e2       	ldi	r24, 0x2B	; 43
 1e2:	55 d1       	rcall	.+682    	; 0x48e <mcp_2515_write>
 1e4:	f8 94       	cli
 1e6:	e9 e6       	ldi	r30, 0x69	; 105
 1e8:	f0 e0       	ldi	r31, 0x00	; 0
 1ea:	80 81       	ld	r24, Z
 1ec:	80 62       	ori	r24, 0x20	; 32
 1ee:	80 83       	st	Z, r24
 1f0:	80 81       	ld	r24, Z
 1f2:	8f 7e       	andi	r24, 0xEF	; 239
 1f4:	80 83       	st	Z, r24
 1f6:	ea 9a       	sbi	0x1d, 2	; 29
 1f8:	78 94       	sei
 1fa:	08 95       	ret

000001fc <can_transmit_complete>:
	mcp_2515_request_to_send(MCP_RTS_TX0 + buffer_number);
	//printf("buffer nr. %d\n\r",buffer_number);
	
}

int can_transmit_complete(int buffer_number){
 1fc:	cf 93       	push	r28
 1fe:	df 93       	push	r29
 200:	ec 01       	movw	r28, r24
	uint8_t transmit_flag = mcp_2515_read(MCP_CANINTF);
 202:	8c e2       	ldi	r24, 0x2C	; 44
 204:	37 d1       	rcall	.+622    	; 0x474 <mcp_2515_read>
	uint8_t interrupt_bits = (transmit_flag & (MCP_TX0IF + buffer_number*2));
 206:	9e 01       	movw	r18, r28
 208:	2e 5f       	subi	r18, 0xFE	; 254
 20a:	3f 4f       	sbci	r19, 0xFF	; 255
 20c:	42 2f       	mov	r20, r18
 20e:	44 0f       	add	r20, r20
 210:	84 23       	and	r24, r20

	if(interrupt_bits == (MCP_TX0IF + buffer_number*2)){
 212:	48 2f       	mov	r20, r24
 214:	50 e0       	ldi	r21, 0x00	; 0
 216:	22 0f       	add	r18, r18
 218:	33 1f       	adc	r19, r19
 21a:	81 e0       	ldi	r24, 0x01	; 1
 21c:	90 e0       	ldi	r25, 0x00	; 0
 21e:	42 17       	cp	r20, r18
 220:	53 07       	cpc	r21, r19
 222:	11 f4       	brne	.+4      	; 0x228 <can_transmit_complete+0x2c>
 224:	80 e0       	ldi	r24, 0x00	; 0
 226:	90 e0       	ldi	r25, 0x00	; 0
			return 0;
	}
	return 1;
}
 228:	df 91       	pop	r29
 22a:	cf 91       	pop	r28
 22c:	08 95       	ret

0000022e <can_message_send>:
	}
	
	return message1;
}

void can_message_send(can_message* message){
 22e:	ef 92       	push	r14
 230:	ff 92       	push	r15
 232:	0f 93       	push	r16
 234:	1f 93       	push	r17
 236:	cf 93       	push	r28
 238:	df 93       	push	r29
 23a:	ec 01       	movw	r28, r24
	
	static int buffer_number = 0;
	
	while (!can_transmit_complete(buffer_number)){
 23c:	11 c0       	rjmp	.+34     	; 0x260 <can_message_send+0x32>
		buffer_number +=1;
 23e:	20 91 a0 02 	lds	r18, 0x02A0
 242:	30 91 a1 02 	lds	r19, 0x02A1
 246:	2f 5f       	subi	r18, 0xFF	; 255
 248:	3f 4f       	sbci	r19, 0xFF	; 255
 24a:	30 93 a1 02 	sts	0x02A1, r19
 24e:	20 93 a0 02 	sts	0x02A0, r18
		if (buffer_number > 2) {
 252:	23 30       	cpi	r18, 0x03	; 3
 254:	31 05       	cpc	r19, r1
 256:	24 f0       	brlt	.+8      	; 0x260 <can_message_send+0x32>
			buffer_number = 0;
 258:	10 92 a1 02 	sts	0x02A1, r1
 25c:	10 92 a0 02 	sts	0x02A0, r1

void can_message_send(can_message* message){
	
	static int buffer_number = 0;
	
	while (!can_transmit_complete(buffer_number)){
 260:	80 91 a0 02 	lds	r24, 0x02A0
 264:	90 91 a1 02 	lds	r25, 0x02A1
 268:	c9 df       	rcall	.-110    	; 0x1fc <can_transmit_complete>
 26a:	89 2b       	or	r24, r25
 26c:	41 f3       	breq	.-48     	; 0x23e <can_message_send+0x10>
			buffer_number = 0;
		}
	}
	
	// Arbitration field identifier ID = 1337;    id high = 167  id low = 0
	unsigned int ID = message->id;
 26e:	88 81       	ld	r24, Y
 270:	99 81       	ldd	r25, Y+1	; 0x01
	char id_high = ID / 8;
	char id_low = ID % 8;
 272:	28 2f       	mov	r18, r24
 274:	27 70       	andi	r18, 0x07	; 7
 276:	f2 2e       	mov	r15, r18
		}
	}
	
	// Arbitration field identifier ID = 1337;    id high = 167  id low = 0
	unsigned int ID = message->id;
	char id_high = ID / 8;
 278:	bc 01       	movw	r22, r24
 27a:	76 95       	lsr	r23
 27c:	67 95       	ror	r22
 27e:	76 95       	lsr	r23
 280:	67 95       	ror	r22
 282:	76 95       	lsr	r23
 284:	67 95       	ror	r22
	char id_low = ID % 8;
	id_low = id_low*0b100000;
	mcp_2515_write(MCP_TXB0SIDH + 16 * buffer_number, id_high);
 286:	00 ea       	ldi	r16, 0xA0	; 160
 288:	12 e0       	ldi	r17, 0x02	; 2
 28a:	f8 01       	movw	r30, r16
 28c:	80 81       	ld	r24, Z
 28e:	82 95       	swap	r24
 290:	80 7f       	andi	r24, 0xF0	; 240
 292:	8f 5c       	subi	r24, 0xCF	; 207
 294:	fc d0       	rcall	.+504    	; 0x48e <mcp_2515_write>
	
	// Arbitration field identifier ID = 1337;    id high = 167  id low = 0
	unsigned int ID = message->id;
	char id_high = ID / 8;
	char id_low = ID % 8;
	id_low = id_low*0b100000;
 296:	6f 2d       	mov	r22, r15
 298:	62 95       	swap	r22
 29a:	66 0f       	add	r22, r22
 29c:	60 7e       	andi	r22, 0xE0	; 224
	mcp_2515_write(MCP_TXB0SIDH + 16 * buffer_number, id_high);
	mcp_2515_write(MCP_TXB0SIDL + 16 * buffer_number, id_low);
 29e:	f8 01       	movw	r30, r16
 2a0:	80 81       	ld	r24, Z
 2a2:	82 95       	swap	r24
 2a4:	80 7f       	andi	r24, 0xF0	; 240
 2a6:	8e 5c       	subi	r24, 0xCE	; 206
 2a8:	f2 d0       	rcall	.+484    	; 0x48e <mcp_2515_write>
	
	// Define data length of message
	uint8_t data_length = message->length;
 2aa:	ea 80       	ldd	r14, Y+2	; 0x02
	mcp_2515_write(MCP_TXB0DLC + 16 * buffer_number, data_length);
 2ac:	f8 01       	movw	r30, r16
 2ae:	80 81       	ld	r24, Z
 2b0:	82 95       	swap	r24
 2b2:	80 7f       	andi	r24, 0xF0	; 240
 2b4:	6e 2d       	mov	r22, r14
 2b6:	8b 5c       	subi	r24, 0xCB	; 203
 2b8:	ea d0       	rcall	.+468    	; 0x48e <mcp_2515_write>
	
	// Write data bytes to transmit buffer
	char* data_bytes = message->data;
 2ba:	23 96       	adiw	r28, 0x03	; 3
	for (uint8_t byte = 0; byte < data_length; byte++) {
 2bc:	ee 20       	and	r14, r14
 2be:	79 f0       	breq	.+30     	; 0x2de <can_message_send+0xb0>
 2c0:	f1 2c       	mov	r15, r1
		mcp_2515_write(MCP_TXB0Dm + byte + 16 * buffer_number, data_bytes[byte]);
 2c2:	69 91       	ld	r22, Y+
 2c4:	f8 01       	movw	r30, r16
 2c6:	80 81       	ld	r24, Z
 2c8:	2f 2d       	mov	r18, r15
 2ca:	f0 e1       	ldi	r31, 0x10	; 16
 2cc:	8f 9f       	mul	r24, r31
 2ce:	20 0d       	add	r18, r0
 2d0:	11 24       	eor	r1, r1
 2d2:	82 2f       	mov	r24, r18
 2d4:	8a 5c       	subi	r24, 0xCA	; 202
 2d6:	db d0       	rcall	.+438    	; 0x48e <mcp_2515_write>
	uint8_t data_length = message->length;
	mcp_2515_write(MCP_TXB0DLC + 16 * buffer_number, data_length);
	
	// Write data bytes to transmit buffer
	char* data_bytes = message->data;
	for (uint8_t byte = 0; byte < data_length; byte++) {
 2d8:	f3 94       	inc	r15
 2da:	fe 10       	cpse	r15, r14
 2dc:	f2 cf       	rjmp	.-28     	; 0x2c2 <can_message_send+0x94>
		mcp_2515_write(MCP_TXB0Dm + byte + 16 * buffer_number, data_bytes[byte]);
	}
	
	// Request to send message, send if successful
	mcp_2515_request_to_send(MCP_RTS_TX0 + buffer_number);
 2de:	80 91 a0 02 	lds	r24, 0x02A0
 2e2:	8f 57       	subi	r24, 0x7F	; 127
 2e4:	17 d1       	rcall	.+558    	; 0x514 <mcp_2515_request_to_send>
	//printf("buffer nr. %d\n\r",buffer_number);
	
}
 2e6:	df 91       	pop	r29
 2e8:	cf 91       	pop	r28
 2ea:	1f 91       	pop	r17
 2ec:	0f 91       	pop	r16
 2ee:	ff 90       	pop	r15
 2f0:	ef 90       	pop	r14
 2f2:	08 95       	ret

000002f4 <can_message_receive>:
			return 0;
	}
	return 1;
}

void can_message_receive(int rec_buff_num, can_message* received_message){
 2f4:	0f 93       	push	r16
 2f6:	1f 93       	push	r17
 2f8:	cf 93       	push	r28
 2fa:	df 93       	push	r29
 2fc:	eb 01       	movw	r28, r22
	uint8_t id_high = mcp_2515_read(MCP_RXB0SIDH + 16 * rec_buff_num);
 2fe:	18 2f       	mov	r17, r24
 300:	12 95       	swap	r17
 302:	10 7f       	andi	r17, 0xF0	; 240
 304:	81 e6       	ldi	r24, 0x61	; 97
 306:	81 0f       	add	r24, r17
 308:	b5 d0       	rcall	.+362    	; 0x474 <mcp_2515_read>
 30a:	08 2f       	mov	r16, r24
	uint8_t id_low = mcp_2515_read(MCP_RXB0SIDL + 16 * rec_buff_num);
 30c:	82 e6       	ldi	r24, 0x62	; 98
 30e:	81 0f       	add	r24, r17
 310:	b1 d0       	rcall	.+354    	; 0x474 <mcp_2515_read>
	uint8_t mask = 0b11100000;
	id_low = (id_low & mask);
	received_message->id = 0b1000*id_high + id_low/0b100000;
 312:	20 2f       	mov	r18, r16
 314:	30 e0       	ldi	r19, 0x00	; 0
 316:	22 0f       	add	r18, r18
 318:	33 1f       	adc	r19, r19
 31a:	22 0f       	add	r18, r18
 31c:	33 1f       	adc	r19, r19
 31e:	22 0f       	add	r18, r18
 320:	33 1f       	adc	r19, r19
 322:	82 95       	swap	r24
 324:	86 95       	lsr	r24
 326:	87 70       	andi	r24, 0x07	; 7
 328:	28 0f       	add	r18, r24
 32a:	31 1d       	adc	r19, r1
 32c:	39 83       	std	Y+1, r19	; 0x01
 32e:	28 83       	st	Y, r18
	
	uint8_t data_length = mcp_2515_read(MCP_RXB0DLC + 16 * rec_buff_num);
 330:	85 e6       	ldi	r24, 0x65	; 101
 332:	81 0f       	add	r24, r17
 334:	9f d0       	rcall	.+318    	; 0x474 <mcp_2515_read>
	mask = 0b1111;
	received_message->length = (data_length & mask);
 336:	98 2f       	mov	r25, r24
 338:	9f 70       	andi	r25, 0x0F	; 15
 33a:	9a 83       	std	Y+2, r25	; 0x02
	
	for (uint8_t byte = 0; byte < data_length; byte++) {
 33c:	88 23       	and	r24, r24
 33e:	51 f0       	breq	.+20     	; 0x354 <can_message_receive+0x60>
 340:	1a 59       	subi	r17, 0x9A	; 154
 342:	23 96       	adiw	r28, 0x03	; 3
 344:	08 2f       	mov	r16, r24
 346:	01 0f       	add	r16, r17
		received_message->data[byte] = mcp_2515_read(MCP_RXB0DM + byte + 16 * rec_buff_num);
 348:	81 2f       	mov	r24, r17
 34a:	94 d0       	rcall	.+296    	; 0x474 <mcp_2515_read>
 34c:	89 93       	st	Y+, r24
 34e:	1f 5f       	subi	r17, 0xFF	; 255
	
	uint8_t data_length = mcp_2515_read(MCP_RXB0DLC + 16 * rec_buff_num);
	mask = 0b1111;
	received_message->length = (data_length & mask);
	
	for (uint8_t byte = 0; byte < data_length; byte++) {
 350:	10 13       	cpse	r17, r16
 352:	fa cf       	rjmp	.-12     	; 0x348 <can_message_receive+0x54>
		received_message->data[byte] = mcp_2515_read(MCP_RXB0DM + byte + 16 * rec_buff_num);
	}
	
}
 354:	df 91       	pop	r29
 356:	cf 91       	pop	r28
 358:	1f 91       	pop	r17
 35a:	0f 91       	pop	r16
 35c:	08 95       	ret

0000035e <can_int_vect>:

void can_int_vect(int* v) { 
 35e:	cf 93       	push	r28
 360:	df 93       	push	r29
 362:	ec 01       	movw	r28, r24
	uint8_t int_flag = mcp_2515_read(MCP_CANINTF);
 364:	8c e2       	ldi	r24, 0x2C	; 44
 366:	86 d0       	rcall	.+268    	; 0x474 <mcp_2515_read>
	v[0] = (int_flag & MCP_RX0IF);
 368:	98 2f       	mov	r25, r24
 36a:	91 70       	andi	r25, 0x01	; 1
 36c:	98 83       	st	Y, r25
 36e:	19 82       	std	Y+1, r1	; 0x01
	v[1] = (int_flag & MCP_RX1IF);
 370:	82 70       	andi	r24, 0x02	; 2
 372:	90 e0       	ldi	r25, 0x00	; 0
 374:	9b 83       	std	Y+3, r25	; 0x03
 376:	8a 83       	std	Y+2, r24	; 0x02
}
 378:	df 91       	pop	r29
 37a:	cf 91       	pop	r28
 37c:	08 95       	ret

0000037e <can_handle_messages>:
		return 1;
	}
	return 0;
}

can_message can_handle_messages(){
 37e:	0f 93       	push	r16
 380:	1f 93       	push	r17
 382:	cf 93       	push	r28
 384:	df 93       	push	r29
 386:	cd b7       	in	r28, 0x3d	; 61
 388:	de b7       	in	r29, 0x3e	; 62
 38a:	68 97       	sbiw	r28, 0x18	; 24
 38c:	0f b6       	in	r0, 0x3f	; 63
 38e:	f8 94       	cli
 390:	de bf       	out	0x3e, r29	; 62
 392:	0f be       	out	0x3f, r0	; 63
 394:	cd bf       	out	0x3d, r28	; 61
 396:	8c 01       	movw	r16, r24
	uint8_t v[2] = {0};
 398:	1a 82       	std	Y+2, r1	; 0x02
 39a:	19 82       	std	Y+1, r1	; 0x01

	can_int_vect(v);
 39c:	ce 01       	movw	r24, r28
 39e:	01 96       	adiw	r24, 0x01	; 1
 3a0:	de df       	rcall	.-68     	; 0x35e <can_int_vect>

	can_message message1;
	if (v[0]){
 3a2:	89 81       	ldd	r24, Y+1	; 0x01
 3a4:	88 23       	and	r24, r24
 3a6:	01 f1       	breq	.+64     	; 0x3e8 <can_handle_messages+0x6a>
		can_message_receive(0, &message1);
 3a8:	be 01       	movw	r22, r28
 3aa:	6d 5f       	subi	r22, 0xFD	; 253
 3ac:	7f 4f       	sbci	r23, 0xFF	; 255
 3ae:	80 e0       	ldi	r24, 0x00	; 0
 3b0:	90 e0       	ldi	r25, 0x00	; 0
 3b2:	a0 df       	rcall	.-192    	; 0x2f4 <can_message_receive>
		mcp_2515_write(MCP_CANINTF,0);
 3b4:	60 e0       	ldi	r22, 0x00	; 0
 3b6:	8c e2       	ldi	r24, 0x2C	; 44
 3b8:	6a d0       	rcall	.+212    	; 0x48e <mcp_2515_write>
		mcp_2515_bit_modify(MCP_CANINTF, 1, 0);
 3ba:	40 e0       	ldi	r20, 0x00	; 0
 3bc:	61 e0       	ldi	r22, 0x01	; 1
 3be:	8c e2       	ldi	r24, 0x2C	; 44
 3c0:	b1 d0       	rcall	.+354    	; 0x524 <mcp_2515_bit_modify>
		can_int_vect(v);
 3c2:	ce 01       	movw	r24, r28
 3c4:	01 96       	adiw	r24, 0x01	; 1
 3c6:	cb df       	rcall	.-106    	; 0x35e <can_int_vect>
		if (!v[1]){
 3c8:	8a 81       	ldd	r24, Y+2	; 0x02
 3ca:	81 11       	cpse	r24, r1
 3cc:	04 c0       	rjmp	.+8      	; 0x3d6 <can_handle_messages+0x58>
			flag = 0;
 3ce:	10 92 a3 02 	sts	0x02A3, r1
 3d2:	10 92 a2 02 	sts	0x02A2, r1
		}
		return message1;
 3d6:	8b e0       	ldi	r24, 0x0B	; 11
 3d8:	fe 01       	movw	r30, r28
 3da:	33 96       	adiw	r30, 0x03	; 3
 3dc:	d8 01       	movw	r26, r16
 3de:	01 90       	ld	r0, Z+
 3e0:	0d 92       	st	X+, r0
 3e2:	8a 95       	dec	r24
 3e4:	e1 f7       	brne	.-8      	; 0x3de <can_handle_messages+0x60>
 3e6:	2b c0       	rjmp	.+86     	; 0x43e <can_handle_messages+0xc0>
	}
	
	can_message message2;
	
	if (v[1]){
 3e8:	8a 81       	ldd	r24, Y+2	; 0x02
 3ea:	88 23       	and	r24, r24
 3ec:	01 f1       	breq	.+64     	; 0x42e <can_handle_messages+0xb0>
		can_message_receive(1, &message2);
 3ee:	be 01       	movw	r22, r28
 3f0:	62 5f       	subi	r22, 0xF2	; 242
 3f2:	7f 4f       	sbci	r23, 0xFF	; 255
 3f4:	81 e0       	ldi	r24, 0x01	; 1
 3f6:	90 e0       	ldi	r25, 0x00	; 0
 3f8:	7d df       	rcall	.-262    	; 0x2f4 <can_message_receive>
		mcp_2515_write(MCP_CANINTF,0);
 3fa:	60 e0       	ldi	r22, 0x00	; 0
 3fc:	8c e2       	ldi	r24, 0x2C	; 44
 3fe:	47 d0       	rcall	.+142    	; 0x48e <mcp_2515_write>
		mcp_2515_bit_modify(MCP_CANINTF, 2, 0);
 400:	40 e0       	ldi	r20, 0x00	; 0
 402:	62 e0       	ldi	r22, 0x02	; 2
 404:	8c e2       	ldi	r24, 0x2C	; 44
 406:	8e d0       	rcall	.+284    	; 0x524 <mcp_2515_bit_modify>
		can_int_vect(v);
 408:	ce 01       	movw	r24, r28
 40a:	01 96       	adiw	r24, 0x01	; 1
 40c:	a8 df       	rcall	.-176    	; 0x35e <can_int_vect>
		if (!v[0]){
 40e:	89 81       	ldd	r24, Y+1	; 0x01
 410:	81 11       	cpse	r24, r1
 412:	04 c0       	rjmp	.+8      	; 0x41c <can_handle_messages+0x9e>
			flag = 0;
 414:	10 92 a3 02 	sts	0x02A3, r1
 418:	10 92 a2 02 	sts	0x02A2, r1
		}
		return message2;
 41c:	8b e0       	ldi	r24, 0x0B	; 11
 41e:	fe 01       	movw	r30, r28
 420:	3e 96       	adiw	r30, 0x0e	; 14
 422:	d8 01       	movw	r26, r16
 424:	01 90       	ld	r0, Z+
 426:	0d 92       	st	X+, r0
 428:	8a 95       	dec	r24
 42a:	e1 f7       	brne	.-8      	; 0x424 <can_handle_messages+0xa6>
 42c:	08 c0       	rjmp	.+16     	; 0x43e <can_handle_messages+0xc0>
	}
	
	return message1;
 42e:	8b e0       	ldi	r24, 0x0B	; 11
 430:	fe 01       	movw	r30, r28
 432:	33 96       	adiw	r30, 0x03	; 3
 434:	d8 01       	movw	r26, r16
 436:	01 90       	ld	r0, Z+
 438:	0d 92       	st	X+, r0
 43a:	8a 95       	dec	r24
 43c:	e1 f7       	brne	.-8      	; 0x436 <can_handle_messages+0xb8>
}
 43e:	c8 01       	movw	r24, r16
 440:	68 96       	adiw	r28, 0x18	; 24
 442:	0f b6       	in	r0, 0x3f	; 63
 444:	f8 94       	cli
 446:	de bf       	out	0x3e, r29	; 62
 448:	0f be       	out	0x3f, r0	; 63
 44a:	cd bf       	out	0x3d, r28	; 61
 44c:	df 91       	pop	r29
 44e:	cf 91       	pop	r28
 450:	1f 91       	pop	r17
 452:	0f 91       	pop	r16
 454:	08 95       	ret

00000456 <mcp_activate_slave>:
#include <avr/io.h>
#include <avr/delay.h>

void mcp_activate_slave(){
	/* Activate Slave Select */
	clear_bit(PORTB, PB7);
 456:	2f 98       	cbi	0x05, 7	; 5
 458:	08 95       	ret

0000045a <mcp_deactivate_slave>:
}

void mcp_deactivate_slave(){
	/* Deactivate Slave Select */
	set_bit(PORTB, PB7);
 45a:	2f 9a       	sbi	0x05, 7	; 5
 45c:	08 95       	ret

0000045e <mcp_2515_reset>:
	
	return 0;
}

void mcp_2515_reset(){
	mcp_activate_slave();
 45e:	fb df       	rcall	.-10     	; 0x456 <mcp_activate_slave>
	SPI_write(MCP_RESET);
 460:	80 ec       	ldi	r24, 0xC0	; 192
 462:	ab d0       	rcall	.+342    	; 0x5ba <SPI_write>
	mcp_deactivate_slave();
 464:	fa df       	rcall	.-12     	; 0x45a <mcp_deactivate_slave>
 466:	83 ec       	ldi	r24, 0xC3	; 195
 468:	99 e0       	ldi	r25, 0x09	; 9
 46a:	01 97       	sbiw	r24, 0x01	; 1
 46c:	f1 f7       	brne	.-4      	; 0x46a <mcp_2515_reset+0xc>
 46e:	00 c0       	rjmp	.+0      	; 0x470 <mcp_2515_reset+0x12>
 470:	00 00       	nop
 472:	08 95       	ret

00000474 <mcp_2515_read>:
	_delay_ms(10);	//a small delay after mcp reset
}

uint8_t mcp_2515_read(uint8_t address){
 474:	cf 93       	push	r28
 476:	c8 2f       	mov	r28, r24
	mcp_activate_slave();
 478:	ee df       	rcall	.-36     	; 0x456 <mcp_activate_slave>
	
	uint8_t data;
	
	SPI_write(MCP_READ);
 47a:	83 e0       	ldi	r24, 0x03	; 3
 47c:	9e d0       	rcall	.+316    	; 0x5ba <SPI_write>
	SPI_write(address);
 47e:	8c 2f       	mov	r24, r28
 480:	9c d0       	rcall	.+312    	; 0x5ba <SPI_write>
	data = SPI_read();
 482:	a0 d0       	rcall	.+320    	; 0x5c4 <SPI_read>
 484:	c8 2f       	mov	r28, r24
	
	mcp_deactivate_slave();
 486:	e9 df       	rcall	.-46     	; 0x45a <mcp_deactivate_slave>
	
	return data;
}
 488:	8c 2f       	mov	r24, r28
 48a:	cf 91       	pop	r28
 48c:	08 95       	ret

0000048e <mcp_2515_write>:


void mcp_2515_write(uint8_t address, uint8_t data) {
 48e:	cf 93       	push	r28
 490:	df 93       	push	r29
 492:	d8 2f       	mov	r29, r24
 494:	c6 2f       	mov	r28, r22
	mcp_activate_slave();
 496:	df df       	rcall	.-66     	; 0x456 <mcp_activate_slave>
	
	SPI_write(MCP_WRITE);
 498:	82 e0       	ldi	r24, 0x02	; 2
 49a:	8f d0       	rcall	.+286    	; 0x5ba <SPI_write>
	SPI_write(address);
 49c:	8d 2f       	mov	r24, r29
 49e:	8d d0       	rcall	.+282    	; 0x5ba <SPI_write>
	SPI_write(data);
 4a0:	8c 2f       	mov	r24, r28
 4a2:	8b d0       	rcall	.+278    	; 0x5ba <SPI_write>
	
	mcp_deactivate_slave();
 4a4:	da df       	rcall	.-76     	; 0x45a <mcp_deactivate_slave>
}
 4a6:	df 91       	pop	r29
 4a8:	cf 91       	pop	r28
 4aa:	08 95       	ret

000004ac <mcp_2515_set_mode>:
	/* Deactivate Slave Select */
	set_bit(PORTB, PB7);
}

void mcp_2515_set_mode(uint8_t mode){
	mcp_2515_write(MCP_CANCTRL, mode);
 4ac:	68 2f       	mov	r22, r24
 4ae:	8f e0       	ldi	r24, 0x0F	; 15
 4b0:	ee cf       	rjmp	.-36     	; 0x48e <mcp_2515_write>
 4b2:	08 95       	ret

000004b4 <mcp_2515_init>:
}

uint8_t mcp_2515_init(uint8_t mode){
 4b4:	cf 93       	push	r28
 4b6:	c8 2f       	mov	r28, r24
	
	uint8_t val;
	SPI_init();
 4b8:	7a d0       	rcall	.+244    	; 0x5ae <SPI_init>
	
	mcp_2515_reset();
 4ba:	d1 df       	rcall	.-94     	; 0x45e <mcp_2515_reset>
	
	val = mcp_2515_read(MCP_CANSTAT);
 4bc:	8e e0       	ldi	r24, 0x0E	; 14
 4be:	da df       	rcall	.-76     	; 0x474 <mcp_2515_read>
	//printf("val : %d ",val);
	uint8_t mode_bits = (val & MODE_MASK);
 4c0:	80 7e       	andi	r24, 0xE0	; 224
	if(mode_bits != MODE_CONFIG){
 4c2:	80 38       	cpi	r24, 0x80	; 128
 4c4:	69 f0       	breq	.+26     	; 0x4e0 <mcp_2515_init+0x2c>
		printf("MCP2515 is NOT in Configuration mode after reset! Its config bits are %x\n", mode_bits);
 4c6:	1f 92       	push	r1
 4c8:	8f 93       	push	r24
 4ca:	8e e0       	ldi	r24, 0x0E	; 14
 4cc:	92 e0       	ldi	r25, 0x02	; 2
 4ce:	9f 93       	push	r25
 4d0:	8f 93       	push	r24
 4d2:	ea d0       	rcall	.+468    	; 0x6a8 <printf>
		return 1;
 4d4:	0f 90       	pop	r0
 4d6:	0f 90       	pop	r0
 4d8:	0f 90       	pop	r0
 4da:	0f 90       	pop	r0
 4dc:	81 e0       	ldi	r24, 0x01	; 1
 4de:	18 c0       	rjmp	.+48     	; 0x510 <mcp_2515_init+0x5c>
	}
	
	mcp_2515_set_mode(mode);
 4e0:	8c 2f       	mov	r24, r28
 4e2:	e4 df       	rcall	.-56     	; 0x4ac <mcp_2515_set_mode>
	
	val = mcp_2515_read(MCP_CANSTAT);
 4e4:	8e e0       	ldi	r24, 0x0E	; 14
 4e6:	c6 df       	rcall	.-116    	; 0x474 <mcp_2515_read>
	//printf("val : %d  and  MCP %d   AND MASK %d",val, MCP_CANSTAT, MODE_MASK);
	mode_bits = (val & MODE_MASK);
 4e8:	80 7e       	andi	r24, 0xE0	; 224
	
	if(mode_bits != mode){
 4ea:	8c 17       	cp	r24, r28
 4ec:	81 f0       	breq	.+32     	; 0x50e <mcp_2515_init+0x5a>
		
		printf("MCP2515 is NOT in correct mode after reset! Its config bits are %x\n", mode_bits);
 4ee:	1f 92       	push	r1
 4f0:	8f 93       	push	r24
 4f2:	88 e5       	ldi	r24, 0x58	; 88
 4f4:	92 e0       	ldi	r25, 0x02	; 2
 4f6:	9f 93       	push	r25
 4f8:	8f 93       	push	r24
 4fa:	d6 d0       	rcall	.+428    	; 0x6a8 <printf>
		printf("\n!\n");
 4fc:	8c e9       	ldi	r24, 0x9C	; 156
 4fe:	92 e0       	ldi	r25, 0x02	; 2
 500:	e4 d0       	rcall	.+456    	; 0x6ca <puts>
		return 1;
 502:	0f 90       	pop	r0
 504:	0f 90       	pop	r0
 506:	0f 90       	pop	r0
 508:	0f 90       	pop	r0
 50a:	81 e0       	ldi	r24, 0x01	; 1
 50c:	01 c0       	rjmp	.+2      	; 0x510 <mcp_2515_init+0x5c>
	}
	
	
	return 0;
 50e:	80 e0       	ldi	r24, 0x00	; 0
}
 510:	cf 91       	pop	r28
 512:	08 95       	ret

00000514 <mcp_2515_request_to_send>:
	SPI_write(data);
	
	mcp_deactivate_slave();
}

void mcp_2515_request_to_send(char buffer) {
 514:	cf 93       	push	r28
 516:	c8 2f       	mov	r28, r24
	mcp_activate_slave();
 518:	9e df       	rcall	.-196    	; 0x456 <mcp_activate_slave>
	
	SPI_write(buffer);
 51a:	8c 2f       	mov	r24, r28
 51c:	4e d0       	rcall	.+156    	; 0x5ba <SPI_write>
	
	mcp_deactivate_slave();
 51e:	9d df       	rcall	.-198    	; 0x45a <mcp_deactivate_slave>
}
 520:	cf 91       	pop	r28
 522:	08 95       	ret

00000524 <mcp_2515_bit_modify>:

void mcp_2515_bit_modify(uint8_t adress, uint8_t mask, uint8_t data) {
 524:	1f 93       	push	r17
 526:	cf 93       	push	r28
 528:	df 93       	push	r29
 52a:	18 2f       	mov	r17, r24
 52c:	d6 2f       	mov	r29, r22
 52e:	c4 2f       	mov	r28, r20
	mcp_activate_slave();
 530:	92 df       	rcall	.-220    	; 0x456 <mcp_activate_slave>
	
	SPI_write(MCP_BITMOD);
 532:	85 e0       	ldi	r24, 0x05	; 5
 534:	42 d0       	rcall	.+132    	; 0x5ba <SPI_write>
	SPI_write(adress);
 536:	81 2f       	mov	r24, r17
 538:	40 d0       	rcall	.+128    	; 0x5ba <SPI_write>
	SPI_write(mask);
 53a:	8d 2f       	mov	r24, r29
 53c:	3e d0       	rcall	.+124    	; 0x5ba <SPI_write>
	SPI_write(data);
 53e:	8c 2f       	mov	r24, r28
 540:	3c d0       	rcall	.+120    	; 0x5ba <SPI_write>
	
	mcp_deactivate_slave();
 542:	8b df       	rcall	.-234    	; 0x45a <mcp_deactivate_slave>
}
 544:	df 91       	pop	r29
 546:	cf 91       	pop	r28
 548:	1f 91       	pop	r17
 54a:	08 95       	ret

0000054c <put_char>:
	fdevopen(put_char, get_char);
	
}

int put_char(unsigned char c){
	loop_until_bit_is_set(UCSR0A, UDRE0);
 54c:	e0 ec       	ldi	r30, 0xC0	; 192
 54e:	f0 e0       	ldi	r31, 0x00	; 0
 550:	90 81       	ld	r25, Z
 552:	95 ff       	sbrs	r25, 5
 554:	fd cf       	rjmp	.-6      	; 0x550 <put_char+0x4>
	UDR0 = c;
 556:	80 93 c6 00 	sts	0x00C6, r24
	return 0;
}
 55a:	80 e0       	ldi	r24, 0x00	; 0
 55c:	90 e0       	ldi	r25, 0x00	; 0
 55e:	08 95       	ret

00000560 <get_char>:

int get_char(void){
	loop_until_bit_is_set(UCSR0A, RXC0);
 560:	e0 ec       	ldi	r30, 0xC0	; 192
 562:	f0 e0       	ldi	r31, 0x00	; 0
 564:	80 81       	ld	r24, Z
 566:	88 23       	and	r24, r24
 568:	ec f7       	brge	.-6      	; 0x564 <get_char+0x4>

	return UDR0;
 56a:	80 91 c6 00 	lds	r24, 0x00C6
}
 56e:	90 e0       	ldi	r25, 0x00	; 0
 570:	08 95       	ret

00000572 <UART_init>:
#define BAUD 9600 //Baud rate = symbols pr second.

void UART_init(unsigned long clock_speed){
	
	unsigned long baud = BAUD;
	unsigned char ubrr = (clock_speed / (baud * 16)) - 1;
 572:	20 e0       	ldi	r18, 0x00	; 0
 574:	38 e5       	ldi	r19, 0x58	; 88
 576:	42 e0       	ldi	r20, 0x02	; 2
 578:	50 e0       	ldi	r21, 0x00	; 0
 57a:	2a d0       	rcall	.+84     	; 0x5d0 <__udivmodsi4>
 57c:	21 50       	subi	r18, 0x01	; 1
	
	/* Set baud rate */
	UBRR0H = ubrr >> 8;			// Save the most significant bits (4 most sign. bits out of 12 bits)
 57e:	10 92 c5 00 	sts	0x00C5, r1
	UBRR0L = ubrr;				// Save the least sign. bits (8 least sign. bits)
 582:	20 93 c4 00 	sts	0x00C4, r18
	
	/* Set frame format: 8data, 2stop bit */
	UCSR0C = (1<<USBS0);		// USBS: 1 = Use 2 stop bits, not 1												
 586:	e2 ec       	ldi	r30, 0xC2	; 194
 588:	f0 e0       	ldi	r31, 0x00	; 0
 58a:	88 e0       	ldi	r24, 0x08	; 8
 58c:	80 83       	st	Z, r24
	UCSR0C = (3<<UCSZ00);		// UCSZ00: 3 - UCSZ0 and UCSZ1 defines 8 bits (11 binary) for each character	
 58e:	86 e0       	ldi	r24, 0x06	; 6
 590:	80 83       	st	Z, r24
	
	/* Enable receiver and transmitter */
	set_bit(UCSR0B,RXEN0);		//RXEN enables the receiver.
 592:	e1 ec       	ldi	r30, 0xC1	; 193
 594:	f0 e0       	ldi	r31, 0x00	; 0
 596:	80 81       	ld	r24, Z
 598:	80 61       	ori	r24, 0x10	; 16
 59a:	80 83       	st	Z, r24
	set_bit(UCSR0B,TXEN0);		//TXEN enables the transmitter.
 59c:	80 81       	ld	r24, Z
 59e:	88 60       	ori	r24, 0x08	; 8
 5a0:	80 83       	st	Z, r24
	
	fdevopen(put_char, get_char);
 5a2:	60 eb       	ldi	r22, 0xB0	; 176
 5a4:	72 e0       	ldi	r23, 0x02	; 2
 5a6:	86 ea       	ldi	r24, 0xA6	; 166
 5a8:	92 e0       	ldi	r25, 0x02	; 2
 5aa:	34 c0       	rjmp	.+104    	; 0x614 <fdevopen>
 5ac:	08 95       	ret

000005ae <SPI_init>:
#include "bit_macros.h"
#include <avr/delay.h>
void SPI_init(){
	
	/* Set SS, MOSI and SCK output, all others input */
	DDRB = (1<<PB0)|(1<<PB7)|(1<<PB2)|(1<<PB1);
 5ae:	87 e8       	ldi	r24, 0x87	; 135
 5b0:	84 b9       	out	0x04, r24	; 4
	/* Enable SPI, Master, set clock rate fck/16 */
	SPCR = (1<<SPE)|(1<<MSTR)|(1<<SPR0);
 5b2:	81 e5       	ldi	r24, 0x51	; 81
 5b4:	8c bd       	out	0x2c, r24	; 44
	
	/* Set SS-pin high */
	set_bit(PORTB, PB7);
 5b6:	2f 9a       	sbi	0x05, 7	; 5
 5b8:	08 95       	ret

000005ba <SPI_write>:

void SPI_write(char cData) {
	
	
	/* Start transmission */
	SPDR = cData;
 5ba:	8e bd       	out	0x2e, r24	; 46
	
	/* Wait for transmission complete */
	loop_until_bit_is_set(SPSR, SPIF);
 5bc:	0d b4       	in	r0, 0x2d	; 45
 5be:	07 fe       	sbrs	r0, 7
 5c0:	fd cf       	rjmp	.-6      	; 0x5bc <SPI_write+0x2>
	
}
 5c2:	08 95       	ret

000005c4 <SPI_read>:

char SPI_read() {
	
	/* Start shifting registers by putting a char in the register */
	SPDR = 0x00;
 5c4:	1e bc       	out	0x2e, r1	; 46
	//_delay_ms(10);
	/* Wait for receive complete */ 
	loop_until_bit_is_set(SPSR,SPIF);
 5c6:	0d b4       	in	r0, 0x2d	; 45
 5c8:	07 fe       	sbrs	r0, 7
 5ca:	fd cf       	rjmp	.-6      	; 0x5c6 <SPI_read+0x2>
	
	return SPDR;
 5cc:	8e b5       	in	r24, 0x2e	; 46
}
 5ce:	08 95       	ret

000005d0 <__udivmodsi4>:
 5d0:	a1 e2       	ldi	r26, 0x21	; 33
 5d2:	1a 2e       	mov	r1, r26
 5d4:	aa 1b       	sub	r26, r26
 5d6:	bb 1b       	sub	r27, r27
 5d8:	fd 01       	movw	r30, r26
 5da:	0d c0       	rjmp	.+26     	; 0x5f6 <__udivmodsi4_ep>

000005dc <__udivmodsi4_loop>:
 5dc:	aa 1f       	adc	r26, r26
 5de:	bb 1f       	adc	r27, r27
 5e0:	ee 1f       	adc	r30, r30
 5e2:	ff 1f       	adc	r31, r31
 5e4:	a2 17       	cp	r26, r18
 5e6:	b3 07       	cpc	r27, r19
 5e8:	e4 07       	cpc	r30, r20
 5ea:	f5 07       	cpc	r31, r21
 5ec:	20 f0       	brcs	.+8      	; 0x5f6 <__udivmodsi4_ep>
 5ee:	a2 1b       	sub	r26, r18
 5f0:	b3 0b       	sbc	r27, r19
 5f2:	e4 0b       	sbc	r30, r20
 5f4:	f5 0b       	sbc	r31, r21

000005f6 <__udivmodsi4_ep>:
 5f6:	66 1f       	adc	r22, r22
 5f8:	77 1f       	adc	r23, r23
 5fa:	88 1f       	adc	r24, r24
 5fc:	99 1f       	adc	r25, r25
 5fe:	1a 94       	dec	r1
 600:	69 f7       	brne	.-38     	; 0x5dc <__udivmodsi4_loop>
 602:	60 95       	com	r22
 604:	70 95       	com	r23
 606:	80 95       	com	r24
 608:	90 95       	com	r25
 60a:	9b 01       	movw	r18, r22
 60c:	ac 01       	movw	r20, r24
 60e:	bd 01       	movw	r22, r26
 610:	cf 01       	movw	r24, r30
 612:	08 95       	ret

00000614 <fdevopen>:
 614:	0f 93       	push	r16
 616:	1f 93       	push	r17
 618:	cf 93       	push	r28
 61a:	df 93       	push	r29
 61c:	ec 01       	movw	r28, r24
 61e:	8b 01       	movw	r16, r22
 620:	00 97       	sbiw	r24, 0x00	; 0
 622:	31 f4       	brne	.+12     	; 0x630 <fdevopen+0x1c>
 624:	61 15       	cp	r22, r1
 626:	71 05       	cpc	r23, r1
 628:	19 f4       	brne	.+6      	; 0x630 <fdevopen+0x1c>
 62a:	80 e0       	ldi	r24, 0x00	; 0
 62c:	90 e0       	ldi	r25, 0x00	; 0
 62e:	37 c0       	rjmp	.+110    	; 0x69e <fdevopen+0x8a>
 630:	6e e0       	ldi	r22, 0x0E	; 14
 632:	70 e0       	ldi	r23, 0x00	; 0
 634:	81 e0       	ldi	r24, 0x01	; 1
 636:	90 e0       	ldi	r25, 0x00	; 0
 638:	63 d2       	rcall	.+1222   	; 0xb00 <calloc>
 63a:	fc 01       	movw	r30, r24
 63c:	00 97       	sbiw	r24, 0x00	; 0
 63e:	a9 f3       	breq	.-22     	; 0x62a <fdevopen+0x16>
 640:	80 e8       	ldi	r24, 0x80	; 128
 642:	83 83       	std	Z+3, r24	; 0x03
 644:	01 15       	cp	r16, r1
 646:	11 05       	cpc	r17, r1
 648:	71 f0       	breq	.+28     	; 0x666 <fdevopen+0x52>
 64a:	13 87       	std	Z+11, r17	; 0x0b
 64c:	02 87       	std	Z+10, r16	; 0x0a
 64e:	81 e8       	ldi	r24, 0x81	; 129
 650:	83 83       	std	Z+3, r24	; 0x03
 652:	80 91 a4 02 	lds	r24, 0x02A4
 656:	90 91 a5 02 	lds	r25, 0x02A5
 65a:	89 2b       	or	r24, r25
 65c:	21 f4       	brne	.+8      	; 0x666 <fdevopen+0x52>
 65e:	f0 93 a5 02 	sts	0x02A5, r31
 662:	e0 93 a4 02 	sts	0x02A4, r30
 666:	20 97       	sbiw	r28, 0x00	; 0
 668:	c9 f0       	breq	.+50     	; 0x69c <fdevopen+0x88>
 66a:	d1 87       	std	Z+9, r29	; 0x09
 66c:	c0 87       	std	Z+8, r28	; 0x08
 66e:	83 81       	ldd	r24, Z+3	; 0x03
 670:	82 60       	ori	r24, 0x02	; 2
 672:	83 83       	std	Z+3, r24	; 0x03
 674:	80 91 a6 02 	lds	r24, 0x02A6
 678:	90 91 a7 02 	lds	r25, 0x02A7
 67c:	89 2b       	or	r24, r25
 67e:	71 f4       	brne	.+28     	; 0x69c <fdevopen+0x88>
 680:	f0 93 a7 02 	sts	0x02A7, r31
 684:	e0 93 a6 02 	sts	0x02A6, r30
 688:	80 91 a8 02 	lds	r24, 0x02A8
 68c:	90 91 a9 02 	lds	r25, 0x02A9
 690:	89 2b       	or	r24, r25
 692:	21 f4       	brne	.+8      	; 0x69c <fdevopen+0x88>
 694:	f0 93 a9 02 	sts	0x02A9, r31
 698:	e0 93 a8 02 	sts	0x02A8, r30
 69c:	cf 01       	movw	r24, r30
 69e:	df 91       	pop	r29
 6a0:	cf 91       	pop	r28
 6a2:	1f 91       	pop	r17
 6a4:	0f 91       	pop	r16
 6a6:	08 95       	ret

000006a8 <printf>:
 6a8:	cf 93       	push	r28
 6aa:	df 93       	push	r29
 6ac:	cd b7       	in	r28, 0x3d	; 61
 6ae:	de b7       	in	r29, 0x3e	; 62
 6b0:	fe 01       	movw	r30, r28
 6b2:	36 96       	adiw	r30, 0x06	; 6
 6b4:	61 91       	ld	r22, Z+
 6b6:	71 91       	ld	r23, Z+
 6b8:	af 01       	movw	r20, r30
 6ba:	80 91 a6 02 	lds	r24, 0x02A6
 6be:	90 91 a7 02 	lds	r25, 0x02A7
 6c2:	30 d0       	rcall	.+96     	; 0x724 <vfprintf>
 6c4:	df 91       	pop	r29
 6c6:	cf 91       	pop	r28
 6c8:	08 95       	ret

000006ca <puts>:
 6ca:	0f 93       	push	r16
 6cc:	1f 93       	push	r17
 6ce:	cf 93       	push	r28
 6d0:	df 93       	push	r29
 6d2:	e0 91 a6 02 	lds	r30, 0x02A6
 6d6:	f0 91 a7 02 	lds	r31, 0x02A7
 6da:	23 81       	ldd	r18, Z+3	; 0x03
 6dc:	21 ff       	sbrs	r18, 1
 6de:	1b c0       	rjmp	.+54     	; 0x716 <puts+0x4c>
 6e0:	ec 01       	movw	r28, r24
 6e2:	00 e0       	ldi	r16, 0x00	; 0
 6e4:	10 e0       	ldi	r17, 0x00	; 0
 6e6:	89 91       	ld	r24, Y+
 6e8:	60 91 a6 02 	lds	r22, 0x02A6
 6ec:	70 91 a7 02 	lds	r23, 0x02A7
 6f0:	db 01       	movw	r26, r22
 6f2:	18 96       	adiw	r26, 0x08	; 8
 6f4:	ed 91       	ld	r30, X+
 6f6:	fc 91       	ld	r31, X
 6f8:	19 97       	sbiw	r26, 0x09	; 9
 6fa:	88 23       	and	r24, r24
 6fc:	31 f0       	breq	.+12     	; 0x70a <puts+0x40>
 6fe:	19 95       	eicall
 700:	89 2b       	or	r24, r25
 702:	89 f3       	breq	.-30     	; 0x6e6 <puts+0x1c>
 704:	0f ef       	ldi	r16, 0xFF	; 255
 706:	1f ef       	ldi	r17, 0xFF	; 255
 708:	ee cf       	rjmp	.-36     	; 0x6e6 <puts+0x1c>
 70a:	8a e0       	ldi	r24, 0x0A	; 10
 70c:	19 95       	eicall
 70e:	89 2b       	or	r24, r25
 710:	11 f4       	brne	.+4      	; 0x716 <puts+0x4c>
 712:	c8 01       	movw	r24, r16
 714:	02 c0       	rjmp	.+4      	; 0x71a <puts+0x50>
 716:	8f ef       	ldi	r24, 0xFF	; 255
 718:	9f ef       	ldi	r25, 0xFF	; 255
 71a:	df 91       	pop	r29
 71c:	cf 91       	pop	r28
 71e:	1f 91       	pop	r17
 720:	0f 91       	pop	r16
 722:	08 95       	ret

00000724 <vfprintf>:
 724:	2f 92       	push	r2
 726:	3f 92       	push	r3
 728:	4f 92       	push	r4
 72a:	5f 92       	push	r5
 72c:	6f 92       	push	r6
 72e:	7f 92       	push	r7
 730:	8f 92       	push	r8
 732:	9f 92       	push	r9
 734:	af 92       	push	r10
 736:	bf 92       	push	r11
 738:	cf 92       	push	r12
 73a:	df 92       	push	r13
 73c:	ef 92       	push	r14
 73e:	ff 92       	push	r15
 740:	0f 93       	push	r16
 742:	1f 93       	push	r17
 744:	cf 93       	push	r28
 746:	df 93       	push	r29
 748:	cd b7       	in	r28, 0x3d	; 61
 74a:	de b7       	in	r29, 0x3e	; 62
 74c:	2c 97       	sbiw	r28, 0x0c	; 12
 74e:	0f b6       	in	r0, 0x3f	; 63
 750:	f8 94       	cli
 752:	de bf       	out	0x3e, r29	; 62
 754:	0f be       	out	0x3f, r0	; 63
 756:	cd bf       	out	0x3d, r28	; 61
 758:	7c 01       	movw	r14, r24
 75a:	6b 01       	movw	r12, r22
 75c:	8a 01       	movw	r16, r20
 75e:	fc 01       	movw	r30, r24
 760:	17 82       	std	Z+7, r1	; 0x07
 762:	16 82       	std	Z+6, r1	; 0x06
 764:	83 81       	ldd	r24, Z+3	; 0x03
 766:	81 ff       	sbrs	r24, 1
 768:	b0 c1       	rjmp	.+864    	; 0xaca <vfprintf+0x3a6>
 76a:	ce 01       	movw	r24, r28
 76c:	01 96       	adiw	r24, 0x01	; 1
 76e:	4c 01       	movw	r8, r24
 770:	f7 01       	movw	r30, r14
 772:	93 81       	ldd	r25, Z+3	; 0x03
 774:	f6 01       	movw	r30, r12
 776:	93 fd       	sbrc	r25, 3
 778:	85 91       	lpm	r24, Z+
 77a:	93 ff       	sbrs	r25, 3
 77c:	81 91       	ld	r24, Z+
 77e:	6f 01       	movw	r12, r30
 780:	88 23       	and	r24, r24
 782:	09 f4       	brne	.+2      	; 0x786 <vfprintf+0x62>
 784:	9e c1       	rjmp	.+828    	; 0xac2 <vfprintf+0x39e>
 786:	85 32       	cpi	r24, 0x25	; 37
 788:	39 f4       	brne	.+14     	; 0x798 <vfprintf+0x74>
 78a:	93 fd       	sbrc	r25, 3
 78c:	85 91       	lpm	r24, Z+
 78e:	93 ff       	sbrs	r25, 3
 790:	81 91       	ld	r24, Z+
 792:	6f 01       	movw	r12, r30
 794:	85 32       	cpi	r24, 0x25	; 37
 796:	21 f4       	brne	.+8      	; 0x7a0 <vfprintf+0x7c>
 798:	b7 01       	movw	r22, r14
 79a:	90 e0       	ldi	r25, 0x00	; 0
 79c:	0f d3       	rcall	.+1566   	; 0xdbc <fputc>
 79e:	e8 cf       	rjmp	.-48     	; 0x770 <vfprintf+0x4c>
 7a0:	51 2c       	mov	r5, r1
 7a2:	31 2c       	mov	r3, r1
 7a4:	20 e0       	ldi	r18, 0x00	; 0
 7a6:	20 32       	cpi	r18, 0x20	; 32
 7a8:	a0 f4       	brcc	.+40     	; 0x7d2 <vfprintf+0xae>
 7aa:	8b 32       	cpi	r24, 0x2B	; 43
 7ac:	69 f0       	breq	.+26     	; 0x7c8 <vfprintf+0xa4>
 7ae:	30 f4       	brcc	.+12     	; 0x7bc <vfprintf+0x98>
 7b0:	80 32       	cpi	r24, 0x20	; 32
 7b2:	59 f0       	breq	.+22     	; 0x7ca <vfprintf+0xa6>
 7b4:	83 32       	cpi	r24, 0x23	; 35
 7b6:	69 f4       	brne	.+26     	; 0x7d2 <vfprintf+0xae>
 7b8:	20 61       	ori	r18, 0x10	; 16
 7ba:	2c c0       	rjmp	.+88     	; 0x814 <vfprintf+0xf0>
 7bc:	8d 32       	cpi	r24, 0x2D	; 45
 7be:	39 f0       	breq	.+14     	; 0x7ce <vfprintf+0xaa>
 7c0:	80 33       	cpi	r24, 0x30	; 48
 7c2:	39 f4       	brne	.+14     	; 0x7d2 <vfprintf+0xae>
 7c4:	21 60       	ori	r18, 0x01	; 1
 7c6:	26 c0       	rjmp	.+76     	; 0x814 <vfprintf+0xf0>
 7c8:	22 60       	ori	r18, 0x02	; 2
 7ca:	24 60       	ori	r18, 0x04	; 4
 7cc:	23 c0       	rjmp	.+70     	; 0x814 <vfprintf+0xf0>
 7ce:	28 60       	ori	r18, 0x08	; 8
 7d0:	21 c0       	rjmp	.+66     	; 0x814 <vfprintf+0xf0>
 7d2:	27 fd       	sbrc	r18, 7
 7d4:	27 c0       	rjmp	.+78     	; 0x824 <vfprintf+0x100>
 7d6:	30 ed       	ldi	r19, 0xD0	; 208
 7d8:	38 0f       	add	r19, r24
 7da:	3a 30       	cpi	r19, 0x0A	; 10
 7dc:	78 f4       	brcc	.+30     	; 0x7fc <vfprintf+0xd8>
 7de:	26 ff       	sbrs	r18, 6
 7e0:	06 c0       	rjmp	.+12     	; 0x7ee <vfprintf+0xca>
 7e2:	fa e0       	ldi	r31, 0x0A	; 10
 7e4:	5f 9e       	mul	r5, r31
 7e6:	30 0d       	add	r19, r0
 7e8:	11 24       	eor	r1, r1
 7ea:	53 2e       	mov	r5, r19
 7ec:	13 c0       	rjmp	.+38     	; 0x814 <vfprintf+0xf0>
 7ee:	8a e0       	ldi	r24, 0x0A	; 10
 7f0:	38 9e       	mul	r3, r24
 7f2:	30 0d       	add	r19, r0
 7f4:	11 24       	eor	r1, r1
 7f6:	33 2e       	mov	r3, r19
 7f8:	20 62       	ori	r18, 0x20	; 32
 7fa:	0c c0       	rjmp	.+24     	; 0x814 <vfprintf+0xf0>
 7fc:	8e 32       	cpi	r24, 0x2E	; 46
 7fe:	21 f4       	brne	.+8      	; 0x808 <vfprintf+0xe4>
 800:	26 fd       	sbrc	r18, 6
 802:	5f c1       	rjmp	.+702    	; 0xac2 <vfprintf+0x39e>
 804:	20 64       	ori	r18, 0x40	; 64
 806:	06 c0       	rjmp	.+12     	; 0x814 <vfprintf+0xf0>
 808:	8c 36       	cpi	r24, 0x6C	; 108
 80a:	11 f4       	brne	.+4      	; 0x810 <vfprintf+0xec>
 80c:	20 68       	ori	r18, 0x80	; 128
 80e:	02 c0       	rjmp	.+4      	; 0x814 <vfprintf+0xf0>
 810:	88 36       	cpi	r24, 0x68	; 104
 812:	41 f4       	brne	.+16     	; 0x824 <vfprintf+0x100>
 814:	f6 01       	movw	r30, r12
 816:	93 fd       	sbrc	r25, 3
 818:	85 91       	lpm	r24, Z+
 81a:	93 ff       	sbrs	r25, 3
 81c:	81 91       	ld	r24, Z+
 81e:	6f 01       	movw	r12, r30
 820:	81 11       	cpse	r24, r1
 822:	c1 cf       	rjmp	.-126    	; 0x7a6 <vfprintf+0x82>
 824:	98 2f       	mov	r25, r24
 826:	9f 7d       	andi	r25, 0xDF	; 223
 828:	95 54       	subi	r25, 0x45	; 69
 82a:	93 30       	cpi	r25, 0x03	; 3
 82c:	28 f4       	brcc	.+10     	; 0x838 <vfprintf+0x114>
 82e:	0c 5f       	subi	r16, 0xFC	; 252
 830:	1f 4f       	sbci	r17, 0xFF	; 255
 832:	ff e3       	ldi	r31, 0x3F	; 63
 834:	f9 83       	std	Y+1, r31	; 0x01
 836:	0d c0       	rjmp	.+26     	; 0x852 <vfprintf+0x12e>
 838:	83 36       	cpi	r24, 0x63	; 99
 83a:	31 f0       	breq	.+12     	; 0x848 <vfprintf+0x124>
 83c:	83 37       	cpi	r24, 0x73	; 115
 83e:	71 f0       	breq	.+28     	; 0x85c <vfprintf+0x138>
 840:	83 35       	cpi	r24, 0x53	; 83
 842:	09 f0       	breq	.+2      	; 0x846 <vfprintf+0x122>
 844:	57 c0       	rjmp	.+174    	; 0x8f4 <vfprintf+0x1d0>
 846:	21 c0       	rjmp	.+66     	; 0x88a <vfprintf+0x166>
 848:	f8 01       	movw	r30, r16
 84a:	80 81       	ld	r24, Z
 84c:	89 83       	std	Y+1, r24	; 0x01
 84e:	0e 5f       	subi	r16, 0xFE	; 254
 850:	1f 4f       	sbci	r17, 0xFF	; 255
 852:	44 24       	eor	r4, r4
 854:	43 94       	inc	r4
 856:	51 2c       	mov	r5, r1
 858:	54 01       	movw	r10, r8
 85a:	14 c0       	rjmp	.+40     	; 0x884 <vfprintf+0x160>
 85c:	38 01       	movw	r6, r16
 85e:	f2 e0       	ldi	r31, 0x02	; 2
 860:	6f 0e       	add	r6, r31
 862:	71 1c       	adc	r7, r1
 864:	f8 01       	movw	r30, r16
 866:	a0 80       	ld	r10, Z
 868:	b1 80       	ldd	r11, Z+1	; 0x01
 86a:	26 ff       	sbrs	r18, 6
 86c:	03 c0       	rjmp	.+6      	; 0x874 <vfprintf+0x150>
 86e:	65 2d       	mov	r22, r5
 870:	70 e0       	ldi	r23, 0x00	; 0
 872:	02 c0       	rjmp	.+4      	; 0x878 <vfprintf+0x154>
 874:	6f ef       	ldi	r22, 0xFF	; 255
 876:	7f ef       	ldi	r23, 0xFF	; 255
 878:	c5 01       	movw	r24, r10
 87a:	2c 87       	std	Y+12, r18	; 0x0c
 87c:	94 d2       	rcall	.+1320   	; 0xda6 <strnlen>
 87e:	2c 01       	movw	r4, r24
 880:	83 01       	movw	r16, r6
 882:	2c 85       	ldd	r18, Y+12	; 0x0c
 884:	2f 77       	andi	r18, 0x7F	; 127
 886:	22 2e       	mov	r2, r18
 888:	16 c0       	rjmp	.+44     	; 0x8b6 <vfprintf+0x192>
 88a:	38 01       	movw	r6, r16
 88c:	f2 e0       	ldi	r31, 0x02	; 2
 88e:	6f 0e       	add	r6, r31
 890:	71 1c       	adc	r7, r1
 892:	f8 01       	movw	r30, r16
 894:	a0 80       	ld	r10, Z
 896:	b1 80       	ldd	r11, Z+1	; 0x01
 898:	26 ff       	sbrs	r18, 6
 89a:	03 c0       	rjmp	.+6      	; 0x8a2 <vfprintf+0x17e>
 89c:	65 2d       	mov	r22, r5
 89e:	70 e0       	ldi	r23, 0x00	; 0
 8a0:	02 c0       	rjmp	.+4      	; 0x8a6 <vfprintf+0x182>
 8a2:	6f ef       	ldi	r22, 0xFF	; 255
 8a4:	7f ef       	ldi	r23, 0xFF	; 255
 8a6:	c5 01       	movw	r24, r10
 8a8:	2c 87       	std	Y+12, r18	; 0x0c
 8aa:	6b d2       	rcall	.+1238   	; 0xd82 <strnlen_P>
 8ac:	2c 01       	movw	r4, r24
 8ae:	2c 85       	ldd	r18, Y+12	; 0x0c
 8b0:	20 68       	ori	r18, 0x80	; 128
 8b2:	22 2e       	mov	r2, r18
 8b4:	83 01       	movw	r16, r6
 8b6:	23 fc       	sbrc	r2, 3
 8b8:	19 c0       	rjmp	.+50     	; 0x8ec <vfprintf+0x1c8>
 8ba:	83 2d       	mov	r24, r3
 8bc:	90 e0       	ldi	r25, 0x00	; 0
 8be:	48 16       	cp	r4, r24
 8c0:	59 06       	cpc	r5, r25
 8c2:	a0 f4       	brcc	.+40     	; 0x8ec <vfprintf+0x1c8>
 8c4:	b7 01       	movw	r22, r14
 8c6:	80 e2       	ldi	r24, 0x20	; 32
 8c8:	90 e0       	ldi	r25, 0x00	; 0
 8ca:	78 d2       	rcall	.+1264   	; 0xdbc <fputc>
 8cc:	3a 94       	dec	r3
 8ce:	f5 cf       	rjmp	.-22     	; 0x8ba <vfprintf+0x196>
 8d0:	f5 01       	movw	r30, r10
 8d2:	27 fc       	sbrc	r2, 7
 8d4:	85 91       	lpm	r24, Z+
 8d6:	27 fe       	sbrs	r2, 7
 8d8:	81 91       	ld	r24, Z+
 8da:	5f 01       	movw	r10, r30
 8dc:	b7 01       	movw	r22, r14
 8de:	90 e0       	ldi	r25, 0x00	; 0
 8e0:	6d d2       	rcall	.+1242   	; 0xdbc <fputc>
 8e2:	31 10       	cpse	r3, r1
 8e4:	3a 94       	dec	r3
 8e6:	f1 e0       	ldi	r31, 0x01	; 1
 8e8:	4f 1a       	sub	r4, r31
 8ea:	51 08       	sbc	r5, r1
 8ec:	41 14       	cp	r4, r1
 8ee:	51 04       	cpc	r5, r1
 8f0:	79 f7       	brne	.-34     	; 0x8d0 <vfprintf+0x1ac>
 8f2:	de c0       	rjmp	.+444    	; 0xab0 <vfprintf+0x38c>
 8f4:	84 36       	cpi	r24, 0x64	; 100
 8f6:	11 f0       	breq	.+4      	; 0x8fc <vfprintf+0x1d8>
 8f8:	89 36       	cpi	r24, 0x69	; 105
 8fa:	31 f5       	brne	.+76     	; 0x948 <vfprintf+0x224>
 8fc:	f8 01       	movw	r30, r16
 8fe:	27 ff       	sbrs	r18, 7
 900:	07 c0       	rjmp	.+14     	; 0x910 <vfprintf+0x1ec>
 902:	60 81       	ld	r22, Z
 904:	71 81       	ldd	r23, Z+1	; 0x01
 906:	82 81       	ldd	r24, Z+2	; 0x02
 908:	93 81       	ldd	r25, Z+3	; 0x03
 90a:	0c 5f       	subi	r16, 0xFC	; 252
 90c:	1f 4f       	sbci	r17, 0xFF	; 255
 90e:	08 c0       	rjmp	.+16     	; 0x920 <vfprintf+0x1fc>
 910:	60 81       	ld	r22, Z
 912:	71 81       	ldd	r23, Z+1	; 0x01
 914:	88 27       	eor	r24, r24
 916:	77 fd       	sbrc	r23, 7
 918:	80 95       	com	r24
 91a:	98 2f       	mov	r25, r24
 91c:	0e 5f       	subi	r16, 0xFE	; 254
 91e:	1f 4f       	sbci	r17, 0xFF	; 255
 920:	2f 76       	andi	r18, 0x6F	; 111
 922:	b2 2e       	mov	r11, r18
 924:	97 ff       	sbrs	r25, 7
 926:	09 c0       	rjmp	.+18     	; 0x93a <vfprintf+0x216>
 928:	90 95       	com	r25
 92a:	80 95       	com	r24
 92c:	70 95       	com	r23
 92e:	61 95       	neg	r22
 930:	7f 4f       	sbci	r23, 0xFF	; 255
 932:	8f 4f       	sbci	r24, 0xFF	; 255
 934:	9f 4f       	sbci	r25, 0xFF	; 255
 936:	20 68       	ori	r18, 0x80	; 128
 938:	b2 2e       	mov	r11, r18
 93a:	2a e0       	ldi	r18, 0x0A	; 10
 93c:	30 e0       	ldi	r19, 0x00	; 0
 93e:	a4 01       	movw	r20, r8
 940:	6f d2       	rcall	.+1246   	; 0xe20 <__ultoa_invert>
 942:	a8 2e       	mov	r10, r24
 944:	a8 18       	sub	r10, r8
 946:	43 c0       	rjmp	.+134    	; 0x9ce <vfprintf+0x2aa>
 948:	85 37       	cpi	r24, 0x75	; 117
 94a:	29 f4       	brne	.+10     	; 0x956 <vfprintf+0x232>
 94c:	2f 7e       	andi	r18, 0xEF	; 239
 94e:	b2 2e       	mov	r11, r18
 950:	2a e0       	ldi	r18, 0x0A	; 10
 952:	30 e0       	ldi	r19, 0x00	; 0
 954:	25 c0       	rjmp	.+74     	; 0x9a0 <vfprintf+0x27c>
 956:	f2 2f       	mov	r31, r18
 958:	f9 7f       	andi	r31, 0xF9	; 249
 95a:	bf 2e       	mov	r11, r31
 95c:	8f 36       	cpi	r24, 0x6F	; 111
 95e:	c1 f0       	breq	.+48     	; 0x990 <vfprintf+0x26c>
 960:	18 f4       	brcc	.+6      	; 0x968 <vfprintf+0x244>
 962:	88 35       	cpi	r24, 0x58	; 88
 964:	79 f0       	breq	.+30     	; 0x984 <vfprintf+0x260>
 966:	ad c0       	rjmp	.+346    	; 0xac2 <vfprintf+0x39e>
 968:	80 37       	cpi	r24, 0x70	; 112
 96a:	19 f0       	breq	.+6      	; 0x972 <vfprintf+0x24e>
 96c:	88 37       	cpi	r24, 0x78	; 120
 96e:	21 f0       	breq	.+8      	; 0x978 <vfprintf+0x254>
 970:	a8 c0       	rjmp	.+336    	; 0xac2 <vfprintf+0x39e>
 972:	2f 2f       	mov	r18, r31
 974:	20 61       	ori	r18, 0x10	; 16
 976:	b2 2e       	mov	r11, r18
 978:	b4 fe       	sbrs	r11, 4
 97a:	0d c0       	rjmp	.+26     	; 0x996 <vfprintf+0x272>
 97c:	8b 2d       	mov	r24, r11
 97e:	84 60       	ori	r24, 0x04	; 4
 980:	b8 2e       	mov	r11, r24
 982:	09 c0       	rjmp	.+18     	; 0x996 <vfprintf+0x272>
 984:	24 ff       	sbrs	r18, 4
 986:	0a c0       	rjmp	.+20     	; 0x99c <vfprintf+0x278>
 988:	9f 2f       	mov	r25, r31
 98a:	96 60       	ori	r25, 0x06	; 6
 98c:	b9 2e       	mov	r11, r25
 98e:	06 c0       	rjmp	.+12     	; 0x99c <vfprintf+0x278>
 990:	28 e0       	ldi	r18, 0x08	; 8
 992:	30 e0       	ldi	r19, 0x00	; 0
 994:	05 c0       	rjmp	.+10     	; 0x9a0 <vfprintf+0x27c>
 996:	20 e1       	ldi	r18, 0x10	; 16
 998:	30 e0       	ldi	r19, 0x00	; 0
 99a:	02 c0       	rjmp	.+4      	; 0x9a0 <vfprintf+0x27c>
 99c:	20 e1       	ldi	r18, 0x10	; 16
 99e:	32 e0       	ldi	r19, 0x02	; 2
 9a0:	f8 01       	movw	r30, r16
 9a2:	b7 fe       	sbrs	r11, 7
 9a4:	07 c0       	rjmp	.+14     	; 0x9b4 <vfprintf+0x290>
 9a6:	60 81       	ld	r22, Z
 9a8:	71 81       	ldd	r23, Z+1	; 0x01
 9aa:	82 81       	ldd	r24, Z+2	; 0x02
 9ac:	93 81       	ldd	r25, Z+3	; 0x03
 9ae:	0c 5f       	subi	r16, 0xFC	; 252
 9b0:	1f 4f       	sbci	r17, 0xFF	; 255
 9b2:	06 c0       	rjmp	.+12     	; 0x9c0 <vfprintf+0x29c>
 9b4:	60 81       	ld	r22, Z
 9b6:	71 81       	ldd	r23, Z+1	; 0x01
 9b8:	80 e0       	ldi	r24, 0x00	; 0
 9ba:	90 e0       	ldi	r25, 0x00	; 0
 9bc:	0e 5f       	subi	r16, 0xFE	; 254
 9be:	1f 4f       	sbci	r17, 0xFF	; 255
 9c0:	a4 01       	movw	r20, r8
 9c2:	2e d2       	rcall	.+1116   	; 0xe20 <__ultoa_invert>
 9c4:	a8 2e       	mov	r10, r24
 9c6:	a8 18       	sub	r10, r8
 9c8:	fb 2d       	mov	r31, r11
 9ca:	ff 77       	andi	r31, 0x7F	; 127
 9cc:	bf 2e       	mov	r11, r31
 9ce:	b6 fe       	sbrs	r11, 6
 9d0:	0b c0       	rjmp	.+22     	; 0x9e8 <vfprintf+0x2c4>
 9d2:	2b 2d       	mov	r18, r11
 9d4:	2e 7f       	andi	r18, 0xFE	; 254
 9d6:	a5 14       	cp	r10, r5
 9d8:	50 f4       	brcc	.+20     	; 0x9ee <vfprintf+0x2ca>
 9da:	b4 fe       	sbrs	r11, 4
 9dc:	0a c0       	rjmp	.+20     	; 0x9f2 <vfprintf+0x2ce>
 9de:	b2 fc       	sbrc	r11, 2
 9e0:	08 c0       	rjmp	.+16     	; 0x9f2 <vfprintf+0x2ce>
 9e2:	2b 2d       	mov	r18, r11
 9e4:	2e 7e       	andi	r18, 0xEE	; 238
 9e6:	05 c0       	rjmp	.+10     	; 0x9f2 <vfprintf+0x2ce>
 9e8:	7a 2c       	mov	r7, r10
 9ea:	2b 2d       	mov	r18, r11
 9ec:	03 c0       	rjmp	.+6      	; 0x9f4 <vfprintf+0x2d0>
 9ee:	7a 2c       	mov	r7, r10
 9f0:	01 c0       	rjmp	.+2      	; 0x9f4 <vfprintf+0x2d0>
 9f2:	75 2c       	mov	r7, r5
 9f4:	24 ff       	sbrs	r18, 4
 9f6:	0d c0       	rjmp	.+26     	; 0xa12 <vfprintf+0x2ee>
 9f8:	fe 01       	movw	r30, r28
 9fa:	ea 0d       	add	r30, r10
 9fc:	f1 1d       	adc	r31, r1
 9fe:	80 81       	ld	r24, Z
 a00:	80 33       	cpi	r24, 0x30	; 48
 a02:	11 f4       	brne	.+4      	; 0xa08 <vfprintf+0x2e4>
 a04:	29 7e       	andi	r18, 0xE9	; 233
 a06:	09 c0       	rjmp	.+18     	; 0xa1a <vfprintf+0x2f6>
 a08:	22 ff       	sbrs	r18, 2
 a0a:	06 c0       	rjmp	.+12     	; 0xa18 <vfprintf+0x2f4>
 a0c:	73 94       	inc	r7
 a0e:	73 94       	inc	r7
 a10:	04 c0       	rjmp	.+8      	; 0xa1a <vfprintf+0x2f6>
 a12:	82 2f       	mov	r24, r18
 a14:	86 78       	andi	r24, 0x86	; 134
 a16:	09 f0       	breq	.+2      	; 0xa1a <vfprintf+0x2f6>
 a18:	73 94       	inc	r7
 a1a:	23 fd       	sbrc	r18, 3
 a1c:	12 c0       	rjmp	.+36     	; 0xa42 <vfprintf+0x31e>
 a1e:	20 ff       	sbrs	r18, 0
 a20:	06 c0       	rjmp	.+12     	; 0xa2e <vfprintf+0x30a>
 a22:	5a 2c       	mov	r5, r10
 a24:	73 14       	cp	r7, r3
 a26:	18 f4       	brcc	.+6      	; 0xa2e <vfprintf+0x30a>
 a28:	53 0c       	add	r5, r3
 a2a:	57 18       	sub	r5, r7
 a2c:	73 2c       	mov	r7, r3
 a2e:	73 14       	cp	r7, r3
 a30:	60 f4       	brcc	.+24     	; 0xa4a <vfprintf+0x326>
 a32:	b7 01       	movw	r22, r14
 a34:	80 e2       	ldi	r24, 0x20	; 32
 a36:	90 e0       	ldi	r25, 0x00	; 0
 a38:	2c 87       	std	Y+12, r18	; 0x0c
 a3a:	c0 d1       	rcall	.+896    	; 0xdbc <fputc>
 a3c:	73 94       	inc	r7
 a3e:	2c 85       	ldd	r18, Y+12	; 0x0c
 a40:	f6 cf       	rjmp	.-20     	; 0xa2e <vfprintf+0x30a>
 a42:	73 14       	cp	r7, r3
 a44:	10 f4       	brcc	.+4      	; 0xa4a <vfprintf+0x326>
 a46:	37 18       	sub	r3, r7
 a48:	01 c0       	rjmp	.+2      	; 0xa4c <vfprintf+0x328>
 a4a:	31 2c       	mov	r3, r1
 a4c:	24 ff       	sbrs	r18, 4
 a4e:	11 c0       	rjmp	.+34     	; 0xa72 <vfprintf+0x34e>
 a50:	b7 01       	movw	r22, r14
 a52:	80 e3       	ldi	r24, 0x30	; 48
 a54:	90 e0       	ldi	r25, 0x00	; 0
 a56:	2c 87       	std	Y+12, r18	; 0x0c
 a58:	b1 d1       	rcall	.+866    	; 0xdbc <fputc>
 a5a:	2c 85       	ldd	r18, Y+12	; 0x0c
 a5c:	22 ff       	sbrs	r18, 2
 a5e:	16 c0       	rjmp	.+44     	; 0xa8c <vfprintf+0x368>
 a60:	21 ff       	sbrs	r18, 1
 a62:	03 c0       	rjmp	.+6      	; 0xa6a <vfprintf+0x346>
 a64:	88 e5       	ldi	r24, 0x58	; 88
 a66:	90 e0       	ldi	r25, 0x00	; 0
 a68:	02 c0       	rjmp	.+4      	; 0xa6e <vfprintf+0x34a>
 a6a:	88 e7       	ldi	r24, 0x78	; 120
 a6c:	90 e0       	ldi	r25, 0x00	; 0
 a6e:	b7 01       	movw	r22, r14
 a70:	0c c0       	rjmp	.+24     	; 0xa8a <vfprintf+0x366>
 a72:	82 2f       	mov	r24, r18
 a74:	86 78       	andi	r24, 0x86	; 134
 a76:	51 f0       	breq	.+20     	; 0xa8c <vfprintf+0x368>
 a78:	21 fd       	sbrc	r18, 1
 a7a:	02 c0       	rjmp	.+4      	; 0xa80 <vfprintf+0x35c>
 a7c:	80 e2       	ldi	r24, 0x20	; 32
 a7e:	01 c0       	rjmp	.+2      	; 0xa82 <vfprintf+0x35e>
 a80:	8b e2       	ldi	r24, 0x2B	; 43
 a82:	27 fd       	sbrc	r18, 7
 a84:	8d e2       	ldi	r24, 0x2D	; 45
 a86:	b7 01       	movw	r22, r14
 a88:	90 e0       	ldi	r25, 0x00	; 0
 a8a:	98 d1       	rcall	.+816    	; 0xdbc <fputc>
 a8c:	a5 14       	cp	r10, r5
 a8e:	30 f4       	brcc	.+12     	; 0xa9c <vfprintf+0x378>
 a90:	b7 01       	movw	r22, r14
 a92:	80 e3       	ldi	r24, 0x30	; 48
 a94:	90 e0       	ldi	r25, 0x00	; 0
 a96:	92 d1       	rcall	.+804    	; 0xdbc <fputc>
 a98:	5a 94       	dec	r5
 a9a:	f8 cf       	rjmp	.-16     	; 0xa8c <vfprintf+0x368>
 a9c:	aa 94       	dec	r10
 a9e:	f4 01       	movw	r30, r8
 aa0:	ea 0d       	add	r30, r10
 aa2:	f1 1d       	adc	r31, r1
 aa4:	80 81       	ld	r24, Z
 aa6:	b7 01       	movw	r22, r14
 aa8:	90 e0       	ldi	r25, 0x00	; 0
 aaa:	88 d1       	rcall	.+784    	; 0xdbc <fputc>
 aac:	a1 10       	cpse	r10, r1
 aae:	f6 cf       	rjmp	.-20     	; 0xa9c <vfprintf+0x378>
 ab0:	33 20       	and	r3, r3
 ab2:	09 f4       	brne	.+2      	; 0xab6 <vfprintf+0x392>
 ab4:	5d ce       	rjmp	.-838    	; 0x770 <vfprintf+0x4c>
 ab6:	b7 01       	movw	r22, r14
 ab8:	80 e2       	ldi	r24, 0x20	; 32
 aba:	90 e0       	ldi	r25, 0x00	; 0
 abc:	7f d1       	rcall	.+766    	; 0xdbc <fputc>
 abe:	3a 94       	dec	r3
 ac0:	f7 cf       	rjmp	.-18     	; 0xab0 <vfprintf+0x38c>
 ac2:	f7 01       	movw	r30, r14
 ac4:	86 81       	ldd	r24, Z+6	; 0x06
 ac6:	97 81       	ldd	r25, Z+7	; 0x07
 ac8:	02 c0       	rjmp	.+4      	; 0xace <vfprintf+0x3aa>
 aca:	8f ef       	ldi	r24, 0xFF	; 255
 acc:	9f ef       	ldi	r25, 0xFF	; 255
 ace:	2c 96       	adiw	r28, 0x0c	; 12
 ad0:	0f b6       	in	r0, 0x3f	; 63
 ad2:	f8 94       	cli
 ad4:	de bf       	out	0x3e, r29	; 62
 ad6:	0f be       	out	0x3f, r0	; 63
 ad8:	cd bf       	out	0x3d, r28	; 61
 ada:	df 91       	pop	r29
 adc:	cf 91       	pop	r28
 ade:	1f 91       	pop	r17
 ae0:	0f 91       	pop	r16
 ae2:	ff 90       	pop	r15
 ae4:	ef 90       	pop	r14
 ae6:	df 90       	pop	r13
 ae8:	cf 90       	pop	r12
 aea:	bf 90       	pop	r11
 aec:	af 90       	pop	r10
 aee:	9f 90       	pop	r9
 af0:	8f 90       	pop	r8
 af2:	7f 90       	pop	r7
 af4:	6f 90       	pop	r6
 af6:	5f 90       	pop	r5
 af8:	4f 90       	pop	r4
 afa:	3f 90       	pop	r3
 afc:	2f 90       	pop	r2
 afe:	08 95       	ret

00000b00 <calloc>:
 b00:	0f 93       	push	r16
 b02:	1f 93       	push	r17
 b04:	cf 93       	push	r28
 b06:	df 93       	push	r29
 b08:	86 9f       	mul	r24, r22
 b0a:	80 01       	movw	r16, r0
 b0c:	87 9f       	mul	r24, r23
 b0e:	10 0d       	add	r17, r0
 b10:	96 9f       	mul	r25, r22
 b12:	10 0d       	add	r17, r0
 b14:	11 24       	eor	r1, r1
 b16:	c8 01       	movw	r24, r16
 b18:	0d d0       	rcall	.+26     	; 0xb34 <malloc>
 b1a:	ec 01       	movw	r28, r24
 b1c:	00 97       	sbiw	r24, 0x00	; 0
 b1e:	21 f0       	breq	.+8      	; 0xb28 <calloc+0x28>
 b20:	a8 01       	movw	r20, r16
 b22:	60 e0       	ldi	r22, 0x00	; 0
 b24:	70 e0       	ldi	r23, 0x00	; 0
 b26:	38 d1       	rcall	.+624    	; 0xd98 <memset>
 b28:	ce 01       	movw	r24, r28
 b2a:	df 91       	pop	r29
 b2c:	cf 91       	pop	r28
 b2e:	1f 91       	pop	r17
 b30:	0f 91       	pop	r16
 b32:	08 95       	ret

00000b34 <malloc>:
 b34:	cf 93       	push	r28
 b36:	df 93       	push	r29
 b38:	82 30       	cpi	r24, 0x02	; 2
 b3a:	91 05       	cpc	r25, r1
 b3c:	10 f4       	brcc	.+4      	; 0xb42 <malloc+0xe>
 b3e:	82 e0       	ldi	r24, 0x02	; 2
 b40:	90 e0       	ldi	r25, 0x00	; 0
 b42:	e0 91 ac 02 	lds	r30, 0x02AC
 b46:	f0 91 ad 02 	lds	r31, 0x02AD
 b4a:	20 e0       	ldi	r18, 0x00	; 0
 b4c:	30 e0       	ldi	r19, 0x00	; 0
 b4e:	a0 e0       	ldi	r26, 0x00	; 0
 b50:	b0 e0       	ldi	r27, 0x00	; 0
 b52:	30 97       	sbiw	r30, 0x00	; 0
 b54:	39 f1       	breq	.+78     	; 0xba4 <malloc+0x70>
 b56:	40 81       	ld	r20, Z
 b58:	51 81       	ldd	r21, Z+1	; 0x01
 b5a:	48 17       	cp	r20, r24
 b5c:	59 07       	cpc	r21, r25
 b5e:	b8 f0       	brcs	.+46     	; 0xb8e <malloc+0x5a>
 b60:	48 17       	cp	r20, r24
 b62:	59 07       	cpc	r21, r25
 b64:	71 f4       	brne	.+28     	; 0xb82 <malloc+0x4e>
 b66:	82 81       	ldd	r24, Z+2	; 0x02
 b68:	93 81       	ldd	r25, Z+3	; 0x03
 b6a:	10 97       	sbiw	r26, 0x00	; 0
 b6c:	29 f0       	breq	.+10     	; 0xb78 <malloc+0x44>
 b6e:	13 96       	adiw	r26, 0x03	; 3
 b70:	9c 93       	st	X, r25
 b72:	8e 93       	st	-X, r24
 b74:	12 97       	sbiw	r26, 0x02	; 2
 b76:	2c c0       	rjmp	.+88     	; 0xbd0 <malloc+0x9c>
 b78:	90 93 ad 02 	sts	0x02AD, r25
 b7c:	80 93 ac 02 	sts	0x02AC, r24
 b80:	27 c0       	rjmp	.+78     	; 0xbd0 <malloc+0x9c>
 b82:	21 15       	cp	r18, r1
 b84:	31 05       	cpc	r19, r1
 b86:	31 f0       	breq	.+12     	; 0xb94 <malloc+0x60>
 b88:	42 17       	cp	r20, r18
 b8a:	53 07       	cpc	r21, r19
 b8c:	18 f0       	brcs	.+6      	; 0xb94 <malloc+0x60>
 b8e:	a9 01       	movw	r20, r18
 b90:	db 01       	movw	r26, r22
 b92:	01 c0       	rjmp	.+2      	; 0xb96 <malloc+0x62>
 b94:	ef 01       	movw	r28, r30
 b96:	9a 01       	movw	r18, r20
 b98:	bd 01       	movw	r22, r26
 b9a:	df 01       	movw	r26, r30
 b9c:	02 80       	ldd	r0, Z+2	; 0x02
 b9e:	f3 81       	ldd	r31, Z+3	; 0x03
 ba0:	e0 2d       	mov	r30, r0
 ba2:	d7 cf       	rjmp	.-82     	; 0xb52 <malloc+0x1e>
 ba4:	21 15       	cp	r18, r1
 ba6:	31 05       	cpc	r19, r1
 ba8:	f9 f0       	breq	.+62     	; 0xbe8 <malloc+0xb4>
 baa:	28 1b       	sub	r18, r24
 bac:	39 0b       	sbc	r19, r25
 bae:	24 30       	cpi	r18, 0x04	; 4
 bb0:	31 05       	cpc	r19, r1
 bb2:	80 f4       	brcc	.+32     	; 0xbd4 <malloc+0xa0>
 bb4:	8a 81       	ldd	r24, Y+2	; 0x02
 bb6:	9b 81       	ldd	r25, Y+3	; 0x03
 bb8:	61 15       	cp	r22, r1
 bba:	71 05       	cpc	r23, r1
 bbc:	21 f0       	breq	.+8      	; 0xbc6 <malloc+0x92>
 bbe:	fb 01       	movw	r30, r22
 bc0:	93 83       	std	Z+3, r25	; 0x03
 bc2:	82 83       	std	Z+2, r24	; 0x02
 bc4:	04 c0       	rjmp	.+8      	; 0xbce <malloc+0x9a>
 bc6:	90 93 ad 02 	sts	0x02AD, r25
 bca:	80 93 ac 02 	sts	0x02AC, r24
 bce:	fe 01       	movw	r30, r28
 bd0:	32 96       	adiw	r30, 0x02	; 2
 bd2:	44 c0       	rjmp	.+136    	; 0xc5c <malloc+0x128>
 bd4:	fe 01       	movw	r30, r28
 bd6:	e2 0f       	add	r30, r18
 bd8:	f3 1f       	adc	r31, r19
 bda:	81 93       	st	Z+, r24
 bdc:	91 93       	st	Z+, r25
 bde:	22 50       	subi	r18, 0x02	; 2
 be0:	31 09       	sbc	r19, r1
 be2:	39 83       	std	Y+1, r19	; 0x01
 be4:	28 83       	st	Y, r18
 be6:	3a c0       	rjmp	.+116    	; 0xc5c <malloc+0x128>
 be8:	20 91 aa 02 	lds	r18, 0x02AA
 bec:	30 91 ab 02 	lds	r19, 0x02AB
 bf0:	23 2b       	or	r18, r19
 bf2:	41 f4       	brne	.+16     	; 0xc04 <malloc+0xd0>
 bf4:	20 91 02 02 	lds	r18, 0x0202
 bf8:	30 91 03 02 	lds	r19, 0x0203
 bfc:	30 93 ab 02 	sts	0x02AB, r19
 c00:	20 93 aa 02 	sts	0x02AA, r18
 c04:	20 91 00 02 	lds	r18, 0x0200
 c08:	30 91 01 02 	lds	r19, 0x0201
 c0c:	21 15       	cp	r18, r1
 c0e:	31 05       	cpc	r19, r1
 c10:	41 f4       	brne	.+16     	; 0xc22 <malloc+0xee>
 c12:	2d b7       	in	r18, 0x3d	; 61
 c14:	3e b7       	in	r19, 0x3e	; 62
 c16:	40 91 04 02 	lds	r20, 0x0204
 c1a:	50 91 05 02 	lds	r21, 0x0205
 c1e:	24 1b       	sub	r18, r20
 c20:	35 0b       	sbc	r19, r21
 c22:	e0 91 aa 02 	lds	r30, 0x02AA
 c26:	f0 91 ab 02 	lds	r31, 0x02AB
 c2a:	e2 17       	cp	r30, r18
 c2c:	f3 07       	cpc	r31, r19
 c2e:	a0 f4       	brcc	.+40     	; 0xc58 <malloc+0x124>
 c30:	2e 1b       	sub	r18, r30
 c32:	3f 0b       	sbc	r19, r31
 c34:	28 17       	cp	r18, r24
 c36:	39 07       	cpc	r19, r25
 c38:	78 f0       	brcs	.+30     	; 0xc58 <malloc+0x124>
 c3a:	ac 01       	movw	r20, r24
 c3c:	4e 5f       	subi	r20, 0xFE	; 254
 c3e:	5f 4f       	sbci	r21, 0xFF	; 255
 c40:	24 17       	cp	r18, r20
 c42:	35 07       	cpc	r19, r21
 c44:	48 f0       	brcs	.+18     	; 0xc58 <malloc+0x124>
 c46:	4e 0f       	add	r20, r30
 c48:	5f 1f       	adc	r21, r31
 c4a:	50 93 ab 02 	sts	0x02AB, r21
 c4e:	40 93 aa 02 	sts	0x02AA, r20
 c52:	81 93       	st	Z+, r24
 c54:	91 93       	st	Z+, r25
 c56:	02 c0       	rjmp	.+4      	; 0xc5c <malloc+0x128>
 c58:	e0 e0       	ldi	r30, 0x00	; 0
 c5a:	f0 e0       	ldi	r31, 0x00	; 0
 c5c:	cf 01       	movw	r24, r30
 c5e:	df 91       	pop	r29
 c60:	cf 91       	pop	r28
 c62:	08 95       	ret

00000c64 <free>:
 c64:	cf 93       	push	r28
 c66:	df 93       	push	r29
 c68:	00 97       	sbiw	r24, 0x00	; 0
 c6a:	09 f4       	brne	.+2      	; 0xc6e <free+0xa>
 c6c:	87 c0       	rjmp	.+270    	; 0xd7c <free+0x118>
 c6e:	fc 01       	movw	r30, r24
 c70:	32 97       	sbiw	r30, 0x02	; 2
 c72:	13 82       	std	Z+3, r1	; 0x03
 c74:	12 82       	std	Z+2, r1	; 0x02
 c76:	c0 91 ac 02 	lds	r28, 0x02AC
 c7a:	d0 91 ad 02 	lds	r29, 0x02AD
 c7e:	20 97       	sbiw	r28, 0x00	; 0
 c80:	81 f4       	brne	.+32     	; 0xca2 <free+0x3e>
 c82:	20 81       	ld	r18, Z
 c84:	31 81       	ldd	r19, Z+1	; 0x01
 c86:	28 0f       	add	r18, r24
 c88:	39 1f       	adc	r19, r25
 c8a:	80 91 aa 02 	lds	r24, 0x02AA
 c8e:	90 91 ab 02 	lds	r25, 0x02AB
 c92:	82 17       	cp	r24, r18
 c94:	93 07       	cpc	r25, r19
 c96:	79 f5       	brne	.+94     	; 0xcf6 <free+0x92>
 c98:	f0 93 ab 02 	sts	0x02AB, r31
 c9c:	e0 93 aa 02 	sts	0x02AA, r30
 ca0:	6d c0       	rjmp	.+218    	; 0xd7c <free+0x118>
 ca2:	de 01       	movw	r26, r28
 ca4:	20 e0       	ldi	r18, 0x00	; 0
 ca6:	30 e0       	ldi	r19, 0x00	; 0
 ca8:	ae 17       	cp	r26, r30
 caa:	bf 07       	cpc	r27, r31
 cac:	50 f4       	brcc	.+20     	; 0xcc2 <free+0x5e>
 cae:	12 96       	adiw	r26, 0x02	; 2
 cb0:	4d 91       	ld	r20, X+
 cb2:	5c 91       	ld	r21, X
 cb4:	13 97       	sbiw	r26, 0x03	; 3
 cb6:	9d 01       	movw	r18, r26
 cb8:	41 15       	cp	r20, r1
 cba:	51 05       	cpc	r21, r1
 cbc:	09 f1       	breq	.+66     	; 0xd00 <free+0x9c>
 cbe:	da 01       	movw	r26, r20
 cc0:	f3 cf       	rjmp	.-26     	; 0xca8 <free+0x44>
 cc2:	b3 83       	std	Z+3, r27	; 0x03
 cc4:	a2 83       	std	Z+2, r26	; 0x02
 cc6:	40 81       	ld	r20, Z
 cc8:	51 81       	ldd	r21, Z+1	; 0x01
 cca:	84 0f       	add	r24, r20
 ccc:	95 1f       	adc	r25, r21
 cce:	8a 17       	cp	r24, r26
 cd0:	9b 07       	cpc	r25, r27
 cd2:	71 f4       	brne	.+28     	; 0xcf0 <free+0x8c>
 cd4:	8d 91       	ld	r24, X+
 cd6:	9c 91       	ld	r25, X
 cd8:	11 97       	sbiw	r26, 0x01	; 1
 cda:	84 0f       	add	r24, r20
 cdc:	95 1f       	adc	r25, r21
 cde:	02 96       	adiw	r24, 0x02	; 2
 ce0:	91 83       	std	Z+1, r25	; 0x01
 ce2:	80 83       	st	Z, r24
 ce4:	12 96       	adiw	r26, 0x02	; 2
 ce6:	8d 91       	ld	r24, X+
 ce8:	9c 91       	ld	r25, X
 cea:	13 97       	sbiw	r26, 0x03	; 3
 cec:	93 83       	std	Z+3, r25	; 0x03
 cee:	82 83       	std	Z+2, r24	; 0x02
 cf0:	21 15       	cp	r18, r1
 cf2:	31 05       	cpc	r19, r1
 cf4:	29 f4       	brne	.+10     	; 0xd00 <free+0x9c>
 cf6:	f0 93 ad 02 	sts	0x02AD, r31
 cfa:	e0 93 ac 02 	sts	0x02AC, r30
 cfe:	3e c0       	rjmp	.+124    	; 0xd7c <free+0x118>
 d00:	d9 01       	movw	r26, r18
 d02:	13 96       	adiw	r26, 0x03	; 3
 d04:	fc 93       	st	X, r31
 d06:	ee 93       	st	-X, r30
 d08:	12 97       	sbiw	r26, 0x02	; 2
 d0a:	4d 91       	ld	r20, X+
 d0c:	5d 91       	ld	r21, X+
 d0e:	a4 0f       	add	r26, r20
 d10:	b5 1f       	adc	r27, r21
 d12:	ea 17       	cp	r30, r26
 d14:	fb 07       	cpc	r31, r27
 d16:	79 f4       	brne	.+30     	; 0xd36 <free+0xd2>
 d18:	80 81       	ld	r24, Z
 d1a:	91 81       	ldd	r25, Z+1	; 0x01
 d1c:	84 0f       	add	r24, r20
 d1e:	95 1f       	adc	r25, r21
 d20:	02 96       	adiw	r24, 0x02	; 2
 d22:	d9 01       	movw	r26, r18
 d24:	11 96       	adiw	r26, 0x01	; 1
 d26:	9c 93       	st	X, r25
 d28:	8e 93       	st	-X, r24
 d2a:	82 81       	ldd	r24, Z+2	; 0x02
 d2c:	93 81       	ldd	r25, Z+3	; 0x03
 d2e:	13 96       	adiw	r26, 0x03	; 3
 d30:	9c 93       	st	X, r25
 d32:	8e 93       	st	-X, r24
 d34:	12 97       	sbiw	r26, 0x02	; 2
 d36:	e0 e0       	ldi	r30, 0x00	; 0
 d38:	f0 e0       	ldi	r31, 0x00	; 0
 d3a:	8a 81       	ldd	r24, Y+2	; 0x02
 d3c:	9b 81       	ldd	r25, Y+3	; 0x03
 d3e:	00 97       	sbiw	r24, 0x00	; 0
 d40:	19 f0       	breq	.+6      	; 0xd48 <free+0xe4>
 d42:	fe 01       	movw	r30, r28
 d44:	ec 01       	movw	r28, r24
 d46:	f9 cf       	rjmp	.-14     	; 0xd3a <free+0xd6>
 d48:	ce 01       	movw	r24, r28
 d4a:	02 96       	adiw	r24, 0x02	; 2
 d4c:	28 81       	ld	r18, Y
 d4e:	39 81       	ldd	r19, Y+1	; 0x01
 d50:	82 0f       	add	r24, r18
 d52:	93 1f       	adc	r25, r19
 d54:	20 91 aa 02 	lds	r18, 0x02AA
 d58:	30 91 ab 02 	lds	r19, 0x02AB
 d5c:	28 17       	cp	r18, r24
 d5e:	39 07       	cpc	r19, r25
 d60:	69 f4       	brne	.+26     	; 0xd7c <free+0x118>
 d62:	30 97       	sbiw	r30, 0x00	; 0
 d64:	29 f4       	brne	.+10     	; 0xd70 <free+0x10c>
 d66:	10 92 ad 02 	sts	0x02AD, r1
 d6a:	10 92 ac 02 	sts	0x02AC, r1
 d6e:	02 c0       	rjmp	.+4      	; 0xd74 <free+0x110>
 d70:	13 82       	std	Z+3, r1	; 0x03
 d72:	12 82       	std	Z+2, r1	; 0x02
 d74:	d0 93 ab 02 	sts	0x02AB, r29
 d78:	c0 93 aa 02 	sts	0x02AA, r28
 d7c:	df 91       	pop	r29
 d7e:	cf 91       	pop	r28
 d80:	08 95       	ret

00000d82 <strnlen_P>:
 d82:	fc 01       	movw	r30, r24
 d84:	05 90       	lpm	r0, Z+
 d86:	61 50       	subi	r22, 0x01	; 1
 d88:	70 40       	sbci	r23, 0x00	; 0
 d8a:	01 10       	cpse	r0, r1
 d8c:	d8 f7       	brcc	.-10     	; 0xd84 <strnlen_P+0x2>
 d8e:	80 95       	com	r24
 d90:	90 95       	com	r25
 d92:	8e 0f       	add	r24, r30
 d94:	9f 1f       	adc	r25, r31
 d96:	08 95       	ret

00000d98 <memset>:
 d98:	dc 01       	movw	r26, r24
 d9a:	01 c0       	rjmp	.+2      	; 0xd9e <memset+0x6>
 d9c:	6d 93       	st	X+, r22
 d9e:	41 50       	subi	r20, 0x01	; 1
 da0:	50 40       	sbci	r21, 0x00	; 0
 da2:	e0 f7       	brcc	.-8      	; 0xd9c <memset+0x4>
 da4:	08 95       	ret

00000da6 <strnlen>:
 da6:	fc 01       	movw	r30, r24
 da8:	61 50       	subi	r22, 0x01	; 1
 daa:	70 40       	sbci	r23, 0x00	; 0
 dac:	01 90       	ld	r0, Z+
 dae:	01 10       	cpse	r0, r1
 db0:	d8 f7       	brcc	.-10     	; 0xda8 <strnlen+0x2>
 db2:	80 95       	com	r24
 db4:	90 95       	com	r25
 db6:	8e 0f       	add	r24, r30
 db8:	9f 1f       	adc	r25, r31
 dba:	08 95       	ret

00000dbc <fputc>:
 dbc:	0f 93       	push	r16
 dbe:	1f 93       	push	r17
 dc0:	cf 93       	push	r28
 dc2:	df 93       	push	r29
 dc4:	18 2f       	mov	r17, r24
 dc6:	09 2f       	mov	r16, r25
 dc8:	eb 01       	movw	r28, r22
 dca:	8b 81       	ldd	r24, Y+3	; 0x03
 dcc:	81 fd       	sbrc	r24, 1
 dce:	03 c0       	rjmp	.+6      	; 0xdd6 <fputc+0x1a>
 dd0:	8f ef       	ldi	r24, 0xFF	; 255
 dd2:	9f ef       	ldi	r25, 0xFF	; 255
 dd4:	20 c0       	rjmp	.+64     	; 0xe16 <fputc+0x5a>
 dd6:	82 ff       	sbrs	r24, 2
 dd8:	10 c0       	rjmp	.+32     	; 0xdfa <fputc+0x3e>
 dda:	4e 81       	ldd	r20, Y+6	; 0x06
 ddc:	5f 81       	ldd	r21, Y+7	; 0x07
 dde:	2c 81       	ldd	r18, Y+4	; 0x04
 de0:	3d 81       	ldd	r19, Y+5	; 0x05
 de2:	42 17       	cp	r20, r18
 de4:	53 07       	cpc	r21, r19
 de6:	7c f4       	brge	.+30     	; 0xe06 <fputc+0x4a>
 de8:	e8 81       	ld	r30, Y
 dea:	f9 81       	ldd	r31, Y+1	; 0x01
 dec:	9f 01       	movw	r18, r30
 dee:	2f 5f       	subi	r18, 0xFF	; 255
 df0:	3f 4f       	sbci	r19, 0xFF	; 255
 df2:	39 83       	std	Y+1, r19	; 0x01
 df4:	28 83       	st	Y, r18
 df6:	10 83       	st	Z, r17
 df8:	06 c0       	rjmp	.+12     	; 0xe06 <fputc+0x4a>
 dfa:	e8 85       	ldd	r30, Y+8	; 0x08
 dfc:	f9 85       	ldd	r31, Y+9	; 0x09
 dfe:	81 2f       	mov	r24, r17
 e00:	19 95       	eicall
 e02:	89 2b       	or	r24, r25
 e04:	29 f7       	brne	.-54     	; 0xdd0 <fputc+0x14>
 e06:	2e 81       	ldd	r18, Y+6	; 0x06
 e08:	3f 81       	ldd	r19, Y+7	; 0x07
 e0a:	2f 5f       	subi	r18, 0xFF	; 255
 e0c:	3f 4f       	sbci	r19, 0xFF	; 255
 e0e:	3f 83       	std	Y+7, r19	; 0x07
 e10:	2e 83       	std	Y+6, r18	; 0x06
 e12:	81 2f       	mov	r24, r17
 e14:	90 2f       	mov	r25, r16
 e16:	df 91       	pop	r29
 e18:	cf 91       	pop	r28
 e1a:	1f 91       	pop	r17
 e1c:	0f 91       	pop	r16
 e1e:	08 95       	ret

00000e20 <__ultoa_invert>:
 e20:	fa 01       	movw	r30, r20
 e22:	aa 27       	eor	r26, r26
 e24:	28 30       	cpi	r18, 0x08	; 8
 e26:	51 f1       	breq	.+84     	; 0xe7c <__ultoa_invert+0x5c>
 e28:	20 31       	cpi	r18, 0x10	; 16
 e2a:	81 f1       	breq	.+96     	; 0xe8c <__ultoa_invert+0x6c>
 e2c:	e8 94       	clt
 e2e:	6f 93       	push	r22
 e30:	6e 7f       	andi	r22, 0xFE	; 254
 e32:	6e 5f       	subi	r22, 0xFE	; 254
 e34:	7f 4f       	sbci	r23, 0xFF	; 255
 e36:	8f 4f       	sbci	r24, 0xFF	; 255
 e38:	9f 4f       	sbci	r25, 0xFF	; 255
 e3a:	af 4f       	sbci	r26, 0xFF	; 255
 e3c:	b1 e0       	ldi	r27, 0x01	; 1
 e3e:	3e d0       	rcall	.+124    	; 0xebc <__ultoa_invert+0x9c>
 e40:	b4 e0       	ldi	r27, 0x04	; 4
 e42:	3c d0       	rcall	.+120    	; 0xebc <__ultoa_invert+0x9c>
 e44:	67 0f       	add	r22, r23
 e46:	78 1f       	adc	r23, r24
 e48:	89 1f       	adc	r24, r25
 e4a:	9a 1f       	adc	r25, r26
 e4c:	a1 1d       	adc	r26, r1
 e4e:	68 0f       	add	r22, r24
 e50:	79 1f       	adc	r23, r25
 e52:	8a 1f       	adc	r24, r26
 e54:	91 1d       	adc	r25, r1
 e56:	a1 1d       	adc	r26, r1
 e58:	6a 0f       	add	r22, r26
 e5a:	71 1d       	adc	r23, r1
 e5c:	81 1d       	adc	r24, r1
 e5e:	91 1d       	adc	r25, r1
 e60:	a1 1d       	adc	r26, r1
 e62:	20 d0       	rcall	.+64     	; 0xea4 <__ultoa_invert+0x84>
 e64:	09 f4       	brne	.+2      	; 0xe68 <__ultoa_invert+0x48>
 e66:	68 94       	set
 e68:	3f 91       	pop	r19
 e6a:	2a e0       	ldi	r18, 0x0A	; 10
 e6c:	26 9f       	mul	r18, r22
 e6e:	11 24       	eor	r1, r1
 e70:	30 19       	sub	r19, r0
 e72:	30 5d       	subi	r19, 0xD0	; 208
 e74:	31 93       	st	Z+, r19
 e76:	de f6       	brtc	.-74     	; 0xe2e <__ultoa_invert+0xe>
 e78:	cf 01       	movw	r24, r30
 e7a:	08 95       	ret
 e7c:	46 2f       	mov	r20, r22
 e7e:	47 70       	andi	r20, 0x07	; 7
 e80:	40 5d       	subi	r20, 0xD0	; 208
 e82:	41 93       	st	Z+, r20
 e84:	b3 e0       	ldi	r27, 0x03	; 3
 e86:	0f d0       	rcall	.+30     	; 0xea6 <__ultoa_invert+0x86>
 e88:	c9 f7       	brne	.-14     	; 0xe7c <__ultoa_invert+0x5c>
 e8a:	f6 cf       	rjmp	.-20     	; 0xe78 <__ultoa_invert+0x58>
 e8c:	46 2f       	mov	r20, r22
 e8e:	4f 70       	andi	r20, 0x0F	; 15
 e90:	40 5d       	subi	r20, 0xD0	; 208
 e92:	4a 33       	cpi	r20, 0x3A	; 58
 e94:	18 f0       	brcs	.+6      	; 0xe9c <__ultoa_invert+0x7c>
 e96:	49 5d       	subi	r20, 0xD9	; 217
 e98:	31 fd       	sbrc	r19, 1
 e9a:	40 52       	subi	r20, 0x20	; 32
 e9c:	41 93       	st	Z+, r20
 e9e:	02 d0       	rcall	.+4      	; 0xea4 <__ultoa_invert+0x84>
 ea0:	a9 f7       	brne	.-22     	; 0xe8c <__ultoa_invert+0x6c>
 ea2:	ea cf       	rjmp	.-44     	; 0xe78 <__ultoa_invert+0x58>
 ea4:	b4 e0       	ldi	r27, 0x04	; 4
 ea6:	a6 95       	lsr	r26
 ea8:	97 95       	ror	r25
 eaa:	87 95       	ror	r24
 eac:	77 95       	ror	r23
 eae:	67 95       	ror	r22
 eb0:	ba 95       	dec	r27
 eb2:	c9 f7       	brne	.-14     	; 0xea6 <__ultoa_invert+0x86>
 eb4:	00 97       	sbiw	r24, 0x00	; 0
 eb6:	61 05       	cpc	r22, r1
 eb8:	71 05       	cpc	r23, r1
 eba:	08 95       	ret
 ebc:	9b 01       	movw	r18, r22
 ebe:	ac 01       	movw	r20, r24
 ec0:	0a 2e       	mov	r0, r26
 ec2:	06 94       	lsr	r0
 ec4:	57 95       	ror	r21
 ec6:	47 95       	ror	r20
 ec8:	37 95       	ror	r19
 eca:	27 95       	ror	r18
 ecc:	ba 95       	dec	r27
 ece:	c9 f7       	brne	.-14     	; 0xec2 <__ultoa_invert+0xa2>
 ed0:	62 0f       	add	r22, r18
 ed2:	73 1f       	adc	r23, r19
 ed4:	84 1f       	adc	r24, r20
 ed6:	95 1f       	adc	r25, r21
 ed8:	a0 1d       	adc	r26, r0
 eda:	08 95       	ret

00000edc <_exit>:
 edc:	f8 94       	cli

00000ede <__stop_program>:
 ede:	ff cf       	rjmp	.-2      	; 0xede <__stop_program>
