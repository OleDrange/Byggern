
Arduino.elf:     file format elf32-avr

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .data         00000136  00800200  00001f68  00001ffc  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  1 .text         00001f68  00000000  00000000  00000094  2**1
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .bss          00000063  00800336  00800336  00002132  2**0
                  ALLOC
  3 .comment      0000005c  00000000  00000000  00002132  2**0
                  CONTENTS, READONLY
  4 .debug_aranges 00000360  00000000  00000000  0000218e  2**0
                  CONTENTS, READONLY, DEBUGGING
  5 .debug_info   00003112  00000000  00000000  000024ee  2**0
                  CONTENTS, READONLY, DEBUGGING
  6 .debug_abbrev 000014fb  00000000  00000000  00005600  2**0
                  CONTENTS, READONLY, DEBUGGING
  7 .debug_line   00001c5a  00000000  00000000  00006afb  2**0
                  CONTENTS, READONLY, DEBUGGING
  8 .debug_frame  000007f0  00000000  00000000  00008758  2**2
                  CONTENTS, READONLY, DEBUGGING
  9 .debug_str    000009a8  00000000  00000000  00008f48  2**0
                  CONTENTS, READONLY, DEBUGGING
 10 .debug_loc    00001ab4  00000000  00000000  000098f0  2**0
                  CONTENTS, READONLY, DEBUGGING
 11 .debug_ranges 000002f8  00000000  00000000  0000b3a4  2**0
                  CONTENTS, READONLY, DEBUGGING

Disassembly of section .text:

00000000 <__vectors>:
       0:	c2 c0       	rjmp	.+388    	; 0x186 <__ctors_end>
       2:	00 00       	nop
       4:	e0 c0       	rjmp	.+448    	; 0x1c6 <__bad_interrupt>
       6:	00 00       	nop
       8:	de c0       	rjmp	.+444    	; 0x1c6 <__bad_interrupt>
       a:	00 00       	nop
       c:	41 c1       	rjmp	.+642    	; 0x290 <__vector_3>
       e:	00 00       	nop
      10:	da c0       	rjmp	.+436    	; 0x1c6 <__bad_interrupt>
      12:	00 00       	nop
      14:	d8 c0       	rjmp	.+432    	; 0x1c6 <__bad_interrupt>
      16:	00 00       	nop
      18:	d6 c0       	rjmp	.+428    	; 0x1c6 <__bad_interrupt>
      1a:	00 00       	nop
      1c:	d4 c0       	rjmp	.+424    	; 0x1c6 <__bad_interrupt>
      1e:	00 00       	nop
      20:	d2 c0       	rjmp	.+420    	; 0x1c6 <__bad_interrupt>
      22:	00 00       	nop
      24:	d0 c0       	rjmp	.+416    	; 0x1c6 <__bad_interrupt>
      26:	00 00       	nop
      28:	ce c0       	rjmp	.+412    	; 0x1c6 <__bad_interrupt>
      2a:	00 00       	nop
      2c:	cc c0       	rjmp	.+408    	; 0x1c6 <__bad_interrupt>
      2e:	00 00       	nop
      30:	ca c0       	rjmp	.+404    	; 0x1c6 <__bad_interrupt>
      32:	00 00       	nop
      34:	c8 c0       	rjmp	.+400    	; 0x1c6 <__bad_interrupt>
      36:	00 00       	nop
      38:	c6 c0       	rjmp	.+396    	; 0x1c6 <__bad_interrupt>
      3a:	00 00       	nop
      3c:	92 c5       	rjmp	.+2852   	; 0xb62 <__vector_15>
      3e:	00 00       	nop
      40:	c2 c0       	rjmp	.+388    	; 0x1c6 <__bad_interrupt>
      42:	00 00       	nop
      44:	c0 c0       	rjmp	.+384    	; 0x1c6 <__bad_interrupt>
      46:	00 00       	nop
      48:	be c0       	rjmp	.+380    	; 0x1c6 <__bad_interrupt>
      4a:	00 00       	nop
      4c:	bc c0       	rjmp	.+376    	; 0x1c6 <__bad_interrupt>
      4e:	00 00       	nop
      50:	ba c0       	rjmp	.+372    	; 0x1c6 <__bad_interrupt>
      52:	00 00       	nop
      54:	b8 c0       	rjmp	.+368    	; 0x1c6 <__bad_interrupt>
      56:	00 00       	nop
      58:	b6 c0       	rjmp	.+364    	; 0x1c6 <__bad_interrupt>
      5a:	00 00       	nop
      5c:	b4 c0       	rjmp	.+360    	; 0x1c6 <__bad_interrupt>
      5e:	00 00       	nop
      60:	b2 c0       	rjmp	.+356    	; 0x1c6 <__bad_interrupt>
      62:	00 00       	nop
      64:	b0 c0       	rjmp	.+352    	; 0x1c6 <__bad_interrupt>
      66:	00 00       	nop
      68:	ae c0       	rjmp	.+348    	; 0x1c6 <__bad_interrupt>
      6a:	00 00       	nop
      6c:	ac c0       	rjmp	.+344    	; 0x1c6 <__bad_interrupt>
      6e:	00 00       	nop
      70:	aa c0       	rjmp	.+340    	; 0x1c6 <__bad_interrupt>
      72:	00 00       	nop
      74:	a8 c0       	rjmp	.+336    	; 0x1c6 <__bad_interrupt>
      76:	00 00       	nop
      78:	a6 c0       	rjmp	.+332    	; 0x1c6 <__bad_interrupt>
      7a:	00 00       	nop
      7c:	a4 c0       	rjmp	.+328    	; 0x1c6 <__bad_interrupt>
      7e:	00 00       	nop
      80:	a2 c0       	rjmp	.+324    	; 0x1c6 <__bad_interrupt>
      82:	00 00       	nop
      84:	a0 c0       	rjmp	.+320    	; 0x1c6 <__bad_interrupt>
      86:	00 00       	nop
      88:	9e c0       	rjmp	.+316    	; 0x1c6 <__bad_interrupt>
      8a:	00 00       	nop
      8c:	9c c0       	rjmp	.+312    	; 0x1c6 <__bad_interrupt>
      8e:	00 00       	nop
      90:	9a c0       	rjmp	.+308    	; 0x1c6 <__bad_interrupt>
      92:	00 00       	nop
      94:	98 c0       	rjmp	.+304    	; 0x1c6 <__bad_interrupt>
      96:	00 00       	nop
      98:	96 c0       	rjmp	.+300    	; 0x1c6 <__bad_interrupt>
      9a:	00 00       	nop
      9c:	ac c7       	rjmp	.+3928   	; 0xff6 <__vector_39>
      9e:	00 00       	nop
      a0:	92 c0       	rjmp	.+292    	; 0x1c6 <__bad_interrupt>
      a2:	00 00       	nop
      a4:	90 c0       	rjmp	.+288    	; 0x1c6 <__bad_interrupt>
      a6:	00 00       	nop
      a8:	8e c0       	rjmp	.+284    	; 0x1c6 <__bad_interrupt>
      aa:	00 00       	nop
      ac:	8c c0       	rjmp	.+280    	; 0x1c6 <__bad_interrupt>
      ae:	00 00       	nop
      b0:	8a c0       	rjmp	.+276    	; 0x1c6 <__bad_interrupt>
      b2:	00 00       	nop
      b4:	88 c0       	rjmp	.+272    	; 0x1c6 <__bad_interrupt>
      b6:	00 00       	nop
      b8:	86 c0       	rjmp	.+268    	; 0x1c6 <__bad_interrupt>
      ba:	00 00       	nop
      bc:	84 c0       	rjmp	.+264    	; 0x1c6 <__bad_interrupt>
      be:	00 00       	nop
      c0:	82 c0       	rjmp	.+260    	; 0x1c6 <__bad_interrupt>
      c2:	00 00       	nop
      c4:	80 c0       	rjmp	.+256    	; 0x1c6 <__bad_interrupt>
      c6:	00 00       	nop
      c8:	7e c0       	rjmp	.+252    	; 0x1c6 <__bad_interrupt>
      ca:	00 00       	nop
      cc:	7c c0       	rjmp	.+248    	; 0x1c6 <__bad_interrupt>
      ce:	00 00       	nop
      d0:	7a c0       	rjmp	.+244    	; 0x1c6 <__bad_interrupt>
      d2:	00 00       	nop
      d4:	78 c0       	rjmp	.+240    	; 0x1c6 <__bad_interrupt>
      d6:	00 00       	nop
      d8:	76 c0       	rjmp	.+236    	; 0x1c6 <__bad_interrupt>
      da:	00 00       	nop
      dc:	74 c0       	rjmp	.+232    	; 0x1c6 <__bad_interrupt>
      de:	00 00       	nop
      e0:	72 c0       	rjmp	.+228    	; 0x1c6 <__bad_interrupt>
      e2:	00 00       	nop
      e4:	16 08       	sbc	r1, r6
      e6:	68 08       	sbc	r6, r8
      e8:	68 08       	sbc	r6, r8
      ea:	68 08       	sbc	r6, r8
      ec:	68 08       	sbc	r6, r8
      ee:	68 08       	sbc	r6, r8
      f0:	68 08       	sbc	r6, r8
      f2:	68 08       	sbc	r6, r8
      f4:	16 08       	sbc	r1, r6
      f6:	68 08       	sbc	r6, r8
      f8:	68 08       	sbc	r6, r8
      fa:	68 08       	sbc	r6, r8
      fc:	68 08       	sbc	r6, r8
      fe:	68 08       	sbc	r6, r8
     100:	68 08       	sbc	r6, r8
     102:	68 08       	sbc	r6, r8
     104:	18 08       	sbc	r1, r8
     106:	68 08       	sbc	r6, r8
     108:	68 08       	sbc	r6, r8
     10a:	68 08       	sbc	r6, r8
     10c:	68 08       	sbc	r6, r8
     10e:	68 08       	sbc	r6, r8
     110:	68 08       	sbc	r6, r8
     112:	68 08       	sbc	r6, r8
     114:	68 08       	sbc	r6, r8
     116:	68 08       	sbc	r6, r8
     118:	68 08       	sbc	r6, r8
     11a:	68 08       	sbc	r6, r8
     11c:	68 08       	sbc	r6, r8
     11e:	68 08       	sbc	r6, r8
     120:	68 08       	sbc	r6, r8
     122:	68 08       	sbc	r6, r8
     124:	18 08       	sbc	r1, r8
     126:	68 08       	sbc	r6, r8
     128:	68 08       	sbc	r6, r8
     12a:	68 08       	sbc	r6, r8
     12c:	68 08       	sbc	r6, r8
     12e:	68 08       	sbc	r6, r8
     130:	68 08       	sbc	r6, r8
     132:	68 08       	sbc	r6, r8
     134:	68 08       	sbc	r6, r8
     136:	68 08       	sbc	r6, r8
     138:	68 08       	sbc	r6, r8
     13a:	68 08       	sbc	r6, r8
     13c:	68 08       	sbc	r6, r8
     13e:	68 08       	sbc	r6, r8
     140:	68 08       	sbc	r6, r8
     142:	68 08       	sbc	r6, r8
     144:	64 08       	sbc	r6, r4
     146:	68 08       	sbc	r6, r8
     148:	68 08       	sbc	r6, r8
     14a:	68 08       	sbc	r6, r8
     14c:	68 08       	sbc	r6, r8
     14e:	68 08       	sbc	r6, r8
     150:	68 08       	sbc	r6, r8
     152:	68 08       	sbc	r6, r8
     154:	41 08       	sbc	r4, r1
     156:	68 08       	sbc	r6, r8
     158:	68 08       	sbc	r6, r8
     15a:	68 08       	sbc	r6, r8
     15c:	68 08       	sbc	r6, r8
     15e:	68 08       	sbc	r6, r8
     160:	68 08       	sbc	r6, r8
     162:	68 08       	sbc	r6, r8
     164:	68 08       	sbc	r6, r8
     166:	68 08       	sbc	r6, r8
     168:	68 08       	sbc	r6, r8
     16a:	68 08       	sbc	r6, r8
     16c:	68 08       	sbc	r6, r8
     16e:	68 08       	sbc	r6, r8
     170:	68 08       	sbc	r6, r8
     172:	68 08       	sbc	r6, r8
     174:	35 08       	sbc	r3, r5
     176:	68 08       	sbc	r6, r8
     178:	68 08       	sbc	r6, r8
     17a:	68 08       	sbc	r6, r8
     17c:	68 08       	sbc	r6, r8
     17e:	68 08       	sbc	r6, r8
     180:	68 08       	sbc	r6, r8
     182:	68 08       	sbc	r6, r8
     184:	53 08       	sbc	r5, r3

00000186 <__ctors_end>:
     186:	11 24       	eor	r1, r1
     188:	1f be       	out	0x3f, r1	; 63
     18a:	cf ef       	ldi	r28, 0xFF	; 255
     18c:	d1 e2       	ldi	r29, 0x21	; 33
     18e:	de bf       	out	0x3e, r29	; 62
     190:	cd bf       	out	0x3d, r28	; 61
     192:	00 e0       	ldi	r16, 0x00	; 0
     194:	0c bf       	out	0x3c, r16	; 60

00000196 <__do_copy_data>:
     196:	13 e0       	ldi	r17, 0x03	; 3
     198:	a0 e0       	ldi	r26, 0x00	; 0
     19a:	b2 e0       	ldi	r27, 0x02	; 2
     19c:	e8 e6       	ldi	r30, 0x68	; 104
     19e:	ff e1       	ldi	r31, 0x1F	; 31
     1a0:	00 e0       	ldi	r16, 0x00	; 0
     1a2:	0b bf       	out	0x3b, r16	; 59
     1a4:	02 c0       	rjmp	.+4      	; 0x1aa <__do_copy_data+0x14>
     1a6:	07 90       	elpm	r0, Z+
     1a8:	0d 92       	st	X+, r0
     1aa:	a6 33       	cpi	r26, 0x36	; 54
     1ac:	b1 07       	cpc	r27, r17
     1ae:	d9 f7       	brne	.-10     	; 0x1a6 <__do_copy_data+0x10>

000001b0 <__do_clear_bss>:
     1b0:	23 e0       	ldi	r18, 0x03	; 3
     1b2:	a6 e3       	ldi	r26, 0x36	; 54
     1b4:	b3 e0       	ldi	r27, 0x03	; 3
     1b6:	01 c0       	rjmp	.+2      	; 0x1ba <.do_clear_bss_start>

000001b8 <.do_clear_bss_loop>:
     1b8:	1d 92       	st	X+, r1

000001ba <.do_clear_bss_start>:
     1ba:	a9 39       	cpi	r26, 0x99	; 153
     1bc:	b2 07       	cpc	r27, r18
     1be:	e1 f7       	brne	.-8      	; 0x1b8 <.do_clear_bss_loop>
     1c0:	33 d0       	rcall	.+102    	; 0x228 <main>
     1c2:	0c 94 b2 0f 	jmp	0x1f64	; 0x1f64 <_exit>

000001c6 <__bad_interrupt>:
     1c6:	1c cf       	rjmp	.-456    	; 0x0 <__vectors>

000001c8 <ADC_read>:

uint16_t ADC_read() {
	
	uint16_t data = 0;
	//Read from ADC2
	set_bit(ADMUX, MUX1);
     1c8:	ec e7       	ldi	r30, 0x7C	; 124
     1ca:	f0 e0       	ldi	r31, 0x00	; 0
     1cc:	80 81       	ld	r24, Z
     1ce:	82 60       	ori	r24, 0x02	; 2
     1d0:	80 83       	st	Z, r24
	// Start conversion
	set_bit(ADCSRA,ADSC);
     1d2:	ea e7       	ldi	r30, 0x7A	; 122
     1d4:	f0 e0       	ldi	r31, 0x00	; 0
     1d6:	80 81       	ld	r24, Z
     1d8:	80 64       	ori	r24, 0x40	; 64
     1da:	80 83       	st	Z, r24
	// Wait for conversion complete
	loop_until_bit_is_set(ADCSRA,ADIF);
     1dc:	80 81       	ld	r24, Z
     1de:	84 ff       	sbrs	r24, 4
     1e0:	fd cf       	rjmp	.-6      	; 0x1dc <ADC_read+0x14>
	// Read data
	uint8_t data_low = ADCL;
     1e2:	20 91 78 00 	lds	r18, 0x0078
	uint16_t data_high = ADCH;
     1e6:	80 91 79 00 	lds	r24, 0x0079
     1ea:	90 e0       	ldi	r25, 0x00	; 0
	data = data_low + data_high*0b100000000;
     1ec:	98 2f       	mov	r25, r24
     1ee:	88 27       	eor	r24, r24
	
	return data;
     1f0:	82 0f       	add	r24, r18
     1f2:	91 1d       	adc	r25, r1
     1f4:	08 95       	ret

000001f6 <ADC_init>:
#include "bit_macros.h"
#include "ADC.h"

void ADC_init() {
	// Set pin A2 to input
	clear_bit(DDRF, PF2);
     1f6:	82 98       	cbi	0x10, 2	; 16
	
	// Enable ADC
	set_bit(ADCSRA, ADEN);
     1f8:	ea e7       	ldi	r30, 0x7A	; 122
     1fa:	f0 e0       	ldi	r31, 0x00	; 0
     1fc:	80 81       	ld	r24, Z
     1fe:	80 68       	ori	r24, 0x80	; 128
     200:	80 83       	st	Z, r24
	// Set prescaler to 128
	set_bit(ADCSRA, ADPS0);
     202:	80 81       	ld	r24, Z
     204:	81 60       	ori	r24, 0x01	; 1
     206:	80 83       	st	Z, r24
	set_bit(ADCSRA, ADPS1);
     208:	80 81       	ld	r24, Z
     20a:	82 60       	ori	r24, 0x02	; 2
     20c:	80 83       	st	Z, r24
	set_bit(ADCSRA, ADPS2);
     20e:	80 81       	ld	r24, Z
     210:	84 60       	ori	r24, 0x04	; 4
     212:	80 83       	st	Z, r24
	// Set voltage reference to 2.56V
	set_bit(ADMUX,REFS1);
     214:	ec e7       	ldi	r30, 0x7C	; 124
     216:	f0 e0       	ldi	r31, 0x00	; 0
     218:	80 81       	ld	r24, Z
     21a:	80 68       	ori	r24, 0x80	; 128
     21c:	80 83       	st	Z, r24
	set_bit(ADMUX,REFS0);
     21e:	80 81       	ld	r24, Z
     220:	80 64       	ori	r24, 0x40	; 64
     222:	80 83       	st	Z, r24
	
	ADC_read();
     224:	d1 cf       	rjmp	.-94     	; 0x1c8 <ADC_read>
     226:	08 95       	ret

00000228 <main>:
	#else
		//round up by default
		__ticks_dc = (uint32_t)(ceil(fabs(__tmp)));
	#endif

	__builtin_avr_delay_cycles(__ticks_dc);
     228:	2f ef       	ldi	r18, 0xFF	; 255
     22a:	89 ef       	ldi	r24, 0xF9	; 249
     22c:	90 e0       	ldi	r25, 0x00	; 0
     22e:	21 50       	subi	r18, 0x01	; 1
     230:	80 40       	sbci	r24, 0x00	; 0
     232:	90 40       	sbci	r25, 0x00	; 0
     234:	e1 f7       	brne	.-8      	; 0x22e <main+0x6>
     236:	00 c0       	rjmp	.+0      	; 0x238 <main+0x10>
     238:	00 00       	nop
}
int main(void)
{
	unsigned long clockspeed = F_CPU;
	_delay_ms(20);
	UART_init(clockspeed);
     23a:	60 e0       	ldi	r22, 0x00	; 0
     23c:	74 e2       	ldi	r23, 0x24	; 36
     23e:	84 ef       	ldi	r24, 0xF4	; 244
     240:	90 e0       	ldi	r25, 0x00	; 0
     242:	6f d7       	rcall	.+3806   	; 0x1122 <UART_init>
	
	can_init(MODE_NORMAL);
     244:	80 e0       	ldi	r24, 0x00	; 0
     246:	38 d0       	rcall	.+112    	; 0x2b8 <can_init>
	PWM_init(0.02, clockspeed);
     248:	20 e0       	ldi	r18, 0x00	; 0
     24a:	34 e2       	ldi	r19, 0x24	; 36
     24c:	44 ef       	ldi	r20, 0xF4	; 244
     24e:	50 e0       	ldi	r21, 0x00	; 0
     250:	6a e0       	ldi	r22, 0x0A	; 10
     252:	77 ed       	ldi	r23, 0xD7	; 215
     254:	83 ea       	ldi	r24, 0xA3	; 163
     256:	9c e3       	ldi	r25, 0x3C	; 60
     258:	09 d6       	rcall	.+3090   	; 0xe6c <PWM_init>
	servo_init(clockspeed);
     25a:	60 e0       	ldi	r22, 0x00	; 0
     25c:	74 e2       	ldi	r23, 0x24	; 36
     25e:	84 ef       	ldi	r24, 0xF4	; 244
     260:	90 e0       	ldi	r25, 0x00	; 0
     262:	4c d6       	rcall	.+3224   	; 0xefc <servo_init>
	IR_init();
     264:	53 d3       	rcall	.+1702   	; 0x90c <IR_init>
	ADC_init();
     266:	c7 df       	rcall	.-114    	; 0x1f6 <ADC_init>
	DAC_init();
     268:	f0 d1       	rcall	.+992    	; 0x64a <DAC_init>
	motor_init();
     26a:	48 d4       	rcall	.+2192   	; 0xafc <motor_init>
	motor_calibrate();
     26c:	26 d4       	rcall	.+2124   	; 0xaba <motor_calibrate>
	PID_init();
     26e:	9b d4       	rcall	.+2358   	; 0xba6 <PID_init>
	printf("NY START!!!!!\r\n");
     270:	89 e5       	ldi	r24, 0x59	; 89
     272:	92 e0       	ldi	r25, 0x02	; 2
     274:	0e 94 a9 0b 	call	0x1752	; 0x1752 <puts>
     278:	2f ef       	ldi	r18, 0xFF	; 255
     27a:	85 ea       	ldi	r24, 0xA5	; 165
     27c:	9e e0       	ldi	r25, 0x0E	; 14
     27e:	21 50       	subi	r18, 0x01	; 1
     280:	80 40       	sbci	r24, 0x00	; 0
     282:	90 40       	sbci	r25, 0x00	; 0
     284:	e1 f7       	brne	.-8      	; 0x27e <main+0x56>
     286:	00 c0       	rjmp	.+0      	; 0x288 <main+0x60>
     288:	00 00       	nop
	_delay_ms(300); //Time to calibrate
	while(1)
	{
		PlayGame();
     28a:	01 d2       	rcall	.+1026   	; 0x68e <PlayGame>
		
		SendInfo();
     28c:	f6 d2       	rcall	.+1516   	; 0x87a <SendInfo>
     28e:	fd cf       	rjmp	.-6      	; 0x28a <main+0x62>

00000290 <__vector_3>:
#include <avr/delay.h>

volatile int flag = 0;


ISR(INT2_vect){ 
     290:	1f 92       	push	r1
     292:	0f 92       	push	r0
     294:	0f b6       	in	r0, 0x3f	; 63
     296:	0f 92       	push	r0
     298:	11 24       	eor	r1, r1
     29a:	8f 93       	push	r24
     29c:	9f 93       	push	r25
	flag = 1; 
     29e:	81 e0       	ldi	r24, 0x01	; 1
     2a0:	90 e0       	ldi	r25, 0x00	; 0
     2a2:	90 93 39 03 	sts	0x0339, r25
     2a6:	80 93 38 03 	sts	0x0338, r24
	//printf("\r\n INTERUPT \r \n");
} 
     2aa:	9f 91       	pop	r25
     2ac:	8f 91       	pop	r24
     2ae:	0f 90       	pop	r0
     2b0:	0f be       	out	0x3f, r0	; 63
     2b2:	0f 90       	pop	r0
     2b4:	1f 90       	pop	r1
     2b6:	18 95       	reti

000002b8 <can_init>:

void can_init(uint8_t mode){

	mcp_2515_init(mode);
     2b8:	79 d1       	rcall	.+754    	; 0x5ac <mcp_2515_init>
	
	
	mcp_2515_write(MCP_CANINTE, MCP_RX_INT);
     2ba:	63 e0       	ldi	r22, 0x03	; 3
     2bc:	8b e2       	ldi	r24, 0x2B	; 43
     2be:	63 d1       	rcall	.+710    	; 0x586 <mcp_2515_write>
	
	// Disable global interrupts
	cli();
     2c0:	f8 94       	cli
	// Interrupt on falling edge PD2
	set_bit(EICRA, ISC21);
     2c2:	e9 e6       	ldi	r30, 0x69	; 105
     2c4:	f0 e0       	ldi	r31, 0x00	; 0
     2c6:	80 81       	ld	r24, Z
     2c8:	80 62       	ori	r24, 0x20	; 32
     2ca:	80 83       	st	Z, r24
	clear_bit(EICRA, ISC20);
     2cc:	80 81       	ld	r24, Z
     2ce:	8f 7e       	andi	r24, 0xEF	; 239
     2d0:	80 83       	st	Z, r24
	// Enable interrupt on PD2
	set_bit(EIMSK,INT2);
     2d2:	ea 9a       	sbi	0x1d, 2	; 29
	// Enable global interrupts
	sei();
     2d4:	78 94       	sei
     2d6:	08 95       	ret

000002d8 <can_interrupt>:
}

uint8_t can_interrupt(){
	if (flag){	
     2d8:	80 91 38 03 	lds	r24, 0x0338
     2dc:	90 91 39 03 	lds	r25, 0x0339
     2e0:	89 2b       	or	r24, r25
     2e2:	31 f0       	breq	.+12     	; 0x2f0 <can_interrupt+0x18>
		flag = 0;
     2e4:	10 92 39 03 	sts	0x0339, r1
     2e8:	10 92 38 03 	sts	0x0338, r1
		return 1;
     2ec:	81 e0       	ldi	r24, 0x01	; 1
     2ee:	08 95       	ret
	}
	return 0;
     2f0:	80 e0       	ldi	r24, 0x00	; 0
}
     2f2:	08 95       	ret

000002f4 <can_transmit_complete>:
	mcp_2515_request_to_send(MCP_RTS_TX0 + buffer_number);
	//printf("buffer nr. %d\n\r",buffer_number);
	
}

int can_transmit_complete(int buffer_number){
     2f4:	cf 93       	push	r28
     2f6:	df 93       	push	r29
     2f8:	ec 01       	movw	r28, r24
	uint8_t transmit_flag = mcp_2515_read(MCP_CANINTF);
     2fa:	8c e2       	ldi	r24, 0x2C	; 44
     2fc:	37 d1       	rcall	.+622    	; 0x56c <mcp_2515_read>
	uint8_t interrupt_bits = (transmit_flag & (MCP_TX0IF + buffer_number*2));
     2fe:	9e 01       	movw	r18, r28
     300:	2e 5f       	subi	r18, 0xFE	; 254
     302:	3f 4f       	sbci	r19, 0xFF	; 255
     304:	42 2f       	mov	r20, r18
     306:	44 0f       	add	r20, r20
     308:	84 23       	and	r24, r20

	if(interrupt_bits == (MCP_TX0IF + buffer_number*2)){
     30a:	48 2f       	mov	r20, r24
     30c:	50 e0       	ldi	r21, 0x00	; 0
     30e:	22 0f       	add	r18, r18
     310:	33 1f       	adc	r19, r19
     312:	81 e0       	ldi	r24, 0x01	; 1
     314:	90 e0       	ldi	r25, 0x00	; 0
     316:	42 17       	cp	r20, r18
     318:	53 07       	cpc	r21, r19
     31a:	11 f4       	brne	.+4      	; 0x320 <can_transmit_complete+0x2c>
     31c:	80 e0       	ldi	r24, 0x00	; 0
     31e:	90 e0       	ldi	r25, 0x00	; 0
			return 0;
	}
	//printf("\r\nMELDING SENDT\r\n");
	return 1;
}
     320:	df 91       	pop	r29
     322:	cf 91       	pop	r28
     324:	08 95       	ret

00000326 <can_message_send>:
	}
	
	return message1;
}

void can_message_send(can_message* message){
     326:	ef 92       	push	r14
     328:	ff 92       	push	r15
     32a:	0f 93       	push	r16
     32c:	1f 93       	push	r17
     32e:	cf 93       	push	r28
     330:	df 93       	push	r29
     332:	ec 01       	movw	r28, r24
	
	static int buffer_number = 0;
	
	while (!can_transmit_complete(buffer_number)){
     334:	11 c0       	rjmp	.+34     	; 0x358 <can_message_send+0x32>
		buffer_number +=1;
     336:	20 91 36 03 	lds	r18, 0x0336
     33a:	30 91 37 03 	lds	r19, 0x0337
     33e:	2f 5f       	subi	r18, 0xFF	; 255
     340:	3f 4f       	sbci	r19, 0xFF	; 255
     342:	30 93 37 03 	sts	0x0337, r19
     346:	20 93 36 03 	sts	0x0336, r18
		if (buffer_number > 2) {
     34a:	23 30       	cpi	r18, 0x03	; 3
     34c:	31 05       	cpc	r19, r1
     34e:	24 f0       	brlt	.+8      	; 0x358 <can_message_send+0x32>
			buffer_number = 0;
     350:	10 92 37 03 	sts	0x0337, r1
     354:	10 92 36 03 	sts	0x0336, r1

void can_message_send(can_message* message){
	
	static int buffer_number = 0;
	
	while (!can_transmit_complete(buffer_number)){
     358:	80 91 36 03 	lds	r24, 0x0336
     35c:	90 91 37 03 	lds	r25, 0x0337
     360:	c9 df       	rcall	.-110    	; 0x2f4 <can_transmit_complete>
     362:	89 2b       	or	r24, r25
     364:	41 f3       	breq	.-48     	; 0x336 <can_message_send+0x10>
			buffer_number = 0;
		}
	}
	
	// Arbitration field identifier ID = 1337;    id high = 167  id low = 0
	unsigned int ID = message->id;
     366:	88 81       	ld	r24, Y
     368:	99 81       	ldd	r25, Y+1	; 0x01
	char id_high = ID / 8;
	char id_low = ID % 8;
     36a:	28 2f       	mov	r18, r24
     36c:	27 70       	andi	r18, 0x07	; 7
     36e:	f2 2e       	mov	r15, r18
		}
	}
	
	// Arbitration field identifier ID = 1337;    id high = 167  id low = 0
	unsigned int ID = message->id;
	char id_high = ID / 8;
     370:	bc 01       	movw	r22, r24
     372:	76 95       	lsr	r23
     374:	67 95       	ror	r22
     376:	76 95       	lsr	r23
     378:	67 95       	ror	r22
     37a:	76 95       	lsr	r23
     37c:	67 95       	ror	r22
	char id_low = ID % 8;
	id_low = id_low*0b100000;
	mcp_2515_write(MCP_TXB0SIDH + 16 * buffer_number, id_high);
     37e:	06 e3       	ldi	r16, 0x36	; 54
     380:	13 e0       	ldi	r17, 0x03	; 3
     382:	f8 01       	movw	r30, r16
     384:	80 81       	ld	r24, Z
     386:	82 95       	swap	r24
     388:	80 7f       	andi	r24, 0xF0	; 240
     38a:	8f 5c       	subi	r24, 0xCF	; 207
     38c:	fc d0       	rcall	.+504    	; 0x586 <mcp_2515_write>
	
	// Arbitration field identifier ID = 1337;    id high = 167  id low = 0
	unsigned int ID = message->id;
	char id_high = ID / 8;
	char id_low = ID % 8;
	id_low = id_low*0b100000;
     38e:	6f 2d       	mov	r22, r15
     390:	62 95       	swap	r22
     392:	66 0f       	add	r22, r22
     394:	60 7e       	andi	r22, 0xE0	; 224
	mcp_2515_write(MCP_TXB0SIDH + 16 * buffer_number, id_high);
	mcp_2515_write(MCP_TXB0SIDL + 16 * buffer_number, id_low);
     396:	f8 01       	movw	r30, r16
     398:	80 81       	ld	r24, Z
     39a:	82 95       	swap	r24
     39c:	80 7f       	andi	r24, 0xF0	; 240
     39e:	8e 5c       	subi	r24, 0xCE	; 206
     3a0:	f2 d0       	rcall	.+484    	; 0x586 <mcp_2515_write>
	
	// Define data length of message
	uint8_t data_length = message->length;
     3a2:	ea 80       	ldd	r14, Y+2	; 0x02
	mcp_2515_write(MCP_TXB0DLC + 16 * buffer_number, data_length);
     3a4:	f8 01       	movw	r30, r16
     3a6:	80 81       	ld	r24, Z
     3a8:	82 95       	swap	r24
     3aa:	80 7f       	andi	r24, 0xF0	; 240
     3ac:	6e 2d       	mov	r22, r14
     3ae:	8b 5c       	subi	r24, 0xCB	; 203
     3b0:	ea d0       	rcall	.+468    	; 0x586 <mcp_2515_write>
	
	// Write data bytes to transmit buffer
	char* data_bytes = message->data;
     3b2:	23 96       	adiw	r28, 0x03	; 3
	for (uint8_t byte = 0; byte < data_length; byte++) {
     3b4:	ee 20       	and	r14, r14
     3b6:	79 f0       	breq	.+30     	; 0x3d6 <can_message_send+0xb0>
     3b8:	f1 2c       	mov	r15, r1
		mcp_2515_write(MCP_TXB0Dm + byte + 16 * buffer_number, data_bytes[byte]);
     3ba:	69 91       	ld	r22, Y+
     3bc:	f8 01       	movw	r30, r16
     3be:	80 81       	ld	r24, Z
     3c0:	2f 2d       	mov	r18, r15
     3c2:	f0 e1       	ldi	r31, 0x10	; 16
     3c4:	8f 9f       	mul	r24, r31
     3c6:	20 0d       	add	r18, r0
     3c8:	11 24       	eor	r1, r1
     3ca:	82 2f       	mov	r24, r18
     3cc:	8a 5c       	subi	r24, 0xCA	; 202
     3ce:	db d0       	rcall	.+438    	; 0x586 <mcp_2515_write>
	uint8_t data_length = message->length;
	mcp_2515_write(MCP_TXB0DLC + 16 * buffer_number, data_length);
	
	// Write data bytes to transmit buffer
	char* data_bytes = message->data;
	for (uint8_t byte = 0; byte < data_length; byte++) {
     3d0:	f3 94       	inc	r15
     3d2:	fe 10       	cpse	r15, r14
     3d4:	f2 cf       	rjmp	.-28     	; 0x3ba <can_message_send+0x94>
		mcp_2515_write(MCP_TXB0Dm + byte + 16 * buffer_number, data_bytes[byte]);
	}
	
	// Request to send message, send if successful
	mcp_2515_request_to_send(MCP_RTS_TX0 + buffer_number);
     3d6:	80 91 36 03 	lds	r24, 0x0336
     3da:	8f 57       	subi	r24, 0x7F	; 127
     3dc:	1a d1       	rcall	.+564    	; 0x612 <mcp_2515_request_to_send>
	//printf("buffer nr. %d\n\r",buffer_number);
	
}
     3de:	df 91       	pop	r29
     3e0:	cf 91       	pop	r28
     3e2:	1f 91       	pop	r17
     3e4:	0f 91       	pop	r16
     3e6:	ff 90       	pop	r15
     3e8:	ef 90       	pop	r14
     3ea:	08 95       	ret

000003ec <can_message_receive>:
	}
	//printf("\r\nMELDING SENDT\r\n");
	return 1;
}

void can_message_receive(int rec_buff_num, can_message* received_message){
     3ec:	0f 93       	push	r16
     3ee:	1f 93       	push	r17
     3f0:	cf 93       	push	r28
     3f2:	df 93       	push	r29
     3f4:	eb 01       	movw	r28, r22
	uint8_t id_high = mcp_2515_read(MCP_RXB0SIDH + 16 * rec_buff_num);
     3f6:	18 2f       	mov	r17, r24
     3f8:	12 95       	swap	r17
     3fa:	10 7f       	andi	r17, 0xF0	; 240
     3fc:	81 e6       	ldi	r24, 0x61	; 97
     3fe:	81 0f       	add	r24, r17
     400:	b5 d0       	rcall	.+362    	; 0x56c <mcp_2515_read>
     402:	08 2f       	mov	r16, r24
	uint8_t id_low = mcp_2515_read(MCP_RXB0SIDL + 16 * rec_buff_num);
     404:	82 e6       	ldi	r24, 0x62	; 98
     406:	81 0f       	add	r24, r17
     408:	b1 d0       	rcall	.+354    	; 0x56c <mcp_2515_read>
	uint8_t mask = 0b11100000;
	id_low = (id_low & mask);
	received_message->id = 0b1000*id_high + id_low/0b100000;
     40a:	20 2f       	mov	r18, r16
     40c:	30 e0       	ldi	r19, 0x00	; 0
     40e:	22 0f       	add	r18, r18
     410:	33 1f       	adc	r19, r19
     412:	22 0f       	add	r18, r18
     414:	33 1f       	adc	r19, r19
     416:	22 0f       	add	r18, r18
     418:	33 1f       	adc	r19, r19
     41a:	82 95       	swap	r24
     41c:	86 95       	lsr	r24
     41e:	87 70       	andi	r24, 0x07	; 7
     420:	28 0f       	add	r18, r24
     422:	31 1d       	adc	r19, r1
     424:	39 83       	std	Y+1, r19	; 0x01
     426:	28 83       	st	Y, r18
	
	uint8_t data_length = mcp_2515_read(MCP_RXB0DLC + 16 * rec_buff_num);
     428:	85 e6       	ldi	r24, 0x65	; 101
     42a:	81 0f       	add	r24, r17
     42c:	9f d0       	rcall	.+318    	; 0x56c <mcp_2515_read>
	mask = 0b1111;
	received_message->length = (data_length & mask);
     42e:	98 2f       	mov	r25, r24
     430:	9f 70       	andi	r25, 0x0F	; 15
     432:	9a 83       	std	Y+2, r25	; 0x02
	
	for (uint8_t byte = 0; byte < data_length; byte++) {
     434:	88 23       	and	r24, r24
     436:	51 f0       	breq	.+20     	; 0x44c <can_message_receive+0x60>
     438:	1a 59       	subi	r17, 0x9A	; 154
     43a:	23 96       	adiw	r28, 0x03	; 3
     43c:	08 2f       	mov	r16, r24
     43e:	01 0f       	add	r16, r17
		received_message->data[byte] = mcp_2515_read(MCP_RXB0DM + byte + 16 * rec_buff_num);
     440:	81 2f       	mov	r24, r17
     442:	94 d0       	rcall	.+296    	; 0x56c <mcp_2515_read>
     444:	89 93       	st	Y+, r24
     446:	1f 5f       	subi	r17, 0xFF	; 255
	
	uint8_t data_length = mcp_2515_read(MCP_RXB0DLC + 16 * rec_buff_num);
	mask = 0b1111;
	received_message->length = (data_length & mask);
	
	for (uint8_t byte = 0; byte < data_length; byte++) {
     448:	10 13       	cpse	r17, r16
     44a:	fa cf       	rjmp	.-12     	; 0x440 <can_message_receive+0x54>
		received_message->data[byte] = mcp_2515_read(MCP_RXB0DM + byte + 16 * rec_buff_num);
	}
	
}
     44c:	df 91       	pop	r29
     44e:	cf 91       	pop	r28
     450:	1f 91       	pop	r17
     452:	0f 91       	pop	r16
     454:	08 95       	ret

00000456 <can_int_vect>:

void can_int_vect(int* v) { 
     456:	cf 93       	push	r28
     458:	df 93       	push	r29
     45a:	ec 01       	movw	r28, r24
	uint8_t int_flag = mcp_2515_read(MCP_CANINTF);
     45c:	8c e2       	ldi	r24, 0x2C	; 44
     45e:	86 d0       	rcall	.+268    	; 0x56c <mcp_2515_read>
	v[0] = (int_flag & MCP_RX0IF);
     460:	98 2f       	mov	r25, r24
     462:	91 70       	andi	r25, 0x01	; 1
     464:	98 83       	st	Y, r25
     466:	19 82       	std	Y+1, r1	; 0x01
	v[1] = (int_flag & MCP_RX1IF);
     468:	82 70       	andi	r24, 0x02	; 2
     46a:	90 e0       	ldi	r25, 0x00	; 0
     46c:	9b 83       	std	Y+3, r25	; 0x03
     46e:	8a 83       	std	Y+2, r24	; 0x02
}
     470:	df 91       	pop	r29
     472:	cf 91       	pop	r28
     474:	08 95       	ret

00000476 <can_handle_messages>:
		return 1;
	}
	return 0;
}

can_message can_handle_messages(){
     476:	0f 93       	push	r16
     478:	1f 93       	push	r17
     47a:	cf 93       	push	r28
     47c:	df 93       	push	r29
     47e:	cd b7       	in	r28, 0x3d	; 61
     480:	de b7       	in	r29, 0x3e	; 62
     482:	68 97       	sbiw	r28, 0x18	; 24
     484:	0f b6       	in	r0, 0x3f	; 63
     486:	f8 94       	cli
     488:	de bf       	out	0x3e, r29	; 62
     48a:	0f be       	out	0x3f, r0	; 63
     48c:	cd bf       	out	0x3d, r28	; 61
     48e:	8c 01       	movw	r16, r24
	uint8_t v[2] = {0};
     490:	1a 82       	std	Y+2, r1	; 0x02
     492:	19 82       	std	Y+1, r1	; 0x01

	can_int_vect(v);
     494:	ce 01       	movw	r24, r28
     496:	01 96       	adiw	r24, 0x01	; 1
     498:	de df       	rcall	.-68     	; 0x456 <can_int_vect>

	can_message message1;
	if (v[0]){
     49a:	89 81       	ldd	r24, Y+1	; 0x01
     49c:	88 23       	and	r24, r24
     49e:	01 f1       	breq	.+64     	; 0x4e0 <can_handle_messages+0x6a>
		can_message_receive(0, &message1);
     4a0:	be 01       	movw	r22, r28
     4a2:	6d 5f       	subi	r22, 0xFD	; 253
     4a4:	7f 4f       	sbci	r23, 0xFF	; 255
     4a6:	80 e0       	ldi	r24, 0x00	; 0
     4a8:	90 e0       	ldi	r25, 0x00	; 0
     4aa:	a0 df       	rcall	.-192    	; 0x3ec <can_message_receive>
		mcp_2515_write(MCP_CANINTF,0);
     4ac:	60 e0       	ldi	r22, 0x00	; 0
     4ae:	8c e2       	ldi	r24, 0x2C	; 44
     4b0:	6a d0       	rcall	.+212    	; 0x586 <mcp_2515_write>
		mcp_2515_bit_modify(MCP_CANINTF, 1, 0);
     4b2:	40 e0       	ldi	r20, 0x00	; 0
     4b4:	61 e0       	ldi	r22, 0x01	; 1
     4b6:	8c e2       	ldi	r24, 0x2C	; 44
     4b8:	b4 d0       	rcall	.+360    	; 0x622 <mcp_2515_bit_modify>
		//mcp_2515_bit_modify(MCP_CANINTF, 1, 0);
		can_int_vect(v);
     4ba:	ce 01       	movw	r24, r28
     4bc:	01 96       	adiw	r24, 0x01	; 1
     4be:	cb df       	rcall	.-106    	; 0x456 <can_int_vect>
		if (!v[1]){
     4c0:	8a 81       	ldd	r24, Y+2	; 0x02
     4c2:	81 11       	cpse	r24, r1
     4c4:	04 c0       	rjmp	.+8      	; 0x4ce <can_handle_messages+0x58>
			flag = 0;
     4c6:	10 92 39 03 	sts	0x0339, r1
     4ca:	10 92 38 03 	sts	0x0338, r1
		}
		return message1;
     4ce:	8b e0       	ldi	r24, 0x0B	; 11
     4d0:	fe 01       	movw	r30, r28
     4d2:	33 96       	adiw	r30, 0x03	; 3
     4d4:	d8 01       	movw	r26, r16
     4d6:	01 90       	ld	r0, Z+
     4d8:	0d 92       	st	X+, r0
     4da:	8a 95       	dec	r24
     4dc:	e1 f7       	brne	.-8      	; 0x4d6 <can_handle_messages+0x60>
     4de:	2b c0       	rjmp	.+86     	; 0x536 <can_handle_messages+0xc0>
	}
	
	can_message message2;
	
	if (v[1]){
     4e0:	8a 81       	ldd	r24, Y+2	; 0x02
     4e2:	88 23       	and	r24, r24
     4e4:	01 f1       	breq	.+64     	; 0x526 <can_handle_messages+0xb0>
		can_message_receive(1, &message2);
     4e6:	be 01       	movw	r22, r28
     4e8:	62 5f       	subi	r22, 0xF2	; 242
     4ea:	7f 4f       	sbci	r23, 0xFF	; 255
     4ec:	81 e0       	ldi	r24, 0x01	; 1
     4ee:	90 e0       	ldi	r25, 0x00	; 0
     4f0:	7d df       	rcall	.-262    	; 0x3ec <can_message_receive>
		mcp_2515_write(MCP_CANINTF,0);
     4f2:	60 e0       	ldi	r22, 0x00	; 0
     4f4:	8c e2       	ldi	r24, 0x2C	; 44
     4f6:	47 d0       	rcall	.+142    	; 0x586 <mcp_2515_write>
		//mcp_2515_bit_modify(MCP_CANINTF, 2, 0);
		mcp_2515_bit_modify(MCP_CANINTF, 2, 0);
     4f8:	40 e0       	ldi	r20, 0x00	; 0
     4fa:	62 e0       	ldi	r22, 0x02	; 2
     4fc:	8c e2       	ldi	r24, 0x2C	; 44
     4fe:	91 d0       	rcall	.+290    	; 0x622 <mcp_2515_bit_modify>
		can_int_vect(v);
     500:	ce 01       	movw	r24, r28
     502:	01 96       	adiw	r24, 0x01	; 1
     504:	a8 df       	rcall	.-176    	; 0x456 <can_int_vect>
		if (!v[0]){
     506:	89 81       	ldd	r24, Y+1	; 0x01
     508:	81 11       	cpse	r24, r1
     50a:	04 c0       	rjmp	.+8      	; 0x514 <can_handle_messages+0x9e>
			flag = 0;
     50c:	10 92 39 03 	sts	0x0339, r1
     510:	10 92 38 03 	sts	0x0338, r1
		}
		return message2;
     514:	8b e0       	ldi	r24, 0x0B	; 11
     516:	fe 01       	movw	r30, r28
     518:	3e 96       	adiw	r30, 0x0e	; 14
     51a:	d8 01       	movw	r26, r16
     51c:	01 90       	ld	r0, Z+
     51e:	0d 92       	st	X+, r0
     520:	8a 95       	dec	r24
     522:	e1 f7       	brne	.-8      	; 0x51c <can_handle_messages+0xa6>
     524:	08 c0       	rjmp	.+16     	; 0x536 <can_handle_messages+0xc0>
	}
	
	return message1;
     526:	8b e0       	ldi	r24, 0x0B	; 11
     528:	fe 01       	movw	r30, r28
     52a:	33 96       	adiw	r30, 0x03	; 3
     52c:	d8 01       	movw	r26, r16
     52e:	01 90       	ld	r0, Z+
     530:	0d 92       	st	X+, r0
     532:	8a 95       	dec	r24
     534:	e1 f7       	brne	.-8      	; 0x52e <can_handle_messages+0xb8>
}
     536:	c8 01       	movw	r24, r16
     538:	68 96       	adiw	r28, 0x18	; 24
     53a:	0f b6       	in	r0, 0x3f	; 63
     53c:	f8 94       	cli
     53e:	de bf       	out	0x3e, r29	; 62
     540:	0f be       	out	0x3f, r0	; 63
     542:	cd bf       	out	0x3d, r28	; 61
     544:	df 91       	pop	r29
     546:	cf 91       	pop	r28
     548:	1f 91       	pop	r17
     54a:	0f 91       	pop	r16
     54c:	08 95       	ret

0000054e <activate_slave>:

#include <avr/io.h>
#include <avr/delay.h>

void activate_slave(){
	clear_bit(PORTB, PB7);
     54e:	2f 98       	cbi	0x05, 7	; 5
     550:	08 95       	ret

00000552 <deactivate_slave>:
}

void deactivate_slave(){
	set_bit(PORTB, PB7);
     552:	2f 9a       	sbi	0x05, 7	; 5
     554:	08 95       	ret

00000556 <mcp_2515_reset>:
	
	return 0;
}

void mcp_2515_reset(){
	activate_slave();
     556:	fb df       	rcall	.-10     	; 0x54e <activate_slave>
	SPI_write(MCP_RESET);
     558:	80 ec       	ldi	r24, 0xC0	; 192
     55a:	07 d6       	rcall	.+3086   	; 0x116a <SPI_write>
	deactivate_slave();
     55c:	fa df       	rcall	.-12     	; 0x552 <deactivate_slave>
     55e:	83 ec       	ldi	r24, 0xC3	; 195
     560:	99 e0       	ldi	r25, 0x09	; 9
     562:	01 97       	sbiw	r24, 0x01	; 1
     564:	f1 f7       	brne	.-4      	; 0x562 <mcp_2515_reset+0xc>
     566:	00 c0       	rjmp	.+0      	; 0x568 <mcp_2515_reset+0x12>
     568:	00 00       	nop
     56a:	08 95       	ret

0000056c <mcp_2515_read>:
	_delay_ms(10);	
}

uint8_t mcp_2515_read(uint8_t address){
     56c:	cf 93       	push	r28
     56e:	c8 2f       	mov	r28, r24
	activate_slave();
     570:	ee df       	rcall	.-36     	; 0x54e <activate_slave>
	
	uint8_t data;
	
	SPI_write(MCP_READ);
     572:	83 e0       	ldi	r24, 0x03	; 3
     574:	fa d5       	rcall	.+3060   	; 0x116a <SPI_write>
	SPI_write(address);
     576:	8c 2f       	mov	r24, r28
     578:	f8 d5       	rcall	.+3056   	; 0x116a <SPI_write>
	data = SPI_read();
     57a:	fc d5       	rcall	.+3064   	; 0x1174 <SPI_read>
     57c:	c8 2f       	mov	r28, r24
	
	deactivate_slave();
     57e:	e9 df       	rcall	.-46     	; 0x552 <deactivate_slave>
	
	return data;
}
     580:	8c 2f       	mov	r24, r28
     582:	cf 91       	pop	r28
     584:	08 95       	ret

00000586 <mcp_2515_write>:


void mcp_2515_write(uint8_t address, uint8_t data) {
     586:	cf 93       	push	r28
     588:	df 93       	push	r29
     58a:	d8 2f       	mov	r29, r24
     58c:	c6 2f       	mov	r28, r22
	activate_slave();
     58e:	df df       	rcall	.-66     	; 0x54e <activate_slave>
	
	SPI_write(MCP_WRITE);
     590:	82 e0       	ldi	r24, 0x02	; 2
     592:	eb d5       	rcall	.+3030   	; 0x116a <SPI_write>
	SPI_write(address);
     594:	8d 2f       	mov	r24, r29
     596:	e9 d5       	rcall	.+3026   	; 0x116a <SPI_write>
	SPI_write(data);
     598:	8c 2f       	mov	r24, r28
     59a:	e7 d5       	rcall	.+3022   	; 0x116a <SPI_write>
	
	deactivate_slave();
     59c:	da df       	rcall	.-76     	; 0x552 <deactivate_slave>
}
     59e:	df 91       	pop	r29
     5a0:	cf 91       	pop	r28
     5a2:	08 95       	ret

000005a4 <mcp_2515_set_mode>:
void deactivate_slave(){
	set_bit(PORTB, PB7);
}

void mcp_2515_set_mode(uint8_t mode){
	mcp_2515_write(MCP_CANCTRL, mode);
     5a4:	68 2f       	mov	r22, r24
     5a6:	8f e0       	ldi	r24, 0x0F	; 15
     5a8:	ee cf       	rjmp	.-36     	; 0x586 <mcp_2515_write>
     5aa:	08 95       	ret

000005ac <mcp_2515_init>:
}

uint8_t mcp_2515_init(uint8_t mode){
     5ac:	cf 93       	push	r28
     5ae:	c8 2f       	mov	r28, r24
	
	uint8_t val;
	SPI_init();
     5b0:	d6 d5       	rcall	.+2988   	; 0x115e <SPI_init>
	
	mcp_2515_reset();
     5b2:	d1 df       	rcall	.-94     	; 0x556 <mcp_2515_reset>
	
	val = mcp_2515_read(MCP_CANSTAT);
     5b4:	8e e0       	ldi	r24, 0x0E	; 14
     5b6:	da df       	rcall	.-76     	; 0x56c <mcp_2515_read>
	//printf("val : %d ",val);
	uint8_t mode_bits = (val & MODE_MASK);
     5b8:	80 7e       	andi	r24, 0xE0	; 224
	if(mode_bits != MODE_CONFIG){
     5ba:	80 38       	cpi	r24, 0x80	; 128
     5bc:	71 f0       	breq	.+28     	; 0x5da <mcp_2515_init+0x2e>
		printf("MCP2515 is NOT in Configuration mode after reset! Its config bits are %x\n", mode_bits);
     5be:	1f 92       	push	r1
     5c0:	8f 93       	push	r24
     5c2:	88 e6       	ldi	r24, 0x68	; 104
     5c4:	92 e0       	ldi	r25, 0x02	; 2
     5c6:	9f 93       	push	r25
     5c8:	8f 93       	push	r24
     5ca:	0e 94 98 0b 	call	0x1730	; 0x1730 <printf>
		return 1;
     5ce:	0f 90       	pop	r0
     5d0:	0f 90       	pop	r0
     5d2:	0f 90       	pop	r0
     5d4:	0f 90       	pop	r0
     5d6:	81 e0       	ldi	r24, 0x01	; 1
     5d8:	1a c0       	rjmp	.+52     	; 0x60e <mcp_2515_init+0x62>
	}
	
	mcp_2515_set_mode(mode);
     5da:	8c 2f       	mov	r24, r28
     5dc:	e3 df       	rcall	.-58     	; 0x5a4 <mcp_2515_set_mode>
	
	val = mcp_2515_read(MCP_CANSTAT);
     5de:	8e e0       	ldi	r24, 0x0E	; 14
     5e0:	c5 df       	rcall	.-118    	; 0x56c <mcp_2515_read>
	mode_bits = (val & MODE_MASK);
     5e2:	80 7e       	andi	r24, 0xE0	; 224
	
	if(mode_bits != mode){
     5e4:	8c 17       	cp	r24, r28
     5e6:	91 f0       	breq	.+36     	; 0x60c <mcp_2515_init+0x60>
		
		printf("MCP2515 is NOT in correct mode after reset! Its config bits are %x\n", mode_bits);
     5e8:	1f 92       	push	r1
     5ea:	8f 93       	push	r24
     5ec:	82 eb       	ldi	r24, 0xB2	; 178
     5ee:	92 e0       	ldi	r25, 0x02	; 2
     5f0:	9f 93       	push	r25
     5f2:	8f 93       	push	r24
     5f4:	0e 94 98 0b 	call	0x1730	; 0x1730 <printf>
		printf("\n!\n");
     5f8:	86 ef       	ldi	r24, 0xF6	; 246
     5fa:	92 e0       	ldi	r25, 0x02	; 2
     5fc:	0e 94 a9 0b 	call	0x1752	; 0x1752 <puts>
		return 1;
     600:	0f 90       	pop	r0
     602:	0f 90       	pop	r0
     604:	0f 90       	pop	r0
     606:	0f 90       	pop	r0
     608:	81 e0       	ldi	r24, 0x01	; 1
     60a:	01 c0       	rjmp	.+2      	; 0x60e <mcp_2515_init+0x62>
	}
	
	
	return 0;
     60c:	80 e0       	ldi	r24, 0x00	; 0
}
     60e:	cf 91       	pop	r28
     610:	08 95       	ret

00000612 <mcp_2515_request_to_send>:
	SPI_write(data);
	
	deactivate_slave();
}

void mcp_2515_request_to_send(char buffer) {
     612:	cf 93       	push	r28
     614:	c8 2f       	mov	r28, r24
	activate_slave();
     616:	9b df       	rcall	.-202    	; 0x54e <activate_slave>
	
	SPI_write(buffer);
     618:	8c 2f       	mov	r24, r28
     61a:	a7 d5       	rcall	.+2894   	; 0x116a <SPI_write>
	
	deactivate_slave();
     61c:	9a df       	rcall	.-204    	; 0x552 <deactivate_slave>
}
     61e:	cf 91       	pop	r28
     620:	08 95       	ret

00000622 <mcp_2515_bit_modify>:

void mcp_2515_bit_modify(uint8_t adress, uint8_t mask, uint8_t data) {
     622:	1f 93       	push	r17
     624:	cf 93       	push	r28
     626:	df 93       	push	r29
     628:	18 2f       	mov	r17, r24
     62a:	d6 2f       	mov	r29, r22
     62c:	c4 2f       	mov	r28, r20
	activate_slave();
     62e:	8f df       	rcall	.-226    	; 0x54e <activate_slave>
	
	SPI_write(MCP_BITMOD);
     630:	85 e0       	ldi	r24, 0x05	; 5
     632:	9b d5       	rcall	.+2870   	; 0x116a <SPI_write>
	SPI_write(adress);
     634:	81 2f       	mov	r24, r17
     636:	99 d5       	rcall	.+2866   	; 0x116a <SPI_write>
	SPI_write(mask);
     638:	8d 2f       	mov	r24, r29
     63a:	97 d5       	rcall	.+2862   	; 0x116a <SPI_write>
	SPI_write(data);
     63c:	8c 2f       	mov	r24, r28
     63e:	95 d5       	rcall	.+2858   	; 0x116a <SPI_write>
	
	deactivate_slave();
     640:	88 df       	rcall	.-240    	; 0x552 <deactivate_slave>
}
     642:	df 91       	pop	r29
     644:	cf 91       	pop	r28
     646:	1f 91       	pop	r17
     648:	08 95       	ret

0000064a <DAC_init>:
     64a:	78 94       	sei
     64c:	a8 c4       	rjmp	.+2384   	; 0xf9e <TWI_Master_Initialise>
     64e:	08 95       	ret

00000650 <DAC_send>:
     650:	cf 93       	push	r28
     652:	df 93       	push	r29
     654:	00 d0       	rcall	.+0      	; 0x656 <DAC_send+0x6>
     656:	cd b7       	in	r28, 0x3d	; 61
     658:	de b7       	in	r29, 0x3e	; 62
     65a:	90 e5       	ldi	r25, 0x50	; 80
     65c:	99 83       	std	Y+1, r25	; 0x01
     65e:	1a 82       	std	Y+2, r1	; 0x02
     660:	8b 83       	std	Y+3, r24	; 0x03
     662:	63 e0       	ldi	r22, 0x03	; 3
     664:	ce 01       	movw	r24, r28
     666:	01 96       	adiw	r24, 0x01	; 1
     668:	a4 d4       	rcall	.+2376   	; 0xfb2 <TWI_Start_Transceiver_With_Data>
     66a:	0f 90       	pop	r0
     66c:	0f 90       	pop	r0
     66e:	0f 90       	pop	r0
     670:	df 91       	pop	r29
     672:	cf 91       	pop	r28
     674:	08 95       	ret

00000676 <HitBall>:
		}

}
void HitBall(){
	
	PORTB |= (1<<PB6);
     676:	2e 9a       	sbi	0x05, 6	; 5
     678:	2f e3       	ldi	r18, 0x3F	; 63
     67a:	8d e0       	ldi	r24, 0x0D	; 13
     67c:	93 e0       	ldi	r25, 0x03	; 3
     67e:	21 50       	subi	r18, 0x01	; 1
     680:	80 40       	sbci	r24, 0x00	; 0
     682:	90 40       	sbci	r25, 0x00	; 0
     684:	e1 f7       	brne	.-8      	; 0x67e <HitBall+0x8>
     686:	00 c0       	rjmp	.+0      	; 0x688 <HitBall+0x12>
     688:	00 00       	nop
	_delay_ms(1000);
	PORTB &= ~(1<<PB6);
     68a:	2e 98       	cbi	0x05, 6	; 5
     68c:	08 95       	ret

0000068e <PlayGame>:
int servo;
int points = 0;
int Reset;
int sendinfoFlag =0;
int menuOption = 0;
void PlayGame(){
     68e:	cf 92       	push	r12
     690:	df 92       	push	r13
     692:	ef 92       	push	r14
     694:	ff 92       	push	r15
     696:	cf 93       	push	r28
     698:	df 93       	push	r29
     69a:	cd b7       	in	r28, 0x3d	; 61
     69c:	de b7       	in	r29, 0x3e	; 62
     69e:	2b 97       	sbiw	r28, 0x0b	; 11
     6a0:	0f b6       	in	r0, 0x3f	; 63
     6a2:	f8 94       	cli
     6a4:	de bf       	out	0x3e, r29	; 62
     6a6:	0f be       	out	0x3f, r0	; 63
     6a8:	cd bf       	out	0x3d, r28	; 61
	//printf("PLAY GAME ");
	DDRB |= (1<<PB6);
     6aa:	26 9a       	sbi	0x04, 6	; 4
	if (can_interrupt()){
     6ac:	15 de       	rcall	.-982    	; 0x2d8 <can_interrupt>
     6ae:	88 23       	and	r24, r24
     6b0:	09 f4       	brne	.+2      	; 0x6b4 <PlayGame+0x26>
     6b2:	65 c0       	rjmp	.+202    	; 0x77e <PlayGame+0xf0>
		
		canMessage = can_handle_messages();
     6b4:	ce 01       	movw	r24, r28
     6b6:	01 96       	adiw	r24, 0x01	; 1
     6b8:	de de       	rcall	.-580    	; 0x476 <can_handle_messages>
     6ba:	8b e0       	ldi	r24, 0x0B	; 11
     6bc:	fe 01       	movw	r30, r28
     6be:	31 96       	adiw	r30, 0x01	; 1
     6c0:	a0 e7       	ldi	r26, 0x70	; 112
     6c2:	b3 e0       	ldi	r27, 0x03	; 3
     6c4:	01 90       	ld	r0, Z+
     6c6:	0d 92       	st	X+, r0
     6c8:	8a 95       	dec	r24
     6ca:	e1 f7       	brne	.-8      	; 0x6c4 <PlayGame+0x36>
		Slider_L = canMessage.data[0];   //printf("SLIDER_L = %d    ",Slider_L);
     6cc:	80 91 73 03 	lds	r24, 0x0373
     6d0:	90 e0       	ldi	r25, 0x00	; 0
     6d2:	a0 e0       	ldi	r26, 0x00	; 0
     6d4:	b0 e0       	ldi	r27, 0x00	; 0
     6d6:	80 93 60 03 	sts	0x0360, r24
     6da:	90 93 61 03 	sts	0x0361, r25
     6de:	a0 93 62 03 	sts	0x0362, r26
     6e2:	b0 93 63 03 	sts	0x0363, r27
		Slider_R = canMessage.data[1];	 //printf("SLIDER_R = %d    ",Slider_R);
     6e6:	80 91 74 03 	lds	r24, 0x0374
     6ea:	90 e0       	ldi	r25, 0x00	; 0
     6ec:	90 93 6d 03 	sts	0x036D, r25
     6f0:	80 93 6c 03 	sts	0x036C, r24
		LeftButton = canMessage.data[2]; //printf("LeftButton = %d   \r\n ",LeftButton);
     6f4:	80 91 75 03 	lds	r24, 0x0375
     6f8:	90 e0       	ldi	r25, 0x00	; 0
     6fa:	90 93 6f 03 	sts	0x036F, r25
     6fe:	80 93 6e 03 	sts	0x036E, r24
		RightButton = canMessage.data[3]; 
     702:	80 91 76 03 	lds	r24, 0x0376
     706:	90 e0       	ldi	r25, 0x00	; 0
     708:	90 93 67 03 	sts	0x0367, r25
     70c:	80 93 66 03 	sts	0x0366, r24
		menuOption = canMessage.data[4];
     710:	20 91 77 03 	lds	r18, 0x0377
     714:	82 2f       	mov	r24, r18
     716:	90 e0       	ldi	r25, 0x00	; 0
     718:	90 93 3b 03 	sts	0x033B, r25
     71c:	80 93 3a 03 	sts	0x033A, r24
		printf("MENU OPTION    %d    ",menuOption);
     720:	1f 92       	push	r1
     722:	2f 93       	push	r18
     724:	89 ef       	ldi	r24, 0xF9	; 249
     726:	92 e0       	ldi	r25, 0x02	; 2
     728:	9f 93       	push	r25
     72a:	8f 93       	push	r24
     72c:	0e 94 98 0b 	call	0x1730	; 0x1730 <printf>
		if(RightButton){
     730:	0f 90       	pop	r0
     732:	0f 90       	pop	r0
     734:	0f 90       	pop	r0
     736:	0f 90       	pop	r0
     738:	80 91 66 03 	lds	r24, 0x0366
     73c:	90 91 67 03 	lds	r25, 0x0367
     740:	89 2b       	or	r24, r25
     742:	09 f0       	breq	.+2      	; 0x746 <PlayGame+0xb8>
			motor_calibrate();
     744:	ba d1       	rcall	.+884    	; 0xaba <motor_calibrate>
		}
		if(canMessage.data[5] == 'R' || menuOption == 0){
     746:	80 91 78 03 	lds	r24, 0x0378
     74a:	82 35       	cpi	r24, 0x52	; 82
     74c:	31 f0       	breq	.+12     	; 0x75a <PlayGame+0xcc>
     74e:	80 91 3a 03 	lds	r24, 0x033A
     752:	90 91 3b 03 	lds	r25, 0x033B
     756:	89 2b       	or	r24, r25
     758:	71 f4       	brne	.+28     	; 0x776 <PlayGame+0xe8>
			Reset = 1;
     75a:	81 e0       	ldi	r24, 0x01	; 1
     75c:	90 e0       	ldi	r25, 0x00	; 0
     75e:	90 93 69 03 	sts	0x0369, r25
     762:	80 93 68 03 	sts	0x0368, r24
			points = 0;
     766:	10 92 3f 03 	sts	0x033F, r1
     76a:	10 92 3e 03 	sts	0x033E, r1
			setEnemyScore(0);
     76e:	80 e0       	ldi	r24, 0x00	; 0
     770:	90 e0       	ldi	r25, 0x00	; 0
     772:	51 d1       	rcall	.+674    	; 0xa16 <setEnemyScore>
		menuOption = canMessage.data[4];
		printf("MENU OPTION    %d    ",menuOption);
		if(RightButton){
			motor_calibrate();
		}
		if(canMessage.data[5] == 'R' || menuOption == 0){
     774:	04 c0       	rjmp	.+8      	; 0x77e <PlayGame+0xf0>
			points = 0;
			setEnemyScore(0);
		}
		else
		{
			Reset = 0;
     776:	10 92 69 03 	sts	0x0369, r1
     77a:	10 92 68 03 	sts	0x0368, r1
		}
	}
		if(menuOption == 1 || menuOption == 2 || menuOption == 4){
     77e:	80 91 3a 03 	lds	r24, 0x033A
     782:	90 91 3b 03 	lds	r25, 0x033B
     786:	9c 01       	movw	r18, r24
     788:	21 50       	subi	r18, 0x01	; 1
     78a:	31 09       	sbc	r19, r1
     78c:	22 30       	cpi	r18, 0x02	; 2
     78e:	31 05       	cpc	r19, r1
     790:	18 f0       	brcs	.+6      	; 0x798 <PlayGame+0x10a>
     792:	04 97       	sbiw	r24, 0x04	; 4
     794:	09 f0       	breq	.+2      	; 0x798 <PlayGame+0x10a>
     796:	64 c0       	rjmp	.+200    	; 0x860 <PlayGame+0x1d2>
	}
	
}

long mapslider(int x, int in_min, int in_max, int out_min, int out_max){
	return (long)(x - in_min) * (long)(out_max - out_min) / (long)(in_max - in_min) + out_min;
     798:	20 91 6c 03 	lds	r18, 0x036C
     79c:	30 91 6d 03 	lds	r19, 0x036D
     7a0:	a4 e0       	ldi	r26, 0x04	; 4
     7a2:	be ed       	ldi	r27, 0xDE	; 222
     7a4:	60 d7       	rcall	.+3776   	; 0x1666 <__mulhisi3>
     7a6:	c1 2c       	mov	r12, r1
     7a8:	d1 2c       	mov	r13, r1
     7aa:	76 01       	movw	r14, r12
     7ac:	ca 94       	dec	r12
     7ae:	a7 01       	movw	r20, r14
     7b0:	96 01       	movw	r18, r12
     7b2:	37 d7       	rcall	.+3694   	; 0x1622 <__divmodsi4>
     7b4:	da 01       	movw	r26, r20
     7b6:	c9 01       	movw	r24, r18
     7b8:	88 56       	subi	r24, 0x68	; 104
     7ba:	9e 4d       	sbci	r25, 0xDE	; 222
     7bc:	af 4f       	sbci	r26, 0xFF	; 255
     7be:	bf 4f       	sbci	r27, 0xFF	; 255
			Reset = 0;
		}
	}
		if(menuOption == 1 || menuOption == 2 || menuOption == 4){
			//printf("RESET  %d  \r\n", Reset);
			setpunktmotor = mapslider(Slider_R,0,255,8600,-100);
     7c0:	80 93 5c 03 	sts	0x035C, r24
     7c4:	90 93 5d 03 	sts	0x035D, r25
     7c8:	a0 93 5e 03 	sts	0x035E, r26
     7cc:	b0 93 5f 03 	sts	0x035F, r27
			PID_setpos(setpunktmotor);
     7d0:	1e d3       	rcall	.+1596   	; 0xe0e <PID_setpos>
	}
	
}

long mapslider(int x, int in_min, int in_max, int out_min, int out_max){
	return (long)(x - in_min) * (long)(out_max - out_min) / (long)(in_max - in_min) + out_min;
     7d2:	a0 91 60 03 	lds	r26, 0x0360
     7d6:	b0 91 61 03 	lds	r27, 0x0361
     7da:	28 ec       	ldi	r18, 0xC8	; 200
     7dc:	30 e0       	ldi	r19, 0x00	; 0
     7de:	58 d7       	rcall	.+3760   	; 0x1690 <__usmulhisi3>
     7e0:	a7 01       	movw	r20, r14
     7e2:	96 01       	movw	r18, r12
     7e4:	1e d7       	rcall	.+3644   	; 0x1622 <__divmodsi4>
     7e6:	da 01       	movw	r26, r20
     7e8:	c9 01       	movw	r24, r18
     7ea:	84 56       	subi	r24, 0x64	; 100
     7ec:	91 09       	sbc	r25, r1
     7ee:	a1 09       	sbc	r26, r1
     7f0:	b1 09       	sbc	r27, r1
		if(menuOption == 1 || menuOption == 2 || menuOption == 4){
			//printf("RESET  %d  \r\n", Reset);
			setpunktmotor = mapslider(Slider_R,0,255,8600,-100);
			PID_setpos(setpunktmotor);
					
			servo = mapslider(Slider_L,0,255,-100,100);
     7f2:	90 93 6b 03 	sts	0x036B, r25
     7f6:	80 93 6a 03 	sts	0x036A, r24
					
			set_servo(servo);
     7fa:	8d d3       	rcall	.+1818   	; 0xf16 <set_servo>
			//printf("leftbutton = %d     leftbuttonhold = %d  \r\n", LeftButton,LeftButtonhold);
			if(!solonoidFlag && LeftButton){
     7fc:	80 91 64 03 	lds	r24, 0x0364
     800:	90 91 65 03 	lds	r25, 0x0365
     804:	89 2b       	or	r24, r25
     806:	f9 f4       	brne	.+62     	; 0x846 <PlayGame+0x1b8>
     808:	80 91 6e 03 	lds	r24, 0x036E
     80c:	90 91 6f 03 	lds	r25, 0x036F
     810:	89 2b       	or	r24, r25
     812:	f9 f0       	breq	.+62     	; 0x852 <PlayGame+0x1c4>
				solonoidFlag = 1;
     814:	81 e0       	ldi	r24, 0x01	; 1
     816:	90 e0       	ldi	r25, 0x00	; 0
     818:	90 93 65 03 	sts	0x0365, r25
     81c:	80 93 64 03 	sts	0x0364, r24
				HitBall();
     820:	2a df       	rcall	.-428    	; 0x676 <HitBall>
				if(menuOption == 1 && enemyScore() == 0){
     822:	80 91 3a 03 	lds	r24, 0x033A
     826:	90 91 3b 03 	lds	r25, 0x033B
     82a:	01 97       	sbiw	r24, 0x01	; 1
     82c:	61 f4       	brne	.+24     	; 0x846 <PlayGame+0x1b8>
     82e:	f0 d0       	rcall	.+480    	; 0xa10 <enemyScore>
     830:	89 2b       	or	r24, r25
     832:	49 f4       	brne	.+18     	; 0x846 <PlayGame+0x1b8>
					points++;
     834:	80 91 3e 03 	lds	r24, 0x033E
     838:	90 91 3f 03 	lds	r25, 0x033F
     83c:	01 96       	adiw	r24, 0x01	; 1
     83e:	90 93 3f 03 	sts	0x033F, r25
     842:	80 93 3e 03 	sts	0x033E, r24
				}
			}
			if(!LeftButton){
     846:	80 91 6e 03 	lds	r24, 0x036E
     84a:	90 91 6f 03 	lds	r25, 0x036F
     84e:	89 2b       	or	r24, r25
     850:	21 f4       	brne	.+8      	; 0x85a <PlayGame+0x1cc>
				solonoidFlag = 0;
     852:	10 92 65 03 	sts	0x0365, r1
     856:	10 92 64 03 	sts	0x0364, r1
			}
		
			if(PID_NewUpdate()){
     85a:	97 d1       	rcall	.+814    	; 0xb8a <PID_NewUpdate>
     85c:	81 11       	cpse	r24, r1
				PID_update();
     85e:	ac d1       	rcall	.+856    	; 0xbb8 <PID_update>
			}
		}

}
     860:	2b 96       	adiw	r28, 0x0b	; 11
     862:	0f b6       	in	r0, 0x3f	; 63
     864:	f8 94       	cli
     866:	de bf       	out	0x3e, r29	; 62
     868:	0f be       	out	0x3f, r0	; 63
     86a:	cd bf       	out	0x3d, r28	; 61
     86c:	df 91       	pop	r29
     86e:	cf 91       	pop	r28
     870:	ff 90       	pop	r15
     872:	ef 90       	pop	r14
     874:	df 90       	pop	r13
     876:	cf 90       	pop	r12
     878:	08 95       	ret

0000087a <SendInfo>:
	PORTB |= (1<<PB6);
	_delay_ms(1000);
	PORTB &= ~(1<<PB6);
}

void SendInfo(){
     87a:	cf 93       	push	r28
     87c:	df 93       	push	r29
     87e:	cd b7       	in	r28, 0x3d	; 61
     880:	de b7       	in	r29, 0x3e	; 62
     882:	2b 97       	sbiw	r28, 0x0b	; 11
     884:	0f b6       	in	r0, 0x3f	; 63
     886:	f8 94       	cli
     888:	de bf       	out	0x3e, r29	; 62
     88a:	0f be       	out	0x3f, r0	; 63
     88c:	cd bf       	out	0x3d, r28	; 61
	sendinfoFlag++;
     88e:	80 91 3c 03 	lds	r24, 0x033C
     892:	90 91 3d 03 	lds	r25, 0x033D
     896:	01 96       	adiw	r24, 0x01	; 1
     898:	90 93 3d 03 	sts	0x033D, r25
     89c:	80 93 3c 03 	sts	0x033C, r24
	if(sendinfoFlag > 20){
     8a0:	45 97       	sbiw	r24, 0x15	; 21
     8a2:	5c f1       	brlt	.+86     	; 0x8fa <SendInfo+0x80>
		IR_game_over();
     8a4:	9a d0       	rcall	.+308    	; 0x9da <IR_game_over>
		can_message canMessageOut;
		canMessageOut.data[0] = enemyScore();
     8a6:	b4 d0       	rcall	.+360    	; 0xa10 <enemyScore>
     8a8:	8c 83       	std	Y+4, r24	; 0x04
		canMessageOut.data[1] = points;
     8aa:	80 91 3e 03 	lds	r24, 0x033E
     8ae:	8d 83       	std	Y+5, r24	; 0x05
		canMessageOut.length = 2;
     8b0:	82 e0       	ldi	r24, 0x02	; 2
     8b2:	8b 83       	std	Y+3, r24	; 0x03
		canMessageOut.id = 1;
     8b4:	81 e0       	ldi	r24, 0x01	; 1
     8b6:	90 e0       	ldi	r25, 0x00	; 0
     8b8:	9a 83       	std	Y+2, r25	; 0x02
     8ba:	89 83       	std	Y+1, r24	; 0x01
		can_message_send(&canMessageOut);
     8bc:	ce 01       	movw	r24, r28
     8be:	01 96       	adiw	r24, 0x01	; 1
     8c0:	32 dd       	rcall	.-1436   	; 0x326 <can_message_send>
		printf("POINTSSEND = %d    ",points);
     8c2:	80 91 3f 03 	lds	r24, 0x033F
     8c6:	8f 93       	push	r24
     8c8:	80 91 3e 03 	lds	r24, 0x033E
     8cc:	8f 93       	push	r24
     8ce:	8f e0       	ldi	r24, 0x0F	; 15
     8d0:	93 e0       	ldi	r25, 0x03	; 3
     8d2:	9f 93       	push	r25
     8d4:	8f 93       	push	r24
     8d6:	2c d7       	rcall	.+3672   	; 0x1730 <printf>
		printf("ENEMYPOINT = %d \r\n",enemyScore());
     8d8:	9b d0       	rcall	.+310    	; 0xa10 <enemyScore>
     8da:	9f 93       	push	r25
     8dc:	8f 93       	push	r24
     8de:	83 e2       	ldi	r24, 0x23	; 35
     8e0:	93 e0       	ldi	r25, 0x03	; 3
     8e2:	9f 93       	push	r25
     8e4:	8f 93       	push	r24
     8e6:	24 d7       	rcall	.+3656   	; 0x1730 <printf>
		sendinfoFlag = 0;
     8e8:	10 92 3d 03 	sts	0x033D, r1
     8ec:	10 92 3c 03 	sts	0x033C, r1
     8f0:	0f b6       	in	r0, 0x3f	; 63
     8f2:	f8 94       	cli
     8f4:	de bf       	out	0x3e, r29	; 62
     8f6:	0f be       	out	0x3f, r0	; 63
     8f8:	cd bf       	out	0x3d, r28	; 61
	}
	
}
     8fa:	2b 96       	adiw	r28, 0x0b	; 11
     8fc:	0f b6       	in	r0, 0x3f	; 63
     8fe:	f8 94       	cli
     900:	de bf       	out	0x3e, r29	; 62
     902:	0f be       	out	0x3f, r0	; 63
     904:	cd bf       	out	0x3d, r28	; 61
     906:	df 91       	pop	r29
     908:	cf 91       	pop	r28
     90a:	08 95       	ret

0000090c <IR_init>:
uint8_t read_index = 0;
uint16_t total = 0;
static uint8_t enemys;
bool hasBeen0 = false;

void IR_init() {
     90c:	cf 93       	push	r28
     90e:	df 93       	push	r29
	ADC_init();
     910:	72 dc       	rcall	.-1820   	; 0x1f6 <ADC_init>
	
	for (uint8_t this_reading = 0; this_reading < num_readings; this_reading++) {
     912:	90 91 06 02 	lds	r25, 0x0206
     916:	99 23       	and	r25, r25
     918:	41 f0       	breq	.+16     	; 0x92a <IR_init+0x1e>
     91a:	eb e7       	ldi	r30, 0x7B	; 123
     91c:	f3 e0       	ldi	r31, 0x03	; 3
     91e:	80 e0       	ldi	r24, 0x00	; 0
		readings[this_reading] = 0;
     920:	11 92       	st	Z+, r1
     922:	11 92       	st	Z+, r1
bool hasBeen0 = false;

void IR_init() {
	ADC_init();
	
	for (uint8_t this_reading = 0; this_reading < num_readings; this_reading++) {
     924:	8f 5f       	subi	r24, 0xFF	; 255
     926:	89 17       	cp	r24, r25
     928:	d8 f3       	brcs	.-10     	; 0x920 <IR_init+0x14>
		readings[this_reading] = 0;
	}
	
	readings[read_index] = ADC_read();
     92a:	c0 91 44 03 	lds	r28, 0x0344
     92e:	d0 e0       	ldi	r29, 0x00	; 0
     930:	4b dc       	rcall	.-1898   	; 0x1c8 <ADC_read>
     932:	cc 0f       	add	r28, r28
     934:	dd 1f       	adc	r29, r29
     936:	c5 58       	subi	r28, 0x85	; 133
     938:	dc 4f       	sbci	r29, 0xFC	; 252
     93a:	99 83       	std	Y+1, r25	; 0x01
     93c:	88 83       	st	Y, r24
	total = readings[read_index];
     93e:	e0 91 44 03 	lds	r30, 0x0344
     942:	f0 e0       	ldi	r31, 0x00	; 0
     944:	ee 0f       	add	r30, r30
     946:	ff 1f       	adc	r31, r31
     948:	e5 58       	subi	r30, 0x85	; 133
     94a:	fc 4f       	sbci	r31, 0xFC	; 252
     94c:	80 81       	ld	r24, Z
     94e:	91 81       	ldd	r25, Z+1	; 0x01
     950:	90 93 43 03 	sts	0x0343, r25
     954:	80 93 42 03 	sts	0x0342, r24
	enemys = 0;
     958:	10 92 41 03 	sts	0x0341, r1
}
     95c:	df 91       	pop	r29
     95e:	cf 91       	pop	r28
     960:	08 95       	ret

00000962 <IR_average_filter>:

uint16_t IR_average_filter() {
     962:	cf 93       	push	r28
     964:	df 93       	push	r29
	
	total = total - readings[read_index];
     966:	c0 91 44 03 	lds	r28, 0x0344
     96a:	d0 e0       	ldi	r29, 0x00	; 0
     96c:	cc 0f       	add	r28, r28
     96e:	dd 1f       	adc	r29, r29
     970:	c5 58       	subi	r28, 0x85	; 133
     972:	dc 4f       	sbci	r29, 0xFC	; 252
     974:	80 91 42 03 	lds	r24, 0x0342
     978:	90 91 43 03 	lds	r25, 0x0343
     97c:	28 81       	ld	r18, Y
     97e:	39 81       	ldd	r19, Y+1	; 0x01
     980:	82 1b       	sub	r24, r18
     982:	93 0b       	sbc	r25, r19
     984:	90 93 43 03 	sts	0x0343, r25
     988:	80 93 42 03 	sts	0x0342, r24
	
	readings[read_index] = ADC_read();
     98c:	1d dc       	rcall	.-1990   	; 0x1c8 <ADC_read>
     98e:	99 83       	std	Y+1, r25	; 0x01
     990:	88 83       	st	Y, r24
	
	total = total + readings[read_index];
     992:	40 91 44 03 	lds	r20, 0x0344
     996:	e4 2f       	mov	r30, r20
     998:	f0 e0       	ldi	r31, 0x00	; 0
     99a:	ee 0f       	add	r30, r30
     99c:	ff 1f       	adc	r31, r31
     99e:	e5 58       	subi	r30, 0x85	; 133
     9a0:	fc 4f       	sbci	r31, 0xFC	; 252
     9a2:	20 81       	ld	r18, Z
     9a4:	31 81       	ldd	r19, Z+1	; 0x01
     9a6:	80 91 42 03 	lds	r24, 0x0342
     9aa:	90 91 43 03 	lds	r25, 0x0343
     9ae:	82 0f       	add	r24, r18
     9b0:	93 1f       	adc	r25, r19
     9b2:	90 93 43 03 	sts	0x0343, r25
     9b6:	80 93 42 03 	sts	0x0342, r24
	
	read_index = read_index + 1;
     9ba:	21 e0       	ldi	r18, 0x01	; 1
     9bc:	24 0f       	add	r18, r20
     9be:	20 93 44 03 	sts	0x0344, r18
	
	if (read_index >= num_readings) {
     9c2:	60 91 06 02 	lds	r22, 0x0206
     9c6:	26 17       	cp	r18, r22
     9c8:	10 f0       	brcs	.+4      	; 0x9ce <IR_average_filter+0x6c>
		read_index = 0;
     9ca:	10 92 44 03 	sts	0x0344, r1
	}
	
	uint16_t average = total / num_readings;
     9ce:	70 e0       	ldi	r23, 0x00	; 0
     9d0:	f2 d5       	rcall	.+3044   	; 0x15b6 <__udivmodhi4>
     9d2:	cb 01       	movw	r24, r22
	return average;
}
     9d4:	df 91       	pop	r29
     9d6:	cf 91       	pop	r28
     9d8:	08 95       	ret

000009da <IR_game_over>:

uint16_t IR_game_over() {
	if (IR_average_filter() < 200) {
     9da:	c3 df       	rcall	.-122    	; 0x962 <IR_average_filter>
     9dc:	88 3c       	cpi	r24, 0xC8	; 200
     9de:	91 05       	cpc	r25, r1
     9e0:	70 f4       	brcc	.+28     	; 0x9fe <IR_game_over+0x24>
		if(hasBeen0){
     9e2:	80 91 40 03 	lds	r24, 0x0340
     9e6:	88 23       	and	r24, r24
     9e8:	81 f0       	breq	.+32     	; 0xa0a <IR_game_over+0x30>
			enemys = enemys + 1;
     9ea:	80 91 41 03 	lds	r24, 0x0341
     9ee:	8f 5f       	subi	r24, 0xFF	; 255
     9f0:	80 93 41 03 	sts	0x0341, r24
			hasBeen0 = false;
     9f4:	10 92 40 03 	sts	0x0340, r1
		}
		return 1;
     9f8:	81 e0       	ldi	r24, 0x01	; 1
     9fa:	90 e0       	ldi	r25, 0x00	; 0
     9fc:	08 95       	ret
	}
	else {
		hasBeen0 = true;
     9fe:	81 e0       	ldi	r24, 0x01	; 1
     a00:	80 93 40 03 	sts	0x0340, r24
		return 0;
     a04:	80 e0       	ldi	r24, 0x00	; 0
     a06:	90 e0       	ldi	r25, 0x00	; 0
     a08:	08 95       	ret
	if (IR_average_filter() < 200) {
		if(hasBeen0){
			enemys = enemys + 1;
			hasBeen0 = false;
		}
		return 1;
     a0a:	81 e0       	ldi	r24, 0x01	; 1
     a0c:	90 e0       	ldi	r25, 0x00	; 0
	}
	else {
		hasBeen0 = true;
		return 0;
	}
}
     a0e:	08 95       	ret

00000a10 <enemyScore>:
uint8_t enemyScore(){
	return enemys;
}
     a10:	80 91 41 03 	lds	r24, 0x0341
     a14:	08 95       	ret

00000a16 <setEnemyScore>:
void setEnemyScore(int score){
	enemys = score;
     a16:	80 93 41 03 	sts	0x0341, r24
     a1a:	08 95       	ret

00000a1c <motor_reset_encoder>:
	
	motor_calibrate();
}

void motor_reset_encoder() {
	clear_bit(PORTH, PH6);
     a1c:	e2 e0       	ldi	r30, 0x02	; 2
     a1e:	f1 e0       	ldi	r31, 0x01	; 1
     a20:	80 81       	ld	r24, Z
     a22:	8f 7b       	andi	r24, 0xBF	; 191
     a24:	80 83       	st	Z, r24
	#else
		//round up by default
		__ticks_dc = (uint32_t)(ceil(fabs(__tmp)));
	#endif

	__builtin_avr_delay_cycles(__ticks_dc);
     a26:	8f e1       	ldi	r24, 0x1F	; 31
     a28:	93 e0       	ldi	r25, 0x03	; 3
     a2a:	01 97       	sbiw	r24, 0x01	; 1
     a2c:	f1 f7       	brne	.-4      	; 0xa2a <motor_reset_encoder+0xe>
     a2e:	00 c0       	rjmp	.+0      	; 0xa30 <motor_reset_encoder+0x14>
     a30:	00 00       	nop
	_delay_us(200);
	set_bit(PORTH, PH6);
     a32:	80 81       	ld	r24, Z
     a34:	80 64       	ori	r24, 0x40	; 64
     a36:	80 83       	st	Z, r24
     a38:	08 95       	ret

00000a3a <motor_set_direction>:
}


void motor_set_direction(motor_direction_t direction){
	switch (direction){
     a3a:	88 23       	and	r24, r24
     a3c:	19 f0       	breq	.+6      	; 0xa44 <motor_set_direction+0xa>
     a3e:	81 30       	cpi	r24, 0x01	; 1
     a40:	39 f0       	breq	.+14     	; 0xa50 <motor_set_direction+0x16>
     a42:	08 95       	ret
		case(LEFT):
			clear_bit(PORTH, PH1);
     a44:	e2 e0       	ldi	r30, 0x02	; 2
     a46:	f1 e0       	ldi	r31, 0x01	; 1
     a48:	80 81       	ld	r24, Z
     a4a:	8d 7f       	andi	r24, 0xFD	; 253
     a4c:	80 83       	st	Z, r24
			break;
     a4e:	08 95       	ret
		case(RIGHT):
			set_bit(PORTH, PH1);
     a50:	e2 e0       	ldi	r30, 0x02	; 2
     a52:	f1 e0       	ldi	r31, 0x01	; 1
     a54:	80 81       	ld	r24, Z
     a56:	82 60       	ori	r24, 0x02	; 2
     a58:	80 83       	st	Z, r24
     a5a:	08 95       	ret

00000a5c <motor_set_speed>:
			break;
	}
}

void motor_set_speed(uint8_t speed){
	DAC_send(speed);
     a5c:	90 e0       	ldi	r25, 0x00	; 0
     a5e:	f8 cd       	rjmp	.-1040   	; 0x650 <DAC_send>
     a60:	08 95       	ret

00000a62 <motor_encoder>:
}

int16_t motor_encoder(uint8_t reset_flag){
     a62:	cf 93       	push	r28
     a64:	df 93       	push	r29
	
	clear_bit(PORTH, PH5);
     a66:	e2 e0       	ldi	r30, 0x02	; 2
     a68:	f1 e0       	ldi	r31, 0x01	; 1
     a6a:	90 81       	ld	r25, Z
     a6c:	9f 7d       	andi	r25, 0xDF	; 223
     a6e:	90 83       	st	Z, r25
	
	//Set SEL high to get low byte
	set_bit(PORTH, PH3);
     a70:	90 81       	ld	r25, Z
     a72:	98 60       	ori	r25, 0x08	; 8
     a74:	90 83       	st	Z, r25
     a76:	ef ee       	ldi	r30, 0xEF	; 239
     a78:	f0 e0       	ldi	r31, 0x00	; 0
     a7a:	31 97       	sbiw	r30, 0x01	; 1
     a7c:	f1 f7       	brne	.-4      	; 0xa7a <motor_encoder+0x18>
     a7e:	00 c0       	rjmp	.+0      	; 0xa80 <motor_encoder+0x1e>
     a80:	00 00       	nop
	
	_delay_us(60);
	
	//Read LSB
	uint8_t low = PINK;
     a82:	d0 91 06 01 	lds	r29, 0x0106
	
	//Set SEL low to get high byte
	clear_bit(PORTH, PH3);
     a86:	e2 e0       	ldi	r30, 0x02	; 2
     a88:	f1 e0       	ldi	r31, 0x01	; 1
     a8a:	90 81       	ld	r25, Z
     a8c:	97 7f       	andi	r25, 0xF7	; 247
     a8e:	90 83       	st	Z, r25
     a90:	ef ee       	ldi	r30, 0xEF	; 239
     a92:	f0 e0       	ldi	r31, 0x00	; 0
     a94:	31 97       	sbiw	r30, 0x01	; 1
     a96:	f1 f7       	brne	.-4      	; 0xa94 <motor_encoder+0x32>
     a98:	00 c0       	rjmp	.+0      	; 0xa9a <motor_encoder+0x38>
     a9a:	00 00       	nop
	
	_delay_us(60);
	
	//Read MSB
	uint8_t high = PINK;
     a9c:	c0 91 06 01 	lds	r28, 0x0106
	if (reset_flag) {
     aa0:	81 11       	cpse	r24, r1
		motor_reset_encoder();
     aa2:	bc df       	rcall	.-136    	; 0xa1c <motor_reset_encoder>
	}
	//Set !OE high to disable output of encoder
	set_bit(PORTH, PH5);
     aa4:	e2 e0       	ldi	r30, 0x02	; 2
     aa6:	f1 e0       	ldi	r31, 0x01	; 1
     aa8:	80 81       	ld	r24, Z
     aaa:	80 62       	ori	r24, 0x20	; 32
     aac:	80 83       	st	Z, r24
	
	int16_t rot = (int16_t) ( (high << 8) | low);
     aae:	8d 2f       	mov	r24, r29
     ab0:	90 e0       	ldi	r25, 0x00	; 0
	
	return rot;
}
     ab2:	9c 2b       	or	r25, r28
     ab4:	df 91       	pop	r29
     ab6:	cf 91       	pop	r28
     ab8:	08 95       	ret

00000aba <motor_calibrate>:

void motor_calibrate() {
     aba:	cf 93       	push	r28
     abc:	df 93       	push	r29
	motor_set_direction(RIGHT);
     abe:	81 e0       	ldi	r24, 0x01	; 1
     ac0:	bc df       	rcall	.-136    	; 0xa3a <motor_set_direction>
			break;
	}
}

void motor_set_speed(uint8_t speed){
	DAC_send(speed);
     ac2:	86 e4       	ldi	r24, 0x46	; 70
     ac4:	90 e0       	ldi	r25, 0x00	; 0
     ac6:	c4 dd       	rcall	.-1144   	; 0x650 <DAC_send>
}

void motor_calibrate() {
	motor_set_direction(RIGHT);
	motor_set_speed(70);
	int16_t cur_rot = motor_encoder(0);
     ac8:	80 e0       	ldi	r24, 0x00	; 0
     aca:	cb df       	rcall	.-106    	; 0xa62 <motor_encoder>
     acc:	ec 01       	movw	r28, r24
	#else
		//round up by default
		__ticks_dc = (uint32_t)(ceil(fabs(__tmp)));
	#endif

	__builtin_avr_delay_cycles(__ticks_dc);
     ace:	2f ef       	ldi	r18, 0xFF	; 255
     ad0:	83 ef       	ldi	r24, 0xF3	; 243
     ad2:	91 e0       	ldi	r25, 0x01	; 1
     ad4:	21 50       	subi	r18, 0x01	; 1
     ad6:	80 40       	sbci	r24, 0x00	; 0
     ad8:	90 40       	sbci	r25, 0x00	; 0
     ada:	e1 f7       	brne	.-8      	; 0xad4 <motor_calibrate+0x1a>
     adc:	00 c0       	rjmp	.+0      	; 0xade <motor_calibrate+0x24>
     ade:	00 00       	nop
	int16_t prev_rot = cur_rot+200;
	while(prev_rot != cur_rot) {
		prev_rot = cur_rot;
		_delay_ms(40);
		cur_rot = motor_encoder(0);
     ae0:	80 e0       	ldi	r24, 0x00	; 0
     ae2:	bf df       	rcall	.-130    	; 0xa62 <motor_encoder>
void motor_calibrate() {
	motor_set_direction(RIGHT);
	motor_set_speed(70);
	int16_t cur_rot = motor_encoder(0);
	int16_t prev_rot = cur_rot+200;
	while(prev_rot != cur_rot) {
     ae4:	8c 17       	cp	r24, r28
     ae6:	9d 07       	cpc	r25, r29
     ae8:	11 f0       	breq	.+4      	; 0xaee <motor_calibrate+0x34>
		prev_rot = cur_rot;
		_delay_ms(40);
		cur_rot = motor_encoder(0);
     aea:	ec 01       	movw	r28, r24
     aec:	f0 cf       	rjmp	.-32     	; 0xace <motor_calibrate+0x14>
	}
	motor_reset_encoder();
     aee:	96 df       	rcall	.-212    	; 0xa1c <motor_reset_encoder>
			break;
	}
}

void motor_set_speed(uint8_t speed){
	DAC_send(speed);
     af0:	80 e0       	ldi	r24, 0x00	; 0
     af2:	90 e0       	ldi	r25, 0x00	; 0
     af4:	ad dd       	rcall	.-1190   	; 0x650 <DAC_send>
		_delay_ms(40);
		cur_rot = motor_encoder(0);
	}
	motor_reset_encoder();
	motor_set_speed(0);
}
     af6:	df 91       	pop	r29
     af8:	cf 91       	pop	r28
     afa:	08 95       	ret

00000afc <motor_init>:
#include "ADC.h"

void motor_init(){
	
	// Enable motor
	set_bit(DDRH, PH4);
     afc:	e1 e0       	ldi	r30, 0x01	; 1
     afe:	f1 e0       	ldi	r31, 0x01	; 1
     b00:	80 81       	ld	r24, Z
     b02:	80 61       	ori	r24, 0x10	; 16
     b04:	80 83       	st	Z, r24
	set_bit(PORTH, PH4);
     b06:	a2 e0       	ldi	r26, 0x02	; 2
     b08:	b1 e0       	ldi	r27, 0x01	; 1
     b0a:	8c 91       	ld	r24, X
     b0c:	80 61       	ori	r24, 0x10	; 16
     b0e:	8c 93       	st	X, r24
	
	// Set direction pin to output
	set_bit(DDRH, PH1);
     b10:	80 81       	ld	r24, Z
     b12:	82 60       	ori	r24, 0x02	; 2
     b14:	80 83       	st	Z, r24
	
	//--------------------Set encoder pins to output and input mode----------------------
	
	// Output Enable pin (active low): !OE
	set_bit(DDRH, PH5);
     b16:	80 81       	ld	r24, Z
     b18:	80 62       	ori	r24, 0x20	; 32
     b1a:	80 83       	st	Z, r24
	
	//Selection pin: SEL
	set_bit(DDRH, PH3);
     b1c:	80 81       	ld	r24, Z
     b1e:	88 60       	ori	r24, 0x08	; 8
     b20:	80 83       	st	Z, r24
	
	// Set Reset pin: RST
	set_bit(DDRH, PH6);
     b22:	80 81       	ld	r24, Z
     b24:	80 64       	ori	r24, 0x40	; 64
     b26:	80 83       	st	Z, r24
	// Reset encoder
	motor_reset_encoder();
     b28:	79 df       	rcall	.-270    	; 0xa1c <motor_reset_encoder>
	
	// Set data bits to input:
	clear_bit(DDRK, PK0);
     b2a:	e7 e0       	ldi	r30, 0x07	; 7
     b2c:	f1 e0       	ldi	r31, 0x01	; 1
     b2e:	80 81       	ld	r24, Z
     b30:	8e 7f       	andi	r24, 0xFE	; 254
     b32:	80 83       	st	Z, r24
	clear_bit(DDRK, PK1);
     b34:	80 81       	ld	r24, Z
     b36:	8d 7f       	andi	r24, 0xFD	; 253
     b38:	80 83       	st	Z, r24
	clear_bit(DDRK, PK2);
     b3a:	80 81       	ld	r24, Z
     b3c:	8b 7f       	andi	r24, 0xFB	; 251
     b3e:	80 83       	st	Z, r24
	clear_bit(DDRK, PK3);
     b40:	80 81       	ld	r24, Z
     b42:	87 7f       	andi	r24, 0xF7	; 247
     b44:	80 83       	st	Z, r24
	clear_bit(DDRK, PK4);
     b46:	80 81       	ld	r24, Z
     b48:	8f 7e       	andi	r24, 0xEF	; 239
     b4a:	80 83       	st	Z, r24
	clear_bit(DDRK, PK5);
     b4c:	80 81       	ld	r24, Z
     b4e:	8f 7d       	andi	r24, 0xDF	; 223
     b50:	80 83       	st	Z, r24
	clear_bit(DDRK, PK6);
     b52:	80 81       	ld	r24, Z
     b54:	8f 7b       	andi	r24, 0xBF	; 191
     b56:	80 83       	st	Z, r24
	clear_bit(DDRK, PK7);
     b58:	80 81       	ld	r24, Z
     b5a:	8f 77       	andi	r24, 0x7F	; 127
     b5c:	80 83       	st	Z, r24
	
	motor_calibrate();
     b5e:	ad cf       	rjmp	.-166    	; 0xaba <motor_calibrate>
     b60:	08 95       	ret

00000b62 <__vector_15>:
double integral = 0;
double eprev = 0;
double deriv = 0;
int16_t speed;
int count = 0;
ISR(TIMER2_OVF_vect){
     b62:	1f 92       	push	r1
     b64:	0f 92       	push	r0
     b66:	0f b6       	in	r0, 0x3f	; 63
     b68:	0f 92       	push	r0
     b6a:	11 24       	eor	r1, r1
     b6c:	8f 93       	push	r24
     b6e:	9f 93       	push	r25
	flagpid = 1;
     b70:	81 e0       	ldi	r24, 0x01	; 1
     b72:	90 e0       	ldi	r25, 0x00	; 0
     b74:	90 93 52 03 	sts	0x0352, r25
     b78:	80 93 51 03 	sts	0x0351, r24
}
     b7c:	9f 91       	pop	r25
     b7e:	8f 91       	pop	r24
     b80:	0f 90       	pop	r0
     b82:	0f be       	out	0x3f, r0	; 63
     b84:	0f 90       	pop	r0
     b86:	1f 90       	pop	r1
     b88:	18 95       	reti

00000b8a <PID_NewUpdate>:
uint8_t PID_NewUpdate(){
	if (flagpid){	
     b8a:	80 91 51 03 	lds	r24, 0x0351
     b8e:	90 91 52 03 	lds	r25, 0x0352
     b92:	89 2b       	or	r24, r25
     b94:	31 f0       	breq	.+12     	; 0xba2 <PID_NewUpdate+0x18>
		flagpid = 0;
     b96:	10 92 52 03 	sts	0x0352, r1
     b9a:	10 92 51 03 	sts	0x0351, r1
		return 1;
     b9e:	81 e0       	ldi	r24, 0x01	; 1
     ba0:	08 95       	ret
	}
	return 0;
     ba2:	80 e0       	ldi	r24, 0x00	; 0
}
     ba4:	08 95       	ret

00000ba6 <PID_init>:

void PID_init(){
	
	cli();
     ba6:	f8 94       	cli
	
	// enable timer 2
	TIMSK2 = (1<<TOIE2);
     ba8:	81 e0       	ldi	r24, 0x01	; 1
     baa:	80 93 70 00 	sts	0x0070, r24
	
	// start timer 2
	
	TCCR2B = (1<<CS20) | (1<<CS21) | (1<<CS22);
     bae:	87 e0       	ldi	r24, 0x07	; 7
     bb0:	80 93 b1 00 	sts	0x00B1, r24
	
	sei();
     bb4:	78 94       	sei
     bb6:	08 95       	ret

00000bb8 <PID_update>:
	
}
void PID_update(){
     bb8:	8f 92       	push	r8
     bba:	9f 92       	push	r9
     bbc:	af 92       	push	r10
     bbe:	bf 92       	push	r11
     bc0:	cf 92       	push	r12
     bc2:	df 92       	push	r13
     bc4:	ef 92       	push	r14
     bc6:	ff 92       	push	r15
     bc8:	0f 93       	push	r16
     bca:	1f 93       	push	r17
     bcc:	cf 93       	push	r28
     bce:	df 93       	push	r29
	pos = motor_encoder(0);
     bd0:	80 e0       	ldi	r24, 0x00	; 0
     bd2:	90 e0       	ldi	r25, 0x00	; 0
     bd4:	46 df       	rcall	.-372    	; 0xa62 <motor_encoder>
     bd6:	90 93 84 03 	sts	0x0384, r25
     bda:	80 93 83 03 	sts	0x0383, r24
	e = pos - posd;
     bde:	20 91 85 03 	lds	r18, 0x0385
     be2:	30 91 86 03 	lds	r19, 0x0386
     be6:	ec 01       	movw	r28, r24
     be8:	c2 1b       	sub	r28, r18
     bea:	d3 0b       	sbc	r29, r19
     bec:	d0 93 8a 03 	sts	0x038A, r29
     bf0:	c0 93 89 03 	sts	0x0389, r28
	abse = abs(e);
     bf4:	ce 01       	movw	r24, r28
     bf6:	dd 23       	and	r29, r29
     bf8:	24 f4       	brge	.+8      	; 0xc02 <PID_update+0x4a>
     bfa:	88 27       	eor	r24, r24
     bfc:	99 27       	eor	r25, r25
     bfe:	8c 1b       	sub	r24, r28
     c00:	9d 0b       	sbc	r25, r29
     c02:	8c 01       	movw	r16, r24
     c04:	90 93 8c 03 	sts	0x038C, r25
     c08:	80 93 8b 03 	sts	0x038B, r24
	//printf("posd: %d  ", posd);
	//printf("pos: %d  ", pos);
	//printf("e: %d  ", e);
	
	
	integral = integral + e*timestep;
     c0c:	be 01       	movw	r22, r28
     c0e:	88 27       	eor	r24, r24
     c10:	77 fd       	sbrc	r23, 7
     c12:	80 95       	com	r24
     c14:	98 2f       	mov	r25, r24
     c16:	b8 d3       	rcall	.+1904   	; 0x1388 <__floatsisf>
     c18:	6b 01       	movw	r12, r22
     c1a:	7c 01       	movw	r14, r24
     c1c:	80 90 13 02 	lds	r8, 0x0213
     c20:	90 90 14 02 	lds	r9, 0x0214
     c24:	a0 90 15 02 	lds	r10, 0x0215
     c28:	b0 90 16 02 	lds	r11, 0x0216
     c2c:	a5 01       	movw	r20, r10
     c2e:	94 01       	movw	r18, r8
     c30:	5f d4       	rcall	.+2238   	; 0x14f0 <__mulsf3>
     c32:	9b 01       	movw	r18, r22
     c34:	ac 01       	movw	r20, r24
     c36:	60 91 4d 03 	lds	r22, 0x034D
     c3a:	70 91 4e 03 	lds	r23, 0x034E
     c3e:	80 91 4f 03 	lds	r24, 0x034F
     c42:	90 91 50 03 	lds	r25, 0x0350
     c46:	9d d2       	rcall	.+1338   	; 0x1182 <__addsf3>
     c48:	60 93 4d 03 	sts	0x034D, r22
     c4c:	70 93 4e 03 	sts	0x034E, r23
     c50:	80 93 4f 03 	sts	0x034F, r24
     c54:	90 93 50 03 	sts	0x0350, r25
	deriv = (e-eprev)/timestep;
     c58:	20 91 49 03 	lds	r18, 0x0349
     c5c:	30 91 4a 03 	lds	r19, 0x034A
     c60:	40 91 4b 03 	lds	r20, 0x034B
     c64:	50 91 4c 03 	lds	r21, 0x034C
     c68:	c7 01       	movw	r24, r14
     c6a:	b6 01       	movw	r22, r12
     c6c:	89 d2       	rcall	.+1298   	; 0x1180 <__subsf3>
     c6e:	a5 01       	movw	r20, r10
     c70:	94 01       	movw	r18, r8
     c72:	ef d2       	rcall	.+1502   	; 0x1252 <__divsf3>
     c74:	4b 01       	movw	r8, r22
     c76:	5c 01       	movw	r10, r24
     c78:	60 93 45 03 	sts	0x0345, r22
     c7c:	70 93 46 03 	sts	0x0346, r23
     c80:	80 93 47 03 	sts	0x0347, r24
     c84:	90 93 48 03 	sts	0x0348, r25
	eprev = e;
     c88:	c0 92 49 03 	sts	0x0349, r12
     c8c:	d0 92 4a 03 	sts	0x034A, r13
     c90:	e0 92 4b 03 	sts	0x034B, r14
     c94:	f0 92 4c 03 	sts	0x034C, r15
	if(e < 2){
     c98:	c2 30       	cpi	r28, 0x02	; 2
     c9a:	d1 05       	cpc	r29, r1
     c9c:	44 f4       	brge	.+16     	; 0xcae <PID_update+0xf6>
		integral = 0;
     c9e:	10 92 4d 03 	sts	0x034D, r1
     ca2:	10 92 4e 03 	sts	0x034E, r1
     ca6:	10 92 4f 03 	sts	0x034F, r1
     caa:	10 92 50 03 	sts	0x0350, r1
	}
	
	
	speed = Kp*abse +  Kd * deriv + Ki * integral;
     cae:	b8 01       	movw	r22, r16
     cb0:	88 27       	eor	r24, r24
     cb2:	77 fd       	sbrc	r23, 7
     cb4:	80 95       	com	r24
     cb6:	98 2f       	mov	r25, r24
     cb8:	67 d3       	rcall	.+1742   	; 0x1388 <__floatsisf>
     cba:	20 91 0f 02 	lds	r18, 0x020F
     cbe:	30 91 10 02 	lds	r19, 0x0210
     cc2:	40 91 11 02 	lds	r20, 0x0211
     cc6:	50 91 12 02 	lds	r21, 0x0212
     cca:	12 d4       	rcall	.+2084   	; 0x14f0 <__mulsf3>
     ccc:	6b 01       	movw	r12, r22
     cce:	7c 01       	movw	r14, r24
     cd0:	20 91 07 02 	lds	r18, 0x0207
     cd4:	30 91 08 02 	lds	r19, 0x0208
     cd8:	40 91 09 02 	lds	r20, 0x0209
     cdc:	50 91 0a 02 	lds	r21, 0x020A
     ce0:	c5 01       	movw	r24, r10
     ce2:	b4 01       	movw	r22, r8
     ce4:	05 d4       	rcall	.+2058   	; 0x14f0 <__mulsf3>
     ce6:	9b 01       	movw	r18, r22
     ce8:	ac 01       	movw	r20, r24
     cea:	c7 01       	movw	r24, r14
     cec:	b6 01       	movw	r22, r12
     cee:	49 d2       	rcall	.+1170   	; 0x1182 <__addsf3>
     cf0:	6b 01       	movw	r12, r22
     cf2:	7c 01       	movw	r14, r24
     cf4:	20 91 4d 03 	lds	r18, 0x034D
     cf8:	30 91 4e 03 	lds	r19, 0x034E
     cfc:	40 91 4f 03 	lds	r20, 0x034F
     d00:	50 91 50 03 	lds	r21, 0x0350
     d04:	60 91 0b 02 	lds	r22, 0x020B
     d08:	70 91 0c 02 	lds	r23, 0x020C
     d0c:	80 91 0d 02 	lds	r24, 0x020D
     d10:	90 91 0e 02 	lds	r25, 0x020E
     d14:	ed d3       	rcall	.+2010   	; 0x14f0 <__mulsf3>
     d16:	9b 01       	movw	r18, r22
     d18:	ac 01       	movw	r20, r24
     d1a:	c7 01       	movw	r24, r14
     d1c:	b6 01       	movw	r22, r12
     d1e:	31 d2       	rcall	.+1122   	; 0x1182 <__addsf3>
     d20:	00 d3       	rcall	.+1536   	; 0x1322 <__fixsfsi>
     d22:	70 93 88 03 	sts	0x0388, r23
     d26:	60 93 87 03 	sts	0x0387, r22
	if(e > 0) { motor_set_direction(RIGHT);}
     d2a:	1c 16       	cp	r1, r28
     d2c:	1d 06       	cpc	r1, r29
     d2e:	1c f4       	brge	.+6      	; 0xd36 <PID_update+0x17e>
     d30:	81 e0       	ldi	r24, 0x01	; 1
     d32:	83 de       	rcall	.-762    	; 0xa3a <motor_set_direction>
     d34:	02 c0       	rjmp	.+4      	; 0xd3a <PID_update+0x182>
		else {motor_set_direction(LEFT);}
     d36:	80 e0       	ldi	r24, 0x00	; 0
     d38:	80 de       	rcall	.-768    	; 0xa3a <motor_set_direction>
		
	uint8_t speedout;
	if(speed > 500){
     d3a:	80 91 87 03 	lds	r24, 0x0387
     d3e:	90 91 88 03 	lds	r25, 0x0388
     d42:	85 3f       	cpi	r24, 0xF5	; 245
     d44:	21 e0       	ldi	r18, 0x01	; 1
     d46:	92 07       	cpc	r25, r18
     d48:	3c f0       	brlt	.+14     	; 0xd58 <PID_update+0x1a0>
		speed = 500;
     d4a:	84 ef       	ldi	r24, 0xF4	; 244
     d4c:	91 e0       	ldi	r25, 0x01	; 1
     d4e:	90 93 88 03 	sts	0x0388, r25
     d52:	80 93 87 03 	sts	0x0387, r24
     d56:	09 c0       	rjmp	.+18     	; 0xd6a <PID_update+0x1b2>
	}
	if(speed < -500){
     d58:	8c 30       	cpi	r24, 0x0C	; 12
     d5a:	9e 4f       	sbci	r25, 0xFE	; 254
     d5c:	34 f4       	brge	.+12     	; 0xd6a <PID_update+0x1b2>
		speed = -500;
     d5e:	8c e0       	ldi	r24, 0x0C	; 12
     d60:	9e ef       	ldi	r25, 0xFE	; 254
     d62:	90 93 88 03 	sts	0x0388, r25
     d66:	80 93 87 03 	sts	0x0387, r24
	}
	if (abs(e) > 1800){
     d6a:	80 91 89 03 	lds	r24, 0x0389
     d6e:	90 91 8a 03 	lds	r25, 0x038A
     d72:	99 23       	and	r25, r25
     d74:	1c f4       	brge	.+6      	; 0xd7c <PID_update+0x1c4>
     d76:	91 95       	neg	r25
     d78:	81 95       	neg	r24
     d7a:	91 09       	sbc	r25, r1
     d7c:	89 30       	cpi	r24, 0x09	; 9
     d7e:	97 40       	sbci	r25, 0x07	; 7
     d80:	b4 f0       	brlt	.+44     	; 0xdae <PID_update+0x1f6>
void PID_setpos(int16_t SETPUNKT){
	posd = SETPUNKT;
}
long mapspeed(int16_t x, int16_t in_min, int16_t in_max, int16_t out_min, int16_t out_max)
{
	return (long)(x - in_min) * (long)(out_max - out_min) / (long)(in_max - in_min) + out_min;
     d82:	a0 91 87 03 	lds	r26, 0x0387
     d86:	b0 91 88 03 	lds	r27, 0x0388
     d8a:	2c e3       	ldi	r18, 0x3C	; 60
     d8c:	30 e0       	ldi	r19, 0x00	; 0
     d8e:	80 d4       	rcall	.+2304   	; 0x1690 <__usmulhisi3>
     d90:	24 ef       	ldi	r18, 0xF4	; 244
     d92:	31 e0       	ldi	r19, 0x01	; 1
     d94:	40 e0       	ldi	r20, 0x00	; 0
     d96:	50 e0       	ldi	r21, 0x00	; 0
     d98:	44 d4       	rcall	.+2184   	; 0x1622 <__divmodsi4>
     d9a:	da 01       	movw	r26, r20
     d9c:	c9 01       	movw	r24, r18
     d9e:	88 96       	adiw	r24, 0x28	; 40
     da0:	a1 1d       	adc	r26, r1
     da2:	b1 1d       	adc	r27, r1
	}
	if(speed < -500){
		speed = -500;
	}
	if (abs(e) > 1800){
		speed = (int16_t)mapspeed(speed,0,500,40,100);
     da4:	90 93 88 03 	sts	0x0388, r25
     da8:	80 93 87 03 	sts	0x0387, r24
     dac:	15 c0       	rjmp	.+42     	; 0xdd8 <PID_update+0x220>
void PID_setpos(int16_t SETPUNKT){
	posd = SETPUNKT;
}
long mapspeed(int16_t x, int16_t in_min, int16_t in_max, int16_t out_min, int16_t out_max)
{
	return (long)(x - in_min) * (long)(out_max - out_min) / (long)(in_max - in_min) + out_min;
     dae:	a0 91 87 03 	lds	r26, 0x0387
     db2:	b0 91 88 03 	lds	r27, 0x0388
     db6:	2a e2       	ldi	r18, 0x2A	; 42
     db8:	30 e0       	ldi	r19, 0x00	; 0
     dba:	6a d4       	rcall	.+2260   	; 0x1690 <__usmulhisi3>
     dbc:	24 ef       	ldi	r18, 0xF4	; 244
     dbe:	31 e0       	ldi	r19, 0x01	; 1
     dc0:	40 e0       	ldi	r20, 0x00	; 0
     dc2:	50 e0       	ldi	r21, 0x00	; 0
     dc4:	2e d4       	rcall	.+2140   	; 0x1622 <__divmodsi4>
     dc6:	da 01       	movw	r26, r20
     dc8:	c9 01       	movw	r24, r18
     dca:	86 96       	adiw	r24, 0x26	; 38
     dcc:	a1 1d       	adc	r26, r1
     dce:	b1 1d       	adc	r27, r1
	if (abs(e) > 1800){
		speed = (int16_t)mapspeed(speed,0,500,40,100);
	}
	else
	{
		speed = (int16_t)mapspeed(speed,0,500,38,80);
     dd0:	90 93 88 03 	sts	0x0388, r25
     dd4:	80 93 87 03 	sts	0x0387, r24
	}
	speed = abs(speed);
     dd8:	80 91 87 03 	lds	r24, 0x0387
     ddc:	90 91 88 03 	lds	r25, 0x0388
     de0:	99 23       	and	r25, r25
     de2:	1c f4       	brge	.+6      	; 0xdea <PID_update+0x232>
     de4:	91 95       	neg	r25
     de6:	81 95       	neg	r24
     de8:	91 09       	sbc	r25, r1
     dea:	80 93 87 03 	sts	0x0387, r24
     dee:	90 93 88 03 	sts	0x0388, r25
	//printf("speed: %d   ", speed);
	
	speedout = speed; //printf("speedout: %d \r\n  ", speedout);
	
	motor_set_speed(speedout);
     df2:	34 de       	rcall	.-920    	; 0xa5c <motor_set_speed>
}
     df4:	df 91       	pop	r29
     df6:	cf 91       	pop	r28
     df8:	1f 91       	pop	r17
     dfa:	0f 91       	pop	r16
     dfc:	ff 90       	pop	r15
     dfe:	ef 90       	pop	r14
     e00:	df 90       	pop	r13
     e02:	cf 90       	pop	r12
     e04:	bf 90       	pop	r11
     e06:	af 90       	pop	r10
     e08:	9f 90       	pop	r9
     e0a:	8f 90       	pop	r8
     e0c:	08 95       	ret

00000e0e <PID_setpos>:

void PID_setpos(int16_t SETPUNKT){
	posd = SETPUNKT;
     e0e:	90 93 86 03 	sts	0x0386, r25
     e12:	80 93 85 03 	sts	0x0385, r24
     e16:	08 95       	ret

00000e18 <PWM_set_period>:
	PWM_set_period(period_sec);
	// Set PB5 to output mode
	set_bit(DDRB, PB5);
}

void PWM_set_period(float sec){
     e18:	cf 92       	push	r12
     e1a:	df 92       	push	r13
     e1c:	ef 92       	push	r14
     e1e:	ff 92       	push	r15
     e20:	6b 01       	movw	r12, r22
     e22:	7c 01       	movw	r14, r24
	
	// Set prescaler 256
	set_bit(TCCR1B, CS12);
     e24:	e1 e8       	ldi	r30, 0x81	; 129
     e26:	f0 e0       	ldi	r31, 0x00	; 0
     e28:	80 81       	ld	r24, Z
     e2a:	84 60       	ori	r24, 0x04	; 4
     e2c:	80 83       	st	Z, r24
	clear_bit(TCCR1B, CS11);
     e2e:	80 81       	ld	r24, Z
     e30:	8d 7f       	andi	r24, 0xFD	; 253
     e32:	80 83       	st	Z, r24
	clear_bit(TCCR1B, CS10);
     e34:	80 81       	ld	r24, Z
     e36:	8e 7f       	andi	r24, 0xFE	; 254
     e38:	80 83       	st	Z, r24
	// Set period to 20 ms (prescaler 256)
	uint16_t period = pwm_timer_freq*sec - 0.5;
     e3a:	60 91 53 03 	lds	r22, 0x0353
     e3e:	70 91 54 03 	lds	r23, 0x0354
     e42:	80 e0       	ldi	r24, 0x00	; 0
     e44:	90 e0       	ldi	r25, 0x00	; 0
     e46:	9e d2       	rcall	.+1340   	; 0x1384 <__floatunsisf>
     e48:	a7 01       	movw	r20, r14
     e4a:	96 01       	movw	r18, r12
     e4c:	51 d3       	rcall	.+1698   	; 0x14f0 <__mulsf3>
     e4e:	20 e0       	ldi	r18, 0x00	; 0
     e50:	30 e0       	ldi	r19, 0x00	; 0
     e52:	40 e0       	ldi	r20, 0x00	; 0
     e54:	5f e3       	ldi	r21, 0x3F	; 63
     e56:	94 d1       	rcall	.+808    	; 0x1180 <__subsf3>
     e58:	69 d2       	rcall	.+1234   	; 0x132c <__fixunssfsi>
	ICR1 = period;
     e5a:	70 93 87 00 	sts	0x0087, r23
     e5e:	60 93 86 00 	sts	0x0086, r22
	
}
     e62:	ff 90       	pop	r15
     e64:	ef 90       	pop	r14
     e66:	df 90       	pop	r13
     e68:	cf 90       	pop	r12
     e6a:	08 95       	ret

00000e6c <PWM_init>:
static uint16_t pwm_timer_freq;

uint16_t pulse;


void PWM_init(float period_sec, unsigned long clock_frequency){
     e6c:	0f 93       	push	r16
     e6e:	1f 93       	push	r17
	
	uint16_t prescaler = 256;
	
	//Fast PWM-MODE (mode 14, table 17-2)
	set_bit(TCCR1B, WGM13);
     e70:	e1 e8       	ldi	r30, 0x81	; 129
     e72:	f0 e0       	ldi	r31, 0x00	; 0
     e74:	a0 81       	ld	r26, Z
     e76:	a0 61       	ori	r26, 0x10	; 16
     e78:	a0 83       	st	Z, r26
	set_bit(TCCR1B, WGM12);
     e7a:	a0 81       	ld	r26, Z
     e7c:	a8 60       	ori	r26, 0x08	; 8
     e7e:	a0 83       	st	Z, r26
	set_bit(TCCR1A, WGM11);
     e80:	e0 e8       	ldi	r30, 0x80	; 128
     e82:	f0 e0       	ldi	r31, 0x00	; 0
     e84:	a0 81       	ld	r26, Z
     e86:	a2 60       	ori	r26, 0x02	; 2
     e88:	a0 83       	st	Z, r26
	clear_bit(TCCR1A, WGM10);
     e8a:	a0 81       	ld	r26, Z
     e8c:	ae 7f       	andi	r26, 0xFE	; 254
     e8e:	a0 83       	st	Z, r26
	
	//Set compare output on PB5 (OC1A)
	set_bit(TCCR1A, COM1A1);
     e90:	a0 81       	ld	r26, Z
     e92:	a0 68       	ori	r26, 0x80	; 128
     e94:	a0 83       	st	Z, r26
	clear_bit(TCCR1A, COM1A0);
     e96:	a0 81       	ld	r26, Z
     e98:	af 7b       	andi	r26, 0xBF	; 191
     e9a:	a0 83       	st	Z, r26
	pwm_timer_freq = (uint32_t)clock_frequency/prescaler;
     e9c:	03 2f       	mov	r16, r19
     e9e:	14 2f       	mov	r17, r20
     ea0:	25 2f       	mov	r18, r21
     ea2:	33 27       	eor	r19, r19
     ea4:	10 93 54 03 	sts	0x0354, r17
     ea8:	00 93 53 03 	sts	0x0353, r16
	PWM_set_period(period_sec);
     eac:	b5 df       	rcall	.-150    	; 0xe18 <PWM_set_period>
	// Set PB5 to output mode
	set_bit(DDRB, PB5);
     eae:	25 9a       	sbi	0x04, 5	; 4
}
     eb0:	1f 91       	pop	r17
     eb2:	0f 91       	pop	r16
     eb4:	08 95       	ret

00000eb6 <PWM_pulse_set>:
	uint16_t period = pwm_timer_freq*sec - 0.5;
	ICR1 = period;
	
}

void PWM_pulse_set(float sec) {
     eb6:	cf 92       	push	r12
     eb8:	df 92       	push	r13
     eba:	ef 92       	push	r14
     ebc:	ff 92       	push	r15
     ebe:	6b 01       	movw	r12, r22
     ec0:	7c 01       	movw	r14, r24
	pulse = pwm_timer_freq*sec - 0.5;
     ec2:	60 91 53 03 	lds	r22, 0x0353
     ec6:	70 91 54 03 	lds	r23, 0x0354
     eca:	80 e0       	ldi	r24, 0x00	; 0
     ecc:	90 e0       	ldi	r25, 0x00	; 0
     ece:	5a d2       	rcall	.+1204   	; 0x1384 <__floatunsisf>
     ed0:	a7 01       	movw	r20, r14
     ed2:	96 01       	movw	r18, r12
     ed4:	0d d3       	rcall	.+1562   	; 0x14f0 <__mulsf3>
     ed6:	20 e0       	ldi	r18, 0x00	; 0
     ed8:	30 e0       	ldi	r19, 0x00	; 0
     eda:	40 e0       	ldi	r20, 0x00	; 0
     edc:	5f e3       	ldi	r21, 0x3F	; 63
     ede:	50 d1       	rcall	.+672    	; 0x1180 <__subsf3>
     ee0:	25 d2       	rcall	.+1098   	; 0x132c <__fixunssfsi>
     ee2:	70 93 8e 03 	sts	0x038E, r23
     ee6:	60 93 8d 03 	sts	0x038D, r22
	OCR1A = pulse;
     eea:	70 93 89 00 	sts	0x0089, r23
     eee:	60 93 88 00 	sts	0x0088, r22
}
     ef2:	ff 90       	pop	r15
     ef4:	ef 90       	pop	r14
     ef6:	df 90       	pop	r13
     ef8:	cf 90       	pop	r12
     efa:	08 95       	ret

00000efc <servo_init>:

#include "PWM_servo_driver.h"
#include "PWM_driver.h"
#include <avr/io.h>

void servo_init(unsigned long clock_speed){
     efc:	9b 01       	movw	r18, r22
     efe:	ac 01       	movw	r20, r24
	
	float period_sec = 0.02;
	PWM_init(period_sec, clock_speed);
     f00:	6a e0       	ldi	r22, 0x0A	; 10
     f02:	77 ed       	ldi	r23, 0xD7	; 215
     f04:	83 ea       	ldi	r24, 0xA3	; 163
     f06:	9c e3       	ldi	r25, 0x3C	; 60
     f08:	b1 df       	rcall	.-158    	; 0xe6c <PWM_init>
	PWM_pulse_set(0.0015);
     f0a:	66 ea       	ldi	r22, 0xA6	; 166
     f0c:	7b e9       	ldi	r23, 0x9B	; 155
     f0e:	84 ec       	ldi	r24, 0xC4	; 196
     f10:	9a e3       	ldi	r25, 0x3A	; 58
     f12:	d1 cf       	rjmp	.-94     	; 0xeb6 <PWM_pulse_set>
     f14:	08 95       	ret

00000f16 <set_servo>:
	
}
void set_servo(int servo_dir){
     f16:	cf 92       	push	r12
     f18:	df 92       	push	r13
     f1a:	ef 92       	push	r14
     f1c:	ff 92       	push	r15
	
	float min_pw = 0.0009;
	float max_pw = 0.0021;
	
	float dir = (float)servo_dir;
     f1e:	bc 01       	movw	r22, r24
     f20:	88 27       	eor	r24, r24
     f22:	77 fd       	sbrc	r23, 7
     f24:	80 95       	com	r24
     f26:	98 2f       	mov	r25, r24
     f28:	2f d2       	rcall	.+1118   	; 0x1388 <__floatsisf>
	
	float servo_pw = dir/200000.0 + 0.0015;
     f2a:	20 e0       	ldi	r18, 0x00	; 0
     f2c:	30 e5       	ldi	r19, 0x50	; 80
     f2e:	43 e4       	ldi	r20, 0x43	; 67
     f30:	58 e4       	ldi	r21, 0x48	; 72
     f32:	8f d1       	rcall	.+798    	; 0x1252 <__divsf3>
     f34:	26 ea       	ldi	r18, 0xA6	; 166
     f36:	3b e9       	ldi	r19, 0x9B	; 155
     f38:	44 ec       	ldi	r20, 0xC4	; 196
     f3a:	5a e3       	ldi	r21, 0x3A	; 58
     f3c:	22 d1       	rcall	.+580    	; 0x1182 <__addsf3>
     f3e:	6b 01       	movw	r12, r22
     f40:	7c 01       	movw	r14, r24
	
	if (servo_pw < min_pw) {
     f42:	2a ef       	ldi	r18, 0xFA	; 250
     f44:	3d ee       	ldi	r19, 0xED	; 237
     f46:	4b e6       	ldi	r20, 0x6B	; 107
     f48:	5a e3       	ldi	r21, 0x3A	; 58
     f4a:	7f d1       	rcall	.+766    	; 0x124a <__cmpsf2>
     f4c:	88 23       	and	r24, r24
     f4e:	54 f0       	brlt	.+20     	; 0xf64 <set_servo+0x4e>
		servo_pw = min_pw;
	}
	if (servo_pw > max_pw) {
     f50:	27 e2       	ldi	r18, 0x27	; 39
     f52:	30 ea       	ldi	r19, 0xA0	; 160
     f54:	49 e0       	ldi	r20, 0x09	; 9
     f56:	5b e3       	ldi	r21, 0x3B	; 59
     f58:	c7 01       	movw	r24, r14
     f5a:	b6 01       	movw	r22, r12
     f5c:	c5 d2       	rcall	.+1418   	; 0x14e8 <__gesf2>
     f5e:	18 16       	cp	r1, r24
     f60:	64 f0       	brlt	.+24     	; 0xf7a <set_servo+0x64>
     f62:	15 c0       	rjmp	.+42     	; 0xf8e <set_servo+0x78>
	float dir = (float)servo_dir;
	
	float servo_pw = dir/200000.0 + 0.0015;
	
	if (servo_pw < min_pw) {
		servo_pw = min_pw;
     f64:	0f 2e       	mov	r0, r31
     f66:	fa ef       	ldi	r31, 0xFA	; 250
     f68:	cf 2e       	mov	r12, r31
     f6a:	fd ee       	ldi	r31, 0xED	; 237
     f6c:	df 2e       	mov	r13, r31
     f6e:	fb e6       	ldi	r31, 0x6B	; 107
     f70:	ef 2e       	mov	r14, r31
     f72:	fa e3       	ldi	r31, 0x3A	; 58
     f74:	ff 2e       	mov	r15, r31
     f76:	f0 2d       	mov	r31, r0
     f78:	0a c0       	rjmp	.+20     	; 0xf8e <set_servo+0x78>
	}
	if (servo_pw > max_pw) {
		servo_pw = max_pw;
     f7a:	0f 2e       	mov	r0, r31
     f7c:	f7 e2       	ldi	r31, 0x27	; 39
     f7e:	cf 2e       	mov	r12, r31
     f80:	f0 ea       	ldi	r31, 0xA0	; 160
     f82:	df 2e       	mov	r13, r31
     f84:	f9 e0       	ldi	r31, 0x09	; 9
     f86:	ef 2e       	mov	r14, r31
     f88:	fb e3       	ldi	r31, 0x3B	; 59
     f8a:	ff 2e       	mov	r15, r31
     f8c:	f0 2d       	mov	r31, r0
	}
	PWM_pulse_set(servo_pw);
     f8e:	c7 01       	movw	r24, r14
     f90:	b6 01       	movw	r22, r12
     f92:	91 df       	rcall	.-222    	; 0xeb6 <PWM_pulse_set>
	
     f94:	ff 90       	pop	r15
     f96:	ef 90       	pop	r14
     f98:	df 90       	pop	r13
     f9a:	cf 90       	pop	r12
     f9c:	08 95       	ret

00000f9e <TWI_Master_Initialise>:
     f9e:	8c e0       	ldi	r24, 0x0C	; 12
     fa0:	80 93 b8 00 	sts	0x00B8, r24
     fa4:	8f ef       	ldi	r24, 0xFF	; 255
     fa6:	80 93 bb 00 	sts	0x00BB, r24
     faa:	84 e0       	ldi	r24, 0x04	; 4
     fac:	80 93 bc 00 	sts	0x00BC, r24
     fb0:	08 95       	ret

00000fb2 <TWI_Start_Transceiver_With_Data>:
     fb2:	ec eb       	ldi	r30, 0xBC	; 188
     fb4:	f0 e0       	ldi	r31, 0x00	; 0
     fb6:	20 81       	ld	r18, Z
     fb8:	20 fd       	sbrc	r18, 0
     fba:	fd cf       	rjmp	.-6      	; 0xfb6 <TWI_Start_Transceiver_With_Data+0x4>
     fbc:	60 93 57 03 	sts	0x0357, r22
     fc0:	fc 01       	movw	r30, r24
     fc2:	20 81       	ld	r18, Z
     fc4:	20 93 58 03 	sts	0x0358, r18
     fc8:	20 fd       	sbrc	r18, 0
     fca:	0c c0       	rjmp	.+24     	; 0xfe4 <TWI_Start_Transceiver_With_Data+0x32>
     fcc:	62 30       	cpi	r22, 0x02	; 2
     fce:	50 f0       	brcs	.+20     	; 0xfe4 <TWI_Start_Transceiver_With_Data+0x32>
     fd0:	dc 01       	movw	r26, r24
     fd2:	11 96       	adiw	r26, 0x01	; 1
     fd4:	e9 e5       	ldi	r30, 0x59	; 89
     fd6:	f3 e0       	ldi	r31, 0x03	; 3
     fd8:	81 e0       	ldi	r24, 0x01	; 1
     fda:	9d 91       	ld	r25, X+
     fdc:	91 93       	st	Z+, r25
     fde:	8f 5f       	subi	r24, 0xFF	; 255
     fe0:	86 13       	cpse	r24, r22
     fe2:	fb cf       	rjmp	.-10     	; 0xfda <TWI_Start_Transceiver_With_Data+0x28>
     fe4:	10 92 56 03 	sts	0x0356, r1
     fe8:	88 ef       	ldi	r24, 0xF8	; 248
     fea:	80 93 17 02 	sts	0x0217, r24
     fee:	85 ea       	ldi	r24, 0xA5	; 165
     ff0:	80 93 bc 00 	sts	0x00BC, r24
     ff4:	08 95       	ret

00000ff6 <__vector_39>:
     ff6:	1f 92       	push	r1
     ff8:	0f 92       	push	r0
     ffa:	0f b6       	in	r0, 0x3f	; 63
     ffc:	0f 92       	push	r0
     ffe:	11 24       	eor	r1, r1
    1000:	0b b6       	in	r0, 0x3b	; 59
    1002:	0f 92       	push	r0
    1004:	2f 93       	push	r18
    1006:	3f 93       	push	r19
    1008:	8f 93       	push	r24
    100a:	9f 93       	push	r25
    100c:	af 93       	push	r26
    100e:	bf 93       	push	r27
    1010:	ef 93       	push	r30
    1012:	ff 93       	push	r31
    1014:	80 91 b9 00 	lds	r24, 0x00B9
    1018:	90 e0       	ldi	r25, 0x00	; 0
    101a:	fc 01       	movw	r30, r24
    101c:	38 97       	sbiw	r30, 0x08	; 8
    101e:	e1 35       	cpi	r30, 0x51	; 81
    1020:	f1 05       	cpc	r31, r1
    1022:	08 f0       	brcs	.+2      	; 0x1026 <__vector_39+0x30>
    1024:	55 c0       	rjmp	.+170    	; 0x10d0 <__vector_39+0xda>
    1026:	ee 58       	subi	r30, 0x8E	; 142
    1028:	ff 4f       	sbci	r31, 0xFF	; 255
    102a:	17 c3       	rjmp	.+1582   	; 0x165a <__tablejump2__>
    102c:	10 92 55 03 	sts	0x0355, r1
    1030:	e0 91 55 03 	lds	r30, 0x0355
    1034:	80 91 57 03 	lds	r24, 0x0357
    1038:	e8 17       	cp	r30, r24
    103a:	70 f4       	brcc	.+28     	; 0x1058 <__vector_39+0x62>
    103c:	81 e0       	ldi	r24, 0x01	; 1
    103e:	8e 0f       	add	r24, r30
    1040:	80 93 55 03 	sts	0x0355, r24
    1044:	f0 e0       	ldi	r31, 0x00	; 0
    1046:	e8 5a       	subi	r30, 0xA8	; 168
    1048:	fc 4f       	sbci	r31, 0xFC	; 252
    104a:	80 81       	ld	r24, Z
    104c:	80 93 bb 00 	sts	0x00BB, r24
    1050:	85 e8       	ldi	r24, 0x85	; 133
    1052:	80 93 bc 00 	sts	0x00BC, r24
    1056:	43 c0       	rjmp	.+134    	; 0x10de <__vector_39+0xe8>
    1058:	80 91 56 03 	lds	r24, 0x0356
    105c:	81 60       	ori	r24, 0x01	; 1
    105e:	80 93 56 03 	sts	0x0356, r24
    1062:	84 e9       	ldi	r24, 0x94	; 148
    1064:	80 93 bc 00 	sts	0x00BC, r24
    1068:	3a c0       	rjmp	.+116    	; 0x10de <__vector_39+0xe8>
    106a:	e0 91 55 03 	lds	r30, 0x0355
    106e:	81 e0       	ldi	r24, 0x01	; 1
    1070:	8e 0f       	add	r24, r30
    1072:	80 93 55 03 	sts	0x0355, r24
    1076:	80 91 bb 00 	lds	r24, 0x00BB
    107a:	f0 e0       	ldi	r31, 0x00	; 0
    107c:	e8 5a       	subi	r30, 0xA8	; 168
    107e:	fc 4f       	sbci	r31, 0xFC	; 252
    1080:	80 83       	st	Z, r24
    1082:	20 91 55 03 	lds	r18, 0x0355
    1086:	30 e0       	ldi	r19, 0x00	; 0
    1088:	80 91 57 03 	lds	r24, 0x0357
    108c:	90 e0       	ldi	r25, 0x00	; 0
    108e:	01 97       	sbiw	r24, 0x01	; 1
    1090:	28 17       	cp	r18, r24
    1092:	39 07       	cpc	r19, r25
    1094:	24 f4       	brge	.+8      	; 0x109e <__vector_39+0xa8>
    1096:	85 ec       	ldi	r24, 0xC5	; 197
    1098:	80 93 bc 00 	sts	0x00BC, r24
    109c:	20 c0       	rjmp	.+64     	; 0x10de <__vector_39+0xe8>
    109e:	85 e8       	ldi	r24, 0x85	; 133
    10a0:	80 93 bc 00 	sts	0x00BC, r24
    10a4:	1c c0       	rjmp	.+56     	; 0x10de <__vector_39+0xe8>
    10a6:	80 91 bb 00 	lds	r24, 0x00BB
    10aa:	e0 91 55 03 	lds	r30, 0x0355
    10ae:	f0 e0       	ldi	r31, 0x00	; 0
    10b0:	e8 5a       	subi	r30, 0xA8	; 168
    10b2:	fc 4f       	sbci	r31, 0xFC	; 252
    10b4:	80 83       	st	Z, r24
    10b6:	80 91 56 03 	lds	r24, 0x0356
    10ba:	81 60       	ori	r24, 0x01	; 1
    10bc:	80 93 56 03 	sts	0x0356, r24
    10c0:	84 e9       	ldi	r24, 0x94	; 148
    10c2:	80 93 bc 00 	sts	0x00BC, r24
    10c6:	0b c0       	rjmp	.+22     	; 0x10de <__vector_39+0xe8>
    10c8:	85 ea       	ldi	r24, 0xA5	; 165
    10ca:	80 93 bc 00 	sts	0x00BC, r24
    10ce:	07 c0       	rjmp	.+14     	; 0x10de <__vector_39+0xe8>
    10d0:	80 91 b9 00 	lds	r24, 0x00B9
    10d4:	80 93 17 02 	sts	0x0217, r24
    10d8:	84 e0       	ldi	r24, 0x04	; 4
    10da:	80 93 bc 00 	sts	0x00BC, r24
    10de:	ff 91       	pop	r31
    10e0:	ef 91       	pop	r30
    10e2:	bf 91       	pop	r27
    10e4:	af 91       	pop	r26
    10e6:	9f 91       	pop	r25
    10e8:	8f 91       	pop	r24
    10ea:	3f 91       	pop	r19
    10ec:	2f 91       	pop	r18
    10ee:	0f 90       	pop	r0
    10f0:	0b be       	out	0x3b, r0	; 59
    10f2:	0f 90       	pop	r0
    10f4:	0f be       	out	0x3f, r0	; 63
    10f6:	0f 90       	pop	r0
    10f8:	1f 90       	pop	r1
    10fa:	18 95       	reti

000010fc <put_char>:
	fdevopen(put_char, get_char);
	
}

int put_char(unsigned char c){
	loop_until_bit_is_set(UCSR0A, UDRE0);
    10fc:	e0 ec       	ldi	r30, 0xC0	; 192
    10fe:	f0 e0       	ldi	r31, 0x00	; 0
    1100:	90 81       	ld	r25, Z
    1102:	95 ff       	sbrs	r25, 5
    1104:	fd cf       	rjmp	.-6      	; 0x1100 <put_char+0x4>
	UDR0 = c;
    1106:	80 93 c6 00 	sts	0x00C6, r24
	return 0;
}
    110a:	80 e0       	ldi	r24, 0x00	; 0
    110c:	90 e0       	ldi	r25, 0x00	; 0
    110e:	08 95       	ret

00001110 <get_char>:

int get_char(void){
	loop_until_bit_is_set(UCSR0A, RXC0);
    1110:	e0 ec       	ldi	r30, 0xC0	; 192
    1112:	f0 e0       	ldi	r31, 0x00	; 0
    1114:	80 81       	ld	r24, Z
    1116:	88 23       	and	r24, r24
    1118:	ec f7       	brge	.-6      	; 0x1114 <get_char+0x4>

	return UDR0;
    111a:	80 91 c6 00 	lds	r24, 0x00C6
}
    111e:	90 e0       	ldi	r25, 0x00	; 0
    1120:	08 95       	ret

00001122 <UART_init>:
#define BAUD 9600 //Baud rate = symbols pr second.

void UART_init(unsigned long clock_speed){
	
	unsigned long baud = BAUD;
	unsigned char ubrr = (clock_speed / (baud * 16)) - 1;
    1122:	20 e0       	ldi	r18, 0x00	; 0
    1124:	38 e5       	ldi	r19, 0x58	; 88
    1126:	42 e0       	ldi	r20, 0x02	; 2
    1128:	50 e0       	ldi	r21, 0x00	; 0
    112a:	59 d2       	rcall	.+1202   	; 0x15de <__udivmodsi4>
    112c:	21 50       	subi	r18, 0x01	; 1
	
	/* Set baud rate */
	UBRR0H = ubrr >> 8;			// Save the most significant bits (4 most sign. bits out of 12 bits)
    112e:	10 92 c5 00 	sts	0x00C5, r1
	UBRR0L = ubrr;				// Save the least sign. bits (8 least sign. bits)
    1132:	20 93 c4 00 	sts	0x00C4, r18
	
	/* Set frame format: 8data, 2stop bit */
	UCSR0C = (1<<USBS0);		// USBS: 1 = Use 2 stop bits, not 1												
    1136:	e2 ec       	ldi	r30, 0xC2	; 194
    1138:	f0 e0       	ldi	r31, 0x00	; 0
    113a:	88 e0       	ldi	r24, 0x08	; 8
    113c:	80 83       	st	Z, r24
	UCSR0C = (3<<UCSZ00);		// UCSZ00: 3 - UCSZ0 and UCSZ1 defines 8 bits (11 binary) for each character	
    113e:	86 e0       	ldi	r24, 0x06	; 6
    1140:	80 83       	st	Z, r24
	
	/* Enable receiver and transmitter */
	set_bit(UCSR0B,RXEN0);		//RXEN enables the receiver.
    1142:	e1 ec       	ldi	r30, 0xC1	; 193
    1144:	f0 e0       	ldi	r31, 0x00	; 0
    1146:	80 81       	ld	r24, Z
    1148:	80 61       	ori	r24, 0x10	; 16
    114a:	80 83       	st	Z, r24
	set_bit(UCSR0B,TXEN0);		//TXEN enables the transmitter.
    114c:	80 81       	ld	r24, Z
    114e:	88 60       	ori	r24, 0x08	; 8
    1150:	80 83       	st	Z, r24
	
	fdevopen(put_char, get_char);
    1152:	68 e8       	ldi	r22, 0x88	; 136
    1154:	78 e0       	ldi	r23, 0x08	; 8
    1156:	8e e7       	ldi	r24, 0x7E	; 126
    1158:	98 e0       	ldi	r25, 0x08	; 8
    115a:	a0 c2       	rjmp	.+1344   	; 0x169c <fdevopen>
    115c:	08 95       	ret

0000115e <SPI_init>:
#include "bit_macros.h"
#include <avr/delay.h>
void SPI_init(){
	
	/* Set SS, MOSI and SCK output, all others input */
	DDRB = (1<<PB0)|(1<<PB7)|(1<<PB2)|(1<<PB1);
    115e:	87 e8       	ldi	r24, 0x87	; 135
    1160:	84 b9       	out	0x04, r24	; 4
	/* Enable SPI, Master, set clock rate fck/16 */
	SPCR = (1<<SPE)|(1<<MSTR)|(1<<SPR0);
    1162:	81 e5       	ldi	r24, 0x51	; 81
    1164:	8c bd       	out	0x2c, r24	; 44
	
	/* Set SS-pin high */
	set_bit(PORTB, PB7);
    1166:	2f 9a       	sbi	0x05, 7	; 5
    1168:	08 95       	ret

0000116a <SPI_write>:

void SPI_write(char cData) {
	
	
	/* Start transmission */
	SPDR = cData;
    116a:	8e bd       	out	0x2e, r24	; 46
	
	/* Wait for transmission complete */
	loop_until_bit_is_set(SPSR, SPIF);
    116c:	0d b4       	in	r0, 0x2d	; 45
    116e:	07 fe       	sbrs	r0, 7
    1170:	fd cf       	rjmp	.-6      	; 0x116c <SPI_write+0x2>
	
}
    1172:	08 95       	ret

00001174 <SPI_read>:

char SPI_read() {
	
	/* Start shifting registers by putting a char in the register */
	SPDR = 0x00;
    1174:	1e bc       	out	0x2e, r1	; 46
	/* Wait for receive complete */ 
	loop_until_bit_is_set(SPSR,SPIF);
    1176:	0d b4       	in	r0, 0x2d	; 45
    1178:	07 fe       	sbrs	r0, 7
    117a:	fd cf       	rjmp	.-6      	; 0x1176 <SPI_read+0x2>
	
	return SPDR;
    117c:	8e b5       	in	r24, 0x2e	; 46
}
    117e:	08 95       	ret

00001180 <__subsf3>:
    1180:	50 58       	subi	r21, 0x80	; 128

00001182 <__addsf3>:
    1182:	bb 27       	eor	r27, r27
    1184:	aa 27       	eor	r26, r26
    1186:	0e d0       	rcall	.+28     	; 0x11a4 <__addsf3x>
    1188:	75 c1       	rjmp	.+746    	; 0x1474 <__fp_round>
    118a:	66 d1       	rcall	.+716    	; 0x1458 <__fp_pscA>
    118c:	30 f0       	brcs	.+12     	; 0x119a <__addsf3+0x18>
    118e:	6b d1       	rcall	.+726    	; 0x1466 <__fp_pscB>
    1190:	20 f0       	brcs	.+8      	; 0x119a <__addsf3+0x18>
    1192:	31 f4       	brne	.+12     	; 0x11a0 <__addsf3+0x1e>
    1194:	9f 3f       	cpi	r25, 0xFF	; 255
    1196:	11 f4       	brne	.+4      	; 0x119c <__addsf3+0x1a>
    1198:	1e f4       	brtc	.+6      	; 0x11a0 <__addsf3+0x1e>
    119a:	5b c1       	rjmp	.+694    	; 0x1452 <__fp_nan>
    119c:	0e f4       	brtc	.+2      	; 0x11a0 <__addsf3+0x1e>
    119e:	e0 95       	com	r30
    11a0:	e7 fb       	bst	r30, 7
    11a2:	51 c1       	rjmp	.+674    	; 0x1446 <__fp_inf>

000011a4 <__addsf3x>:
    11a4:	e9 2f       	mov	r30, r25
    11a6:	77 d1       	rcall	.+750    	; 0x1496 <__fp_split3>
    11a8:	80 f3       	brcs	.-32     	; 0x118a <__addsf3+0x8>
    11aa:	ba 17       	cp	r27, r26
    11ac:	62 07       	cpc	r22, r18
    11ae:	73 07       	cpc	r23, r19
    11b0:	84 07       	cpc	r24, r20
    11b2:	95 07       	cpc	r25, r21
    11b4:	18 f0       	brcs	.+6      	; 0x11bc <__addsf3x+0x18>
    11b6:	71 f4       	brne	.+28     	; 0x11d4 <__addsf3x+0x30>
    11b8:	9e f5       	brtc	.+102    	; 0x1220 <__addsf3x+0x7c>
    11ba:	8f c1       	rjmp	.+798    	; 0x14da <__fp_zero>
    11bc:	0e f4       	brtc	.+2      	; 0x11c0 <__addsf3x+0x1c>
    11be:	e0 95       	com	r30
    11c0:	0b 2e       	mov	r0, r27
    11c2:	ba 2f       	mov	r27, r26
    11c4:	a0 2d       	mov	r26, r0
    11c6:	0b 01       	movw	r0, r22
    11c8:	b9 01       	movw	r22, r18
    11ca:	90 01       	movw	r18, r0
    11cc:	0c 01       	movw	r0, r24
    11ce:	ca 01       	movw	r24, r20
    11d0:	a0 01       	movw	r20, r0
    11d2:	11 24       	eor	r1, r1
    11d4:	ff 27       	eor	r31, r31
    11d6:	59 1b       	sub	r21, r25
    11d8:	99 f0       	breq	.+38     	; 0x1200 <__addsf3x+0x5c>
    11da:	59 3f       	cpi	r21, 0xF9	; 249
    11dc:	50 f4       	brcc	.+20     	; 0x11f2 <__addsf3x+0x4e>
    11de:	50 3e       	cpi	r21, 0xE0	; 224
    11e0:	68 f1       	brcs	.+90     	; 0x123c <__addsf3x+0x98>
    11e2:	1a 16       	cp	r1, r26
    11e4:	f0 40       	sbci	r31, 0x00	; 0
    11e6:	a2 2f       	mov	r26, r18
    11e8:	23 2f       	mov	r18, r19
    11ea:	34 2f       	mov	r19, r20
    11ec:	44 27       	eor	r20, r20
    11ee:	58 5f       	subi	r21, 0xF8	; 248
    11f0:	f3 cf       	rjmp	.-26     	; 0x11d8 <__addsf3x+0x34>
    11f2:	46 95       	lsr	r20
    11f4:	37 95       	ror	r19
    11f6:	27 95       	ror	r18
    11f8:	a7 95       	ror	r26
    11fa:	f0 40       	sbci	r31, 0x00	; 0
    11fc:	53 95       	inc	r21
    11fe:	c9 f7       	brne	.-14     	; 0x11f2 <__addsf3x+0x4e>
    1200:	7e f4       	brtc	.+30     	; 0x1220 <__addsf3x+0x7c>
    1202:	1f 16       	cp	r1, r31
    1204:	ba 0b       	sbc	r27, r26
    1206:	62 0b       	sbc	r22, r18
    1208:	73 0b       	sbc	r23, r19
    120a:	84 0b       	sbc	r24, r20
    120c:	ba f0       	brmi	.+46     	; 0x123c <__addsf3x+0x98>
    120e:	91 50       	subi	r25, 0x01	; 1
    1210:	a1 f0       	breq	.+40     	; 0x123a <__addsf3x+0x96>
    1212:	ff 0f       	add	r31, r31
    1214:	bb 1f       	adc	r27, r27
    1216:	66 1f       	adc	r22, r22
    1218:	77 1f       	adc	r23, r23
    121a:	88 1f       	adc	r24, r24
    121c:	c2 f7       	brpl	.-16     	; 0x120e <__addsf3x+0x6a>
    121e:	0e c0       	rjmp	.+28     	; 0x123c <__addsf3x+0x98>
    1220:	ba 0f       	add	r27, r26
    1222:	62 1f       	adc	r22, r18
    1224:	73 1f       	adc	r23, r19
    1226:	84 1f       	adc	r24, r20
    1228:	48 f4       	brcc	.+18     	; 0x123c <__addsf3x+0x98>
    122a:	87 95       	ror	r24
    122c:	77 95       	ror	r23
    122e:	67 95       	ror	r22
    1230:	b7 95       	ror	r27
    1232:	f7 95       	ror	r31
    1234:	9e 3f       	cpi	r25, 0xFE	; 254
    1236:	08 f0       	brcs	.+2      	; 0x123a <__addsf3x+0x96>
    1238:	b3 cf       	rjmp	.-154    	; 0x11a0 <__addsf3+0x1e>
    123a:	93 95       	inc	r25
    123c:	88 0f       	add	r24, r24
    123e:	08 f0       	brcs	.+2      	; 0x1242 <__addsf3x+0x9e>
    1240:	99 27       	eor	r25, r25
    1242:	ee 0f       	add	r30, r30
    1244:	97 95       	ror	r25
    1246:	87 95       	ror	r24
    1248:	08 95       	ret

0000124a <__cmpsf2>:
    124a:	d9 d0       	rcall	.+434    	; 0x13fe <__fp_cmp>
    124c:	08 f4       	brcc	.+2      	; 0x1250 <__cmpsf2+0x6>
    124e:	81 e0       	ldi	r24, 0x01	; 1
    1250:	08 95       	ret

00001252 <__divsf3>:
    1252:	0c d0       	rcall	.+24     	; 0x126c <__divsf3x>
    1254:	0f c1       	rjmp	.+542    	; 0x1474 <__fp_round>
    1256:	07 d1       	rcall	.+526    	; 0x1466 <__fp_pscB>
    1258:	40 f0       	brcs	.+16     	; 0x126a <__divsf3+0x18>
    125a:	fe d0       	rcall	.+508    	; 0x1458 <__fp_pscA>
    125c:	30 f0       	brcs	.+12     	; 0x126a <__divsf3+0x18>
    125e:	21 f4       	brne	.+8      	; 0x1268 <__divsf3+0x16>
    1260:	5f 3f       	cpi	r21, 0xFF	; 255
    1262:	19 f0       	breq	.+6      	; 0x126a <__divsf3+0x18>
    1264:	f0 c0       	rjmp	.+480    	; 0x1446 <__fp_inf>
    1266:	51 11       	cpse	r21, r1
    1268:	39 c1       	rjmp	.+626    	; 0x14dc <__fp_szero>
    126a:	f3 c0       	rjmp	.+486    	; 0x1452 <__fp_nan>

0000126c <__divsf3x>:
    126c:	14 d1       	rcall	.+552    	; 0x1496 <__fp_split3>
    126e:	98 f3       	brcs	.-26     	; 0x1256 <__divsf3+0x4>

00001270 <__divsf3_pse>:
    1270:	99 23       	and	r25, r25
    1272:	c9 f3       	breq	.-14     	; 0x1266 <__divsf3+0x14>
    1274:	55 23       	and	r21, r21
    1276:	b1 f3       	breq	.-20     	; 0x1264 <__divsf3+0x12>
    1278:	95 1b       	sub	r25, r21
    127a:	55 0b       	sbc	r21, r21
    127c:	bb 27       	eor	r27, r27
    127e:	aa 27       	eor	r26, r26
    1280:	62 17       	cp	r22, r18
    1282:	73 07       	cpc	r23, r19
    1284:	84 07       	cpc	r24, r20
    1286:	38 f0       	brcs	.+14     	; 0x1296 <__divsf3_pse+0x26>
    1288:	9f 5f       	subi	r25, 0xFF	; 255
    128a:	5f 4f       	sbci	r21, 0xFF	; 255
    128c:	22 0f       	add	r18, r18
    128e:	33 1f       	adc	r19, r19
    1290:	44 1f       	adc	r20, r20
    1292:	aa 1f       	adc	r26, r26
    1294:	a9 f3       	breq	.-22     	; 0x1280 <__divsf3_pse+0x10>
    1296:	33 d0       	rcall	.+102    	; 0x12fe <__divsf3_pse+0x8e>
    1298:	0e 2e       	mov	r0, r30
    129a:	3a f0       	brmi	.+14     	; 0x12aa <__divsf3_pse+0x3a>
    129c:	e0 e8       	ldi	r30, 0x80	; 128
    129e:	30 d0       	rcall	.+96     	; 0x1300 <__divsf3_pse+0x90>
    12a0:	91 50       	subi	r25, 0x01	; 1
    12a2:	50 40       	sbci	r21, 0x00	; 0
    12a4:	e6 95       	lsr	r30
    12a6:	00 1c       	adc	r0, r0
    12a8:	ca f7       	brpl	.-14     	; 0x129c <__divsf3_pse+0x2c>
    12aa:	29 d0       	rcall	.+82     	; 0x12fe <__divsf3_pse+0x8e>
    12ac:	fe 2f       	mov	r31, r30
    12ae:	27 d0       	rcall	.+78     	; 0x12fe <__divsf3_pse+0x8e>
    12b0:	66 0f       	add	r22, r22
    12b2:	77 1f       	adc	r23, r23
    12b4:	88 1f       	adc	r24, r24
    12b6:	bb 1f       	adc	r27, r27
    12b8:	26 17       	cp	r18, r22
    12ba:	37 07       	cpc	r19, r23
    12bc:	48 07       	cpc	r20, r24
    12be:	ab 07       	cpc	r26, r27
    12c0:	b0 e8       	ldi	r27, 0x80	; 128
    12c2:	09 f0       	breq	.+2      	; 0x12c6 <__divsf3_pse+0x56>
    12c4:	bb 0b       	sbc	r27, r27
    12c6:	80 2d       	mov	r24, r0
    12c8:	bf 01       	movw	r22, r30
    12ca:	ff 27       	eor	r31, r31
    12cc:	93 58       	subi	r25, 0x83	; 131
    12ce:	5f 4f       	sbci	r21, 0xFF	; 255
    12d0:	2a f0       	brmi	.+10     	; 0x12dc <__divsf3_pse+0x6c>
    12d2:	9e 3f       	cpi	r25, 0xFE	; 254
    12d4:	51 05       	cpc	r21, r1
    12d6:	68 f0       	brcs	.+26     	; 0x12f2 <__divsf3_pse+0x82>
    12d8:	b6 c0       	rjmp	.+364    	; 0x1446 <__fp_inf>
    12da:	00 c1       	rjmp	.+512    	; 0x14dc <__fp_szero>
    12dc:	5f 3f       	cpi	r21, 0xFF	; 255
    12de:	ec f3       	brlt	.-6      	; 0x12da <__divsf3_pse+0x6a>
    12e0:	98 3e       	cpi	r25, 0xE8	; 232
    12e2:	dc f3       	brlt	.-10     	; 0x12da <__divsf3_pse+0x6a>
    12e4:	86 95       	lsr	r24
    12e6:	77 95       	ror	r23
    12e8:	67 95       	ror	r22
    12ea:	b7 95       	ror	r27
    12ec:	f7 95       	ror	r31
    12ee:	9f 5f       	subi	r25, 0xFF	; 255
    12f0:	c9 f7       	brne	.-14     	; 0x12e4 <__divsf3_pse+0x74>
    12f2:	88 0f       	add	r24, r24
    12f4:	91 1d       	adc	r25, r1
    12f6:	96 95       	lsr	r25
    12f8:	87 95       	ror	r24
    12fa:	97 f9       	bld	r25, 7
    12fc:	08 95       	ret
    12fe:	e1 e0       	ldi	r30, 0x01	; 1
    1300:	66 0f       	add	r22, r22
    1302:	77 1f       	adc	r23, r23
    1304:	88 1f       	adc	r24, r24
    1306:	bb 1f       	adc	r27, r27
    1308:	62 17       	cp	r22, r18
    130a:	73 07       	cpc	r23, r19
    130c:	84 07       	cpc	r24, r20
    130e:	ba 07       	cpc	r27, r26
    1310:	20 f0       	brcs	.+8      	; 0x131a <__divsf3_pse+0xaa>
    1312:	62 1b       	sub	r22, r18
    1314:	73 0b       	sbc	r23, r19
    1316:	84 0b       	sbc	r24, r20
    1318:	ba 0b       	sbc	r27, r26
    131a:	ee 1f       	adc	r30, r30
    131c:	88 f7       	brcc	.-30     	; 0x1300 <__divsf3_pse+0x90>
    131e:	e0 95       	com	r30
    1320:	08 95       	ret

00001322 <__fixsfsi>:
    1322:	04 d0       	rcall	.+8      	; 0x132c <__fixunssfsi>
    1324:	68 94       	set
    1326:	b1 11       	cpse	r27, r1
    1328:	d9 c0       	rjmp	.+434    	; 0x14dc <__fp_szero>
    132a:	08 95       	ret

0000132c <__fixunssfsi>:
    132c:	bc d0       	rcall	.+376    	; 0x14a6 <__fp_splitA>
    132e:	88 f0       	brcs	.+34     	; 0x1352 <__fixunssfsi+0x26>
    1330:	9f 57       	subi	r25, 0x7F	; 127
    1332:	90 f0       	brcs	.+36     	; 0x1358 <__fixunssfsi+0x2c>
    1334:	b9 2f       	mov	r27, r25
    1336:	99 27       	eor	r25, r25
    1338:	b7 51       	subi	r27, 0x17	; 23
    133a:	a0 f0       	brcs	.+40     	; 0x1364 <__fixunssfsi+0x38>
    133c:	d1 f0       	breq	.+52     	; 0x1372 <__fixunssfsi+0x46>
    133e:	66 0f       	add	r22, r22
    1340:	77 1f       	adc	r23, r23
    1342:	88 1f       	adc	r24, r24
    1344:	99 1f       	adc	r25, r25
    1346:	1a f0       	brmi	.+6      	; 0x134e <__fixunssfsi+0x22>
    1348:	ba 95       	dec	r27
    134a:	c9 f7       	brne	.-14     	; 0x133e <__fixunssfsi+0x12>
    134c:	12 c0       	rjmp	.+36     	; 0x1372 <__fixunssfsi+0x46>
    134e:	b1 30       	cpi	r27, 0x01	; 1
    1350:	81 f0       	breq	.+32     	; 0x1372 <__fixunssfsi+0x46>
    1352:	c3 d0       	rcall	.+390    	; 0x14da <__fp_zero>
    1354:	b1 e0       	ldi	r27, 0x01	; 1
    1356:	08 95       	ret
    1358:	c0 c0       	rjmp	.+384    	; 0x14da <__fp_zero>
    135a:	67 2f       	mov	r22, r23
    135c:	78 2f       	mov	r23, r24
    135e:	88 27       	eor	r24, r24
    1360:	b8 5f       	subi	r27, 0xF8	; 248
    1362:	39 f0       	breq	.+14     	; 0x1372 <__fixunssfsi+0x46>
    1364:	b9 3f       	cpi	r27, 0xF9	; 249
    1366:	cc f3       	brlt	.-14     	; 0x135a <__fixunssfsi+0x2e>
    1368:	86 95       	lsr	r24
    136a:	77 95       	ror	r23
    136c:	67 95       	ror	r22
    136e:	b3 95       	inc	r27
    1370:	d9 f7       	brne	.-10     	; 0x1368 <__fixunssfsi+0x3c>
    1372:	3e f4       	brtc	.+14     	; 0x1382 <__fixunssfsi+0x56>
    1374:	90 95       	com	r25
    1376:	80 95       	com	r24
    1378:	70 95       	com	r23
    137a:	61 95       	neg	r22
    137c:	7f 4f       	sbci	r23, 0xFF	; 255
    137e:	8f 4f       	sbci	r24, 0xFF	; 255
    1380:	9f 4f       	sbci	r25, 0xFF	; 255
    1382:	08 95       	ret

00001384 <__floatunsisf>:
    1384:	e8 94       	clt
    1386:	09 c0       	rjmp	.+18     	; 0x139a <__floatsisf+0x12>

00001388 <__floatsisf>:
    1388:	97 fb       	bst	r25, 7
    138a:	3e f4       	brtc	.+14     	; 0x139a <__floatsisf+0x12>
    138c:	90 95       	com	r25
    138e:	80 95       	com	r24
    1390:	70 95       	com	r23
    1392:	61 95       	neg	r22
    1394:	7f 4f       	sbci	r23, 0xFF	; 255
    1396:	8f 4f       	sbci	r24, 0xFF	; 255
    1398:	9f 4f       	sbci	r25, 0xFF	; 255
    139a:	99 23       	and	r25, r25
    139c:	a9 f0       	breq	.+42     	; 0x13c8 <__floatsisf+0x40>
    139e:	f9 2f       	mov	r31, r25
    13a0:	96 e9       	ldi	r25, 0x96	; 150
    13a2:	bb 27       	eor	r27, r27
    13a4:	93 95       	inc	r25
    13a6:	f6 95       	lsr	r31
    13a8:	87 95       	ror	r24
    13aa:	77 95       	ror	r23
    13ac:	67 95       	ror	r22
    13ae:	b7 95       	ror	r27
    13b0:	f1 11       	cpse	r31, r1
    13b2:	f8 cf       	rjmp	.-16     	; 0x13a4 <__floatsisf+0x1c>
    13b4:	fa f4       	brpl	.+62     	; 0x13f4 <__floatsisf+0x6c>
    13b6:	bb 0f       	add	r27, r27
    13b8:	11 f4       	brne	.+4      	; 0x13be <__floatsisf+0x36>
    13ba:	60 ff       	sbrs	r22, 0
    13bc:	1b c0       	rjmp	.+54     	; 0x13f4 <__floatsisf+0x6c>
    13be:	6f 5f       	subi	r22, 0xFF	; 255
    13c0:	7f 4f       	sbci	r23, 0xFF	; 255
    13c2:	8f 4f       	sbci	r24, 0xFF	; 255
    13c4:	9f 4f       	sbci	r25, 0xFF	; 255
    13c6:	16 c0       	rjmp	.+44     	; 0x13f4 <__floatsisf+0x6c>
    13c8:	88 23       	and	r24, r24
    13ca:	11 f0       	breq	.+4      	; 0x13d0 <__floatsisf+0x48>
    13cc:	96 e9       	ldi	r25, 0x96	; 150
    13ce:	11 c0       	rjmp	.+34     	; 0x13f2 <__floatsisf+0x6a>
    13d0:	77 23       	and	r23, r23
    13d2:	21 f0       	breq	.+8      	; 0x13dc <__floatsisf+0x54>
    13d4:	9e e8       	ldi	r25, 0x8E	; 142
    13d6:	87 2f       	mov	r24, r23
    13d8:	76 2f       	mov	r23, r22
    13da:	05 c0       	rjmp	.+10     	; 0x13e6 <__floatsisf+0x5e>
    13dc:	66 23       	and	r22, r22
    13de:	71 f0       	breq	.+28     	; 0x13fc <__floatsisf+0x74>
    13e0:	96 e8       	ldi	r25, 0x86	; 134
    13e2:	86 2f       	mov	r24, r22
    13e4:	70 e0       	ldi	r23, 0x00	; 0
    13e6:	60 e0       	ldi	r22, 0x00	; 0
    13e8:	2a f0       	brmi	.+10     	; 0x13f4 <__floatsisf+0x6c>
    13ea:	9a 95       	dec	r25
    13ec:	66 0f       	add	r22, r22
    13ee:	77 1f       	adc	r23, r23
    13f0:	88 1f       	adc	r24, r24
    13f2:	da f7       	brpl	.-10     	; 0x13ea <__floatsisf+0x62>
    13f4:	88 0f       	add	r24, r24
    13f6:	96 95       	lsr	r25
    13f8:	87 95       	ror	r24
    13fa:	97 f9       	bld	r25, 7
    13fc:	08 95       	ret

000013fe <__fp_cmp>:
    13fe:	99 0f       	add	r25, r25
    1400:	00 08       	sbc	r0, r0
    1402:	55 0f       	add	r21, r21
    1404:	aa 0b       	sbc	r26, r26
    1406:	e0 e8       	ldi	r30, 0x80	; 128
    1408:	fe ef       	ldi	r31, 0xFE	; 254
    140a:	16 16       	cp	r1, r22
    140c:	17 06       	cpc	r1, r23
    140e:	e8 07       	cpc	r30, r24
    1410:	f9 07       	cpc	r31, r25
    1412:	c0 f0       	brcs	.+48     	; 0x1444 <__fp_cmp+0x46>
    1414:	12 16       	cp	r1, r18
    1416:	13 06       	cpc	r1, r19
    1418:	e4 07       	cpc	r30, r20
    141a:	f5 07       	cpc	r31, r21
    141c:	98 f0       	brcs	.+38     	; 0x1444 <__fp_cmp+0x46>
    141e:	62 1b       	sub	r22, r18
    1420:	73 0b       	sbc	r23, r19
    1422:	84 0b       	sbc	r24, r20
    1424:	95 0b       	sbc	r25, r21
    1426:	39 f4       	brne	.+14     	; 0x1436 <__fp_cmp+0x38>
    1428:	0a 26       	eor	r0, r26
    142a:	61 f0       	breq	.+24     	; 0x1444 <__fp_cmp+0x46>
    142c:	23 2b       	or	r18, r19
    142e:	24 2b       	or	r18, r20
    1430:	25 2b       	or	r18, r21
    1432:	21 f4       	brne	.+8      	; 0x143c <__fp_cmp+0x3e>
    1434:	08 95       	ret
    1436:	0a 26       	eor	r0, r26
    1438:	09 f4       	brne	.+2      	; 0x143c <__fp_cmp+0x3e>
    143a:	a1 40       	sbci	r26, 0x01	; 1
    143c:	a6 95       	lsr	r26
    143e:	8f ef       	ldi	r24, 0xFF	; 255
    1440:	81 1d       	adc	r24, r1
    1442:	81 1d       	adc	r24, r1
    1444:	08 95       	ret

00001446 <__fp_inf>:
    1446:	97 f9       	bld	r25, 7
    1448:	9f 67       	ori	r25, 0x7F	; 127
    144a:	80 e8       	ldi	r24, 0x80	; 128
    144c:	70 e0       	ldi	r23, 0x00	; 0
    144e:	60 e0       	ldi	r22, 0x00	; 0
    1450:	08 95       	ret

00001452 <__fp_nan>:
    1452:	9f ef       	ldi	r25, 0xFF	; 255
    1454:	80 ec       	ldi	r24, 0xC0	; 192
    1456:	08 95       	ret

00001458 <__fp_pscA>:
    1458:	00 24       	eor	r0, r0
    145a:	0a 94       	dec	r0
    145c:	16 16       	cp	r1, r22
    145e:	17 06       	cpc	r1, r23
    1460:	18 06       	cpc	r1, r24
    1462:	09 06       	cpc	r0, r25
    1464:	08 95       	ret

00001466 <__fp_pscB>:
    1466:	00 24       	eor	r0, r0
    1468:	0a 94       	dec	r0
    146a:	12 16       	cp	r1, r18
    146c:	13 06       	cpc	r1, r19
    146e:	14 06       	cpc	r1, r20
    1470:	05 06       	cpc	r0, r21
    1472:	08 95       	ret

00001474 <__fp_round>:
    1474:	09 2e       	mov	r0, r25
    1476:	03 94       	inc	r0
    1478:	00 0c       	add	r0, r0
    147a:	11 f4       	brne	.+4      	; 0x1480 <__fp_round+0xc>
    147c:	88 23       	and	r24, r24
    147e:	52 f0       	brmi	.+20     	; 0x1494 <__fp_round+0x20>
    1480:	bb 0f       	add	r27, r27
    1482:	40 f4       	brcc	.+16     	; 0x1494 <__fp_round+0x20>
    1484:	bf 2b       	or	r27, r31
    1486:	11 f4       	brne	.+4      	; 0x148c <__fp_round+0x18>
    1488:	60 ff       	sbrs	r22, 0
    148a:	04 c0       	rjmp	.+8      	; 0x1494 <__fp_round+0x20>
    148c:	6f 5f       	subi	r22, 0xFF	; 255
    148e:	7f 4f       	sbci	r23, 0xFF	; 255
    1490:	8f 4f       	sbci	r24, 0xFF	; 255
    1492:	9f 4f       	sbci	r25, 0xFF	; 255
    1494:	08 95       	ret

00001496 <__fp_split3>:
    1496:	57 fd       	sbrc	r21, 7
    1498:	90 58       	subi	r25, 0x80	; 128
    149a:	44 0f       	add	r20, r20
    149c:	55 1f       	adc	r21, r21
    149e:	59 f0       	breq	.+22     	; 0x14b6 <__fp_splitA+0x10>
    14a0:	5f 3f       	cpi	r21, 0xFF	; 255
    14a2:	71 f0       	breq	.+28     	; 0x14c0 <__fp_splitA+0x1a>
    14a4:	47 95       	ror	r20

000014a6 <__fp_splitA>:
    14a6:	88 0f       	add	r24, r24
    14a8:	97 fb       	bst	r25, 7
    14aa:	99 1f       	adc	r25, r25
    14ac:	61 f0       	breq	.+24     	; 0x14c6 <__fp_splitA+0x20>
    14ae:	9f 3f       	cpi	r25, 0xFF	; 255
    14b0:	79 f0       	breq	.+30     	; 0x14d0 <__fp_splitA+0x2a>
    14b2:	87 95       	ror	r24
    14b4:	08 95       	ret
    14b6:	12 16       	cp	r1, r18
    14b8:	13 06       	cpc	r1, r19
    14ba:	14 06       	cpc	r1, r20
    14bc:	55 1f       	adc	r21, r21
    14be:	f2 cf       	rjmp	.-28     	; 0x14a4 <__fp_split3+0xe>
    14c0:	46 95       	lsr	r20
    14c2:	f1 df       	rcall	.-30     	; 0x14a6 <__fp_splitA>
    14c4:	08 c0       	rjmp	.+16     	; 0x14d6 <__fp_splitA+0x30>
    14c6:	16 16       	cp	r1, r22
    14c8:	17 06       	cpc	r1, r23
    14ca:	18 06       	cpc	r1, r24
    14cc:	99 1f       	adc	r25, r25
    14ce:	f1 cf       	rjmp	.-30     	; 0x14b2 <__fp_splitA+0xc>
    14d0:	86 95       	lsr	r24
    14d2:	71 05       	cpc	r23, r1
    14d4:	61 05       	cpc	r22, r1
    14d6:	08 94       	sec
    14d8:	08 95       	ret

000014da <__fp_zero>:
    14da:	e8 94       	clt

000014dc <__fp_szero>:
    14dc:	bb 27       	eor	r27, r27
    14de:	66 27       	eor	r22, r22
    14e0:	77 27       	eor	r23, r23
    14e2:	cb 01       	movw	r24, r22
    14e4:	97 f9       	bld	r25, 7
    14e6:	08 95       	ret

000014e8 <__gesf2>:
    14e8:	8a df       	rcall	.-236    	; 0x13fe <__fp_cmp>
    14ea:	08 f4       	brcc	.+2      	; 0x14ee <__gesf2+0x6>
    14ec:	8f ef       	ldi	r24, 0xFF	; 255
    14ee:	08 95       	ret

000014f0 <__mulsf3>:
    14f0:	0b d0       	rcall	.+22     	; 0x1508 <__mulsf3x>
    14f2:	c0 cf       	rjmp	.-128    	; 0x1474 <__fp_round>
    14f4:	b1 df       	rcall	.-158    	; 0x1458 <__fp_pscA>
    14f6:	28 f0       	brcs	.+10     	; 0x1502 <__mulsf3+0x12>
    14f8:	b6 df       	rcall	.-148    	; 0x1466 <__fp_pscB>
    14fa:	18 f0       	brcs	.+6      	; 0x1502 <__mulsf3+0x12>
    14fc:	95 23       	and	r25, r21
    14fe:	09 f0       	breq	.+2      	; 0x1502 <__mulsf3+0x12>
    1500:	a2 cf       	rjmp	.-188    	; 0x1446 <__fp_inf>
    1502:	a7 cf       	rjmp	.-178    	; 0x1452 <__fp_nan>
    1504:	11 24       	eor	r1, r1
    1506:	ea cf       	rjmp	.-44     	; 0x14dc <__fp_szero>

00001508 <__mulsf3x>:
    1508:	c6 df       	rcall	.-116    	; 0x1496 <__fp_split3>
    150a:	a0 f3       	brcs	.-24     	; 0x14f4 <__mulsf3+0x4>

0000150c <__mulsf3_pse>:
    150c:	95 9f       	mul	r25, r21
    150e:	d1 f3       	breq	.-12     	; 0x1504 <__mulsf3+0x14>
    1510:	95 0f       	add	r25, r21
    1512:	50 e0       	ldi	r21, 0x00	; 0
    1514:	55 1f       	adc	r21, r21
    1516:	62 9f       	mul	r22, r18
    1518:	f0 01       	movw	r30, r0
    151a:	72 9f       	mul	r23, r18
    151c:	bb 27       	eor	r27, r27
    151e:	f0 0d       	add	r31, r0
    1520:	b1 1d       	adc	r27, r1
    1522:	63 9f       	mul	r22, r19
    1524:	aa 27       	eor	r26, r26
    1526:	f0 0d       	add	r31, r0
    1528:	b1 1d       	adc	r27, r1
    152a:	aa 1f       	adc	r26, r26
    152c:	64 9f       	mul	r22, r20
    152e:	66 27       	eor	r22, r22
    1530:	b0 0d       	add	r27, r0
    1532:	a1 1d       	adc	r26, r1
    1534:	66 1f       	adc	r22, r22
    1536:	82 9f       	mul	r24, r18
    1538:	22 27       	eor	r18, r18
    153a:	b0 0d       	add	r27, r0
    153c:	a1 1d       	adc	r26, r1
    153e:	62 1f       	adc	r22, r18
    1540:	73 9f       	mul	r23, r19
    1542:	b0 0d       	add	r27, r0
    1544:	a1 1d       	adc	r26, r1
    1546:	62 1f       	adc	r22, r18
    1548:	83 9f       	mul	r24, r19
    154a:	a0 0d       	add	r26, r0
    154c:	61 1d       	adc	r22, r1
    154e:	22 1f       	adc	r18, r18
    1550:	74 9f       	mul	r23, r20
    1552:	33 27       	eor	r19, r19
    1554:	a0 0d       	add	r26, r0
    1556:	61 1d       	adc	r22, r1
    1558:	23 1f       	adc	r18, r19
    155a:	84 9f       	mul	r24, r20
    155c:	60 0d       	add	r22, r0
    155e:	21 1d       	adc	r18, r1
    1560:	82 2f       	mov	r24, r18
    1562:	76 2f       	mov	r23, r22
    1564:	6a 2f       	mov	r22, r26
    1566:	11 24       	eor	r1, r1
    1568:	9f 57       	subi	r25, 0x7F	; 127
    156a:	50 40       	sbci	r21, 0x00	; 0
    156c:	8a f0       	brmi	.+34     	; 0x1590 <__mulsf3_pse+0x84>
    156e:	e1 f0       	breq	.+56     	; 0x15a8 <__mulsf3_pse+0x9c>
    1570:	88 23       	and	r24, r24
    1572:	4a f0       	brmi	.+18     	; 0x1586 <__mulsf3_pse+0x7a>
    1574:	ee 0f       	add	r30, r30
    1576:	ff 1f       	adc	r31, r31
    1578:	bb 1f       	adc	r27, r27
    157a:	66 1f       	adc	r22, r22
    157c:	77 1f       	adc	r23, r23
    157e:	88 1f       	adc	r24, r24
    1580:	91 50       	subi	r25, 0x01	; 1
    1582:	50 40       	sbci	r21, 0x00	; 0
    1584:	a9 f7       	brne	.-22     	; 0x1570 <__mulsf3_pse+0x64>
    1586:	9e 3f       	cpi	r25, 0xFE	; 254
    1588:	51 05       	cpc	r21, r1
    158a:	70 f0       	brcs	.+28     	; 0x15a8 <__mulsf3_pse+0x9c>
    158c:	5c cf       	rjmp	.-328    	; 0x1446 <__fp_inf>
    158e:	a6 cf       	rjmp	.-180    	; 0x14dc <__fp_szero>
    1590:	5f 3f       	cpi	r21, 0xFF	; 255
    1592:	ec f3       	brlt	.-6      	; 0x158e <__mulsf3_pse+0x82>
    1594:	98 3e       	cpi	r25, 0xE8	; 232
    1596:	dc f3       	brlt	.-10     	; 0x158e <__mulsf3_pse+0x82>
    1598:	86 95       	lsr	r24
    159a:	77 95       	ror	r23
    159c:	67 95       	ror	r22
    159e:	b7 95       	ror	r27
    15a0:	f7 95       	ror	r31
    15a2:	e7 95       	ror	r30
    15a4:	9f 5f       	subi	r25, 0xFF	; 255
    15a6:	c1 f7       	brne	.-16     	; 0x1598 <__mulsf3_pse+0x8c>
    15a8:	fe 2b       	or	r31, r30
    15aa:	88 0f       	add	r24, r24
    15ac:	91 1d       	adc	r25, r1
    15ae:	96 95       	lsr	r25
    15b0:	87 95       	ror	r24
    15b2:	97 f9       	bld	r25, 7
    15b4:	08 95       	ret

000015b6 <__udivmodhi4>:
    15b6:	aa 1b       	sub	r26, r26
    15b8:	bb 1b       	sub	r27, r27
    15ba:	51 e1       	ldi	r21, 0x11	; 17
    15bc:	07 c0       	rjmp	.+14     	; 0x15cc <__udivmodhi4_ep>

000015be <__udivmodhi4_loop>:
    15be:	aa 1f       	adc	r26, r26
    15c0:	bb 1f       	adc	r27, r27
    15c2:	a6 17       	cp	r26, r22
    15c4:	b7 07       	cpc	r27, r23
    15c6:	10 f0       	brcs	.+4      	; 0x15cc <__udivmodhi4_ep>
    15c8:	a6 1b       	sub	r26, r22
    15ca:	b7 0b       	sbc	r27, r23

000015cc <__udivmodhi4_ep>:
    15cc:	88 1f       	adc	r24, r24
    15ce:	99 1f       	adc	r25, r25
    15d0:	5a 95       	dec	r21
    15d2:	a9 f7       	brne	.-22     	; 0x15be <__udivmodhi4_loop>
    15d4:	80 95       	com	r24
    15d6:	90 95       	com	r25
    15d8:	bc 01       	movw	r22, r24
    15da:	cd 01       	movw	r24, r26
    15dc:	08 95       	ret

000015de <__udivmodsi4>:
    15de:	a1 e2       	ldi	r26, 0x21	; 33
    15e0:	1a 2e       	mov	r1, r26
    15e2:	aa 1b       	sub	r26, r26
    15e4:	bb 1b       	sub	r27, r27
    15e6:	fd 01       	movw	r30, r26
    15e8:	0d c0       	rjmp	.+26     	; 0x1604 <__udivmodsi4_ep>

000015ea <__udivmodsi4_loop>:
    15ea:	aa 1f       	adc	r26, r26
    15ec:	bb 1f       	adc	r27, r27
    15ee:	ee 1f       	adc	r30, r30
    15f0:	ff 1f       	adc	r31, r31
    15f2:	a2 17       	cp	r26, r18
    15f4:	b3 07       	cpc	r27, r19
    15f6:	e4 07       	cpc	r30, r20
    15f8:	f5 07       	cpc	r31, r21
    15fa:	20 f0       	brcs	.+8      	; 0x1604 <__udivmodsi4_ep>
    15fc:	a2 1b       	sub	r26, r18
    15fe:	b3 0b       	sbc	r27, r19
    1600:	e4 0b       	sbc	r30, r20
    1602:	f5 0b       	sbc	r31, r21

00001604 <__udivmodsi4_ep>:
    1604:	66 1f       	adc	r22, r22
    1606:	77 1f       	adc	r23, r23
    1608:	88 1f       	adc	r24, r24
    160a:	99 1f       	adc	r25, r25
    160c:	1a 94       	dec	r1
    160e:	69 f7       	brne	.-38     	; 0x15ea <__udivmodsi4_loop>
    1610:	60 95       	com	r22
    1612:	70 95       	com	r23
    1614:	80 95       	com	r24
    1616:	90 95       	com	r25
    1618:	9b 01       	movw	r18, r22
    161a:	ac 01       	movw	r20, r24
    161c:	bd 01       	movw	r22, r26
    161e:	cf 01       	movw	r24, r30
    1620:	08 95       	ret

00001622 <__divmodsi4>:
    1622:	05 2e       	mov	r0, r21
    1624:	97 fb       	bst	r25, 7
    1626:	16 f4       	brtc	.+4      	; 0x162c <__divmodsi4+0xa>
    1628:	00 94       	com	r0
    162a:	0f d0       	rcall	.+30     	; 0x164a <__negsi2>
    162c:	57 fd       	sbrc	r21, 7
    162e:	05 d0       	rcall	.+10     	; 0x163a <__divmodsi4_neg2>
    1630:	d6 df       	rcall	.-84     	; 0x15de <__udivmodsi4>
    1632:	07 fc       	sbrc	r0, 7
    1634:	02 d0       	rcall	.+4      	; 0x163a <__divmodsi4_neg2>
    1636:	46 f4       	brtc	.+16     	; 0x1648 <__divmodsi4_exit>
    1638:	08 c0       	rjmp	.+16     	; 0x164a <__negsi2>

0000163a <__divmodsi4_neg2>:
    163a:	50 95       	com	r21
    163c:	40 95       	com	r20
    163e:	30 95       	com	r19
    1640:	21 95       	neg	r18
    1642:	3f 4f       	sbci	r19, 0xFF	; 255
    1644:	4f 4f       	sbci	r20, 0xFF	; 255
    1646:	5f 4f       	sbci	r21, 0xFF	; 255

00001648 <__divmodsi4_exit>:
    1648:	08 95       	ret

0000164a <__negsi2>:
    164a:	90 95       	com	r25
    164c:	80 95       	com	r24
    164e:	70 95       	com	r23
    1650:	61 95       	neg	r22
    1652:	7f 4f       	sbci	r23, 0xFF	; 255
    1654:	8f 4f       	sbci	r24, 0xFF	; 255
    1656:	9f 4f       	sbci	r25, 0xFF	; 255
    1658:	08 95       	ret

0000165a <__tablejump2__>:
    165a:	ee 0f       	add	r30, r30
    165c:	ff 1f       	adc	r31, r31

0000165e <__tablejump__>:
    165e:	05 90       	lpm	r0, Z+
    1660:	f4 91       	lpm	r31, Z
    1662:	e0 2d       	mov	r30, r0
    1664:	19 94       	eijmp

00001666 <__mulhisi3>:
    1666:	05 d0       	rcall	.+10     	; 0x1672 <__umulhisi3>
    1668:	33 23       	and	r19, r19
    166a:	12 f4       	brpl	.+4      	; 0x1670 <__mulhisi3+0xa>
    166c:	8a 1b       	sub	r24, r26
    166e:	9b 0b       	sbc	r25, r27
    1670:	10 c0       	rjmp	.+32     	; 0x1692 <__usmulhisi3_tail>

00001672 <__umulhisi3>:
    1672:	a2 9f       	mul	r26, r18
    1674:	b0 01       	movw	r22, r0
    1676:	b3 9f       	mul	r27, r19
    1678:	c0 01       	movw	r24, r0
    167a:	a3 9f       	mul	r26, r19
    167c:	70 0d       	add	r23, r0
    167e:	81 1d       	adc	r24, r1
    1680:	11 24       	eor	r1, r1
    1682:	91 1d       	adc	r25, r1
    1684:	b2 9f       	mul	r27, r18
    1686:	70 0d       	add	r23, r0
    1688:	81 1d       	adc	r24, r1
    168a:	11 24       	eor	r1, r1
    168c:	91 1d       	adc	r25, r1
    168e:	08 95       	ret

00001690 <__usmulhisi3>:
    1690:	f0 df       	rcall	.-32     	; 0x1672 <__umulhisi3>

00001692 <__usmulhisi3_tail>:
    1692:	b7 ff       	sbrs	r27, 7
    1694:	08 95       	ret
    1696:	82 1b       	sub	r24, r18
    1698:	93 0b       	sbc	r25, r19
    169a:	08 95       	ret

0000169c <fdevopen>:
    169c:	0f 93       	push	r16
    169e:	1f 93       	push	r17
    16a0:	cf 93       	push	r28
    16a2:	df 93       	push	r29
    16a4:	ec 01       	movw	r28, r24
    16a6:	8b 01       	movw	r16, r22
    16a8:	00 97       	sbiw	r24, 0x00	; 0
    16aa:	31 f4       	brne	.+12     	; 0x16b8 <fdevopen+0x1c>
    16ac:	61 15       	cp	r22, r1
    16ae:	71 05       	cpc	r23, r1
    16b0:	19 f4       	brne	.+6      	; 0x16b8 <fdevopen+0x1c>
    16b2:	80 e0       	ldi	r24, 0x00	; 0
    16b4:	90 e0       	ldi	r25, 0x00	; 0
    16b6:	37 c0       	rjmp	.+110    	; 0x1726 <fdevopen+0x8a>
    16b8:	6e e0       	ldi	r22, 0x0E	; 14
    16ba:	70 e0       	ldi	r23, 0x00	; 0
    16bc:	81 e0       	ldi	r24, 0x01	; 1
    16be:	90 e0       	ldi	r25, 0x00	; 0
    16c0:	63 d2       	rcall	.+1222   	; 0x1b88 <calloc>
    16c2:	fc 01       	movw	r30, r24
    16c4:	00 97       	sbiw	r24, 0x00	; 0
    16c6:	a9 f3       	breq	.-22     	; 0x16b2 <fdevopen+0x16>
    16c8:	80 e8       	ldi	r24, 0x80	; 128
    16ca:	83 83       	std	Z+3, r24	; 0x03
    16cc:	01 15       	cp	r16, r1
    16ce:	11 05       	cpc	r17, r1
    16d0:	71 f0       	breq	.+28     	; 0x16ee <fdevopen+0x52>
    16d2:	13 87       	std	Z+11, r17	; 0x0b
    16d4:	02 87       	std	Z+10, r16	; 0x0a
    16d6:	81 e8       	ldi	r24, 0x81	; 129
    16d8:	83 83       	std	Z+3, r24	; 0x03
    16da:	80 91 8f 03 	lds	r24, 0x038F
    16de:	90 91 90 03 	lds	r25, 0x0390
    16e2:	89 2b       	or	r24, r25
    16e4:	21 f4       	brne	.+8      	; 0x16ee <fdevopen+0x52>
    16e6:	f0 93 90 03 	sts	0x0390, r31
    16ea:	e0 93 8f 03 	sts	0x038F, r30
    16ee:	20 97       	sbiw	r28, 0x00	; 0
    16f0:	c9 f0       	breq	.+50     	; 0x1724 <fdevopen+0x88>
    16f2:	d1 87       	std	Z+9, r29	; 0x09
    16f4:	c0 87       	std	Z+8, r28	; 0x08
    16f6:	83 81       	ldd	r24, Z+3	; 0x03
    16f8:	82 60       	ori	r24, 0x02	; 2
    16fa:	83 83       	std	Z+3, r24	; 0x03
    16fc:	80 91 91 03 	lds	r24, 0x0391
    1700:	90 91 92 03 	lds	r25, 0x0392
    1704:	89 2b       	or	r24, r25
    1706:	71 f4       	brne	.+28     	; 0x1724 <fdevopen+0x88>
    1708:	f0 93 92 03 	sts	0x0392, r31
    170c:	e0 93 91 03 	sts	0x0391, r30
    1710:	80 91 93 03 	lds	r24, 0x0393
    1714:	90 91 94 03 	lds	r25, 0x0394
    1718:	89 2b       	or	r24, r25
    171a:	21 f4       	brne	.+8      	; 0x1724 <fdevopen+0x88>
    171c:	f0 93 94 03 	sts	0x0394, r31
    1720:	e0 93 93 03 	sts	0x0393, r30
    1724:	cf 01       	movw	r24, r30
    1726:	df 91       	pop	r29
    1728:	cf 91       	pop	r28
    172a:	1f 91       	pop	r17
    172c:	0f 91       	pop	r16
    172e:	08 95       	ret

00001730 <printf>:
    1730:	cf 93       	push	r28
    1732:	df 93       	push	r29
    1734:	cd b7       	in	r28, 0x3d	; 61
    1736:	de b7       	in	r29, 0x3e	; 62
    1738:	fe 01       	movw	r30, r28
    173a:	36 96       	adiw	r30, 0x06	; 6
    173c:	61 91       	ld	r22, Z+
    173e:	71 91       	ld	r23, Z+
    1740:	af 01       	movw	r20, r30
    1742:	80 91 91 03 	lds	r24, 0x0391
    1746:	90 91 92 03 	lds	r25, 0x0392
    174a:	30 d0       	rcall	.+96     	; 0x17ac <vfprintf>
    174c:	df 91       	pop	r29
    174e:	cf 91       	pop	r28
    1750:	08 95       	ret

00001752 <puts>:
    1752:	0f 93       	push	r16
    1754:	1f 93       	push	r17
    1756:	cf 93       	push	r28
    1758:	df 93       	push	r29
    175a:	e0 91 91 03 	lds	r30, 0x0391
    175e:	f0 91 92 03 	lds	r31, 0x0392
    1762:	23 81       	ldd	r18, Z+3	; 0x03
    1764:	21 ff       	sbrs	r18, 1
    1766:	1b c0       	rjmp	.+54     	; 0x179e <puts+0x4c>
    1768:	ec 01       	movw	r28, r24
    176a:	00 e0       	ldi	r16, 0x00	; 0
    176c:	10 e0       	ldi	r17, 0x00	; 0
    176e:	89 91       	ld	r24, Y+
    1770:	60 91 91 03 	lds	r22, 0x0391
    1774:	70 91 92 03 	lds	r23, 0x0392
    1778:	db 01       	movw	r26, r22
    177a:	18 96       	adiw	r26, 0x08	; 8
    177c:	ed 91       	ld	r30, X+
    177e:	fc 91       	ld	r31, X
    1780:	19 97       	sbiw	r26, 0x09	; 9
    1782:	88 23       	and	r24, r24
    1784:	31 f0       	breq	.+12     	; 0x1792 <puts+0x40>
    1786:	19 95       	eicall
    1788:	89 2b       	or	r24, r25
    178a:	89 f3       	breq	.-30     	; 0x176e <puts+0x1c>
    178c:	0f ef       	ldi	r16, 0xFF	; 255
    178e:	1f ef       	ldi	r17, 0xFF	; 255
    1790:	ee cf       	rjmp	.-36     	; 0x176e <puts+0x1c>
    1792:	8a e0       	ldi	r24, 0x0A	; 10
    1794:	19 95       	eicall
    1796:	89 2b       	or	r24, r25
    1798:	11 f4       	brne	.+4      	; 0x179e <puts+0x4c>
    179a:	c8 01       	movw	r24, r16
    179c:	02 c0       	rjmp	.+4      	; 0x17a2 <puts+0x50>
    179e:	8f ef       	ldi	r24, 0xFF	; 255
    17a0:	9f ef       	ldi	r25, 0xFF	; 255
    17a2:	df 91       	pop	r29
    17a4:	cf 91       	pop	r28
    17a6:	1f 91       	pop	r17
    17a8:	0f 91       	pop	r16
    17aa:	08 95       	ret

000017ac <vfprintf>:
    17ac:	2f 92       	push	r2
    17ae:	3f 92       	push	r3
    17b0:	4f 92       	push	r4
    17b2:	5f 92       	push	r5
    17b4:	6f 92       	push	r6
    17b6:	7f 92       	push	r7
    17b8:	8f 92       	push	r8
    17ba:	9f 92       	push	r9
    17bc:	af 92       	push	r10
    17be:	bf 92       	push	r11
    17c0:	cf 92       	push	r12
    17c2:	df 92       	push	r13
    17c4:	ef 92       	push	r14
    17c6:	ff 92       	push	r15
    17c8:	0f 93       	push	r16
    17ca:	1f 93       	push	r17
    17cc:	cf 93       	push	r28
    17ce:	df 93       	push	r29
    17d0:	cd b7       	in	r28, 0x3d	; 61
    17d2:	de b7       	in	r29, 0x3e	; 62
    17d4:	2c 97       	sbiw	r28, 0x0c	; 12
    17d6:	0f b6       	in	r0, 0x3f	; 63
    17d8:	f8 94       	cli
    17da:	de bf       	out	0x3e, r29	; 62
    17dc:	0f be       	out	0x3f, r0	; 63
    17de:	cd bf       	out	0x3d, r28	; 61
    17e0:	7c 01       	movw	r14, r24
    17e2:	6b 01       	movw	r12, r22
    17e4:	8a 01       	movw	r16, r20
    17e6:	fc 01       	movw	r30, r24
    17e8:	17 82       	std	Z+7, r1	; 0x07
    17ea:	16 82       	std	Z+6, r1	; 0x06
    17ec:	83 81       	ldd	r24, Z+3	; 0x03
    17ee:	81 ff       	sbrs	r24, 1
    17f0:	b0 c1       	rjmp	.+864    	; 0x1b52 <vfprintf+0x3a6>
    17f2:	ce 01       	movw	r24, r28
    17f4:	01 96       	adiw	r24, 0x01	; 1
    17f6:	4c 01       	movw	r8, r24
    17f8:	f7 01       	movw	r30, r14
    17fa:	93 81       	ldd	r25, Z+3	; 0x03
    17fc:	f6 01       	movw	r30, r12
    17fe:	93 fd       	sbrc	r25, 3
    1800:	85 91       	lpm	r24, Z+
    1802:	93 ff       	sbrs	r25, 3
    1804:	81 91       	ld	r24, Z+
    1806:	6f 01       	movw	r12, r30
    1808:	88 23       	and	r24, r24
    180a:	09 f4       	brne	.+2      	; 0x180e <vfprintf+0x62>
    180c:	9e c1       	rjmp	.+828    	; 0x1b4a <vfprintf+0x39e>
    180e:	85 32       	cpi	r24, 0x25	; 37
    1810:	39 f4       	brne	.+14     	; 0x1820 <vfprintf+0x74>
    1812:	93 fd       	sbrc	r25, 3
    1814:	85 91       	lpm	r24, Z+
    1816:	93 ff       	sbrs	r25, 3
    1818:	81 91       	ld	r24, Z+
    181a:	6f 01       	movw	r12, r30
    181c:	85 32       	cpi	r24, 0x25	; 37
    181e:	21 f4       	brne	.+8      	; 0x1828 <vfprintf+0x7c>
    1820:	b7 01       	movw	r22, r14
    1822:	90 e0       	ldi	r25, 0x00	; 0
    1824:	0f d3       	rcall	.+1566   	; 0x1e44 <fputc>
    1826:	e8 cf       	rjmp	.-48     	; 0x17f8 <vfprintf+0x4c>
    1828:	51 2c       	mov	r5, r1
    182a:	31 2c       	mov	r3, r1
    182c:	20 e0       	ldi	r18, 0x00	; 0
    182e:	20 32       	cpi	r18, 0x20	; 32
    1830:	a0 f4       	brcc	.+40     	; 0x185a <vfprintf+0xae>
    1832:	8b 32       	cpi	r24, 0x2B	; 43
    1834:	69 f0       	breq	.+26     	; 0x1850 <vfprintf+0xa4>
    1836:	30 f4       	brcc	.+12     	; 0x1844 <vfprintf+0x98>
    1838:	80 32       	cpi	r24, 0x20	; 32
    183a:	59 f0       	breq	.+22     	; 0x1852 <vfprintf+0xa6>
    183c:	83 32       	cpi	r24, 0x23	; 35
    183e:	69 f4       	brne	.+26     	; 0x185a <vfprintf+0xae>
    1840:	20 61       	ori	r18, 0x10	; 16
    1842:	2c c0       	rjmp	.+88     	; 0x189c <vfprintf+0xf0>
    1844:	8d 32       	cpi	r24, 0x2D	; 45
    1846:	39 f0       	breq	.+14     	; 0x1856 <vfprintf+0xaa>
    1848:	80 33       	cpi	r24, 0x30	; 48
    184a:	39 f4       	brne	.+14     	; 0x185a <vfprintf+0xae>
    184c:	21 60       	ori	r18, 0x01	; 1
    184e:	26 c0       	rjmp	.+76     	; 0x189c <vfprintf+0xf0>
    1850:	22 60       	ori	r18, 0x02	; 2
    1852:	24 60       	ori	r18, 0x04	; 4
    1854:	23 c0       	rjmp	.+70     	; 0x189c <vfprintf+0xf0>
    1856:	28 60       	ori	r18, 0x08	; 8
    1858:	21 c0       	rjmp	.+66     	; 0x189c <vfprintf+0xf0>
    185a:	27 fd       	sbrc	r18, 7
    185c:	27 c0       	rjmp	.+78     	; 0x18ac <vfprintf+0x100>
    185e:	30 ed       	ldi	r19, 0xD0	; 208
    1860:	38 0f       	add	r19, r24
    1862:	3a 30       	cpi	r19, 0x0A	; 10
    1864:	78 f4       	brcc	.+30     	; 0x1884 <vfprintf+0xd8>
    1866:	26 ff       	sbrs	r18, 6
    1868:	06 c0       	rjmp	.+12     	; 0x1876 <vfprintf+0xca>
    186a:	fa e0       	ldi	r31, 0x0A	; 10
    186c:	5f 9e       	mul	r5, r31
    186e:	30 0d       	add	r19, r0
    1870:	11 24       	eor	r1, r1
    1872:	53 2e       	mov	r5, r19
    1874:	13 c0       	rjmp	.+38     	; 0x189c <vfprintf+0xf0>
    1876:	8a e0       	ldi	r24, 0x0A	; 10
    1878:	38 9e       	mul	r3, r24
    187a:	30 0d       	add	r19, r0
    187c:	11 24       	eor	r1, r1
    187e:	33 2e       	mov	r3, r19
    1880:	20 62       	ori	r18, 0x20	; 32
    1882:	0c c0       	rjmp	.+24     	; 0x189c <vfprintf+0xf0>
    1884:	8e 32       	cpi	r24, 0x2E	; 46
    1886:	21 f4       	brne	.+8      	; 0x1890 <vfprintf+0xe4>
    1888:	26 fd       	sbrc	r18, 6
    188a:	5f c1       	rjmp	.+702    	; 0x1b4a <vfprintf+0x39e>
    188c:	20 64       	ori	r18, 0x40	; 64
    188e:	06 c0       	rjmp	.+12     	; 0x189c <vfprintf+0xf0>
    1890:	8c 36       	cpi	r24, 0x6C	; 108
    1892:	11 f4       	brne	.+4      	; 0x1898 <vfprintf+0xec>
    1894:	20 68       	ori	r18, 0x80	; 128
    1896:	02 c0       	rjmp	.+4      	; 0x189c <vfprintf+0xf0>
    1898:	88 36       	cpi	r24, 0x68	; 104
    189a:	41 f4       	brne	.+16     	; 0x18ac <vfprintf+0x100>
    189c:	f6 01       	movw	r30, r12
    189e:	93 fd       	sbrc	r25, 3
    18a0:	85 91       	lpm	r24, Z+
    18a2:	93 ff       	sbrs	r25, 3
    18a4:	81 91       	ld	r24, Z+
    18a6:	6f 01       	movw	r12, r30
    18a8:	81 11       	cpse	r24, r1
    18aa:	c1 cf       	rjmp	.-126    	; 0x182e <vfprintf+0x82>
    18ac:	98 2f       	mov	r25, r24
    18ae:	9f 7d       	andi	r25, 0xDF	; 223
    18b0:	95 54       	subi	r25, 0x45	; 69
    18b2:	93 30       	cpi	r25, 0x03	; 3
    18b4:	28 f4       	brcc	.+10     	; 0x18c0 <vfprintf+0x114>
    18b6:	0c 5f       	subi	r16, 0xFC	; 252
    18b8:	1f 4f       	sbci	r17, 0xFF	; 255
    18ba:	ff e3       	ldi	r31, 0x3F	; 63
    18bc:	f9 83       	std	Y+1, r31	; 0x01
    18be:	0d c0       	rjmp	.+26     	; 0x18da <vfprintf+0x12e>
    18c0:	83 36       	cpi	r24, 0x63	; 99
    18c2:	31 f0       	breq	.+12     	; 0x18d0 <vfprintf+0x124>
    18c4:	83 37       	cpi	r24, 0x73	; 115
    18c6:	71 f0       	breq	.+28     	; 0x18e4 <vfprintf+0x138>
    18c8:	83 35       	cpi	r24, 0x53	; 83
    18ca:	09 f0       	breq	.+2      	; 0x18ce <vfprintf+0x122>
    18cc:	57 c0       	rjmp	.+174    	; 0x197c <vfprintf+0x1d0>
    18ce:	21 c0       	rjmp	.+66     	; 0x1912 <vfprintf+0x166>
    18d0:	f8 01       	movw	r30, r16
    18d2:	80 81       	ld	r24, Z
    18d4:	89 83       	std	Y+1, r24	; 0x01
    18d6:	0e 5f       	subi	r16, 0xFE	; 254
    18d8:	1f 4f       	sbci	r17, 0xFF	; 255
    18da:	44 24       	eor	r4, r4
    18dc:	43 94       	inc	r4
    18de:	51 2c       	mov	r5, r1
    18e0:	54 01       	movw	r10, r8
    18e2:	14 c0       	rjmp	.+40     	; 0x190c <vfprintf+0x160>
    18e4:	38 01       	movw	r6, r16
    18e6:	f2 e0       	ldi	r31, 0x02	; 2
    18e8:	6f 0e       	add	r6, r31
    18ea:	71 1c       	adc	r7, r1
    18ec:	f8 01       	movw	r30, r16
    18ee:	a0 80       	ld	r10, Z
    18f0:	b1 80       	ldd	r11, Z+1	; 0x01
    18f2:	26 ff       	sbrs	r18, 6
    18f4:	03 c0       	rjmp	.+6      	; 0x18fc <vfprintf+0x150>
    18f6:	65 2d       	mov	r22, r5
    18f8:	70 e0       	ldi	r23, 0x00	; 0
    18fa:	02 c0       	rjmp	.+4      	; 0x1900 <vfprintf+0x154>
    18fc:	6f ef       	ldi	r22, 0xFF	; 255
    18fe:	7f ef       	ldi	r23, 0xFF	; 255
    1900:	c5 01       	movw	r24, r10
    1902:	2c 87       	std	Y+12, r18	; 0x0c
    1904:	94 d2       	rcall	.+1320   	; 0x1e2e <strnlen>
    1906:	2c 01       	movw	r4, r24
    1908:	83 01       	movw	r16, r6
    190a:	2c 85       	ldd	r18, Y+12	; 0x0c
    190c:	2f 77       	andi	r18, 0x7F	; 127
    190e:	22 2e       	mov	r2, r18
    1910:	16 c0       	rjmp	.+44     	; 0x193e <vfprintf+0x192>
    1912:	38 01       	movw	r6, r16
    1914:	f2 e0       	ldi	r31, 0x02	; 2
    1916:	6f 0e       	add	r6, r31
    1918:	71 1c       	adc	r7, r1
    191a:	f8 01       	movw	r30, r16
    191c:	a0 80       	ld	r10, Z
    191e:	b1 80       	ldd	r11, Z+1	; 0x01
    1920:	26 ff       	sbrs	r18, 6
    1922:	03 c0       	rjmp	.+6      	; 0x192a <vfprintf+0x17e>
    1924:	65 2d       	mov	r22, r5
    1926:	70 e0       	ldi	r23, 0x00	; 0
    1928:	02 c0       	rjmp	.+4      	; 0x192e <vfprintf+0x182>
    192a:	6f ef       	ldi	r22, 0xFF	; 255
    192c:	7f ef       	ldi	r23, 0xFF	; 255
    192e:	c5 01       	movw	r24, r10
    1930:	2c 87       	std	Y+12, r18	; 0x0c
    1932:	6b d2       	rcall	.+1238   	; 0x1e0a <strnlen_P>
    1934:	2c 01       	movw	r4, r24
    1936:	2c 85       	ldd	r18, Y+12	; 0x0c
    1938:	20 68       	ori	r18, 0x80	; 128
    193a:	22 2e       	mov	r2, r18
    193c:	83 01       	movw	r16, r6
    193e:	23 fc       	sbrc	r2, 3
    1940:	19 c0       	rjmp	.+50     	; 0x1974 <vfprintf+0x1c8>
    1942:	83 2d       	mov	r24, r3
    1944:	90 e0       	ldi	r25, 0x00	; 0
    1946:	48 16       	cp	r4, r24
    1948:	59 06       	cpc	r5, r25
    194a:	a0 f4       	brcc	.+40     	; 0x1974 <vfprintf+0x1c8>
    194c:	b7 01       	movw	r22, r14
    194e:	80 e2       	ldi	r24, 0x20	; 32
    1950:	90 e0       	ldi	r25, 0x00	; 0
    1952:	78 d2       	rcall	.+1264   	; 0x1e44 <fputc>
    1954:	3a 94       	dec	r3
    1956:	f5 cf       	rjmp	.-22     	; 0x1942 <vfprintf+0x196>
    1958:	f5 01       	movw	r30, r10
    195a:	27 fc       	sbrc	r2, 7
    195c:	85 91       	lpm	r24, Z+
    195e:	27 fe       	sbrs	r2, 7
    1960:	81 91       	ld	r24, Z+
    1962:	5f 01       	movw	r10, r30
    1964:	b7 01       	movw	r22, r14
    1966:	90 e0       	ldi	r25, 0x00	; 0
    1968:	6d d2       	rcall	.+1242   	; 0x1e44 <fputc>
    196a:	31 10       	cpse	r3, r1
    196c:	3a 94       	dec	r3
    196e:	f1 e0       	ldi	r31, 0x01	; 1
    1970:	4f 1a       	sub	r4, r31
    1972:	51 08       	sbc	r5, r1
    1974:	41 14       	cp	r4, r1
    1976:	51 04       	cpc	r5, r1
    1978:	79 f7       	brne	.-34     	; 0x1958 <vfprintf+0x1ac>
    197a:	de c0       	rjmp	.+444    	; 0x1b38 <vfprintf+0x38c>
    197c:	84 36       	cpi	r24, 0x64	; 100
    197e:	11 f0       	breq	.+4      	; 0x1984 <vfprintf+0x1d8>
    1980:	89 36       	cpi	r24, 0x69	; 105
    1982:	31 f5       	brne	.+76     	; 0x19d0 <vfprintf+0x224>
    1984:	f8 01       	movw	r30, r16
    1986:	27 ff       	sbrs	r18, 7
    1988:	07 c0       	rjmp	.+14     	; 0x1998 <vfprintf+0x1ec>
    198a:	60 81       	ld	r22, Z
    198c:	71 81       	ldd	r23, Z+1	; 0x01
    198e:	82 81       	ldd	r24, Z+2	; 0x02
    1990:	93 81       	ldd	r25, Z+3	; 0x03
    1992:	0c 5f       	subi	r16, 0xFC	; 252
    1994:	1f 4f       	sbci	r17, 0xFF	; 255
    1996:	08 c0       	rjmp	.+16     	; 0x19a8 <vfprintf+0x1fc>
    1998:	60 81       	ld	r22, Z
    199a:	71 81       	ldd	r23, Z+1	; 0x01
    199c:	88 27       	eor	r24, r24
    199e:	77 fd       	sbrc	r23, 7
    19a0:	80 95       	com	r24
    19a2:	98 2f       	mov	r25, r24
    19a4:	0e 5f       	subi	r16, 0xFE	; 254
    19a6:	1f 4f       	sbci	r17, 0xFF	; 255
    19a8:	2f 76       	andi	r18, 0x6F	; 111
    19aa:	b2 2e       	mov	r11, r18
    19ac:	97 ff       	sbrs	r25, 7
    19ae:	09 c0       	rjmp	.+18     	; 0x19c2 <vfprintf+0x216>
    19b0:	90 95       	com	r25
    19b2:	80 95       	com	r24
    19b4:	70 95       	com	r23
    19b6:	61 95       	neg	r22
    19b8:	7f 4f       	sbci	r23, 0xFF	; 255
    19ba:	8f 4f       	sbci	r24, 0xFF	; 255
    19bc:	9f 4f       	sbci	r25, 0xFF	; 255
    19be:	20 68       	ori	r18, 0x80	; 128
    19c0:	b2 2e       	mov	r11, r18
    19c2:	2a e0       	ldi	r18, 0x0A	; 10
    19c4:	30 e0       	ldi	r19, 0x00	; 0
    19c6:	a4 01       	movw	r20, r8
    19c8:	6f d2       	rcall	.+1246   	; 0x1ea8 <__ultoa_invert>
    19ca:	a8 2e       	mov	r10, r24
    19cc:	a8 18       	sub	r10, r8
    19ce:	43 c0       	rjmp	.+134    	; 0x1a56 <vfprintf+0x2aa>
    19d0:	85 37       	cpi	r24, 0x75	; 117
    19d2:	29 f4       	brne	.+10     	; 0x19de <vfprintf+0x232>
    19d4:	2f 7e       	andi	r18, 0xEF	; 239
    19d6:	b2 2e       	mov	r11, r18
    19d8:	2a e0       	ldi	r18, 0x0A	; 10
    19da:	30 e0       	ldi	r19, 0x00	; 0
    19dc:	25 c0       	rjmp	.+74     	; 0x1a28 <vfprintf+0x27c>
    19de:	f2 2f       	mov	r31, r18
    19e0:	f9 7f       	andi	r31, 0xF9	; 249
    19e2:	bf 2e       	mov	r11, r31
    19e4:	8f 36       	cpi	r24, 0x6F	; 111
    19e6:	c1 f0       	breq	.+48     	; 0x1a18 <vfprintf+0x26c>
    19e8:	18 f4       	brcc	.+6      	; 0x19f0 <vfprintf+0x244>
    19ea:	88 35       	cpi	r24, 0x58	; 88
    19ec:	79 f0       	breq	.+30     	; 0x1a0c <vfprintf+0x260>
    19ee:	ad c0       	rjmp	.+346    	; 0x1b4a <vfprintf+0x39e>
    19f0:	80 37       	cpi	r24, 0x70	; 112
    19f2:	19 f0       	breq	.+6      	; 0x19fa <vfprintf+0x24e>
    19f4:	88 37       	cpi	r24, 0x78	; 120
    19f6:	21 f0       	breq	.+8      	; 0x1a00 <vfprintf+0x254>
    19f8:	a8 c0       	rjmp	.+336    	; 0x1b4a <vfprintf+0x39e>
    19fa:	2f 2f       	mov	r18, r31
    19fc:	20 61       	ori	r18, 0x10	; 16
    19fe:	b2 2e       	mov	r11, r18
    1a00:	b4 fe       	sbrs	r11, 4
    1a02:	0d c0       	rjmp	.+26     	; 0x1a1e <vfprintf+0x272>
    1a04:	8b 2d       	mov	r24, r11
    1a06:	84 60       	ori	r24, 0x04	; 4
    1a08:	b8 2e       	mov	r11, r24
    1a0a:	09 c0       	rjmp	.+18     	; 0x1a1e <vfprintf+0x272>
    1a0c:	24 ff       	sbrs	r18, 4
    1a0e:	0a c0       	rjmp	.+20     	; 0x1a24 <vfprintf+0x278>
    1a10:	9f 2f       	mov	r25, r31
    1a12:	96 60       	ori	r25, 0x06	; 6
    1a14:	b9 2e       	mov	r11, r25
    1a16:	06 c0       	rjmp	.+12     	; 0x1a24 <vfprintf+0x278>
    1a18:	28 e0       	ldi	r18, 0x08	; 8
    1a1a:	30 e0       	ldi	r19, 0x00	; 0
    1a1c:	05 c0       	rjmp	.+10     	; 0x1a28 <vfprintf+0x27c>
    1a1e:	20 e1       	ldi	r18, 0x10	; 16
    1a20:	30 e0       	ldi	r19, 0x00	; 0
    1a22:	02 c0       	rjmp	.+4      	; 0x1a28 <vfprintf+0x27c>
    1a24:	20 e1       	ldi	r18, 0x10	; 16
    1a26:	32 e0       	ldi	r19, 0x02	; 2
    1a28:	f8 01       	movw	r30, r16
    1a2a:	b7 fe       	sbrs	r11, 7
    1a2c:	07 c0       	rjmp	.+14     	; 0x1a3c <vfprintf+0x290>
    1a2e:	60 81       	ld	r22, Z
    1a30:	71 81       	ldd	r23, Z+1	; 0x01
    1a32:	82 81       	ldd	r24, Z+2	; 0x02
    1a34:	93 81       	ldd	r25, Z+3	; 0x03
    1a36:	0c 5f       	subi	r16, 0xFC	; 252
    1a38:	1f 4f       	sbci	r17, 0xFF	; 255
    1a3a:	06 c0       	rjmp	.+12     	; 0x1a48 <vfprintf+0x29c>
    1a3c:	60 81       	ld	r22, Z
    1a3e:	71 81       	ldd	r23, Z+1	; 0x01
    1a40:	80 e0       	ldi	r24, 0x00	; 0
    1a42:	90 e0       	ldi	r25, 0x00	; 0
    1a44:	0e 5f       	subi	r16, 0xFE	; 254
    1a46:	1f 4f       	sbci	r17, 0xFF	; 255
    1a48:	a4 01       	movw	r20, r8
    1a4a:	2e d2       	rcall	.+1116   	; 0x1ea8 <__ultoa_invert>
    1a4c:	a8 2e       	mov	r10, r24
    1a4e:	a8 18       	sub	r10, r8
    1a50:	fb 2d       	mov	r31, r11
    1a52:	ff 77       	andi	r31, 0x7F	; 127
    1a54:	bf 2e       	mov	r11, r31
    1a56:	b6 fe       	sbrs	r11, 6
    1a58:	0b c0       	rjmp	.+22     	; 0x1a70 <vfprintf+0x2c4>
    1a5a:	2b 2d       	mov	r18, r11
    1a5c:	2e 7f       	andi	r18, 0xFE	; 254
    1a5e:	a5 14       	cp	r10, r5
    1a60:	50 f4       	brcc	.+20     	; 0x1a76 <vfprintf+0x2ca>
    1a62:	b4 fe       	sbrs	r11, 4
    1a64:	0a c0       	rjmp	.+20     	; 0x1a7a <vfprintf+0x2ce>
    1a66:	b2 fc       	sbrc	r11, 2
    1a68:	08 c0       	rjmp	.+16     	; 0x1a7a <vfprintf+0x2ce>
    1a6a:	2b 2d       	mov	r18, r11
    1a6c:	2e 7e       	andi	r18, 0xEE	; 238
    1a6e:	05 c0       	rjmp	.+10     	; 0x1a7a <vfprintf+0x2ce>
    1a70:	7a 2c       	mov	r7, r10
    1a72:	2b 2d       	mov	r18, r11
    1a74:	03 c0       	rjmp	.+6      	; 0x1a7c <vfprintf+0x2d0>
    1a76:	7a 2c       	mov	r7, r10
    1a78:	01 c0       	rjmp	.+2      	; 0x1a7c <vfprintf+0x2d0>
    1a7a:	75 2c       	mov	r7, r5
    1a7c:	24 ff       	sbrs	r18, 4
    1a7e:	0d c0       	rjmp	.+26     	; 0x1a9a <vfprintf+0x2ee>
    1a80:	fe 01       	movw	r30, r28
    1a82:	ea 0d       	add	r30, r10
    1a84:	f1 1d       	adc	r31, r1
    1a86:	80 81       	ld	r24, Z
    1a88:	80 33       	cpi	r24, 0x30	; 48
    1a8a:	11 f4       	brne	.+4      	; 0x1a90 <vfprintf+0x2e4>
    1a8c:	29 7e       	andi	r18, 0xE9	; 233
    1a8e:	09 c0       	rjmp	.+18     	; 0x1aa2 <vfprintf+0x2f6>
    1a90:	22 ff       	sbrs	r18, 2
    1a92:	06 c0       	rjmp	.+12     	; 0x1aa0 <vfprintf+0x2f4>
    1a94:	73 94       	inc	r7
    1a96:	73 94       	inc	r7
    1a98:	04 c0       	rjmp	.+8      	; 0x1aa2 <vfprintf+0x2f6>
    1a9a:	82 2f       	mov	r24, r18
    1a9c:	86 78       	andi	r24, 0x86	; 134
    1a9e:	09 f0       	breq	.+2      	; 0x1aa2 <vfprintf+0x2f6>
    1aa0:	73 94       	inc	r7
    1aa2:	23 fd       	sbrc	r18, 3
    1aa4:	12 c0       	rjmp	.+36     	; 0x1aca <vfprintf+0x31e>
    1aa6:	20 ff       	sbrs	r18, 0
    1aa8:	06 c0       	rjmp	.+12     	; 0x1ab6 <vfprintf+0x30a>
    1aaa:	5a 2c       	mov	r5, r10
    1aac:	73 14       	cp	r7, r3
    1aae:	18 f4       	brcc	.+6      	; 0x1ab6 <vfprintf+0x30a>
    1ab0:	53 0c       	add	r5, r3
    1ab2:	57 18       	sub	r5, r7
    1ab4:	73 2c       	mov	r7, r3
    1ab6:	73 14       	cp	r7, r3
    1ab8:	60 f4       	brcc	.+24     	; 0x1ad2 <vfprintf+0x326>
    1aba:	b7 01       	movw	r22, r14
    1abc:	80 e2       	ldi	r24, 0x20	; 32
    1abe:	90 e0       	ldi	r25, 0x00	; 0
    1ac0:	2c 87       	std	Y+12, r18	; 0x0c
    1ac2:	c0 d1       	rcall	.+896    	; 0x1e44 <fputc>
    1ac4:	73 94       	inc	r7
    1ac6:	2c 85       	ldd	r18, Y+12	; 0x0c
    1ac8:	f6 cf       	rjmp	.-20     	; 0x1ab6 <vfprintf+0x30a>
    1aca:	73 14       	cp	r7, r3
    1acc:	10 f4       	brcc	.+4      	; 0x1ad2 <vfprintf+0x326>
    1ace:	37 18       	sub	r3, r7
    1ad0:	01 c0       	rjmp	.+2      	; 0x1ad4 <vfprintf+0x328>
    1ad2:	31 2c       	mov	r3, r1
    1ad4:	24 ff       	sbrs	r18, 4
    1ad6:	11 c0       	rjmp	.+34     	; 0x1afa <vfprintf+0x34e>
    1ad8:	b7 01       	movw	r22, r14
    1ada:	80 e3       	ldi	r24, 0x30	; 48
    1adc:	90 e0       	ldi	r25, 0x00	; 0
    1ade:	2c 87       	std	Y+12, r18	; 0x0c
    1ae0:	b1 d1       	rcall	.+866    	; 0x1e44 <fputc>
    1ae2:	2c 85       	ldd	r18, Y+12	; 0x0c
    1ae4:	22 ff       	sbrs	r18, 2
    1ae6:	16 c0       	rjmp	.+44     	; 0x1b14 <vfprintf+0x368>
    1ae8:	21 ff       	sbrs	r18, 1
    1aea:	03 c0       	rjmp	.+6      	; 0x1af2 <vfprintf+0x346>
    1aec:	88 e5       	ldi	r24, 0x58	; 88
    1aee:	90 e0       	ldi	r25, 0x00	; 0
    1af0:	02 c0       	rjmp	.+4      	; 0x1af6 <vfprintf+0x34a>
    1af2:	88 e7       	ldi	r24, 0x78	; 120
    1af4:	90 e0       	ldi	r25, 0x00	; 0
    1af6:	b7 01       	movw	r22, r14
    1af8:	0c c0       	rjmp	.+24     	; 0x1b12 <vfprintf+0x366>
    1afa:	82 2f       	mov	r24, r18
    1afc:	86 78       	andi	r24, 0x86	; 134
    1afe:	51 f0       	breq	.+20     	; 0x1b14 <vfprintf+0x368>
    1b00:	21 fd       	sbrc	r18, 1
    1b02:	02 c0       	rjmp	.+4      	; 0x1b08 <vfprintf+0x35c>
    1b04:	80 e2       	ldi	r24, 0x20	; 32
    1b06:	01 c0       	rjmp	.+2      	; 0x1b0a <vfprintf+0x35e>
    1b08:	8b e2       	ldi	r24, 0x2B	; 43
    1b0a:	27 fd       	sbrc	r18, 7
    1b0c:	8d e2       	ldi	r24, 0x2D	; 45
    1b0e:	b7 01       	movw	r22, r14
    1b10:	90 e0       	ldi	r25, 0x00	; 0
    1b12:	98 d1       	rcall	.+816    	; 0x1e44 <fputc>
    1b14:	a5 14       	cp	r10, r5
    1b16:	30 f4       	brcc	.+12     	; 0x1b24 <vfprintf+0x378>
    1b18:	b7 01       	movw	r22, r14
    1b1a:	80 e3       	ldi	r24, 0x30	; 48
    1b1c:	90 e0       	ldi	r25, 0x00	; 0
    1b1e:	92 d1       	rcall	.+804    	; 0x1e44 <fputc>
    1b20:	5a 94       	dec	r5
    1b22:	f8 cf       	rjmp	.-16     	; 0x1b14 <vfprintf+0x368>
    1b24:	aa 94       	dec	r10
    1b26:	f4 01       	movw	r30, r8
    1b28:	ea 0d       	add	r30, r10
    1b2a:	f1 1d       	adc	r31, r1
    1b2c:	80 81       	ld	r24, Z
    1b2e:	b7 01       	movw	r22, r14
    1b30:	90 e0       	ldi	r25, 0x00	; 0
    1b32:	88 d1       	rcall	.+784    	; 0x1e44 <fputc>
    1b34:	a1 10       	cpse	r10, r1
    1b36:	f6 cf       	rjmp	.-20     	; 0x1b24 <vfprintf+0x378>
    1b38:	33 20       	and	r3, r3
    1b3a:	09 f4       	brne	.+2      	; 0x1b3e <vfprintf+0x392>
    1b3c:	5d ce       	rjmp	.-838    	; 0x17f8 <vfprintf+0x4c>
    1b3e:	b7 01       	movw	r22, r14
    1b40:	80 e2       	ldi	r24, 0x20	; 32
    1b42:	90 e0       	ldi	r25, 0x00	; 0
    1b44:	7f d1       	rcall	.+766    	; 0x1e44 <fputc>
    1b46:	3a 94       	dec	r3
    1b48:	f7 cf       	rjmp	.-18     	; 0x1b38 <vfprintf+0x38c>
    1b4a:	f7 01       	movw	r30, r14
    1b4c:	86 81       	ldd	r24, Z+6	; 0x06
    1b4e:	97 81       	ldd	r25, Z+7	; 0x07
    1b50:	02 c0       	rjmp	.+4      	; 0x1b56 <vfprintf+0x3aa>
    1b52:	8f ef       	ldi	r24, 0xFF	; 255
    1b54:	9f ef       	ldi	r25, 0xFF	; 255
    1b56:	2c 96       	adiw	r28, 0x0c	; 12
    1b58:	0f b6       	in	r0, 0x3f	; 63
    1b5a:	f8 94       	cli
    1b5c:	de bf       	out	0x3e, r29	; 62
    1b5e:	0f be       	out	0x3f, r0	; 63
    1b60:	cd bf       	out	0x3d, r28	; 61
    1b62:	df 91       	pop	r29
    1b64:	cf 91       	pop	r28
    1b66:	1f 91       	pop	r17
    1b68:	0f 91       	pop	r16
    1b6a:	ff 90       	pop	r15
    1b6c:	ef 90       	pop	r14
    1b6e:	df 90       	pop	r13
    1b70:	cf 90       	pop	r12
    1b72:	bf 90       	pop	r11
    1b74:	af 90       	pop	r10
    1b76:	9f 90       	pop	r9
    1b78:	8f 90       	pop	r8
    1b7a:	7f 90       	pop	r7
    1b7c:	6f 90       	pop	r6
    1b7e:	5f 90       	pop	r5
    1b80:	4f 90       	pop	r4
    1b82:	3f 90       	pop	r3
    1b84:	2f 90       	pop	r2
    1b86:	08 95       	ret

00001b88 <calloc>:
    1b88:	0f 93       	push	r16
    1b8a:	1f 93       	push	r17
    1b8c:	cf 93       	push	r28
    1b8e:	df 93       	push	r29
    1b90:	86 9f       	mul	r24, r22
    1b92:	80 01       	movw	r16, r0
    1b94:	87 9f       	mul	r24, r23
    1b96:	10 0d       	add	r17, r0
    1b98:	96 9f       	mul	r25, r22
    1b9a:	10 0d       	add	r17, r0
    1b9c:	11 24       	eor	r1, r1
    1b9e:	c8 01       	movw	r24, r16
    1ba0:	0d d0       	rcall	.+26     	; 0x1bbc <malloc>
    1ba2:	ec 01       	movw	r28, r24
    1ba4:	00 97       	sbiw	r24, 0x00	; 0
    1ba6:	21 f0       	breq	.+8      	; 0x1bb0 <calloc+0x28>
    1ba8:	a8 01       	movw	r20, r16
    1baa:	60 e0       	ldi	r22, 0x00	; 0
    1bac:	70 e0       	ldi	r23, 0x00	; 0
    1bae:	38 d1       	rcall	.+624    	; 0x1e20 <memset>
    1bb0:	ce 01       	movw	r24, r28
    1bb2:	df 91       	pop	r29
    1bb4:	cf 91       	pop	r28
    1bb6:	1f 91       	pop	r17
    1bb8:	0f 91       	pop	r16
    1bba:	08 95       	ret

00001bbc <malloc>:
    1bbc:	cf 93       	push	r28
    1bbe:	df 93       	push	r29
    1bc0:	82 30       	cpi	r24, 0x02	; 2
    1bc2:	91 05       	cpc	r25, r1
    1bc4:	10 f4       	brcc	.+4      	; 0x1bca <malloc+0xe>
    1bc6:	82 e0       	ldi	r24, 0x02	; 2
    1bc8:	90 e0       	ldi	r25, 0x00	; 0
    1bca:	e0 91 97 03 	lds	r30, 0x0397
    1bce:	f0 91 98 03 	lds	r31, 0x0398
    1bd2:	20 e0       	ldi	r18, 0x00	; 0
    1bd4:	30 e0       	ldi	r19, 0x00	; 0
    1bd6:	a0 e0       	ldi	r26, 0x00	; 0
    1bd8:	b0 e0       	ldi	r27, 0x00	; 0
    1bda:	30 97       	sbiw	r30, 0x00	; 0
    1bdc:	39 f1       	breq	.+78     	; 0x1c2c <malloc+0x70>
    1bde:	40 81       	ld	r20, Z
    1be0:	51 81       	ldd	r21, Z+1	; 0x01
    1be2:	48 17       	cp	r20, r24
    1be4:	59 07       	cpc	r21, r25
    1be6:	b8 f0       	brcs	.+46     	; 0x1c16 <malloc+0x5a>
    1be8:	48 17       	cp	r20, r24
    1bea:	59 07       	cpc	r21, r25
    1bec:	71 f4       	brne	.+28     	; 0x1c0a <malloc+0x4e>
    1bee:	82 81       	ldd	r24, Z+2	; 0x02
    1bf0:	93 81       	ldd	r25, Z+3	; 0x03
    1bf2:	10 97       	sbiw	r26, 0x00	; 0
    1bf4:	29 f0       	breq	.+10     	; 0x1c00 <malloc+0x44>
    1bf6:	13 96       	adiw	r26, 0x03	; 3
    1bf8:	9c 93       	st	X, r25
    1bfa:	8e 93       	st	-X, r24
    1bfc:	12 97       	sbiw	r26, 0x02	; 2
    1bfe:	2c c0       	rjmp	.+88     	; 0x1c58 <malloc+0x9c>
    1c00:	90 93 98 03 	sts	0x0398, r25
    1c04:	80 93 97 03 	sts	0x0397, r24
    1c08:	27 c0       	rjmp	.+78     	; 0x1c58 <malloc+0x9c>
    1c0a:	21 15       	cp	r18, r1
    1c0c:	31 05       	cpc	r19, r1
    1c0e:	31 f0       	breq	.+12     	; 0x1c1c <malloc+0x60>
    1c10:	42 17       	cp	r20, r18
    1c12:	53 07       	cpc	r21, r19
    1c14:	18 f0       	brcs	.+6      	; 0x1c1c <malloc+0x60>
    1c16:	a9 01       	movw	r20, r18
    1c18:	db 01       	movw	r26, r22
    1c1a:	01 c0       	rjmp	.+2      	; 0x1c1e <malloc+0x62>
    1c1c:	ef 01       	movw	r28, r30
    1c1e:	9a 01       	movw	r18, r20
    1c20:	bd 01       	movw	r22, r26
    1c22:	df 01       	movw	r26, r30
    1c24:	02 80       	ldd	r0, Z+2	; 0x02
    1c26:	f3 81       	ldd	r31, Z+3	; 0x03
    1c28:	e0 2d       	mov	r30, r0
    1c2a:	d7 cf       	rjmp	.-82     	; 0x1bda <malloc+0x1e>
    1c2c:	21 15       	cp	r18, r1
    1c2e:	31 05       	cpc	r19, r1
    1c30:	f9 f0       	breq	.+62     	; 0x1c70 <malloc+0xb4>
    1c32:	28 1b       	sub	r18, r24
    1c34:	39 0b       	sbc	r19, r25
    1c36:	24 30       	cpi	r18, 0x04	; 4
    1c38:	31 05       	cpc	r19, r1
    1c3a:	80 f4       	brcc	.+32     	; 0x1c5c <malloc+0xa0>
    1c3c:	8a 81       	ldd	r24, Y+2	; 0x02
    1c3e:	9b 81       	ldd	r25, Y+3	; 0x03
    1c40:	61 15       	cp	r22, r1
    1c42:	71 05       	cpc	r23, r1
    1c44:	21 f0       	breq	.+8      	; 0x1c4e <malloc+0x92>
    1c46:	fb 01       	movw	r30, r22
    1c48:	93 83       	std	Z+3, r25	; 0x03
    1c4a:	82 83       	std	Z+2, r24	; 0x02
    1c4c:	04 c0       	rjmp	.+8      	; 0x1c56 <malloc+0x9a>
    1c4e:	90 93 98 03 	sts	0x0398, r25
    1c52:	80 93 97 03 	sts	0x0397, r24
    1c56:	fe 01       	movw	r30, r28
    1c58:	32 96       	adiw	r30, 0x02	; 2
    1c5a:	44 c0       	rjmp	.+136    	; 0x1ce4 <malloc+0x128>
    1c5c:	fe 01       	movw	r30, r28
    1c5e:	e2 0f       	add	r30, r18
    1c60:	f3 1f       	adc	r31, r19
    1c62:	81 93       	st	Z+, r24
    1c64:	91 93       	st	Z+, r25
    1c66:	22 50       	subi	r18, 0x02	; 2
    1c68:	31 09       	sbc	r19, r1
    1c6a:	39 83       	std	Y+1, r19	; 0x01
    1c6c:	28 83       	st	Y, r18
    1c6e:	3a c0       	rjmp	.+116    	; 0x1ce4 <malloc+0x128>
    1c70:	20 91 95 03 	lds	r18, 0x0395
    1c74:	30 91 96 03 	lds	r19, 0x0396
    1c78:	23 2b       	or	r18, r19
    1c7a:	41 f4       	brne	.+16     	; 0x1c8c <malloc+0xd0>
    1c7c:	20 91 02 02 	lds	r18, 0x0202
    1c80:	30 91 03 02 	lds	r19, 0x0203
    1c84:	30 93 96 03 	sts	0x0396, r19
    1c88:	20 93 95 03 	sts	0x0395, r18
    1c8c:	20 91 00 02 	lds	r18, 0x0200
    1c90:	30 91 01 02 	lds	r19, 0x0201
    1c94:	21 15       	cp	r18, r1
    1c96:	31 05       	cpc	r19, r1
    1c98:	41 f4       	brne	.+16     	; 0x1caa <malloc+0xee>
    1c9a:	2d b7       	in	r18, 0x3d	; 61
    1c9c:	3e b7       	in	r19, 0x3e	; 62
    1c9e:	40 91 04 02 	lds	r20, 0x0204
    1ca2:	50 91 05 02 	lds	r21, 0x0205
    1ca6:	24 1b       	sub	r18, r20
    1ca8:	35 0b       	sbc	r19, r21
    1caa:	e0 91 95 03 	lds	r30, 0x0395
    1cae:	f0 91 96 03 	lds	r31, 0x0396
    1cb2:	e2 17       	cp	r30, r18
    1cb4:	f3 07       	cpc	r31, r19
    1cb6:	a0 f4       	brcc	.+40     	; 0x1ce0 <malloc+0x124>
    1cb8:	2e 1b       	sub	r18, r30
    1cba:	3f 0b       	sbc	r19, r31
    1cbc:	28 17       	cp	r18, r24
    1cbe:	39 07       	cpc	r19, r25
    1cc0:	78 f0       	brcs	.+30     	; 0x1ce0 <malloc+0x124>
    1cc2:	ac 01       	movw	r20, r24
    1cc4:	4e 5f       	subi	r20, 0xFE	; 254
    1cc6:	5f 4f       	sbci	r21, 0xFF	; 255
    1cc8:	24 17       	cp	r18, r20
    1cca:	35 07       	cpc	r19, r21
    1ccc:	48 f0       	brcs	.+18     	; 0x1ce0 <malloc+0x124>
    1cce:	4e 0f       	add	r20, r30
    1cd0:	5f 1f       	adc	r21, r31
    1cd2:	50 93 96 03 	sts	0x0396, r21
    1cd6:	40 93 95 03 	sts	0x0395, r20
    1cda:	81 93       	st	Z+, r24
    1cdc:	91 93       	st	Z+, r25
    1cde:	02 c0       	rjmp	.+4      	; 0x1ce4 <malloc+0x128>
    1ce0:	e0 e0       	ldi	r30, 0x00	; 0
    1ce2:	f0 e0       	ldi	r31, 0x00	; 0
    1ce4:	cf 01       	movw	r24, r30
    1ce6:	df 91       	pop	r29
    1ce8:	cf 91       	pop	r28
    1cea:	08 95       	ret

00001cec <free>:
    1cec:	cf 93       	push	r28
    1cee:	df 93       	push	r29
    1cf0:	00 97       	sbiw	r24, 0x00	; 0
    1cf2:	09 f4       	brne	.+2      	; 0x1cf6 <free+0xa>
    1cf4:	87 c0       	rjmp	.+270    	; 0x1e04 <free+0x118>
    1cf6:	fc 01       	movw	r30, r24
    1cf8:	32 97       	sbiw	r30, 0x02	; 2
    1cfa:	13 82       	std	Z+3, r1	; 0x03
    1cfc:	12 82       	std	Z+2, r1	; 0x02
    1cfe:	c0 91 97 03 	lds	r28, 0x0397
    1d02:	d0 91 98 03 	lds	r29, 0x0398
    1d06:	20 97       	sbiw	r28, 0x00	; 0
    1d08:	81 f4       	brne	.+32     	; 0x1d2a <free+0x3e>
    1d0a:	20 81       	ld	r18, Z
    1d0c:	31 81       	ldd	r19, Z+1	; 0x01
    1d0e:	28 0f       	add	r18, r24
    1d10:	39 1f       	adc	r19, r25
    1d12:	80 91 95 03 	lds	r24, 0x0395
    1d16:	90 91 96 03 	lds	r25, 0x0396
    1d1a:	82 17       	cp	r24, r18
    1d1c:	93 07       	cpc	r25, r19
    1d1e:	79 f5       	brne	.+94     	; 0x1d7e <free+0x92>
    1d20:	f0 93 96 03 	sts	0x0396, r31
    1d24:	e0 93 95 03 	sts	0x0395, r30
    1d28:	6d c0       	rjmp	.+218    	; 0x1e04 <free+0x118>
    1d2a:	de 01       	movw	r26, r28
    1d2c:	20 e0       	ldi	r18, 0x00	; 0
    1d2e:	30 e0       	ldi	r19, 0x00	; 0
    1d30:	ae 17       	cp	r26, r30
    1d32:	bf 07       	cpc	r27, r31
    1d34:	50 f4       	brcc	.+20     	; 0x1d4a <free+0x5e>
    1d36:	12 96       	adiw	r26, 0x02	; 2
    1d38:	4d 91       	ld	r20, X+
    1d3a:	5c 91       	ld	r21, X
    1d3c:	13 97       	sbiw	r26, 0x03	; 3
    1d3e:	9d 01       	movw	r18, r26
    1d40:	41 15       	cp	r20, r1
    1d42:	51 05       	cpc	r21, r1
    1d44:	09 f1       	breq	.+66     	; 0x1d88 <free+0x9c>
    1d46:	da 01       	movw	r26, r20
    1d48:	f3 cf       	rjmp	.-26     	; 0x1d30 <free+0x44>
    1d4a:	b3 83       	std	Z+3, r27	; 0x03
    1d4c:	a2 83       	std	Z+2, r26	; 0x02
    1d4e:	40 81       	ld	r20, Z
    1d50:	51 81       	ldd	r21, Z+1	; 0x01
    1d52:	84 0f       	add	r24, r20
    1d54:	95 1f       	adc	r25, r21
    1d56:	8a 17       	cp	r24, r26
    1d58:	9b 07       	cpc	r25, r27
    1d5a:	71 f4       	brne	.+28     	; 0x1d78 <free+0x8c>
    1d5c:	8d 91       	ld	r24, X+
    1d5e:	9c 91       	ld	r25, X
    1d60:	11 97       	sbiw	r26, 0x01	; 1
    1d62:	84 0f       	add	r24, r20
    1d64:	95 1f       	adc	r25, r21
    1d66:	02 96       	adiw	r24, 0x02	; 2
    1d68:	91 83       	std	Z+1, r25	; 0x01
    1d6a:	80 83       	st	Z, r24
    1d6c:	12 96       	adiw	r26, 0x02	; 2
    1d6e:	8d 91       	ld	r24, X+
    1d70:	9c 91       	ld	r25, X
    1d72:	13 97       	sbiw	r26, 0x03	; 3
    1d74:	93 83       	std	Z+3, r25	; 0x03
    1d76:	82 83       	std	Z+2, r24	; 0x02
    1d78:	21 15       	cp	r18, r1
    1d7a:	31 05       	cpc	r19, r1
    1d7c:	29 f4       	brne	.+10     	; 0x1d88 <free+0x9c>
    1d7e:	f0 93 98 03 	sts	0x0398, r31
    1d82:	e0 93 97 03 	sts	0x0397, r30
    1d86:	3e c0       	rjmp	.+124    	; 0x1e04 <free+0x118>
    1d88:	d9 01       	movw	r26, r18
    1d8a:	13 96       	adiw	r26, 0x03	; 3
    1d8c:	fc 93       	st	X, r31
    1d8e:	ee 93       	st	-X, r30
    1d90:	12 97       	sbiw	r26, 0x02	; 2
    1d92:	4d 91       	ld	r20, X+
    1d94:	5d 91       	ld	r21, X+
    1d96:	a4 0f       	add	r26, r20
    1d98:	b5 1f       	adc	r27, r21
    1d9a:	ea 17       	cp	r30, r26
    1d9c:	fb 07       	cpc	r31, r27
    1d9e:	79 f4       	brne	.+30     	; 0x1dbe <free+0xd2>
    1da0:	80 81       	ld	r24, Z
    1da2:	91 81       	ldd	r25, Z+1	; 0x01
    1da4:	84 0f       	add	r24, r20
    1da6:	95 1f       	adc	r25, r21
    1da8:	02 96       	adiw	r24, 0x02	; 2
    1daa:	d9 01       	movw	r26, r18
    1dac:	11 96       	adiw	r26, 0x01	; 1
    1dae:	9c 93       	st	X, r25
    1db0:	8e 93       	st	-X, r24
    1db2:	82 81       	ldd	r24, Z+2	; 0x02
    1db4:	93 81       	ldd	r25, Z+3	; 0x03
    1db6:	13 96       	adiw	r26, 0x03	; 3
    1db8:	9c 93       	st	X, r25
    1dba:	8e 93       	st	-X, r24
    1dbc:	12 97       	sbiw	r26, 0x02	; 2
    1dbe:	e0 e0       	ldi	r30, 0x00	; 0
    1dc0:	f0 e0       	ldi	r31, 0x00	; 0
    1dc2:	8a 81       	ldd	r24, Y+2	; 0x02
    1dc4:	9b 81       	ldd	r25, Y+3	; 0x03
    1dc6:	00 97       	sbiw	r24, 0x00	; 0
    1dc8:	19 f0       	breq	.+6      	; 0x1dd0 <free+0xe4>
    1dca:	fe 01       	movw	r30, r28
    1dcc:	ec 01       	movw	r28, r24
    1dce:	f9 cf       	rjmp	.-14     	; 0x1dc2 <free+0xd6>
    1dd0:	ce 01       	movw	r24, r28
    1dd2:	02 96       	adiw	r24, 0x02	; 2
    1dd4:	28 81       	ld	r18, Y
    1dd6:	39 81       	ldd	r19, Y+1	; 0x01
    1dd8:	82 0f       	add	r24, r18
    1dda:	93 1f       	adc	r25, r19
    1ddc:	20 91 95 03 	lds	r18, 0x0395
    1de0:	30 91 96 03 	lds	r19, 0x0396
    1de4:	28 17       	cp	r18, r24
    1de6:	39 07       	cpc	r19, r25
    1de8:	69 f4       	brne	.+26     	; 0x1e04 <free+0x118>
    1dea:	30 97       	sbiw	r30, 0x00	; 0
    1dec:	29 f4       	brne	.+10     	; 0x1df8 <free+0x10c>
    1dee:	10 92 98 03 	sts	0x0398, r1
    1df2:	10 92 97 03 	sts	0x0397, r1
    1df6:	02 c0       	rjmp	.+4      	; 0x1dfc <free+0x110>
    1df8:	13 82       	std	Z+3, r1	; 0x03
    1dfa:	12 82       	std	Z+2, r1	; 0x02
    1dfc:	d0 93 96 03 	sts	0x0396, r29
    1e00:	c0 93 95 03 	sts	0x0395, r28
    1e04:	df 91       	pop	r29
    1e06:	cf 91       	pop	r28
    1e08:	08 95       	ret

00001e0a <strnlen_P>:
    1e0a:	fc 01       	movw	r30, r24
    1e0c:	05 90       	lpm	r0, Z+
    1e0e:	61 50       	subi	r22, 0x01	; 1
    1e10:	70 40       	sbci	r23, 0x00	; 0
    1e12:	01 10       	cpse	r0, r1
    1e14:	d8 f7       	brcc	.-10     	; 0x1e0c <strnlen_P+0x2>
    1e16:	80 95       	com	r24
    1e18:	90 95       	com	r25
    1e1a:	8e 0f       	add	r24, r30
    1e1c:	9f 1f       	adc	r25, r31
    1e1e:	08 95       	ret

00001e20 <memset>:
    1e20:	dc 01       	movw	r26, r24
    1e22:	01 c0       	rjmp	.+2      	; 0x1e26 <memset+0x6>
    1e24:	6d 93       	st	X+, r22
    1e26:	41 50       	subi	r20, 0x01	; 1
    1e28:	50 40       	sbci	r21, 0x00	; 0
    1e2a:	e0 f7       	brcc	.-8      	; 0x1e24 <memset+0x4>
    1e2c:	08 95       	ret

00001e2e <strnlen>:
    1e2e:	fc 01       	movw	r30, r24
    1e30:	61 50       	subi	r22, 0x01	; 1
    1e32:	70 40       	sbci	r23, 0x00	; 0
    1e34:	01 90       	ld	r0, Z+
    1e36:	01 10       	cpse	r0, r1
    1e38:	d8 f7       	brcc	.-10     	; 0x1e30 <strnlen+0x2>
    1e3a:	80 95       	com	r24
    1e3c:	90 95       	com	r25
    1e3e:	8e 0f       	add	r24, r30
    1e40:	9f 1f       	adc	r25, r31
    1e42:	08 95       	ret

00001e44 <fputc>:
    1e44:	0f 93       	push	r16
    1e46:	1f 93       	push	r17
    1e48:	cf 93       	push	r28
    1e4a:	df 93       	push	r29
    1e4c:	18 2f       	mov	r17, r24
    1e4e:	09 2f       	mov	r16, r25
    1e50:	eb 01       	movw	r28, r22
    1e52:	8b 81       	ldd	r24, Y+3	; 0x03
    1e54:	81 fd       	sbrc	r24, 1
    1e56:	03 c0       	rjmp	.+6      	; 0x1e5e <fputc+0x1a>
    1e58:	8f ef       	ldi	r24, 0xFF	; 255
    1e5a:	9f ef       	ldi	r25, 0xFF	; 255
    1e5c:	20 c0       	rjmp	.+64     	; 0x1e9e <fputc+0x5a>
    1e5e:	82 ff       	sbrs	r24, 2
    1e60:	10 c0       	rjmp	.+32     	; 0x1e82 <fputc+0x3e>
    1e62:	4e 81       	ldd	r20, Y+6	; 0x06
    1e64:	5f 81       	ldd	r21, Y+7	; 0x07
    1e66:	2c 81       	ldd	r18, Y+4	; 0x04
    1e68:	3d 81       	ldd	r19, Y+5	; 0x05
    1e6a:	42 17       	cp	r20, r18
    1e6c:	53 07       	cpc	r21, r19
    1e6e:	7c f4       	brge	.+30     	; 0x1e8e <fputc+0x4a>
    1e70:	e8 81       	ld	r30, Y
    1e72:	f9 81       	ldd	r31, Y+1	; 0x01
    1e74:	9f 01       	movw	r18, r30
    1e76:	2f 5f       	subi	r18, 0xFF	; 255
    1e78:	3f 4f       	sbci	r19, 0xFF	; 255
    1e7a:	39 83       	std	Y+1, r19	; 0x01
    1e7c:	28 83       	st	Y, r18
    1e7e:	10 83       	st	Z, r17
    1e80:	06 c0       	rjmp	.+12     	; 0x1e8e <fputc+0x4a>
    1e82:	e8 85       	ldd	r30, Y+8	; 0x08
    1e84:	f9 85       	ldd	r31, Y+9	; 0x09
    1e86:	81 2f       	mov	r24, r17
    1e88:	19 95       	eicall
    1e8a:	89 2b       	or	r24, r25
    1e8c:	29 f7       	brne	.-54     	; 0x1e58 <fputc+0x14>
    1e8e:	2e 81       	ldd	r18, Y+6	; 0x06
    1e90:	3f 81       	ldd	r19, Y+7	; 0x07
    1e92:	2f 5f       	subi	r18, 0xFF	; 255
    1e94:	3f 4f       	sbci	r19, 0xFF	; 255
    1e96:	3f 83       	std	Y+7, r19	; 0x07
    1e98:	2e 83       	std	Y+6, r18	; 0x06
    1e9a:	81 2f       	mov	r24, r17
    1e9c:	90 2f       	mov	r25, r16
    1e9e:	df 91       	pop	r29
    1ea0:	cf 91       	pop	r28
    1ea2:	1f 91       	pop	r17
    1ea4:	0f 91       	pop	r16
    1ea6:	08 95       	ret

00001ea8 <__ultoa_invert>:
    1ea8:	fa 01       	movw	r30, r20
    1eaa:	aa 27       	eor	r26, r26
    1eac:	28 30       	cpi	r18, 0x08	; 8
    1eae:	51 f1       	breq	.+84     	; 0x1f04 <__ultoa_invert+0x5c>
    1eb0:	20 31       	cpi	r18, 0x10	; 16
    1eb2:	81 f1       	breq	.+96     	; 0x1f14 <__ultoa_invert+0x6c>
    1eb4:	e8 94       	clt
    1eb6:	6f 93       	push	r22
    1eb8:	6e 7f       	andi	r22, 0xFE	; 254
    1eba:	6e 5f       	subi	r22, 0xFE	; 254
    1ebc:	7f 4f       	sbci	r23, 0xFF	; 255
    1ebe:	8f 4f       	sbci	r24, 0xFF	; 255
    1ec0:	9f 4f       	sbci	r25, 0xFF	; 255
    1ec2:	af 4f       	sbci	r26, 0xFF	; 255
    1ec4:	b1 e0       	ldi	r27, 0x01	; 1
    1ec6:	3e d0       	rcall	.+124    	; 0x1f44 <__ultoa_invert+0x9c>
    1ec8:	b4 e0       	ldi	r27, 0x04	; 4
    1eca:	3c d0       	rcall	.+120    	; 0x1f44 <__ultoa_invert+0x9c>
    1ecc:	67 0f       	add	r22, r23
    1ece:	78 1f       	adc	r23, r24
    1ed0:	89 1f       	adc	r24, r25
    1ed2:	9a 1f       	adc	r25, r26
    1ed4:	a1 1d       	adc	r26, r1
    1ed6:	68 0f       	add	r22, r24
    1ed8:	79 1f       	adc	r23, r25
    1eda:	8a 1f       	adc	r24, r26
    1edc:	91 1d       	adc	r25, r1
    1ede:	a1 1d       	adc	r26, r1
    1ee0:	6a 0f       	add	r22, r26
    1ee2:	71 1d       	adc	r23, r1
    1ee4:	81 1d       	adc	r24, r1
    1ee6:	91 1d       	adc	r25, r1
    1ee8:	a1 1d       	adc	r26, r1
    1eea:	20 d0       	rcall	.+64     	; 0x1f2c <__ultoa_invert+0x84>
    1eec:	09 f4       	brne	.+2      	; 0x1ef0 <__ultoa_invert+0x48>
    1eee:	68 94       	set
    1ef0:	3f 91       	pop	r19
    1ef2:	2a e0       	ldi	r18, 0x0A	; 10
    1ef4:	26 9f       	mul	r18, r22
    1ef6:	11 24       	eor	r1, r1
    1ef8:	30 19       	sub	r19, r0
    1efa:	30 5d       	subi	r19, 0xD0	; 208
    1efc:	31 93       	st	Z+, r19
    1efe:	de f6       	brtc	.-74     	; 0x1eb6 <__ultoa_invert+0xe>
    1f00:	cf 01       	movw	r24, r30
    1f02:	08 95       	ret
    1f04:	46 2f       	mov	r20, r22
    1f06:	47 70       	andi	r20, 0x07	; 7
    1f08:	40 5d       	subi	r20, 0xD0	; 208
    1f0a:	41 93       	st	Z+, r20
    1f0c:	b3 e0       	ldi	r27, 0x03	; 3
    1f0e:	0f d0       	rcall	.+30     	; 0x1f2e <__ultoa_invert+0x86>
    1f10:	c9 f7       	brne	.-14     	; 0x1f04 <__ultoa_invert+0x5c>
    1f12:	f6 cf       	rjmp	.-20     	; 0x1f00 <__ultoa_invert+0x58>
    1f14:	46 2f       	mov	r20, r22
    1f16:	4f 70       	andi	r20, 0x0F	; 15
    1f18:	40 5d       	subi	r20, 0xD0	; 208
    1f1a:	4a 33       	cpi	r20, 0x3A	; 58
    1f1c:	18 f0       	brcs	.+6      	; 0x1f24 <__ultoa_invert+0x7c>
    1f1e:	49 5d       	subi	r20, 0xD9	; 217
    1f20:	31 fd       	sbrc	r19, 1
    1f22:	40 52       	subi	r20, 0x20	; 32
    1f24:	41 93       	st	Z+, r20
    1f26:	02 d0       	rcall	.+4      	; 0x1f2c <__ultoa_invert+0x84>
    1f28:	a9 f7       	brne	.-22     	; 0x1f14 <__ultoa_invert+0x6c>
    1f2a:	ea cf       	rjmp	.-44     	; 0x1f00 <__ultoa_invert+0x58>
    1f2c:	b4 e0       	ldi	r27, 0x04	; 4
    1f2e:	a6 95       	lsr	r26
    1f30:	97 95       	ror	r25
    1f32:	87 95       	ror	r24
    1f34:	77 95       	ror	r23
    1f36:	67 95       	ror	r22
    1f38:	ba 95       	dec	r27
    1f3a:	c9 f7       	brne	.-14     	; 0x1f2e <__ultoa_invert+0x86>
    1f3c:	00 97       	sbiw	r24, 0x00	; 0
    1f3e:	61 05       	cpc	r22, r1
    1f40:	71 05       	cpc	r23, r1
    1f42:	08 95       	ret
    1f44:	9b 01       	movw	r18, r22
    1f46:	ac 01       	movw	r20, r24
    1f48:	0a 2e       	mov	r0, r26
    1f4a:	06 94       	lsr	r0
    1f4c:	57 95       	ror	r21
    1f4e:	47 95       	ror	r20
    1f50:	37 95       	ror	r19
    1f52:	27 95       	ror	r18
    1f54:	ba 95       	dec	r27
    1f56:	c9 f7       	brne	.-14     	; 0x1f4a <__ultoa_invert+0xa2>
    1f58:	62 0f       	add	r22, r18
    1f5a:	73 1f       	adc	r23, r19
    1f5c:	84 1f       	adc	r24, r20
    1f5e:	95 1f       	adc	r25, r21
    1f60:	a0 1d       	adc	r26, r0
    1f62:	08 95       	ret

00001f64 <_exit>:
    1f64:	f8 94       	cli

00001f66 <__stop_program>:
    1f66:	ff cf       	rjmp	.-2      	; 0x1f66 <__stop_program>
